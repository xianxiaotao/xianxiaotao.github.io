<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>先小涛</title>
  
  <subtitle>我至诚我道</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-11-05T00:49:35.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>先小涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>精通 Android 自定义 View 目录</title>
    <link href="http://yoursite.com/2200/01/01/Custom%20View/00%20Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2200/01/01/Custom View/00 Android 自定义控件 目录/</id>
    <published>2199-12-31T16:00:00.000Z</published>
    <updated>2019-11-05T00:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇从自定义控件的动画、绘图、视图三方面入手，分别讲解与自定义控件相关的各种知识，给大家系统的梳理相关知识。不仅适合 Android 初、中级水平从业者，也适合高水平从业者查漏补缺使用。</p><p>内容摘自启舰所著的书籍《Android 自定义控件开发入门与实践》。</p><h2 id="第1章-绘图基础"><a href="#第1章-绘图基础" class="headerlink" title="第1章  绘图基础"></a>第1章  绘图基础</h2><h3 id="1-1-基本图形绘制"><a href="#1-1-基本图形绘制" class="headerlink" title="1.1 基本图形绘制"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/" target="_blank" rel="external">1.1 基本图形绘制</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump1" target="_blank" rel="external">1.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump2" target="_blank" rel="external">1.1.2 画笔的基本设置</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump3" target="_blank" rel="external">1.1.3 Canvas使用基础</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump4" target="_blank" rel="external">1.1.4 Rect与RectF</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump5" target="_blank" rel="external">1.1.5 Color</a></p><h3 id="1-2-路径"><a href="#1-2-路径" class="headerlink" title="1.2 路径"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/" target="_blank" rel="external">1.2 路径</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump1" target="_blank" rel="external">1.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump2" target="_blank" rel="external">1.2.2 直线路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump3" target="_blank" rel="external">1.2.3 弧线路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump4" target="_blank" rel="external">1.2.4 addXXX系列函数</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump5" target="_blank" rel="external">1.2.5 填充模式</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump6" target="_blank" rel="external">1.2.6 重置路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump7" target="_blank" rel="external">1.2.7 示例:蜘蛛网状图</a></p><h3 id="1-3-文字"><a href="#1-3-文字" class="headerlink" title="1.3 文字"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/" target="_blank" rel="external">1.3 文字</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump1" target="_blank" rel="external">1.3.1 Paint设置</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump2" target="_blank" rel="external">1.3.2 Canvas绘制文本</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump3" target="_blank" rel="external">1.3.3 设置字体样式</a></p><h3 id="1-4-Region"><a href="#1-4-Region" class="headerlink" title="1.4 Region"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/" target="_blank" rel="external">1.4 Region</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump1" target="_blank" rel="external">1.4.1 构造Region</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump2" target="_blank" rel="external">1.4.2 枚举区域——RegionIterator类</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump3" target="_blank" rel="external">1.4.3 区域相交</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump4" target="_blank" rel="external">1.4.4 其他函数</a></p><h3 id="1-5-Canvas-画布"><a href="#1-5-Canvas-画布" class="headerlink" title="1.5 Canvas(画布)"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/" target="_blank" rel="external">1.5 Canvas(画布)</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump1" target="_blank" rel="external">1.5.1 Canvas变换</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump2" target="_blank" rel="external">1.5.2 画布的保存与恢复</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump3" target="_blank" rel="external">1.5.3 示例一:圆形头像</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump4" target="_blank" rel="external">1.5.4 示例二:裁剪动画</a></p><h3 id="1-6-控件的使用方法"><a href="#1-6-控件的使用方法" class="headerlink" title="1.6 控件的使用方法"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" target="_blank" rel="external">1.6 控件的使用方法</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump1" target="_blank" rel="external">1.6.1 控件概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump2" target="_blank" rel="external">1.6.2 通过XML引入控件</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump3" target="_blank" rel="external">1.6.3 动态添加控件</a></p><h2 id="第2章-视图动画"><a href="#第2章-视图动画" class="headerlink" title="第2章 视图动画"></a>第2章 视图动画</h2><h3 id="2-1-视图动画标签"><a href="#2-1-视图动画标签" class="headerlink" title="2.1 视图动画标签"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/" target="_blank" rel="external">2.1 视图动画标签</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump1" target="_blank" rel="external">2.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump2" target="_blank" rel="external">2.1.2 scale 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump3" target="_blank" rel="external">2.1.3 Animation 继承属性</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump4" target="_blank" rel="external">2.1.4 alpha 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump5" target="_blank" rel="external">2.1.5 rotate 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump6" target="_blank" rel="external">2.1.6 translate 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump7" target="_blank" rel="external">2.1.7 set 标签</a></p><h3 id="2-2-视图动画的代码实现"><a href="#2-2-视图动画的代码实现" class="headerlink" title="2.2 视图动画的代码实现"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">2.2 视图动画的代码实现</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump1" target="_blank" rel="external">2.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">2.2.2 ScaleAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump3" target="_blank" rel="external">2.2.3 AlphaAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump4" target="_blank" rel="external">2.2.4 RotateAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump5" target="_blank" rel="external">2.2.5 TranslateAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump6" target="_blank" rel="external">2.2.6 AnimationSet</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump7" target="_blank" rel="external">2.2.7 Animation</a></p><h3 id="2-3-插值器初探"><a href="#2-3-插值器初探" class="headerlink" title="2.3 插值器初探"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/" target="_blank" rel="external">2.3 插值器初探</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump1" target="_blank" rel="external">2.3.1 AccelerateDecelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump2" target="_blank" rel="external">2.3.2 AccelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump3" target="_blank" rel="external">2.3.3 DecelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump4" target="_blank" rel="external">2.3.4 LinearInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump5" target="_blank" rel="external">2.3.5 BounceInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump6" target="_blank" rel="external">2.3.6 AnticipateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump7" target="_blank" rel="external">2.3.7 OvershootInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump8" target="_blank" rel="external">2.3.8 AnticipateOvershootInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump9" target="_blank" rel="external">2.3.9 CycleInterpolator</a></p><h3 id="2-4-动画示例"><a href="#2-4-动画示例" class="headerlink" title="2.4 动画示例"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/" target="_blank" rel="external">2.4 动画示例</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump1" target="_blank" rel="external">2.4.1 镜头由远及近效果</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump2" target="_blank" rel="external">2.4.2 加载框效果</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump3" target="_blank" rel="external">2.4.3 扫描动画</a></p><h3 id="2-5-逐帧动画"><a href="#2-5-逐帧动画" class="headerlink" title="2.5 逐帧动画"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">2.5 逐帧动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">2.5.1 XML 实现</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">2.5.2 代码实现</a></p><h2 id="第3章-属性动画"><a href="#第3章-属性动画" class="headerlink" title="第3章 属性动画"></a>第3章 属性动画</h2><h3 id="3-1-ValueAnimator-的基本使用"><a href="#3-1-ValueAnimator-的基本使用" class="headerlink" title="3.1 ValueAnimator 的基本使用"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">3.1 ValueAnimator 的基本使用</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump1" target="_blank" rel="external">3.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump2" target="_blank" rel="external">3.1.2 ValueAnimator 的简单使用</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump3" target="_blank" rel="external">3.1.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump4" target="_blank" rel="external">3.1.4 示例：弹跳加载中效果</a></p><h3 id="3-2-自定义插值器与-Evaluator"><a href="#3-2-自定义插值器与-Evaluator" class="headerlink" title="3.2 自定义插值器与 Evaluator"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/" target="_blank" rel="external">3.2 自定义插值器与 Evaluator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/#jump1" target="_blank" rel="external">3.2.1 自定义插值器</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/#jump2" target="_blank" rel="external">3.2.2 Evaluator</a></p><h3 id="3-3-ValueAnimator-进阶——ofObject"><a href="#3-3-ValueAnimator-进阶——ofObject" class="headerlink" title="3.3 ValueAnimator 进阶——ofObject"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/" target="_blank" rel="external">3.3 ValueAnimator 进阶——ofObject</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/#jump1" target="_blank" rel="external">3.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/#jump2" target="_blank" rel="external">3.3.2 示例：抛物动画</a></p><h3 id="3-4-ObjectAnimator"><a href="#3-4-ObjectAnimator" class="headerlink" title="3.4 ObjectAnimator"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/" target="_blank" rel="external">3.4 ObjectAnimator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump1" target="_blank" rel="external">3.4.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump2" target="_blank" rel="external">3.4.2 ObjectAnimator 动画原理</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump3" target="_blank" rel="external">3.4.3 自定义 ObjectAnimator 属性</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump4" target="_blank" rel="external">3.4.4 何时需要实现对应的 get 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump5" target="_blank" rel="external">3.4.5 常用函数</a></p><h3 id="3-5-组合动画——AnimatorSet"><a href="#3-5-组合动画——AnimatorSet" class="headerlink" title="3.5 组合动画——AnimatorSet"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/" target="_blank" rel="external">3.5 组合动画——AnimatorSet</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump1" target="_blank" rel="external">3.5.1 playSequentially() 与 playTogether() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump2" target="_blank" rel="external">3.5.2 AnimatorSet.Builder</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump3" target="_blank" rel="external">3.5.3 AnimatorSet 监听器</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump4" target="_blank" rel="external">3.5.4 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump5" target="_blank" rel="external">3.5.5 示例：路径动画</a></p><h3 id="3-6-Animator-动画的-XML-实现"><a href="#3-6-Animator-动画的-XML-实现" class="headerlink" title="3.6 Animator 动画的 XML 实现"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">3.6 Animator 动画的 XML 实现</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump1" target="_blank" rel="external">3.6.1 animator 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">3.6.2 objectAnimator 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump3" target="_blank" rel="external">3.6.3 set 标签</a></p><h2 id="第4章-属性动画进阶"><a href="#第4章-属性动画进阶" class="headerlink" title="第4章 属性动画进阶"></a>第4章 属性动画进阶</h2><h3 id="4-1-PropertyValuesHolder-与-Keyframe"><a href="#4-1-PropertyValuesHolder-与-Keyframe" class="headerlink" title="4.1 PropertyValuesHolder 与 Keyframe"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/" target="_blank" rel="external">4.1 PropertyValuesHolder 与 Keyframe</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump1" target="_blank" rel="external">4.1.1 PropertyValuesHolder</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump2" target="_blank" rel="external">4.1.2 Keyframe</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump3" target="_blank" rel="external">4.1.3 PropertyValuesHolder 其他函数</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump4" target="_blank" rel="external">4.1.4 示例：电话响铃效果</a></p><h3 id="4-2-ViewPropertyAnimator"><a href="#4-2-ViewPropertyAnimator" class="headerlink" title="4.2 ViewPropertyAnimator"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/" target="_blank" rel="external">4.2 ViewPropertyAnimator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/#jump1" target="_blank" rel="external">4.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/#jump2" target="_blank" rel="external">4.2.2 常用函数</a></p><h3 id="4-3-为-ViewGroup-内的组件添加动画"><a href="#4-3-为-ViewGroup-内的组件添加动画" class="headerlink" title="4.3 为 ViewGroup 内的组件添加动画"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">4.3 为 ViewGroup 内的组件添加动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">4.3.1 animateLayoutChanges 属性</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">4.3.2 LayoutTransition</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">4.3.3 其他函数</a></p><h3 id="4-4-开源动画库-NineOldAndroids"><a href="#4-4-开源动画库-NineOldAndroids" class="headerlink" title="4.4 开源动画库 NineOldAndroids"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/" target="_blank" rel="external">4.4 开源动画库 NineOldAndroids</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/#jump1" target="_blank" rel="external">4.4.1 NineOldAndroids 中的 ViewPropertyAnimator</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/#jump2" target="_blank" rel="external">4.4.2 NineOldAndroids 中的 ViewHelper</a></p><h2 id="第5章-动画进阶"><a href="#第5章-动画进阶" class="headerlink" title="第5章 动画进阶"></a>第5章 动画进阶</h2><h3 id="5-1-利用-PathMeasure-实现路径动画"><a href="#5-1-利用-PathMeasure-实现路径动画" class="headerlink" title="5.1 利用 PathMeasure 实现路径动画"></a><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">5.1 利用 PathMeasure 实现路径动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">5.1.1 初始化</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">5.1.2 简单函数使用</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">5.1.3 getSegment() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump4" target="_blank" rel="external">5.1.4 getPosTan() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump5" target="_blank" rel="external">5.1.5 getMatrix() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump6" target="_blank" rel="external">5.1.6 示例：支付宝支付成功动画</a></p><h3 id="5-2-SVG-动画"><a href="#5-2-SVG-动画" class="headerlink" title="5.2 SVG 动画"></a><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">5.2 SVG 动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">5.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">5.2.2 vector 标签与图像显示</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">5.2.3 动态 Vector</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump4" target="_blank" rel="external">5.2.4 示例：输入搜索动画</a></p><h2 id="第6章-Paint-基本使用"><a href="#第6章-Paint-基本使用" class="headerlink" title="第6章 Paint 基本使用"></a>第6章 Paint 基本使用</h2><h3 id="6-1-硬件加速"><a href="#6-1-硬件加速" class="headerlink" title="6.1 硬件加速"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/" target="_blank" rel="external">6.1 硬件加速</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump1" target="_blank" rel="external">6.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump2" target="_blank" rel="external">6.1.2 软件绘制与硬件加速的区别</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump3" target="_blank" rel="external">6.1.3 禁用 GPU 硬件加速的方法</a></p><h3 id="6-2-文字"><a href="#6-2-文字" class="headerlink" title="6.2 文字"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/" target="_blank" rel="external">6.2 文字</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump1" target="_blank" rel="external">6.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump2" target="_blank" rel="external">6.2.2 绘图四格线与 FontMetrics</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump3" target="_blank" rel="external">6.2.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump4" target="_blank" rel="external">6.2.4 示例：定点写字</a></p><h3 id="6-3-Paint-常用函数"><a href="#6-3-Paint-常用函数" class="headerlink" title="6.3 Paint 常用函数"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/" target="_blank" rel="external">6.3 Paint 常用函数</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#jump1" target="_blank" rel="external">6.3.1 基本设置函数</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#jump2" target="_blank" rel="external">6.3.2 字体相关函数</a></p><h2 id="第7章-绘图进阶"><a href="#第7章-绘图进阶" class="headerlink" title="第7章 绘图进阶"></a>第7章 绘图进阶</h2><h3 id="7-1-贝济埃曲线"><a href="#7-1-贝济埃曲线" class="headerlink" title="7.1 贝济埃曲线"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/" target="_blank" rel="external">7.1 贝济埃曲线</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump1" target="_blank" rel="external">7.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump2" target="_blank" rel="external">7.1.2 贝济埃曲线之 quadTo</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump3" target="_blank" rel="external">7.1.3 贝济埃曲线之 rQuadTo</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump4" target="_blank" rel="external">7.1.4 示例：波浪效果</a></p><h3 id="7-2-setShadowLayer-与阴影效果"><a href="#7-2-setShadowLayer-与阴影效果" class="headerlink" title="7.2 setShadowLayer 与阴影效果"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/" target="_blank" rel="external">7.2 setShadowLayer 与阴影效果</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump1" target="_blank" rel="external">7.2.1 构造函数</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump2" target="_blank" rel="external">7.2.2 清除阴影</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump3" target="_blank" rel="external">7.2.3 示例：给文字添加阴影</a></p><h3 id="7-3-BlurMaskFilter-发光效果和图片阴影"><a href="#7-3-BlurMaskFilter-发光效果和图片阴影" class="headerlink" title="7.3 BlurMaskFilter 发光效果和图片阴影"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/" target="_blank" rel="external">7.3 BlurMaskFilter 发光效果和图片阴影</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump1" target="_blank" rel="external">7.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump2" target="_blank" rel="external">7.3.2 给图片添加纯色阴影</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump3" target="_blank" rel="external">7.3.3 封装控件</a></p><h3 id="7-4-Shader-与-BitmapShader"><a href="#7-4-Shader-与-BitmapShader" class="headerlink" title="7.4 Shader 与 BitmapShader"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/" target="_blank" rel="external">7.4 Shader 与 BitmapShader</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump1" target="_blank" rel="external">7.4.1 Shader 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump2" target="_blank" rel="external">7.4.2 BitmapShader 的基本用法</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump3" target="_blank" rel="external">7.4.3 示例一：望远镜效果</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump4" target="_blank" rel="external">7.4.4 示例二：生成不规则头像</a></p><h3 id="7-5-Shader-之-LinearGradient"><a href="#7-5-Shader-之-LinearGradient" class="headerlink" title="7.5 Shader 之 LinearGradient"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/" target="_blank" rel="external">7.5 Shader 之 LinearGradient</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/#jump1" target="_blank" rel="external">7.5.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/#jump2" target="_blank" rel="external">7.5.2 示例：闪光文字效果</a></p><h3 id="7-6-Shader-之-RadialGradient"><a href="#7-6-Shader-之-RadialGradient" class="headerlink" title="7.6 Shader 之 RadialGradient"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/" target="_blank" rel="external">7.6 Shader 之 RadialGradient</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump1" target="_blank" rel="external">7.6.1 双色渐变</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump2" target="_blank" rel="external">7.6.2 多色渐变</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump3" target="_blank" rel="external">7.6.3 TileMode 填充模式</a></p><h2 id="第8章-混合模式"><a href="#第8章-混合模式" class="headerlink" title="第8章 混合模式"></a>第8章 混合模式</h2><h3 id="8-1-混合模式之-AvoidXfermode"><a href="#8-1-混合模式之-AvoidXfermode" class="headerlink" title="8.1 混合模式之 AvoidXfermode"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/" target="_blank" rel="external">8.1 混合模式之 AvoidXfermode</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump1" target="_blank" rel="external">8.1.1 混合模式概述</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump2" target="_blank" rel="external">8.1.2 AvoidXfermode</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump3" target="_blank" rel="external">8.1.3 AvoidXfermode 绘制原理</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump4" target="_blank" rel="external">8.1.4 AvoidXfermode 之 Mode.AVOID</a></p><h3 id="8-2-混合模式之-PorterDuffXfermode"><a href="#8-2-混合模式之-PorterDuffXfermode" class="headerlink" title="8.2 混合模式之 PorterDuffXfermode"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/" target="_blank" rel="external">8.2 混合模式之 PorterDuffXfermode</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/#jump1" target="_blank" rel="external">8.2.1 PorterDuffXfermode 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/#jump2" target="_blank" rel="external">8.2.2 颜色叠加相关模式</a></p><h3 id="8-3-PorterDuffXfermode-之源图像模式"><a href="#8-3-PorterDuffXfermode-之源图像模式" class="headerlink" title="8.3 PorterDuffXfermode 之源图像模式"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">8.3 PorterDuffXfermode 之源图像模式</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump1" target="_blank" rel="external">8.3.1 Mode.SRC</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump2" target="_blank" rel="external">8.3.2 Mode.SRC_IN</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump3" target="_blank" rel="external">8.3.3 Mode.SRC_OUT</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump4" target="_blank" rel="external">8.3.4 Mode.SRC_OVER</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump5" target="_blank" rel="external">8.3.5 Mode.SRC_ATOP</a></p><h3 id="8-4-目标图像模式与其他模式"><a href="#8-4-目标图像模式与其他模式" class="headerlink" title="8.4 目标图像模式与其他模式"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">8.4 目标图像模式与其他模式</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump1" target="_blank" rel="external">8.4.1 目标图像模式</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump2" target="_blank" rel="external">8.4.2 其他模式——Mode.CLEAR</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump3" target="_blank" rel="external">8.4.3 模式总结</a></p><h2 id="第9章-Canvas-与图层"><a href="#第9章-Canvas-与图层" class="headerlink" title="第9章 Canvas 与图层"></a>第9章 Canvas 与图层</h2><h3 id="9-1-获取-Canvas-对象的方法"><a href="#9-1-获取-Canvas-对象的方法" class="headerlink" title="9.1 获取 Canvas 对象的方法"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external">9.1 获取 Canvas 对象的方法</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump1" target="_blank" rel="external">9.1.1 方法一：重写 onDraw()、dispatchDraw() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump2" target="_blank" rel="external">9.1.2 方法二：使用 Bitmap 创建</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump3" target="_blank" rel="external">9.1.3 方法三：调用 SurfaceHolder.lockCanvas() 函数</a></p><h3 id="9-2-图层与画布"><a href="#9-2-图层与画布" class="headerlink" title="9.2 图层与画布"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/" target="_blank" rel="external">9.2 图层与画布</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump1" target="_blank" rel="external">9.2.1 saveLayer() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump2" target="_blank" rel="external">9.2.2 画布与图层</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump3" target="_blank" rel="external">9.2.3 saveLayer() &amp; saveLayerAlpha()</a></p><h3 id="9-3-Flag-的具体含义-已过时"><a href="#9-3-Flag-的具体含义-已过时" class="headerlink" title="9.3 Flag 的具体含义 已过时"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94Flag%20%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/" target="_blank" rel="external">9.3 Flag 的具体含义 已过时</a></h3><h3 id="9-4-恢复画布"><a href="#9-4-恢复画布" class="headerlink" title="9.4 恢复画布"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/" target="_blank" rel="external">9.4 恢复画布</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/#jump1" target="_blank" rel="external">9.4.1 restoreToCount(int count)</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/#jump2" target="_blank" rel="external">9.4.2 restore() &amp; restoreToCount(int count) 的关系</a></p><h2 id="第10章-Android-画布"><a href="#第10章-Android-画布" class="headerlink" title="第10章 Android 画布"></a>第10章 Android 画布</h2><h3 id="10-1-ShapeDrawable"><a href="#10-1-ShapeDrawable" class="headerlink" title="10.1 ShapeDrawable"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/" target="_blank" rel="external">10.1 ShapeDrawable</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump1" target="_blank" rel="external">10.1.1 shape 标签与 GradientDrawable</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump2" target="_blank" rel="external">10.1.2 ShapDrawable 的构造函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump3" target="_blank" rel="external">10.1.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump4" target="_blank" rel="external">10.1.4 自定义 Drawable</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump5" target="_blank" rel="external">10.1.5 Drawable 与 Bitmap 对比</a></p><h3 id="10-2-Bitmap"><a href="#10-2-Bitmap" class="headerlink" title="10.2 Bitmap"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/" target="_blank" rel="external">10.2 Bitmap</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump1" target="_blank" rel="external">10.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump2" target="_blank" rel="external">10.2.2 创建 Bitmap 方法一：BitmapFactory</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump3" target="_blank" rel="external">10.2.3 BitmapFactory.Options</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump4" target="_blank" rel="external">10.2.4 创建 Bitmap 方法二：Bitmap 静态方法</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump5" target="_blank" rel="external">10.2.5 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump6" target="_blank" rel="external">10.2.6 常见问题</a></p><h3 id="10-3-SurfaceView"><a href="#10-3-SurfaceView" class="headerlink" title="10.3 SurfaceView"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/" target="_blank" rel="external">10.3 SurfaceView</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump1" target="_blank" rel="external">10.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump2" target="_blank" rel="external">10.3.2 基本用法</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump3" target="_blank" rel="external">10.3.3 双缓冲技术</a></p><h2 id="第11章-Matrix-与坐标变换"><a href="#第11章-Matrix-与坐标变换" class="headerlink" title="第11章 Matrix 与坐标变换"></a>第11章 Matrix 与坐标变换</h2><h3 id="11-1-矩阵运算"><a href="#11-1-矩阵运算" class="headerlink" title="11.1 矩阵运算"></a><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/" target="_blank" rel="external">11.1 矩阵运算</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump1" target="_blank" rel="external">11.1.1 矩阵的加法与减法</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump2" target="_blank" rel="external">11.1.2 矩阵与数的乘法</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump3" target="_blank" rel="external">11.1.3 矩阵与矩阵的乘法</a></p><h3 id="11-2-ColorMatrix-色彩变换"><a href="#11-2-ColorMatrix-色彩变换" class="headerlink" title="11.2 ColorMatrix 色彩变换"></a><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/" target="_blank" rel="external">11.2 ColorMatrix 色彩变换</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump1" target="_blank" rel="external">11.2.1 色彩变换矩阵</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump2" target="_blank" rel="external">11.2.2 色彩的几种运算方式</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump3" target="_blank" rel="external">11.2.3 ColorMatrix 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump4" target="_blank" rel="external">11.2.4 ColorMatrix 相乘</a></p><h2 id="第12章-封装控件"><a href="#第12章-封装控件" class="headerlink" title="第12章 封装控件"></a>第12章 封装控件</h2><h3 id="12-1-自定义属性与自定义-Style"><a href="#12-1-自定义属性与自定义-Style" class="headerlink" title="12.1 自定义属性与自定义 Style"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/" target="_blank" rel="external">12.1 自定义属性与自定义 Style</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump1" target="_blank" rel="external">12.1.1 示例</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump2" target="_blank" rel="external">12.1.2 在 XML 中使用自定义的属性</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump3" target="_blank" rel="external">12.1.3 在代码中获取自定义属性的值</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump4" target="_blank" rel="external">12.1.4 declare-styleable 标签其他属性的用法</a></p><h3 id="12-2-测量与布局"><a href="#12-2-测量与布局" class="headerlink" title="12.2 测量与布局"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/" target="_blank" rel="external">12.2 测量与布局</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump1" target="_blank" rel="external">12.2.1 ViewGroup 绘制流程</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump2" target="_blank" rel="external">12.2.2 onMeasure() 函数与 MeasureSpec</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump3" target="_blank" rel="external">12.2.3 onLayout() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump4" target="_blank" rel="external">12.2.4 获取子控件 margin 值的方法</a></p><h3 id="12-3-实现-FlowLayout-容器"><a href="#12-3-实现-FlowLayout-容器" class="headerlink" title="12.3 实现 FlowLayout 容器"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/" target="_blank" rel="external">12.3 实现 FlowLayout 容器</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump1" target="_blank" rel="external">12.3.1 XML 布局</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump2" target="_blank" rel="external">12.3.2 提取 margin 值与重写 onMeasure() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump3" target="_blank" rel="external">12.3.3 完整代码</a></p><h2 id="第13章-控件高级属性"><a href="#第13章-控件高级属性" class="headerlink" title="第13章 控件高级属性"></a>第13章 控件高级属性</h2><h3 id="13-1-GestureDetector-手势检测"><a href="#13-1-GestureDetector-手势检测" class="headerlink" title="13.1 GestureDetector 手势检测"></a><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/" target="_blank" rel="external">13.1 GestureDetector 手势检测</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump1" target="_blank" rel="external">13.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump2" target="_blank" rel="external">13.1.2 GestureDetector.OnGestureListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump3" target="_blank" rel="external">13.1.3 GestureDetector.OnDoubleTapListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump4" target="_blank" rel="external">13.1.4 GestureDetector.SimpleOnGestureListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump5" target="_blank" rel="external">13.1.5 onFling() 函数的应用</a></p><h3 id="13-2-Window-与-WindowManager"><a href="#13-2-Window-与-WindowManager" class="headerlink" title="13.2 Window 与 WindowManager"></a><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/" target="_blank" rel="external">13.2 Window 与 WindowManager</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/#jump1" target="_blank" rel="external">13.2.1 Window 与 WindowManager 的关系</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/#jump2" target="_blank" rel="external">13.2.2 示例：腾讯手机管家悬浮窗的小火箭效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇从自定义控件的动画、绘图、视图三方面入手，分别讲解与自定义控件相关的各种知识，给大家系统的梳理相关知识。不仅适合 Android 初、中级水平从业者，也适合高水平从业者查漏补缺使用。&lt;/p&gt;
&lt;p&gt;内容摘自启舰所著的书籍《Android 自定义控件开发入门与实践》。&lt;/
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>X001 圆角圆形 ImageView</title>
    <link href="http://yoursite.com/2019/09/01/Custom%20View/X001%20%E5%9C%86%E8%A7%92%E5%9C%86%E5%BD%A2%20ImageView/"/>
    <id>http://yoursite.com/2019/09/01/Custom View/X001 圆角圆形 ImageView/</id>
    <published>2019-08-31T16:00:00.000Z</published>
    <updated>2020-01-24T05:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-99c14f4dff5bc857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>鉴于 Android 提供的 ImageView 控件已经非常完善，不仅处理好了各种缩放问题，而且有着很好的兼容性，还实现了显示图片等一系列的任务，我们只要在它的基础上添加一个显示圆角圆形的功能即可。</p><h3 id="一、属性配置"><a href="#一、属性配置" class="headerlink" title="一、属性配置"></a>一、属性配置</h3><p>首先创建一个 res/values/attrs.xml 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;RoundImageView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;type&quot; format=&quot;enum&quot;&gt;</div><div class="line">            &lt;enum name=&quot;circle&quot; value=&quot;1&quot;/&gt;</div><div class="line">            &lt;enum name=&quot;round&quot; value=&quot;2&quot;/&gt;</div><div class="line">        &lt;/attr&gt;</div><div class="line">        &lt;attr name=&quot;radius&quot; format=&quot;dimension&quot;/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><ul><li>定义一个 Java 类 RoundImageView，继承自 ImageView，重写其构造方法，获取配置属性进行初始化。</li><li>重写 onMeasure 方法，当模式为圆形的时候使其控件的宽高一致。</li><li>重写 onDraw 方法，增加两种模式处理逻辑。</li></ul><h4 id="2-完整代码"><a href="#2-完整代码" class="headerlink" title="2. 完整代码"></a>2. 完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapShader;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Matrix;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.RectF;</div><div class="line">import android.graphics.Shader;</div><div class="line">import android.graphics.drawable.Drawable;</div><div class="line">import android.os.Build;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.util.TypedValue;</div><div class="line"></div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class RoundImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private static final int MODE_NONE = 0;         // 普通模式，默认</div><div class="line">    private static final int MODE_CIRCLE = 1;       // 圆形模式</div><div class="line">    private static final int MODE_ROUND = 2;        // 圆角矩形模式</div><div class="line"></div><div class="line">    private int currMode = MODE_NONE;</div><div class="line">    private int currRound = dp2px(10);              // 圆角半径</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private RectF mRectF = null;</div><div class="line">    private Drawable mPreDrawable = null;</div><div class="line"></div><div class="line">    public RoundImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        this(context, attrs, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        obtainStyledAttrs(context, attrs, defStyleAttr);</div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void obtainStyledAttrs(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.RoundImageView,</div><div class="line">                defStyleAttr, 0);</div><div class="line">        currMode = a.getInt(R.styleable.RoundImageView_type, MODE_NONE);</div><div class="line">        currRound = a.getDimensionPixelSize(R.styleable.RoundImageView_radius, currRound);</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initViews() &#123;</div><div class="line">        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);</div><div class="line">        mRectF = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        if (currMode == MODE_CIRCLE) &#123;</div><div class="line">            int result = Math.min(getMeasuredWidth(), getMeasuredHeight());</div><div class="line">            setMeasuredDimension(result, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        Drawable drawable = getDrawable();</div><div class="line">        Matrix drawMatrix = getImageMatrix();</div><div class="line">        if (drawable == null) &#123;</div><div class="line">            return; // couldn&apos;t resolve the URI</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) &#123;</div><div class="line">            return; // nothing to draw (empty bounds)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (drawMatrix == null &amp;&amp; getPaddingTop() == 0 &amp;&amp; getPaddingLeft() == 0) &#123;</div><div class="line">            drawable.draw(canvas);</div><div class="line">        &#125; else &#123;</div><div class="line">            final int saveCount = canvas.getSaveCount();</div><div class="line">            canvas.save();</div><div class="line"></div><div class="line">            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">                if (getCropToPadding()) &#123;</div><div class="line">                    final int scrollX = getScrollX();</div><div class="line">                    final int scrollY = getScrollY();</div><div class="line">                    canvas.clipRect(scrollX + getPaddingLeft(), scrollY + getPaddingTop(),</div><div class="line">                            scrollX + getRight() - getLeft() - getPaddingRight(),</div><div class="line">                            scrollY + getBottom() - getTop() - getPaddingBottom());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            canvas.translate(getPaddingLeft(), getPaddingTop());</div><div class="line">            // 当为圆形模式的时候</div><div class="line">            if (currMode == MODE_CIRCLE) &#123;</div><div class="line">                setBitmapShader(drawable);</div><div class="line">                canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, getWidth() / 2f, mPaint);</div><div class="line">            &#125;</div><div class="line">            // 当为圆角模式的时候</div><div class="line">            else if (currMode == MODE_ROUND) &#123;</div><div class="line">                setBitmapShader(drawable);</div><div class="line">                mRectF.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</div><div class="line">                canvas.drawRoundRect(mRectF, currRound, currRound, mPaint);</div><div class="line">            &#125; else &#123;</div><div class="line">                if (drawMatrix != null) &#123;</div><div class="line">                    canvas.concat(drawMatrix);</div><div class="line">                &#125;</div><div class="line">                drawable.draw(canvas);</div><div class="line">            &#125;</div><div class="line">            canvas.restoreToCount(saveCount);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void setBitmapShader(Drawable drawable) &#123;</div><div class="line">        // 防止多次重 new 对象</div><div class="line">        if (drawable != null &amp;&amp; drawable != mPreDrawable) &#123;</div><div class="line">            Bitmap bitmap = drawable2Bitmap(drawable);</div><div class="line">            mPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));</div><div class="line">            mPreDrawable = drawable;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * drawable 转换成 bitmap</div><div class="line">     */</div><div class="line">    private Bitmap drawable2Bitmap(Drawable drawable) &#123;</div><div class="line">        if (drawable == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bitmap);</div><div class="line">        // 根据传递的 scaleType 获取 matrix 对象，设置给 bitmap</div><div class="line">        Matrix matrix = getImageMatrix();</div><div class="line">        if (matrix != null) &#123;</div><div class="line">            canvas.concat(matrix);</div><div class="line">        &#125;</div><div class="line">        drawable.draw(canvas);</div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int dp2px(float value) &#123;</div><div class="line">        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, value,</div><div class="line">                getResources().getDisplayMetrics());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 onDraw 方法中，以下代码是我们添加的逻辑，其余代码为 ImageView 源代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Drawable drawable = getDrawable();</div><div class="line">Matrix drawMatrix = getImageMatrix();</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">// 当为圆形模式的时候</div><div class="line">if (currMode == MODE_CIRCLE) &#123;</div><div class="line">    setBitmapShader(drawable);</div><div class="line">    canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, getWidth() / 2f, mPaint);</div><div class="line">&#125;</div><div class="line">// 当为圆角模式的时候</div><div class="line">else if (currMode == MODE_ROUND) &#123;</div><div class="line">    setBitmapShader(drawable);</div><div class="line">    mRectF.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</div><div class="line">    canvas.drawRoundRect(mRectF, currRound, currRound, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-在布局文件中使用"><a href="#3-在布局文件中使用" class="headerlink" title="3. 在布局文件中使用"></a>3. 在布局文件中使用</h4><p>效果如首图所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot;</div><div class="line">            app:type=&quot;round&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot;</div><div class="line">            app:type=&quot;circle&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-99c14f4dff5bc857.png?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>02 设计模式——建造者模式</title>
    <link href="http://yoursite.com/2019/08/08/PATTERN/02%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/08/PATTERN/02 设计模式——建造者模式/</id>
    <published>2019-08-07T17:00:00.000Z</published>
    <updated>2020-02-20T16:33:03.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>建造者模式：<strong>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</strong>。</p><p>Builder 模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更精细地控制对象的构造流程。该模式是为了将构建复杂对象的过程和它的部件解耦，使得构建过程和部件的表示隔离开来。</p><p>因为一个负责对象有大量组成部分，如汽车有车轮、方向盘、发动机、车盘，还有各种小零件，如何将这些部件装配成一辆汽车，这个装配过程很漫长，也很复杂，对于这种情况，为了在构建过程中对外部隐藏实现细节，就可以使用 Builder 模式将部件和组装过程分离，使得构建过程和部件都可以自由扩展，两者之间的耦合也降到最低。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>1）相同的方法，不同的执行顺序，产生不同的事件结果时。<br>2）多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时。<br>3）产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常合适。<br>4）当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值时。</p><h4 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3ce7e4cc79db97a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从上图可以看到，经典 Buider 模式中有四个角色：</p><ul><li>Product 产品类 —— 产品的抽象类；</li><li>Builder —— 抽象 Builder 类，规范产品的组建，一般是由子类实现具体的组建过程；</li><li>ConcreteBuilder —— 具体的 Builder 类；</li><li>Director —— 统一组装过程。</li></ul><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>计算机的组装过程较为复杂，并且组装顺序是不固定的，为了易于理解，我们把计算机组装的过程简化为构建主机、设置操作系统、设置显示器 3 个部分，然后通过 Director 和具体的 Builder 来构建计算机对象。请看下面示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">// 计算机抽象类，即 Product 角色</div><div class="line">public abstract class Computer &#123;</div><div class="line">    protected String mBoard;</div><div class="line">    protected String mDisplay;</div><div class="line">    protected String mOS;</div><div class="line"></div><div class="line">    protected Computer() &#123;&#125;</div><div class="line"></div><div class="line">    public void setBoard(String board) &#123;</div><div class="line">        this.mBoard = board;</div><div class="line">    &#125;</div><div class="line">    public void setDisplay(String display) &#123;</div><div class="line">        this.mDisplay = display;</div><div class="line">    &#125;</div><div class="line">    public abstract void setOS();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Computer [&quot; + &quot;mBoard=&apos;&quot; + mBoard + &apos;\&apos;&apos; +</div><div class="line">                &quot;, mDisplay=&apos;&quot; + mDisplay + &apos;\&apos;&apos; + &quot;, mOS=&apos;&quot; + mOS + &apos;]&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体的 Computer 类，Macbook</div><div class="line">public class Macbook extends Computer &#123;</div><div class="line">    protected Macbook() &#123;&#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setOS() &#123;</div><div class="line">        mOS = &quot;Mac OS X 10.10&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象 Builder 类</div><div class="line">public abstract class Builder &#123;</div><div class="line">    public abstract void buildBoard(String board);</div><div class="line">    public abstract void buildDisplay(String display);</div><div class="line">    public abstract void buildOS();</div><div class="line">    public abstract Computer create();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体的 Builder 类，MacbookBuilder</div><div class="line">public class MacbookBuilder extends Builder &#123;</div><div class="line">    private Computer mComputer = new Macbook();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildBoard(String board) &#123;</div><div class="line">        mComputer.setBoard(board);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void buildDisplay(String display) &#123;</div><div class="line">        mComputer.setDisplay(display);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void buildOS() &#123;</div><div class="line">        mComputer.setOS();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Computer create() &#123;</div><div class="line">        return mComputer;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Director 类，负责构造 Computer</div><div class="line">public class Director &#123;</div><div class="line">    Builder mBuilder = null;</div><div class="line"></div><div class="line">    public Director(Builder builder) &#123;</div><div class="line">        this.mBuilder = builder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void construct(String board, String display) &#123;</div><div class="line">        mBuilder.buildBoard(board);</div><div class="line">        mBuilder.buildDisplay(display);</div><div class="line">        mBuilder.buildOS();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试代码</div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Builder builder = new MacbookBuilder();</div><div class="line">        Director pcDirector = new Director(builder);</div><div class="line">        pcDirector.construct(&quot;英特尔主板&quot;, &quot;Retina 显示器&quot;);</div><div class="line">        System.out.println(&quot;Computer Info : &quot; + builder.create().toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>Computer Info : Computer [mBoard=英特尔主板, mDisplay=Retina 显示器, mOS=Mac OS X 10.10]</p></blockquote><p>上述示例中，通过具体的 MacbookBuilder 来构建 Macbook 对象，而 Director 封装了构建复杂产品对象的过程，对外隐藏构建细节。Builder 与 Director 一起将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的对象。</p><p>值得注意的是，在现实开发过程当中，Director 角色经常会被省略。而直接使用一个 Builder 来进行对象的组装，这个 Builder 通常为链式调用，它的关键点是每个 setter 方法都返回自身，也就是 return this，这样就使得 setter 方法可以链式调用，代码大致如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new TestBuilder().setA(&quot;A&quot;).setB(&quot;B&quot;).create();</div></pre></td></tr></table></figure></p><p>通过这种形式不仅去除了 Director 角色，整个结构也更加简单，也能对 Product 对象的组装过程有更精细的控制。</p><hr><h3 id="ANDROID-源码中的-Builder-模式"><a href="#ANDROID-源码中的-Builder-模式" class="headerlink" title="ANDROID 源码中的 Builder 模式"></a>ANDROID 源码中的 Builder 模式</h3><hr><p>在 ANDROID 源码中，最常用到的 Builder 模式就是 AlertDialog.Builder，使用该 Builder 来构建复杂的 AlertDialog 对象。在开发过程中，我们经常用到 AlertDialog，具体示例如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private void showDialog(final Context context) &#123;</div><div class="line">    AlertDialog.Builder builder = new AlertDialog.Builder(context);</div><div class="line">    builder.setIcon(R.drawable.taiji)</div><div class="line">            .setTitle(&quot;Title&quot;)</div><div class="line">            .setMessage(&quot;Message&quot;)</div><div class="line">            .setPositiveButton(&quot;Button1&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                    Toast.makeText(context, &quot;Button1&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .setNeutralButton(&quot;Button2&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                    Toast.makeText(context, &quot;Button2&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .setNegativeButton(&quot;Button3&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                    Toast.makeText(context, &quot;Button3&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .create()</div><div class="line">            .show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>显示结果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aada48ecfbd9eca5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从类名就可以看出这就是一个 Builder 模式，通过 Builder 对象来组装 Dialog 的各个部分，如 title、buttons、message 等，将 Dialog 的构造和表示进行分离。下面看看 AlertDialog 的相关源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public class AlertDialog extends AppCompatDialog implements DialogInterface &#123;</div><div class="line">    // AlertController 接收 Builder 成员变量 p 中的各个参数</div><div class="line">    final AlertController mAlert;</div><div class="line"></div><div class="line">    protected AlertDialog(@NonNull Context context, @StyleRes int themeResId) &#123;</div><div class="line">        super(context, resolveDialogTheme(context, themeResId));</div><div class="line">        // 构造 AlertController</div><div class="line">        mAlert = new AlertController(getContext(), this, getWindow());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setTitle(CharSequence title) &#123;</div><div class="line">        super.setTitle(title);</div><div class="line">        mAlert.setTitle(title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMessage(CharSequence message) &#123;</div><div class="line">        mAlert.setMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    public static class Builder &#123;</div><div class="line">        // 1、存储 AlertDialog 的各个参数，如 title、message、icon 等</div><div class="line">        private final AlertController.AlertParams P;</div><div class="line">        private final int mTheme;</div><div class="line"></div><div class="line">        public Builder(@NonNull Context context) &#123;</div><div class="line">            this(context, resolveDialogTheme(context, 0));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder(@NonNull Context context, @StyleRes int themeResId) &#123;</div><div class="line">            P = new AlertController.AlertParams(new ContextThemeWrapper(</div><div class="line">                    context, resolveDialogTheme(context, themeResId)));</div><div class="line">            mTheme = themeResId;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 代码省略</div><div class="line"></div><div class="line">        // 2、设置各种参数</div><div class="line">        public Builder setTitle(@Nullable CharSequence title) &#123;</div><div class="line">            P.mTitle = title;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setMessage(@StringRes int messageId) &#123;</div><div class="line">            P.mMessage = P.mContext.getText(messageId);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setView(View view) &#123;</div><div class="line">            P.mView = view;</div><div class="line">            P.mViewLayoutResId = 0;</div><div class="line">            P.mViewSpacingSpecified = false;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 3、构建 AlertDialog，传递参数</div><div class="line">        public AlertDialog create() &#123;</div><div class="line">            // 4、调用 new AlertDialog 构造对象，并且将参数传递给个体 AlertDialog</div><div class="line">            final AlertDialog dialog = new AlertDialog(P.mContext, mTheme);</div><div class="line">            // 5、将 P 中的参数应用到 dialog 中的 mAlert 对象中</div><div class="line">            P.apply(dialog.mAlert);</div><div class="line">            dialog.setCancelable(P.mCancelable);</div><div class="line">            if (P.mCancelable) &#123;</div><div class="line">                dialog.setCanceledOnTouchOutside(true);</div><div class="line">            &#125;</div><div class="line">            dialog.setOnCancelListener(P.mOnCancelListener);</div><div class="line">            dialog.setOnDismissListener(P.mOnDismissListener);</div><div class="line">            if (P.mOnKeyListener != null) &#123;</div><div class="line">                dialog.setOnKeyListener(P.mOnKeyListener);</div><div class="line">            &#125;</div><div class="line">            return dialog;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述代码中，Builder 类可以设置 AlertDialog 中的 title、message、button 等参数，这些参数都存储在类型为 AlertController.AlertParams 的成员变量 P 中，AlertController.AlertParams 中包含了与 AlertDialog 视图中对应的成员变量。在调用 Builder 类的 create 函数时会创建 AlertDialog，并且将 Builder 成员变量 P 中保存的参数应用到 AlertDialog 的 mAlert 对象中，即 P.apply(dialog.mAlert) 代码段。我们再看看 apply 函数的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public void apply(AlertController dialog) &#123;</div><div class="line">    if (mCustomTitleView != null) &#123;</div><div class="line">        dialog.setCustomTitle(mCustomTitleView);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mTitle != null) &#123;</div><div class="line">            dialog.setTitle(mTitle);</div><div class="line">        &#125;</div><div class="line">        if (mIcon != null) &#123;</div><div class="line">            dialog.setIcon(mIcon);</div><div class="line">        &#125;</div><div class="line">        if (mIconId != 0) &#123;</div><div class="line">            dialog.setIcon(mIconId);</div><div class="line">        &#125;</div><div class="line">        if (mIconAttrId != 0) &#123;</div><div class="line">            dialog.setIcon(dialog.getIconAttributeResId(mIconAttrId));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (mMessage != null) &#123;</div><div class="line">        dialog.setMessage(mMessage);</div><div class="line">    &#125;</div><div class="line">    if (mPositiveButtonText != null || mPositiveButtonIcon != null) &#123;</div><div class="line">        dialog.setButton(DialogInterface.BUTTON_POSITIVE, mPositiveButtonText,</div><div class="line">                mPositiveButtonListener, null, mPositiveButtonIcon);</div><div class="line">    &#125;</div><div class="line">    if (mNegativeButtonText != null || mNegativeButtonIcon != null) &#123;</div><div class="line">        dialog.setButton(DialogInterface.BUTTON_NEGATIVE, mNegativeButtonText,</div><div class="line">                mNegativeButtonListener, null, mNegativeButtonIcon);</div><div class="line">    &#125;</div><div class="line">    if (mNeutralButtonText != null || mNeutralButtonIcon != null) &#123;</div><div class="line">        dialog.setButton(DialogInterface.BUTTON_NEUTRAL, mNeutralButtonText,</div><div class="line">                mNeutralButtonListener, null, mNeutralButtonIcon);</div><div class="line">    &#125;</div><div class="line">    // For a list, the client can either supply an array of items or an</div><div class="line">    // adapter or a cursor</div><div class="line">    if ((mItems != null) || (mCursor != null) || (mAdapter != null)) &#123;</div><div class="line">        createListView(dialog);</div><div class="line">    &#125;</div><div class="line">    if (mView != null) &#123;</div><div class="line">        if (mViewSpacingSpecified) &#123;</div><div class="line">            dialog.setView(mView, mViewSpacingLeft, mViewSpacingTop, </div><div class="line">                    mViewSpacingRight, mViewSpacingBottom);</div><div class="line">        &#125; else &#123;</div><div class="line">            dialog.setView(mView);</div><div class="line">        &#125;</div><div class="line">    &#125; else if (mViewLayoutResId != 0) &#123;</div><div class="line">        dialog.setView(mViewLayoutResId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 apply 函数中，只是将 AlertParams 参数设置到 AlertController 中，例如，将标题设置到 Dialog 对应的标题视图中，将 Message 设置到内容视图中等。当我们获取到 AlertDialog 对象后，通过 show 函数就可以显示这个对话框。而 show 函数最终调用的是 Dialog 类的 show 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class Dialog implements DialogInterface, Window.Callback,</div><div class="line">        KeyEvent.Callback, OnCreateContextMenuListener, </div><div class="line">        Window.OnWindowDismissedCallback &#123;</div><div class="line">    </div><div class="line">    // 代码省略</div><div class="line">    </div><div class="line">    public void show() &#123;</div><div class="line">        // 已经是显示状态，则return</div><div class="line">        if (mShowing) &#123;</div><div class="line">            if (mDecor != null) &#123;</div><div class="line">                if (mWindow.hasFeature(Window.FEATURE_ACTION_BAR)) &#123;</div><div class="line">                    mWindow.invalidatePanelMenu(Window.FEATURE_ACTION_BAR);</div><div class="line">                &#125;</div><div class="line">                mDecor.setVisibility(View.VISIBLE);</div><div class="line">            &#125;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mCanceled = false;</div><div class="line"></div><div class="line">        // 1、onCreate 调用</div><div class="line">        if (!mCreated) &#123;</div><div class="line">            dispatchOnCreate(null);</div><div class="line">        &#125;</div><div class="line">        // 2、onStart</div><div class="line">        onStart();</div><div class="line">        // 3、获取 DecorView</div><div class="line">        mDecor = mWindow.getDecorView();</div><div class="line"></div><div class="line">        // 代码省略</div><div class="line"></div><div class="line">        // 4、获取布局参数</div><div class="line">        WindowManager.LayoutParams l = mWindow.getAttributes();</div><div class="line"></div><div class="line">        // 5、将 mDecor 添加到 WindowManager 中</div><div class="line">        mWindowManager.addView(mDecor, l);</div><div class="line">        mShowing = true;</div><div class="line">        // 发送一个显示 Dialog 的消息</div><div class="line">        sendShowMessage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 show 函数中主要做了如下几个事情：<br>1）通过 dispatchOnCreate 函数来调用 AlertDialog 的 onCreate 函数；<br>2）然后调用 AlertDialog 的 onStart 函数；<br>3）最后将 Dialog 的 DecorView 添加到 WindowManager 中。</p><blockquote><p>这里的 AlertDialog.Builder 同时扮演了上文中提到的 Builder、ConcreteBuilder、Director 的角色，简化了 Builder 模式的设计。当模块比较稳定，不存在一些变化时，可以在经典模式实现的基础上做出一些精简，而不是照搬 GOF 上的经典实现，更不要生搬硬套，使程序失去架构之美。</p></blockquote><hr><h3 id="Builder-模式实战"><a href="#Builder-模式实战" class="headerlink" title="Builder 模式实战"></a>Builder 模式实战</h3><hr><p>配置 ImageLoader 的参数：缓存、图片加载中显示的图片、加载失败后显示的图片、图片加载策略、线程数等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    // 图片加载配置对象</div><div class="line">    private ImageLoaderConfig mConfig;</div><div class="line">    </div><div class="line">    // 省略单例模式代码</div><div class="line">    </div><div class="line">    // 初始化 ImageLoader</div><div class="line">    public void init(ImageLoaderConfig config) &#123;</div><div class="line">        mConfig = config;</div><div class="line">        // 检测配置的合法性，内部会根据配置做一些初始化操作</div><div class="line">        checkConfig();</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>把配置的代码基本上都封装到了 ImageLoaderConfig 和 Builder 对象中。其代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class ImageLoaderConfig &#123;</div><div class="line">    // 图片缓存配置</div><div class="line">    private BitmapCache bitmapCache = new MemoryCache();</div><div class="line">    // 加载图片时的 loading 和加载失败的图片配置对象</div><div class="line">    private DisplayConfig displayConfig = new DisplayConfig();</div><div class="line">    // 加载策略</div><div class="line">    private LoadPolicy loadPolicy = new SerialPolicy();</div><div class="line">    // 线程数量，默认为 CPU 数量 + 1</div><div class="line">    private int threadCount = Runtime.getRuntime().availableProcessors() + 1;</div><div class="line"></div><div class="line">    private ImageLoaderConfig() &#123;&#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 配置类的 Builder</div><div class="line">     */</div><div class="line">    public static class Builder &#123;</div><div class="line">        BitmapCache bitmapCache = new MemoryCache();</div><div class="line">        DisplayConfig displayConfig = new DisplayConfig();</div><div class="line">        LoadPolicy loadPolicy = new SerialPolicy();</div><div class="line">        int threadCount = Runtime.getRuntime().availableProcessors() + 1;</div><div class="line"></div><div class="line">        public Builder setThreadCount(int threadCount) &#123;</div><div class="line">            this.threadCount = threadCount;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setCache(BitmapCache bitmapCache) &#123;</div><div class="line">            this.bitmapCache = bitmapCache;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setLoadingPlaceholder(int resId) &#123;</div><div class="line">            displayConfig.loadingResId = resId;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setNotFoundPlaceholder(int resId) &#123;</div><div class="line">            displayConfig.failedResId = resId;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder setLoadPolicy(LoadPolicy loadPolicy) &#123;</div><div class="line">            if (loadPolicy != null) &#123;</div><div class="line">                loadPolicy = loadPolicy;</div><div class="line">            &#125;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        void applyConfig(ImageLoaderConfig config) &#123;</div><div class="line">            config.bitmapCache = this.bitmapCache;</div><div class="line">            config.displayConfig = this.displayConfig;</div><div class="line">            config.loadPolicy = this.loadPolicy;</div><div class="line">            config.threadCount = this.threadCount;</div><div class="line">        &#125;</div><div class="line">        // 根据已经设置好的属性创建配置对象</div><div class="line">        public ImageLoaderConfig create() &#123;</div><div class="line">            ImageLoaderConfig config = new ImageLoaderConfig();</div><div class="line">            applyConfig(config);</div><div class="line">            return config;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过将 ImageLoaderConfig 的构造函数、字段私有化，使得外部不能访问内部属性，用户唯一能够设置属性的地方就是通过 Builder 对象了，也就是说用户只能通过 Builder 对象构造 ImageLoaderConfig 对象，这就是构建和表示相分离。</p><p>用户的使用代码如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void initImageLoader() &#123;</div><div class="line">    ImageLoaderConfig config = new ImageLoaderConfig.Builder()</div><div class="line">            .setLoadingPlaceholder(R.drawable.loading)</div><div class="line">            .setNotFoundPlaceholder(R.drawable.not_found)</div><div class="line">            .setCache(new DoubleCache(this))</div><div class="line">            .setThreadCount(4)</div><div class="line">            .setLoadPolicy(new ReversePolicy()).create();</div><div class="line">    ImageLoader.getInstance().init(config);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;建造者模式：&lt;strong&gt;
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>02 设计模式——单例模式</title>
    <link href="http://yoursite.com/2019/08/07/PATTERN/01%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/07/PATTERN/01 设计模式——单例模式/</id>
    <published>2019-08-06T17:00:00.000Z</published>
    <updated>2020-02-20T13:39:26.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>单例模式：<strong>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例</strong>。</p><p>确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如，创建一个对象需要消耗的资源过多，如要访问 IO 和数据库等资源，这是就要考虑使用单例模式。</p><p>实现单例模式主要有如下几个关键点：</p><ul><li>构造函数不对外开放，一般为 private；</li><li>通过一个静态方法或者枚举返回单例类对象；</li><li>确保单例类的对象有且只有一个，尤其是在多线程环境下；</li><li>确保单例类对象在反序列化时不会重新构建对象。</li></ul><blockquote><p>单例对象如果持有 Context，那么很容易引发内存泄漏，此时需要注意传递给单例对象的 Context 最好是 Application Context。</p></blockquote><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>在一个应用中，应该只有一个 ImageLoader 实例，这个 ImageLoader 中又含有线程池、缓存系统、网络请求等，很消耗资源。因此，没有理由让它构造多个实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance = new ImageLoader();</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述写法又被称为<strong>饿汉式单例模式</strong>，在声明静态对象时就已经初始化，符合前面三条关键点，但在反序列化的情况下它们会重新创建对象。</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>我们知道通过序列化可以将一个单例的实例对象写到磁盘，然后再读回来，从而有效地获得一个实例。即使构造函数是私有的，反序列化时依然可以通过特殊的途径去创建类的一个新的实例，相当于调用该类的构造函数。反序列化操作提供了一个很特别的钩子函数，类中具有一个私有的 readResolve() 函数，这个函数可以让开发人员控制对象的反序列化。例如，如果要杜绝上述示例中的单例对象在反序列化时重新生成对象，那么必须加入 readResolve 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 0L;</div><div class="line">    private static ImageLoader sInstance = new ImageLoader();</div><div class="line">    </div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line">    </div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也就是在 readResolve 方法中将单例对象返回，而不是重新生成一个新的对象。而对于枚举类，并不存在这个问题，因为即使反序列化它也不会重新生成新的实例。另外有两点需要注意：</p><ul><li>可序列化类中的字段类型不是 Java 的内置类型，那么该字段类型也需要实现 Serializable 接口；</li><li>如果调整了可序列化类的内部结构，例如新增、去除某个字段，但没有修改 serialVersionUID，那么会引发 java.io.InvalidClassException 异常或者导致某个属性为 0 或者 null。此时最好的方案是我们直接将 serialVersionUID 设置为 0L，这样即使修改了类的内部结构，我们反序列化不会抛出该异常，只是那些新修改的字段会为 0 或者 null。</li></ul><hr><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><hr><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>懒汉模式是声明一个静态变量，并且在用户第一次调用 getInstance 时进行初始化，而上述的恶汉模式是在声明静态对象时就已经初始化。实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line"></div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            sInstance = new ImageLoader();</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这种模式不能保证在多线程环境下确保单例类的对象有且只有一个，所以我们会添加 synchronized 关键字进行同步。但若是将 synchronized 添加到 getInstance 函数上，会出现每次调用该方法都进行同步的情况，造成不必要的同步开销。代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line"></div><div class="line">    public static synchronized ImageLoader getInstance() &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            sInstance = new ImageLoader();</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>上述方式不建议使用，但在它的基础上添加双重检查锁定机制（Double Check Lock，DCL）进行优化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line"></div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            synchronized (ImageLoader.class) &#123;</div><div class="line">                if (sInstance == null) &#123;</div><div class="line">                    sInstance = new ImageLoader();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样一来，DCL 解决了资源消耗、多余同步、线程安全等问题，似乎很完美，但笔者也不推荐这种写法。它还是会在某种情况下出现失效的问题，这个问题被称为双重检查锁定失效，在《Java 并发编程实践》一书的最后谈到了这个问题，并指出这种“优化”是丑陋的，不赞成使用。</p><h4 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h4><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        return ImageLoaderHolder.sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 静态内部类</div><div class="line">    private static class ImageLoaderHolder &#123;</div><div class="line">        private static final ImageLoader sInstance = new ImageLoader();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当第一次加载 ImageLoader 类时并不会初始化 sInstance，只有在第一次调用 ImageLoader 的 getInstance 方法时才会导致 sInstance 被初始化。因此，第一次调用 getInstance 方法会导致虚拟机加载 ImageLoaderHolder 类，这种方式不仅能确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化，所以这是推荐使用的单例模式实现方式。如果有反序列化的情况下，要加入 readResolve 方法，具体代码参考饿汉式反序列章节。</p><h4 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h4><p>前面讲解的单例模式实现方式不是稍显麻烦就是会在某些情况下出现问题，还有没有更简单的实现方式呢？我们看看下面的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public enum SingletonEnum &#123;</div><div class="line">    INSTANCE;</div><div class="line">    public void doSomething() &#123;</div><div class="line">        System.out.println(&quot;do sth.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写法简单，而且保证线程安全、序列化与反序列化安全、反射安全。奈何 ANDROID 官网不建议使用 Enums，占用内存多（Enums often require more than twice as much memory as static constants.）。<a href="https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/" target="_blank" rel="external">关于 Enum 的使用博客</a>。</p><h4 id="使用容器实现单例模式"><a href="#使用容器实现单例模式" class="headerlink" title="使用容器实现单例模式"></a>使用容器实现单例模式</h4><p>具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SingletonManager &#123;</div><div class="line">    private static Map&lt;String, Object&gt; objMap = new HashMap&lt;&gt;();</div><div class="line">    </div><div class="line">    private SingletonManager() &#123;&#125;</div><div class="line">    </div><div class="line">    public static void registerService(String key, Object instance) &#123;</div><div class="line">        if (!objMap.containsKey(key)) &#123;</div><div class="line">            objMap.put(key, instance);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Object getService(String key) &#123;</div><div class="line">        return objMap.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在程序的初始，将多种单例类型注入到一个统一的管理类中，在使用时根据 key 获取对象对应类型的对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作，降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合。</p><hr><h3 id="ANDROID-源码中的单例模式"><a href="#ANDROID-源码中的单例模式" class="headerlink" title="ANDROID 源码中的单例模式"></a>ANDROID 源码中的单例模式</h3><hr><p>在 ANDROID 系统中，我们经常会通过 Context 获取系统级别的服务，如 WindowsManagerService、ActivityManagerService 等，更常用的是一个 LayoutInflater 的类。这些服务会在合适的时候以单例的形式注册在系统中，在我们需要的时候就通过 Context 的 getSystemService(String name) 获取。我们以 LayoutInflater 为例来说明，平时我们使用 LayoutInflater 较为常见的地方是在 ListView 的 getView 方法中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">    View itemView = null;</div><div class="line">    if (convertView == null) &#123;</div><div class="line">        itemView = LayoutInflater.from(mContext).inflate(mLayoutId, null);</div><div class="line">        ...</div><div class="line">    &#125; else &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通常我们使用 LayoutInflater.from(Context) 来获取 LayoutInflater 服务，下面看看 LayoutInflater.from(Context) 的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static LayoutInflater from(Context context) &#123;</div><div class="line">    LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(</div><div class="line">            Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">    if (LayoutInflater == null) &#123;</div><div class="line">        throw new AssertionError(&quot;LayoutInflater not found.&quot;);</div><div class="line">    &#125;</div><div class="line">    return LayoutInflater;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到 from(Context) 函数内部调用的是 Context 类的 getSystemService(String key) 方法，我们跟踪到 Context 类看到，该类是抽象类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class Context &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>getView 中使用的 Context 对象的具体实现类是什么呢？其实在 Application、Activity、Service 中都会存在一个 Context 对象，即 Context 的总个数为 Activity 个数 + Service 个数 + 1。而 ListView 通常都是显示在 Activity 中，那么我们就以 Activity 中的 Context 来分析。</p><p>我们知道，一个 Activity 的入口是 ActivityThread 的 main 函数，在 main 函数中创建一个新的 ActivityThread 对象，并且启动消息循环（UI 线程），创建新的 Activity、新的 Context 对象，然后将该 Context 对象传递给 Activity。下面我们看看 ActivityThread 源代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    </div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);</div><div class="line">    // 主线程消息循环</div><div class="line">    Looper.prepareMainLooper();</div><div class="line">    // 创建 ActivityThread 对象</div><div class="line">    ActivityThread thread = new ActivityThread();</div><div class="line">    thread.attach(false, startSeq);</div><div class="line"></div><div class="line">    if (sMainThreadHandler == null) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Looper.loop();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">private void attach(boolean system, long startSeq) &#123;</div><div class="line">    sCurrentActivityThread = this;</div><div class="line">    mSystemThread = system;</div><div class="line">    // 不是系统应用</div><div class="line">    if (!system) &#123;</div><div class="line">        ViewRootImpl.addFirstDrawHandler(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                ensureJitEnabled();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        android.ddm.DdmHandleAppName.setAppName(&quot;&lt;pre-initialized&gt;&quot;,</div><div class="line">                UserHandle.myUserId());</div><div class="line">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class="line">        final IActivityManager mgr = ActivityManager.getService();</div><div class="line">        try &#123;</div><div class="line">            // 关联 mAppThread</div><div class="line">            mgr.attachApplication(mAppThread, startSeq);</div><div class="line">        &#125; catch (RemoteException ex) &#123;</div><div class="line">            throw ex.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 main 方法中，我们创建一个 ActivityThread 对象后，调用了其 attach 函数，并且参数为 false，即非系统应用，会通过 Binder 机制与 ActivityManagerService 通信，并且最终调用 handleLaunchActivity 函数，该函数的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public Activity handleLaunchActivity(ActivityClientRecord r,</div><div class="line">            PendingTransactionActions pendingActions, Intent customIntent) &#123;</div><div class="line">    // 代码省略</div><div class="line">    final Activity a = performLaunchActivity(r, customIntent);</div><div class="line">    // 代码省略</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</div><div class="line">    // 代码省略</div><div class="line">    // 1、获取 Context 对象</div><div class="line">    ContextImpl appContext = createBaseContextForActivity(r);</div><div class="line">    Activity activity = null;</div><div class="line">    try &#123;</div><div class="line">        java.lang.ClassLoader cl = appContext.getClassLoader();</div><div class="line">        // 2、创建 Activity</div><div class="line">        activity = mInstrumentation.newActivity(</div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        // 代码省略</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        // 创建 Application</div><div class="line">        Application app = r.packageInfo.makeApplication(false, mInstrumentation);</div><div class="line">        if (activity != null) &#123;</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = new Configuration(mCompatConfiguration);</div><div class="line">            // 3、将 appContext 等对象 attach 到 activity 中</div><div class="line">            activity.attach(appContext, this, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback);</div><div class="line">            // 代码省略</div><div class="line">            // 4、调用 Activity 的 onCreate 方法</div><div class="line">            if (r.isPersistable()) &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">            &#125; else &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">            &#125;</div><div class="line">            // 代码省略</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; catch (SuperNotCalledException e) &#123;</div><div class="line">        throw e;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return activity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">private ContextImpl createBaseContextForActivity(ActivityClientRecord r) &#123;</div><div class="line">    // 5、创建 Context 对象，实现类是 ContextImpl</div><div class="line">    ContextImpl appContext = ContextImpl.createActivityContext(</div><div class="line">            this, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);</div><div class="line">    // 代码省略</div><div class="line">    return appContext;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过上面 1~5 注释处的代码分析可以知道，Context 的实现类为 ContextImpl。继续跟踪 ContextImpl 类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class ContextImpl extends Context &#123;</div><div class="line">    // The system service cache for the system services that are cached per-ContextImpl.</div><div class="line">    final Object[] mServiceCache = SystemServiceRegistry.createServiceCache();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getSystemService(String name) &#123;</div><div class="line">        return SystemServiceRegistry.getSystemService(this, name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>继续跟踪 SystemServiceRegistry 类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">final class SystemServiceRegistry &#123;</div><div class="line">    // 1、Service 容器</div><div class="line">    private static final HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt; SYSTEM_SERVICE_FETCHERS =</div><div class="line">            new HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt;();</div><div class="line"></div><div class="line">    // 2、注册服务器</div><div class="line">    private static &lt;T&gt; void registerService(String serviceName, Class&lt;T&gt; serviceClass,</div><div class="line">            ServiceFetcher&lt;T&gt; serviceFetcher) &#123;</div><div class="line">        SYSTEM_SERVICE_NAMES.put(serviceClass, serviceName);</div><div class="line">        SYSTEM_SERVICE_FETCHERS.put(serviceName, serviceFetcher);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 静态语句块，第一次加载该类时执行（只执行一次，保证实例的唯一性）</div><div class="line">    static &#123;</div><div class="line">        // 代码省略</div><div class="line">        // 注册 LayoutInflater Service</div><div class="line">        registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,</div><div class="line">                new CachedServiceFetcher&lt;LayoutInflater&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public LayoutInflater createService(ContextImpl ctx) &#123;</div><div class="line">                return new PhoneLayoutInflater(ctx.getOuterContext());</div><div class="line">            &#125;&#125;);</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 根据 key 获取对应的服务</div><div class="line">    public static Object getSystemService(ContextImpl ctx, String name) &#123;</div><div class="line">        ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);</div><div class="line">        return fetcher != null ? fetcher.getService(ctx) : null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从 SystemServiceRegistry 类的部分代码中可以看到，在虚拟机第一次加载该类时会注册各种 ServiceFetcher，其中就包含了 LayoutInflater Service。将这些服务以键值对的形式储存在一个 HashMap 中，用户使用时只需要根据 key 来获取到对应的 ServiceFetcher，然后通过 ServiceFetcher 对象的 getService 函数来获取具体的服务对象。当第一次获取时，会调用 ServiceFetcher 的 createService 函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。这种模式就是前文描述的通过容器实现单例模式。系统核心服务以单例形式存在，减少了资源消耗。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;单例模式：&lt;strong&gt;确
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>00.6 ANDROID 面向对象的六大原则——迪米特原则</title>
    <link href="http://yoursite.com/2019/08/06/PATTERN/00.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/06/PATTERN/00.6 ANDROID 面向对象的六大原则——迪米特原则/</id>
    <published>2019-08-05T17:00:00.000Z</published>
    <updated>2020-02-20T13:44:01.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="">第六篇：本文</a></p><hr><h3 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h3><hr><p>英文全称为 Law of Demeter，LOD，也称为最少知识原则，意思都是<strong>一个对象应该对其他对象有最少的了解</strong>。通俗的讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没关系，调用者或者依赖者只需要知道它需要的方法即可，其他的可一概不用管。类与类之间的关系越密切，耦合越大，当一个类发生变化时，对另一个类的影响也越大。</p><p>迪米特原则还有一个英文解释是 Only talk to your immediate friends，翻译过来就是：<strong>只与直接的朋友通信。</strong>什么叫做直接的朋友？每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为了朋友关系，这种关系的类型有很多，如组合、聚合、依赖等。</p><p>下面我们就以租房为例来讲讲迪米特原则的应用。</p><hr><h3 id="举例：在北京租房"><a href="#举例：在北京租房" class="headerlink" title="举例：在北京租房"></a>举例：在北京租房</h3><hr><p>在北京租房绝大多数都是通过中介找房。我们设定的情况为：我只要求房间的面积和租金，其他的一概不管，中介将符合我们要求的房子提供给我就可以。下面我们看看这个示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 房间</div><div class="line"> */</div><div class="line">public class Room &#123;</div><div class="line">    public float area;</div><div class="line">    public float price;</div><div class="line"></div><div class="line">    public Room(float area, float price) &#123;</div><div class="line">        this.area = area;</div><div class="line">        this.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Room&#123;&quot; + &quot;area=&quot; + area + &quot;, price=&quot; + price + &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 中介</div><div class="line"> */</div><div class="line">public class Mediator &#123;</div><div class="line">    List&lt;Room&gt; mRooms = new ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    public Mediator() &#123;</div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            mRooms.add(new Room(14 + i, (14 + i) * 150));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public List&lt;Room&gt; getAllRooms() &#123;</div><div class="line">        return mRooms;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 租户</div><div class="line"> */</div><div class="line">public class Tenant &#123;</div><div class="line">    public void rentRoom(float roomArea, float roomPrice, Mediator mediator) &#123;</div><div class="line">        List&lt;Room&gt; rooms = mediator.getAllRooms();</div><div class="line">        for (Room room : rooms) &#123;</div><div class="line">            if (isSuitable(roomArea, roomPrice, room)) &#123;</div><div class="line">                System.out.println(&quot;租到房间啦！&quot; + room);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private boolean isSuitable(float roomArea, float roomPrice, Room room) &#123;</div><div class="line">        return room.area &gt;= roomArea &amp;&amp; room.price &lt;= roomPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从上面的代码可以看到，Tenant 不仅依赖了 Mediator 类，还需要频繁地与 Room 类打交道。租户类的要求只是通过中介找到一间适合自己的房间罢了，如果把这些检测条件都放在 Tenant 类中，那么中介类的功能就被弱化，而且导致了 Tenant 与 Room 的耦合较高，因为 Tenant 必须知道许多关于 Room 的细节。当 Room 变化时 Tenant 也必须跟着变化。Tenant 又与 Mediator 耦合，这就出现了纠缠不清的关系。这个时候就需要我们分清谁才是我们真正的“朋友”，在我们所设定的情况下，显然是 Mediator。上述代码的结构下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ef06a9294f269c90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>既然是耦合太严重，那我们就只能解耦了。首先要明确的是，我们只和我们的朋友通信，这里就是指 Mediator 对象。必须将 Room 相关的操作从 Tenant 中移除，而这些操作案例应该属于 Mediator。我们进行如下重构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 中介</div><div class="line"> */</div><div class="line">public class Mediator &#123;</div><div class="line">    List&lt;Room&gt; mRooms = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public Mediator() &#123;</div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            mRooms.add(new Room(14 + i, (14 + i) * 150));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Room rentOut(float area, float price) &#123;</div><div class="line">        for (Room room : mRooms) &#123;</div><div class="line">            if (isSuitable(area, price, room)) &#123;</div><div class="line">                return room;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean isSuitable(float roomArea, float roomPrice, Room room) &#123;</div><div class="line">        return room.area &gt;= roomArea &amp;&amp; room.price &lt;= roomPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 租户</div><div class="line"> */</div><div class="line">public class Tenant &#123;</div><div class="line">    public void rentRoom(float roomArea, float roomPrice, Mediator mediator) &#123;</div><div class="line">        mediator.rentOut(roomArea, roomPrice);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>重构后的结构图如下所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7c0beb82a0d5073c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>只是将对于 Room 的判定操作移到了 Mediator 类中，这本应该是 Mediator 的职责，根据租户设定的条件查找符合要求的房子，并且将结果交给租户就可以了。租户并不需要知道太多关于 Room 的细节，比如与房东签合同，房东的房产证是不是真的，房内的设施坏了之后要找谁谁修等。当我们通过我们的“朋友”——中介租了房之后，所有的事情我们都通过与中介沟通就好了，房东、维修师傅等这些角色并不是我们直接的“朋友”。“只与直接的朋友通信”这简单的几个字就能够将我们从复杂的关系网中抽离出来，使程序耦合度更低、稳定性更好。</p><hr><h3 id="举例二：ImageCache"><a href="#举例二：ImageCache" class="headerlink" title="举例二：ImageCache"></a>举例二：ImageCache</h3><hr><p>前面博客中的图片加载器项目，ImageCache 就是用户的直接朋友，而 SD 卡缓存内部使用了 FileOutputStream，这个 FileOutputStream 就不属于用户的直接朋友了。因此，用户完全不知道它的存在，用户只需要与 ImageCache 对象打交的即可。将图片存到 SD 卡中的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// SD 卡缓存 DiskCache 类</div><div class="line">public class DiskCache implements ImageCache &#123;</div><div class="line">    private static String CACHE_DIR =</div><div class="line">            Environment.getExternalStorageDirectory() + &quot;/&quot;;</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return BitmapFactory.decodeFile(CACHE_DIR</div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        FileOutputStream fileOutputStream = null;</div><div class="line">        try &#123;</div><div class="line">            fileOutputStream = new FileOutputStream(CACHE_DIR</div><div class="line">                    + ImageUtil.urlToMd5(url));</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            CloseUtils.closeQuietly(fileOutputStream);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在领导要求使用 jake wharton 的 DiskLruCache 来替换 FileOutputStream。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public void put(String url, Bitmap bitmap) &#123;</div><div class="line">    DiskLruCache.Editor editor = null;</div><div class="line">    try &#123;</div><div class="line">        editor = mDiskLruCache.edit(url);</div><div class="line">        if (null != editor) &#123;</div><div class="line">            OutputStream outputStream = editor.newOutputStream(0);</div><div class="line">            if (writeBitmapToDisk(bitmap, outputStream)) &#123;</div><div class="line">                // 写入 Disk 缓存</div><div class="line">                editor.commit();</div><div class="line">            &#125; else &#123;</div><div class="line">                editor.abort();</div><div class="line">            &#125;</div><div class="line">            CloseUtils.closeQuietly(outputStream);</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>SD 卡缓存的具体实现虽然被替换了，但用户根本不会感知到。因为用户根本不知道 FileOutputStream 和 DiskLruCache 的存在，他们没有与 FileOutputStream 或 DiskLruCache 进行通信，他们只认识直接“朋友”——ImageCache，ImageCache 将一切细节隐藏在直接“朋友”的外衣之下，使得系统具有更低的耦合性和更好的可扩展性。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>00.5 ANDROID 面向对象的六大原则——接口隔离原则</title>
    <link href="http://yoursite.com/2019/08/05/PATTERN/00.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/05/PATTERN/00.5 ANDROID 面向对象的六大原则——接口隔离原则/</id>
    <published>2019-08-04T17:00:00.000Z</published>
    <updated>2020-02-20T13:43:51.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="">第五篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><hr><p>英文全称是 Interface Segregation Principles，ISP。其定义是：<strong>客户端不应该依赖它不需要的接口</strong>。另一种定义是：<strong>类间的依赖关系应该建立在最小的接口上</strong>。接口隔离原则将非常庞大、臃肿的接口拆分成更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署。</p><p>说白了就是，让客户端依赖的接口尽可能地小。这样说可能还有点抽象，我们还是以一个示例来说明一下。在此之前我们来说一个场景，在 Java 6 及之前的 JDK 版本，有一个非常讨厌的问题，那就是在使用了 OutputStream 或者其他可关闭的对象之后，我们必须保证他们最终被关闭了，我们的 SD 卡缓存类中就有这样的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public void put(String url, Bitmap bitmap) &#123;</div><div class="line">    FileOutputStream fileOutputStream = null;</div><div class="line">    try &#123;</div><div class="line">        fileOutputStream = new FileOutputStream(CACHE_DIR</div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">    &#125; catch (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; finally &#123;</div><div class="line">        if (fileOutputStream != null) &#123;</div><div class="line">            try &#123;</div><div class="line">                fileOutputStream.close();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们看到的这段代码可读性非常差，各种 try…catch 嵌套都是些简单的代码，但是会严重影响代码的可读性，并且多层次的大括号很容易将代码写到错误的层级中。</p><p>在 Java 中有一个 Closeable 接口，该接口标识了一个可关闭的对象，它只有一个 close 方法。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0f0d41101412f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们要讲的 FileOutputStream 类就实现了这个接口。我们从上图可以看到，还有 100 多个类实现了 Closeable 这个接口。这意味着，在关闭这 100 多个类型的对象时，都需要写出像 put 方法中 finally 代码段那样的代码。这还了得，反正我是不能忍。既然都是实现了 Closeable 接口，那只要一个方法统一来关闭这些对象不就可以了么？于是写来来如下的工具类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line">import java.io.Closeable;</div><div class="line"></div><div class="line">public class CloseUtils &#123;</div><div class="line"></div><div class="line">    private CloseUtils() &#123;&#125;</div><div class="line"></div><div class="line">    public static void closeQuietly(Closeable closeable) &#123;</div><div class="line">        if (null != closeable) &#123;</div><div class="line">            try &#123;</div><div class="line">                closeable.close();</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们再看看把这段代码运用到上述的 put 方法中的效果如何。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void put(String url, Bitmap bitmap) &#123;</div><div class="line">    FileOutputStream fileOutputStream = null;</div><div class="line">    try &#123;</div><div class="line">        fileOutputStream = new FileOutputStream(CACHE_DIR</div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">    &#125; catch (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; finally &#123;</div><div class="line">        CloseUtils.closeQuietly(fileOutputStream);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码简洁了很多！而且这个 closeQuietly 方法可以运用到各类可关闭的对象中，保证了代码的重用性。CloseUtils 的 closeQuietly 方法的基本原理就是依赖于 Closeable 抽象而不是具体实现，并且建立在最小化依赖原则的基础上，它只需要知道这个对象是可关闭的，其他的一概不关心，也就是这里的接口隔离原则。</p><p>试想一下，如果在只是需要关闭一个对象时，它却暴露了其他的接口函数，如 OutputStream 的 write 方法，这就使得更多的细节暴露在客户端代码面前，不仅没有很好地隐藏实现，还增加了接口的使用难度。而通过 Closeable 接口将可关闭的对象抽象起来，这样只需要客户端依赖于 Closeable 就可以对客户端隐藏其他的接口信息，客户端代码只需要知道这个对象可关闭（只可调用 close 方法）即可。</p><p>之前博客中设计的 ImageLoader 持有的 ImageCache 就是接口隔离原则的运用。ImageLoader 只需要知道该缓存对象有存、取缓存图片的接口即可，其他的一概不管，这就使得缓存功能的具体实现对 ImageLoader 隐藏。这就是用最小化接口隔离了实现类的细节，也促使我们将庞大的接口拆分到更细粒度的接口当中，这使得我们的系统具有更低的耦合性、更高的灵活性。</p><hr><h3 id="举例：拆分接口"><a href="#举例：拆分接口" class="headerlink" title="举例：拆分接口"></a>举例：拆分接口</h3><hr><p>依据接口隔离原则，将下图中臃肿的接口 I 拆分为独立的几个接口。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1cd2d3c76d59ad0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>类 A 依赖接口 I 中的方法1、方法2、方法3，类 PA 是对类 A 依赖的实现。类 B 依赖接口 I 中的方法1、方法4、方法5，类 PB 是对类 B 依赖的实现。对于类 PA 和类 PB 来说，虽然他们都存在着用不到的方法（也就是图中划红线的方法），但由于实现了接口 I，所以也必须要实现这些用不到的方法。用代码表示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">interface I &#123;</div><div class="line">    void method1();</div><div class="line">    void method2();</div><div class="line">    void method3();</div><div class="line">    void method4();</div><div class="line">    void method5();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class A &#123;</div><div class="line">    public void depend1(I i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I i)&#123;</div><div class="line">        i.method2();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I i)&#123;</div><div class="line">        i.method3();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B &#123;</div><div class="line">    public void depend1(I i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I i)&#123;</div><div class="line">        i.method4();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I i)&#123;</div><div class="line">        i.method5();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PA implements I &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method2() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I 的方法2&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method3() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I 的方法3&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 对于类 PA 来说，method4 和 method5 不是必需的，但是由于接口 I 中有这两个方法</div><div class="line">    // 所以在实现过程中即使这两个方法的方法体为空，也要将这两个没有作用的方法进行实现</div><div class="line">    public void method4() &#123;&#125;</div><div class="line">    public void method5() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PB implements I &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 对于类 PB 来说，method2 和 method3 不是必需的，但是由于接口 I 中有这两个方法</div><div class="line">    // 所以在实现过程中即使这两个方法的方法体为空，也要将这两个没有作用的方法进行实现</div><div class="line">    public void method2() &#123;&#125;</div><div class="line">    public void method3() &#123;&#125;</div><div class="line"></div><div class="line">    public void method4() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I 的方法4&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method5() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I 的方法5&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        A a = new A();</div><div class="line">        a.depend1(new PA());</div><div class="line">        a.depend2(new PA());</div><div class="line">        a.depend3(new PA());</div><div class="line"></div><div class="line">        B b = new B();</div><div class="line">        b.depend1(new PB());</div><div class="line">        b.depend2(new PB());</div><div class="line">        b.depend3(new PB());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到，如果接口过于臃肿，只要接口中出现的方法，不管对依赖于它的类有没有用处，实现类中都必须去实现这些方法，这显然不是好的设计。如果将这个设计修改为符合接口隔离原则，就必须对接口 I 进行拆分。在这里我们将原有的接口 I 拆分为三个接口，拆分后的设计如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-83e0173046673597.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>代码更改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">interface I1 &#123;</div><div class="line">    void method1();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface I2 &#123;</div><div class="line">    void method2();</div><div class="line">    void method3();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface I3 &#123;</div><div class="line">    void method4();</div><div class="line">    void method5();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class A &#123;</div><div class="line">    public void depend1(I1 i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I2 i)&#123;</div><div class="line">        i.method2();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I2 i)&#123;</div><div class="line">        i.method3();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B &#123;</div><div class="line">    public void depend1(I1 i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I3 i)&#123;</div><div class="line">        i.method4();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I3 i)&#123;</div><div class="line">        i.method5();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PA implements I1, I2 &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I1 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method2() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I2 的方法2&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method3() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I2 的方法3&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PB implements I1, I3 &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I1 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method4() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I2 的方法4&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method5() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I2 的方法5&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。本文例子中，将一个庞大的接口变更为 3 个专用的接口所采用的就是接口隔离原则。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p><p>说到这里，很多人会觉的接口隔离原则跟之前的单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。</p><p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p><ul><li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化，所以一定要适度。</li><li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ul><p>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>00.4 ANDROID 面向对象的六大原则——依赖倒置原则</title>
    <link href="http://yoursite.com/2019/08/04/PATTERN/00.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/04/PATTERN/00.4 ANDROID 面向对象的六大原则——依赖倒置原则/</id>
    <published>2019-08-03T17:00:00.000Z</published>
    <updated>2020-02-20T13:43:41.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="">第四篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>英文全称是 Dependence Inversion Principle，缩写 DIP。它指代了一种特定的解耦形式，使得高层次的模块不依赖于低层次模块的实现细节，即依赖模块被颠倒了。它包含了以下几个含义：</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li><li>抽象不应该依赖细节；</li><li>细节应该依赖抽象。</li></ul><p>在 Java 语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或继承抽象类而产生的类就是细节，可以被直接实例化 (new)。高层模块就是调用端，底层模块就是具体实现类。依赖倒置原则在 Java 语言中的表现就是：<strong>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。</strong>概括的说就是<strong>面向接口编程</strong>，或者说面向抽象编程，这里的抽象指的是接口或者抽象类。</p><p>如果类与类直接依赖于细节，那么它们直接就有直接的耦合，当具体实现变化时，意味着要同时修改依赖者的代码，这限制了系统的可扩展性。</p><p>在下面的代码中，ImageLoader 直接依赖于 MemoryCache，这个 MemoryCache 是一个具体实现，而不是一个抽象类或者接口。这导致了 ImageLoader 直接依赖了具体细节，当 MemoryCache 不能满足 ImageLoader 而需要被其他缓存实现替换时，此时就必须修改 ImageLoader 的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    // 内存缓存（直接依赖于细节）</div><div class="line">    MemoryCache mMemoryCache = new MemoryCache();</div><div class="line">    </div><div class="line">    // 加载图片到 ImageView 中</div><div class="line">    public void displayImage(String url, ImageView imageView) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            downloadImage(url, imageView);</div><div class="line">        &#125; else &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setImageCache(MemoryCache cache) &#123;</div><div class="line">        mMemoryCache = cache;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>随着产品的升级，用户发现 MemoryCache 已经不能满足需求，用户需要的 ImageLoader 可以将图片同时缓存到内存和 SD 卡中，或者可以让用户自定义实现缓存。修改原有代码也不符合开闭原则。</p><p>正确的做法是依照依赖倒置原则依赖抽象，而不依赖具体实现。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public interface ImageCache &#123;</div><div class="line">    Bitmap get(String url);</div><div class="line">    void put(String url, Bitmap bitmap);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class ImageLoader &#123;</div><div class="line">    // 图片缓存类，依赖于抽象，并且有一个默认的实现</div><div class="line">    ImageCache mImageCache = new MemoryCache();</div><div class="line"></div><div class="line">    // 加载图片到 ImageView 中</div><div class="line">    public void displayImage(String url, ImageView imageView) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            downloadImage(url, imageView);</div><div class="line">        &#125; else &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 注入缓存实现</div><div class="line">    public void setImageCache(ImageCache cache) &#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在这里，我们建立了 ImageCache 抽象，并且让 ImageLoader 依赖于抽象而不是具体细节。当需求发生变化时，我们只需要实现 ImageCache 类或者继承其他已有的 ImageCache 子类完成相应的缓存功能，然后将具体的实现注入到 ImageLoader 即可实现缓存功能的替换，这就保证了缓存系统的可扩展性，有了拥抱变化的能力，这就是依赖倒置原则。</p><hr><h3 id="举例：涛哥开奔驰"><a href="#举例：涛哥开奔驰" class="headerlink" title="举例：涛哥开奔驰"></a>举例：涛哥开奔驰</h3><hr><p>先不考虑依赖倒置原则，看一下如下的设计：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2b425fd147530af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从上面的类图中可以看出，司机类和奔驰车类都属于细节，并没有实现或继承抽象，它们是对象级别的耦合。通过类图可以看出司机有一个 drive() 方法，用来开车，奔驰车有一个 run() 方法，用来表示车辆运行，并且奔驰车类依赖于司机类，用户模块表示高层模块，负责调用司机类和奔驰车类。</p><p>可用以下代码表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class Driver &#123;</div><div class="line">    // 司机的主要职责就是驾驶汽车</div><div class="line">    public void drive(Benz benz)&#123;</div><div class="line">        benz.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Benz &#123;</div><div class="line">    // 汽车肯定会跑</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;奔驰汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 高层模块</div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Driver taoGe = new Driver();</div><div class="line">        Benz benz = new Benz();</div><div class="line">        // 司机开奔驰车</div><div class="line">        taoGe.drive(benz);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样的设计乍一看好像也没有问题，涛哥只管开着他的奔驰车就好。但是假如有一天他不想开奔驰了，想换一辆宝马车玩玩怎么办呢？我们当然可以新建一个宝马车类，也给它弄一个 run() 方法，但问题是，这辆车有是有了，但是涛哥却不能开啊，因为司机类里面并没有宝马车的依赖。要想解决问题，只能修改代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class BMW &#123;</div><div class="line">    public void run()&#123;</div><div class="line">        System.out.println(&quot;宝马汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的设计没有使用依赖倒置原则，我们已经发现，模块与模块之间耦合度太高，生产力太低，只要需求一变就需要大面积重构，说明这样的设计是不合理。现在我们引入依赖倒置原则，重新设计的类图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-22580545a2617fb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可用以下代码表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// 将司机模块抽象为一个接口</div><div class="line">public interface IDriver &#123;</div><div class="line">    void drive(ICar car);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Driver implements IDriver &#123;</div><div class="line">    public void drive(ICar car)&#123;</div><div class="line">        car.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 将汽车模块抽象为一个接口：可以是奔驰汽车，也可以是宝马汽车</div><div class="line">public interface ICar &#123;</div><div class="line">    void run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Benz implements ICar &#123;</div><div class="line">    public void run()&#123;</div><div class="line">        System.out.println(&quot;奔驰汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class BMW implements ICar &#123;</div><div class="line">    public void run()&#123;</div><div class="line">        System.out.println(&quot;宝马汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 高层模块</div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        IDriver taoGe = new Driver();</div><div class="line">        ICar benz = new Benz();</div><div class="line">        // 涛哥开奔驰</div><div class="line">        taoGe.drive(benz);</div><div class="line">        // 涛哥开宝马</div><div class="line">        taoGe.drive(new BMW());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如此设计，涛哥再也不怕有新车不能开的情况了。</p><hr><h3 id="依赖的三种方法"><a href="#依赖的三种方法" class="headerlink" title="依赖的三种方法"></a>依赖的三种方法</h3><hr><p><strong>接口声明依赖对象</strong>： 在接口的方法中声明依赖对象，就如上面的例子。<br><strong>构造函数传递依赖对象</strong>：在类中通过构造函数声明依赖对象，按照依赖注入的说法，这种方式叫做构造函数注入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public interface IDriver &#123;</div><div class="line">    void drive();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Driver implements IDriver&#123;</div><div class="line">    private ICar car;</div><div class="line"></div><div class="line">    // 构造函数注入</div><div class="line">    public Driver(ICar car)&#123;</div><div class="line">        this.car = car;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void drive(ICar car)&#123;</div><div class="line">        this.car.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>Setter 方法传递依赖对象</strong>：在抽象中设置 Setter 方法声明依赖对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public interface IDriver&#123;</div><div class="line">    // 注入依赖</div><div class="line">    void setCar(ICar car);</div><div class="line">    void drive();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Driver implements IDriver &#123;</div><div class="line">    private ICar car;</div><div class="line"></div><div class="line">    public void setCar(ICar car)&#123;</div><div class="line">        this.car = car;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void drive()&#123;</div><div class="line">        this.car.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><hr><p>依赖倒置原则的本质就是通过抽象（抽象类或接口）使各个类或模块实现彼此独立，不互相影响，实现模块间的松耦合。在项目中使用这个规则需要以下原则：</p><ul><li><strong>每个类尽量都要有接口或抽象类，或者抽象类和接口都有。</strong></li><li><strong>变量的表面类型尽量是接口或者抽象类。</strong></li><li><strong>任何类都不应该从具体类派生。</strong></li><li><strong>尽量不要重写基类已经写好的方法</strong>（里式替换原则）。<br>如果基类是一个抽象类，而这个方法已经实现了，子类尽量不要覆写。类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会有一定的影响。</li><li><strong>结合里式替换原则来使用</strong>： 结合里式替换原则和依赖倒置原则我们可以得出一个通俗的规则，接口负责定义 public 属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化。</li></ul><blockquote><p>总结：<strong>依赖倒置原则的核心就是面向抽象（抽象类或者接口）编程</strong>。</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>00.3 ANDROID 面向对象的六大原则——里氏替换原则</title>
    <link href="http://yoursite.com/2019/08/03/PATTERN/00.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/03/PATTERN/00.3 ANDROID 面向对象的六大原则——里氏替换原则/</id>
    <published>2019-08-02T17:00:00.000Z</published>
    <updated>2020-02-20T13:43:25.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="">第三篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><p>前一篇博文中的图片加载器项目，MemoryCache、DiskCache、DoubleCache 都可以替换 ImageCache 的工作，并且能够保证行为的正确性。ImageCache 建立了获取缓存图片、保存缓存图片的接口规范，MemoryCache 等根据接口规范实现了相应的功能，用户只需要在使用时指定具体的缓存对象就可以动态地替换 ImageLoader 中的缓存策略。这就使得 ImageLoader 的缓存系统具有了无限的可能性，也就是保证了可扩展性。</p><p>想象一种情况，当 ImageLoader 中的 setImageCache(ImageCache cache) 中的 cache 对象不能被子类所替换，那么用户如何设置不同的缓存对象，以及用户如何定义自己的缓存实现，通过前文中的 useDiskCache 方法吗？显然不是的，里氏替换原则就为这类问题提供了指导原则，也就是建立抽象，通过抽象建立规范，具体的实现在运行时替换掉抽象，保证系统的扩展性、灵活性。</p><p>开闭原则和里氏替换原则往往是生死相依、不离不弃的，通过里氏替换来达到对扩展开放，对修改关闭的效果。然而，这两个原则都同时强调了一个 OOP 的重要特性——抽象。因此，在开发过程中运用抽象是走向代码优化的重要一步。</p><hr><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><hr><p>里氏替换原则（Liskov Substitution Principle，LSP）有两种定义：<br>● <strong>If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</strong>（如果对每一个类型为 S 的对象 o1，都有类型为 T 的对象 o2，使得以 T 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 S 是类型 T 的子类型。）</p><p>● <strong>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</strong>（所有引用基类的地方必须能透明地使用其子类的对象。）</p><hr><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><hr><p>里氏替换原则的核心原理是抽象，抽象又依赖于继承这个特性。继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。</p><p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。</p><p>问题描述：<strong>有一功能 P1，由类 A 完成。现需要将功能 P1 进行扩展，扩展后的功能为 P，其中 P 由原有功能 P1 与新功能 P2 组成。新功能 P 由类 A 的子类 B 来完成，则子类 B 在完成新功能 P2 的同时，有可能会导致原有功能 P1 发生故障。</strong></p><p>解决方案：<strong>当使用继承时，遵循里氏替换原则</strong>。类 B 继承类 A 时，除添加新的方法完成新增功能 P2 外，尽量不要重写父类 A 的方法，也尽量不要重载父类 A 的方法。</p><p>举例说明：我们需要完成一个两数相减的功能 P1，由类 A 来负责。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">    public int func1(int a, int b) &#123;</div><div class="line">        return a - b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        A a = new A();</div><div class="line">        System.out.println(&quot;100-50=&quot; + a.func1(100, 50));</div><div class="line">        System.out.println(&quot;100-80=&quot; + a.func1(100, 80));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>运行结果：<br>100-50=50<br>100-80=20</p></blockquote><p>后来，我们需要增加一个新的功能 P2：完成两数相加，然后再与100求和，由类 B 来负责。即类 B 需要完成两个功能：</p><ul><li>P1：两数相减。</li><li>P2：两数相加，然后再加100。</li></ul><p>由于类 A 已经实现了第一个功能，所以类 B 继承类 A 后，只需要再完成第二个功能就可以了，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class B extends A &#123;</div><div class="line">    public int func1(int a, int b) &#123;</div><div class="line">        return a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int func2(int a, int b) &#123;</div><div class="line">        return func1(a, b) + 100;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        B b = new B();</div><div class="line">        System.out.println(&quot;100-50=&quot; + b.func1(100, 50));</div><div class="line">        System.out.println(&quot;100-80=&quot; + b.func1(100, 80));</div><div class="line">        System.out.println(&quot;100+20+100=&quot; + b.func2(100, 20));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>运行结果：<br>100-50=150<br>100-80=180<br>100+20+100=220</p></blockquote><p>我们发现原本运行正常的相减功能发生了错误。原因就是类 B 在给方法起名时无意中重写了父类的方法，造成所有运行相减功能的代码全部调用了类 B 重写后的方法，造成原本运行正常的功能出现了错误。</p><p>在本例中，引用基类 A 完成的功能，换成子类 B 之后，发生了异常。在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。如果非要重写父类的方法，比较通用的做法是：<strong>原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。</strong></p><p>里氏替换原则通俗的来讲就是：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。</strong>它包含以下4层含义：</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；</li><li>子类中可以增加自己特有的方法；</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松；</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ul><hr><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><hr><p>ANDROID 中的 Window 与 View 的关系，可以写成一个简单的示例，其 UML 图如下所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ae70d1d61a1d7785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>具体的代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 窗口类</div><div class="line">public class Window &#123;</div><div class="line">    public void show(View child) &#123;</div><div class="line">        child.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 建立视图抽象，测量视图的宽高为公用代码，绘制实现交给具体的子类</div><div class="line">public abstract class view &#123;</div><div class="line">    public abstract void draw();</div><div class="line">    public void measure(int width, int height) &#123;</div><div class="line">        // 测量视图大小</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 文本控件类的具体实现</div><div class="line">public class TextView extends View &#123;</div><div class="line">    public void draw() &#123;</div><div class="line">        // 绘制文本</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ImageView 的具体实现</div><div class="line">public class ImageView extends View &#123;</div><div class="line">    public void draw() &#123;</div><div class="line">        // 绘制图片</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述示例中，Window 依赖于 View，而 View 定义了一个视图抽象，measure 是各个子类共享的方法，子类通过覆写 View 的 draw 方法实现具有各自特色的功能。在这里，这个功能就是绘制自身的内容。任何继承自 View 的子类都可以传递给 show 函数，就是所说的里氏替换。通过里氏替换，就可以自定义各式各样、千变万化的 View，然后传递给 Window，Window 负责组织 View，并将 View 显示到屏幕上。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>00.2 ANDROID 面向对象的六大原则——开闭原则</title>
    <link href="http://yoursite.com/2019/08/02/PATTERN/00.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/02/PATTERN/00.2 ANDROID 面向对象的六大原则——开闭原则/</id>
    <published>2019-08-01T17:00:00.000Z</published>
    <updated>2020-02-20T13:43:14.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="">第二篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><p><strong>请使用双缓存技术（内存、SD 卡）继续优化图片加载器？</strong></p><p>第一篇中已经实现了内存缓存类 ImageCache.java，我们还需要增加一个 SD 卡缓存类 DiskCache.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapFactory;</div><div class="line">import android.os.Environment;</div><div class="line">import android.text.TextUtils;</div><div class="line"></div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">public class DiskCache &#123;</div><div class="line"></div><div class="line">    // 图片缓存 SD 卡目录</div><div class="line">    private static String CACHE_DIR =</div><div class="line">            Environment.getExternalStorageDirectory() + &quot;/&quot;;</div><div class="line"></div><div class="line">    // 从 SD 卡缓存中获取图片</div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return BitmapFactory.decodeFile(CACHE_DIR + urlToMd5(url));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 将图片缓存到 SD 卡中</div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        FileOutputStream fileOutputStream = null;</div><div class="line">        try &#123;</div><div class="line">            fileOutputStream = new FileOutputStream(CACHE_DIR + urlToMd5(url));</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (fileOutputStream != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    fileOutputStream.close();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String urlToMd5(String url) &#123;</div><div class="line">        if (TextUtils.isEmpty(url)) &#123;</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">            byte[] bytes = md5.digest(url.getBytes(&quot;UTF-8&quot;));</div><div class="line">            StringBuilder hex = new StringBuilder();</div><div class="line">            for (byte b : bytes) &#123;</div><div class="line">                hex.append(Integer.toHexString(b &amp; 0xff));</div><div class="line">            &#125;</div><div class="line">            hex.append(&quot;.png&quot;);</div><div class="line">            return hex.toString();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;NoSuchAlgorithmException&quot;, e);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;UnsupportedEncodingException&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后修改 ImageLoader.java 源码进行测试，可使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    // private ImageCache mImageCache = new ImageCache();</div><div class="line">    private DiskCache mImageCache = new DiskCache();</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来要实现的是：<strong>首先使用内存缓存，如果内存缓存没有图片再使用 SD 卡缓存，如果 SD 卡中也没有图片，最后才从网络上获取。</strong></p><p>于是新建一个双缓存类 DoubleCache.java，源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class DoubleCache &#123;</div><div class="line"></div><div class="line">    private ImageCache mMemoryCache = new ImageCache();</div><div class="line">    private DiskCache mDiskCache = new DiskCache();</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>虽然双缓存技术很优秀，但是我们最好提供 API，让使用者可以灵活选择缓存方式：只选内存缓存、只选 SD 卡缓存或者选择双缓存方式。而不合格的程序员则会提供如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    private ImageCache mImageCache = new ImageCache();</div><div class="line">    // SD 卡缓存</div><div class="line">    private DiskCache mDiskCache = new DiskCache();</div><div class="line">    // 双缓存</div><div class="line">    private DoubleCache mDoubleCache = new DoubleCache();</div><div class="line">    // true: 单独使用 SD 卡缓存; false: 单独使用内存缓存</div><div class="line">    private boolean isUseDiskCache = false;</div><div class="line">    // true: 使用双缓存</div><div class="line">    private boolean isUseDoubleCache = false;</div><div class="line"></div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        Bitmap bmp = null;</div><div class="line">        if (isUseDoubleCache) &#123;</div><div class="line">            bmp = mDoubleCache.get(url);</div><div class="line">        &#125; else if (isUseDiskCache) &#123;</div><div class="line">            bmp = mDiskCache.get(url);</div><div class="line">        &#125; else &#123;</div><div class="line">            bmp = mImageCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    public void useDiskCache(boolean useDiskCache) &#123;</div><div class="line">        isUseDiskCache = useDiskCache;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void useDoubleCache(boolean useDoubleCache) &#123;</div><div class="line">        isUseDoubleCache = useDoubleCache;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述代码中，要加入新的缓存实现时都需要修改 ImageLoader 类，然后通过一个布尔变量让用户选择使用哪种缓存。因此，就使得在 ImageLoader 中存在各种 if-else 判断语句，通过这些判断来确定使用哪种缓存。随着这些逻辑的引入，代码越来越复杂、脆弱。如果不小心写错了某个 if 条件，那就需要更多的时间来排除，整个 ImageLoader 类也会变得越来越臃肿。最重要的是，用户不能自己实现缓存注入到 ImageLoader 中，可扩展性差。</p><p><strong>软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的，这就是开放——关闭原则。</strong></p><p>也就是说，当软件需要变化时，我们应该尽量通过扩展的方式实现变化，而不是通过修改已有的代码来实现。根据这一个原则，我们可以画出如下所示的 UML 图。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-27a4841b8ee201ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>按照上图进行以下重构：</p><p><strong>提取抽象接口</strong>，用来抽象图片缓存的功能。其声明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface ImageCache &#123;</div><div class="line">    Bitmap get(String url);</div><div class="line">    void put(String url, Bitmap bitmap);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ImageCache 接口简单定义了获取、缓存图片两个函数，缓存的 key 是图片的 url，值是图片本身。内存缓存、SD 卡缓存、双缓存都实现了该接口，我们看看这几个缓存实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">// 内存缓存 MemoryCache 类</div><div class="line">public class MemoryCache implements ImageCache &#123;</div><div class="line">    private LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line"></div><div class="line">    public MemoryCache() &#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initImageCache() &#123;</div><div class="line">        int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class="line">        final int cacheSize = maxMemory / 4;</div><div class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line">            @Override</div><div class="line">            protected int sizeOf(@NonNull String key, @NonNull Bitmap value) &#123;</div><div class="line">                return ImageUtil.getBitmapSize(value) / 1024;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(@NonNull String url, @NonNull Bitmap bitmap) &#123;</div><div class="line">        mImageCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Bitmap get(@NonNull String url) &#123;</div><div class="line">        return mImageCache.get(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// SD 卡缓存 DiskCache 类</div><div class="line">public class DiskCache implements ImageCache &#123;</div><div class="line">    private static String CACHE_DIR =</div><div class="line">            Environment.getExternalStorageDirectory() + &quot;/&quot;;</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return BitmapFactory.decodeFile(CACHE_DIR </div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        FileOutputStream fileOutputStream = null;</div><div class="line">        try &#123;</div><div class="line">            fileOutputStream = new FileOutputStream(CACHE_DIR </div><div class="line">                    + ImageUtil.urlToMd5(url));</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (fileOutputStream != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    fileOutputStream.close();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 双缓存 DoubleCache 类</div><div class="line">public class DoubleCache implements ImageCache &#123;</div><div class="line">    private MemoryCache mMemoryCache = new MemoryCache();</div><div class="line">    private DiskCache mDiskCache = new DiskCache();</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后重构 ImageLoader，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存，默认内存缓存</div><div class="line">    private ImageCache mImageCache = new MemoryCache();</div><div class="line"></div><div class="line">    // 线程池，线程数量为 CPU 的数量</div><div class="line">    private ExecutorService mExecutorService = Executors.newFixedThreadPool(</div><div class="line">            Runtime.getRuntime().availableProcessors());</div><div class="line"></div><div class="line">    // UI Handler</div><div class="line">    private Handler mUiHandler = new Handler(Looper.getMainLooper());</div><div class="line">    </div><div class="line">    // 注入缓存实现</div><div class="line">    public void setImageCache(ImageCache cache) &#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        Bitmap bitmap = mImageCache.get(url);</div><div class="line">        if (bitmap != null) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 内存中没有，去加载</div><div class="line">        submitLoadRequest(url, imageView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void submitLoadRequest(final String url, </div><div class="line">                                   final ImageView imageView) &#123;</div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Bitmap bitmap = ImageUtil.downloadImage(url);</div><div class="line">                if (bitmap == null) return;</div><div class="line">                if (url.equals(imageView.getTag())) &#123;</div><div class="line">                    updateImageView(imageView, bitmap);</div><div class="line">                &#125;</div><div class="line">                mImageCache.put(url, bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 通知界面更新显示图片</div><div class="line">    private void updateImageView(final ImageView imageView,</div><div class="line">                                 final Bitmap bitmap) &#123;</div><div class="line">        mUiHandler.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>附工具类 ImageUtil.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">public class ImageUtil &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下载图片</div><div class="line">     * @param imageUrl 图片链接</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    public static Bitmap downloadImage(String imageUrl) &#123;</div><div class="line">        if (TextUtils.isEmpty(imageUrl)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(imageUrl);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</div><div class="line">            conn.disconnect();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 计算图片大小</div><div class="line">     * @param bitmap 图片</div><div class="line">     * @return int</div><div class="line">     */</div><div class="line">    public static int getBitmapSize(Bitmap bitmap) &#123;</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            return bitmap.getAllocationByteCount();</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">            return bitmap.getByteCount();</div><div class="line">        &#125;</div><div class="line">        return bitmap.getRowBytes() * bitmap.getHeight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将图片 url 转换成字符串，用作文件名称</div><div class="line">     * @param url</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String urlToMd5(String url) &#123;</div><div class="line">        if (TextUtils.isEmpty(url)) &#123;</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">            byte[] bytes = md5.digest(url.getBytes(&quot;UTF-8&quot;));</div><div class="line">            StringBuilder builder = new StringBuilder();</div><div class="line">            for (byte b : bytes) &#123;</div><div class="line">                builder.append(Integer.toHexString(b &amp; 0xff));</div><div class="line">            &#125;</div><div class="line">            builder.append(&quot;.png&quot;);</div><div class="line">            return builder.toString();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;NoSuchAlgorithmException&quot;, e);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;UnsupportedEncodingException&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过此次重构，没有了那么多的 if-else 语句，没有了各种各样的缓存实现对象、布尔变量，代码确实清晰简洁。用户可以通过setImageCache(ImageCache cache) 函数设置缓存实现，也就是通常说的依赖注入。具体如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ImageLoader imageLoader = new ImageLoader();</div><div class="line">// 使用内存缓存</div><div class="line">imageLoader.setImageCache(new MemoryCache());</div><div class="line">// 使用 SD 卡缓存</div><div class="line">imageLoader.setImageCache(new DiskCache());</div><div class="line">// 使用双缓存</div><div class="line">imageLoader.setImageCache(new DoubleCache());</div><div class="line">// 使用自定义的图片缓存实现</div><div class="line">imageLoader.setImageCache(new ImageCache() &#123;</div><div class="line">    @Override</div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return null; // 从缓存中获取图片</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        // 缓存图片</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>在上述代码中，通过 setImageCache(ImageCache cache) 方法注入不同的缓存实现，这样不仅能够使 ImageLoader 更简单、健壮，也使得 ImageLoader 的可扩展性、灵活性更高。MemoryCache、DiskCache、DoubleCache 缓存图片的具体实现完全不一样，但是，它们的一个特点是，都实现了 ImageCache 接口。当用户需要自定义实现缓存策略时，只需要新建一个实现 ImageCache 接口的类，然后构造该类的对象，并且通过 setImageCache 函数注入到 ImageLoader 中，这样 ImageLoader 就实现了千变万化的缓存策略，且扩展这些缓存策略并不会导致 ImageLoader 类的修改。</p><p>开闭原则指导我们，当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。但是通过继承等方式添加新的实现，这会导致类型的膨胀以及历史遗留代码的冗余。在开发过程中需要自己结合具体情况进行考量。</p><hr><h3 id="开闭原则概述"><a href="#开闭原则概述" class="headerlink" title="开闭原则概述"></a>开闭原则概述</h3><hr><p><strong>软件实体应当对扩展开放，对修改关闭 (Software entities should be open for extension, but closed for modification)。</strong></p><p><strong>开闭原则</strong>是面向对象设计中“可复用设计”的基石，是设计模式最基本的法则。其他五大设计原则和 23 种设计模式都可以看做是开闭原则的实现方法和手段。</p><p>说的通俗一点就是，已经开发好的软件实体（如类、模块、函数），在升级迭代引入新功能时，不应该修改已有的代码，而是在已有代码的基础上，添加新代码来实现。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>00.1 ANDROID 面向对象的六大原则——单一职责原则</title>
    <link href="http://yoursite.com/2019/08/01/PATTERN/00.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
    <id>http://yoursite.com/2019/08/01/PATTERN/00.1 ANDROID 面向对象的六大原则——单一职责原则/</id>
    <published>2019-07-31T17:00:00.000Z</published>
    <updated>2020-02-20T13:43:00.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="">第一篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><p><strong>请实现一个简易的图片加载器（ImageLoader）？</strong></p><p>以下是一个新手实现的图片加载器源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapFactory;</div><div class="line">import android.os.Handler;</div><div class="line">import android.os.Looper;</div><div class="line">import android.text.TextUtils;</div><div class="line">import android.util.LruCache;</div><div class="line">import android.widget.ImageView;</div><div class="line"></div><div class="line">import java.net.HttpURLConnection;</div><div class="line">import java.net.URL;</div><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line"></div><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line">    // 线程池，线程数量为 CPU 的数量</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</div><div class="line">            Runtime.getRuntime().availableProcessors());</div><div class="line">    // UI Handler</div><div class="line">    Handler mUiHandler = new Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    public ImageLoader() &#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化内存缓存</div><div class="line">     */</div><div class="line">    private void initImageCache() &#123;</div><div class="line">        // 计算可用的最大内存</div><div class="line">        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class="line">        // 取四分之一的可用内存作为缓存</div><div class="line">        final int cacheSize = maxMemory / 4;</div><div class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line">            @Override</div><div class="line">            protected int sizeOf(String key, Bitmap bitmap) &#123;</div><div class="line">                return bitmap.getRowBytes() * bitmap.getHeight() / 1024;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加载指定 url 的图片并显示</div><div class="line">     */</div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        // 先从内存中找</div><div class="line">        Bitmap bmp = mImageCache.get(url);</div><div class="line">        if (bmp != null) &#123;</div><div class="line">            imageView.setImageBitmap(bmp);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 内存中没有，去加载</div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                if (bitmap == null) return;</div><div class="line">                if (url.equals(imageView.getTag())) &#123;</div><div class="line">                    updateImageView(imageView, bitmap);</div><div class="line">                &#125;</div><div class="line">                mImageCache.put(url, bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通知界面更新显示图片</div><div class="line">     * @param imageView ImageView</div><div class="line">     * @param bitmap 位图</div><div class="line">     */</div><div class="line">    private void updateImageView(final ImageView imageView, </div><div class="line">                                 final Bitmap bitmap) &#123;</div><div class="line">        mUiHandler.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下载指定 url 的图片</div><div class="line">     * @param imageUrl 图片链接</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    private Bitmap downloadImage(String imageUrl) &#123;</div><div class="line">        if (TextUtils.isEmpty(imageUrl)) return null;</div><div class="line"></div><div class="line">        Bitmap bitmap = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(imageUrl);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</div><div class="line">            conn.disconnect();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 动态申请权限</div><div class="line">requestRuntimePermission(new String[]&#123;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#125;, null);</div><div class="line">String url = &quot;https://upload-images.jianshu.io/upload_images/14186083-9bb468395ee3d048.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;;</div><div class="line">ImageView imageView = findViewById(R.id.image);</div><div class="line">new ImageLoader().displayImage(url, imageView);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bc755e9afc10cbf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片加载器"></p><blockquote><p>上述代码虽然满足功能需求，但是所有的功能代码都写在一个类中，这样随着功能的增多，ImageLoader 类会越来越大，代码也越来越负责，图片加载系统就越来越脆弱……</p></blockquote><p>我们可以参照<strong>单一职责原则</strong>，把 ImageLoader 拆分一下，让各个功能独立出来：</p><ul><li>ImageCache：用于处理图片缓存。</li><li>ImageUtil：图片工具类，如获取图片大小、下载图片等。</li></ul><p>改进后的源码：<br><strong>ImageLoader.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.os.Handler;</div><div class="line">import android.os.Looper;</div><div class="line">import android.widget.ImageView;</div><div class="line"></div><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line"></div><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    private ImageCache mImageCache = new ImageCache();</div><div class="line">    // 线程池，线程数量为 CPU 的数量</div><div class="line">    private ExecutorService mExecutorService = Executors.newFixedThreadPool(</div><div class="line">            Runtime.getRuntime().availableProcessors());</div><div class="line">    // UI Handler</div><div class="line">    private Handler mUiHandler = new Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加载指定 url 的图片并显示</div><div class="line">     */</div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        // 先从内存中找</div><div class="line">        Bitmap bmp = mImageCache.get(url);</div><div class="line">        if (bmp != null) &#123;</div><div class="line">            imageView.setImageBitmap(bmp);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 内存中没有，去加载</div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Bitmap bitmap = ImageUtil.downloadImage(url);</div><div class="line">                if (bitmap == null) return;</div><div class="line">                if (url.equals(imageView.getTag())) &#123;</div><div class="line">                    updateImageView(imageView, bitmap);</div><div class="line">                &#125;</div><div class="line">                mImageCache.put(url, bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通知界面更新显示图片</div><div class="line">     * @param imageView ImageView</div><div class="line">     * @param bitmap 位图</div><div class="line">     */</div><div class="line">    private void updateImageView(final ImageView imageView,</div><div class="line">                                 final Bitmap bitmap) &#123;</div><div class="line">        mUiHandler.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>ImageCache.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line"></div><div class="line">import androidx.annotation.NonNull;</div><div class="line">import androidx.collection.LruCache;</div><div class="line"></div><div class="line">public class ImageCache &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    private LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line"></div><div class="line">    public ImageCache() &#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initImageCache() &#123;</div><div class="line">        // 计算可使用的最大内存</div><div class="line">        int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class="line">        // 取四分之一的可用内存作为缓存</div><div class="line">        final int cacheSize = maxMemory / 4;</div><div class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line">            @Override</div><div class="line">            protected int sizeOf(@NonNull String key, @NonNull Bitmap value) &#123;</div><div class="line">                return ImageUtil.getBitmapSize(value) / 1024;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(@NonNull String url, @NonNull Bitmap bitmap) &#123;</div><div class="line">        mImageCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Bitmap get(@NonNull String url) &#123;</div><div class="line">        return mImageCache.get(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>ImageUtil.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapFactory;</div><div class="line">import android.os.Build;</div><div class="line">import android.text.TextUtils;</div><div class="line"></div><div class="line">import java.net.HttpURLConnection;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">public class ImageUtil &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下载图片</div><div class="line">     * @param imageUrl 图片链接</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    public static Bitmap downloadImage(String imageUrl) &#123;</div><div class="line">        if (TextUtils.isEmpty(imageUrl)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(imageUrl);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</div><div class="line">            conn.disconnect();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 计算图片大小</div><div class="line">     * @param bitmap 图片</div><div class="line">     * @return int</div><div class="line">     */</div><div class="line">    public static int getBitmapSize(Bitmap bitmap) &#123;</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            return bitmap.getAllocationByteCount();</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">            return bitmap.getByteCount();</div><div class="line">        &#125;</div><div class="line">        return bitmap.getRowBytes() * bitmap.getHeight();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="单一职责原则概述"><a href="#单一职责原则概述" class="headerlink" title="单一职责原则概述"></a>单一职责原则概述</h3><hr><p><strong>应该有且仅有一个原因引起类的变更 (There should never be more than one reason for a class to change)。</strong></p><p>单一职责原则为我们提供了一个编写程序的准则，要求我们在编写类，抽象类，接口时，要使其功能职责单一纯碎，将导致其变更的因素缩减到最少。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起。一个职责的变化可能会影响或损坏其他职责的功能。而且职责越多，这个类变化的几率就会越大，类的稳定性就会越低。</p><p>在软件开发中，经常会遇到一个功能类 T 负责两个不同的职责：职责 P1，职责 P2。现因需求变更需要更改职责 P1 来满足新的业务需求，当我们实现完成后，发现因更改职责 P1 竟导致原本能够正常运行的职责 P2 发生故障。而修复职责 P2 又不得不更改职责 P1 的逻辑，这便是因为功能类 T 的职责不够单一，职责 P1 与职责 P2 耦合在一起导致的。</p><h3 id="附：动态权限申请代码"><a href="#附：动态权限申请代码" class="headerlink" title="附：动态权限申请代码"></a>附：动态权限申请代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.pm.PackageManager;</div><div class="line"></div><div class="line">import androidx.annotation.NonNull;</div><div class="line">import androidx.appcompat.app.AppCompatActivity;</div><div class="line">import androidx.core.app.ActivityCompat;</div><div class="line">import androidx.core.content.ContextCompat;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class BaseActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private PermissionListener mListener;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 权限申请</div><div class="line">     * @param permissions 待申请的权限集合</div><div class="line">     * @param listener  申请结果监听事件</div><div class="line">     */</div><div class="line">    protected void requestRuntimePermission(String[] permissions,</div><div class="line">                                            PermissionListener listener)&#123;</div><div class="line">        this.mListener = listener;</div><div class="line"></div><div class="line">        // 用于存放为授权的权限</div><div class="line">        List&lt;String&gt; permissionList = new ArrayList&lt;&gt;();</div><div class="line">        // 遍历传递过来的权限集合</div><div class="line">        for (String permission : permissions) &#123;</div><div class="line">            // 判断是否已经授权</div><div class="line">            if (ContextCompat.checkSelfPermission(this,permission)</div><div class="line">                    != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">                // 未授权，则加入待授权的权限集合中</div><div class="line">                permissionList.add(permission);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 判断集合，如果集合不为空，则需要去授权</div><div class="line">        if (!permissionList.isEmpty()) &#123;</div><div class="line">            ActivityCompat.requestPermissions(this,</div><div class="line">                    permissionList.toArray(new String[permissionList.size()]),</div><div class="line">                    1);</div><div class="line">        &#125;</div><div class="line">        // 为空，则已经全部授权</div><div class="line">        else &#123;</div><div class="line">            if (listener != null) &#123;</div><div class="line">                listener.onGranted();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 权限申请结果</div><div class="line">     * @param requestCode  请求码</div><div class="line">     * @param permissions  所有的权限集合</div><div class="line">     * @param grantResults 授权结果集合</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onRequestPermissionsResult(int requestCode,</div><div class="line">                                           @NonNull String[] permissions,</div><div class="line">                                           @NonNull int[] grantResults) &#123;</div><div class="line">        super.onRequestPermissionsResult(requestCode, permissions, </div><div class="line">                grantResults);</div><div class="line">        if (requestCode == 1 &amp;&amp; grantResults.length &gt; 0) &#123;</div><div class="line">            // 被用户拒绝的权限集合</div><div class="line">            List&lt;String&gt; deniedPermissions = new ArrayList&lt;&gt;();</div><div class="line">            // 用户通过的权限集合</div><div class="line">            List&lt;String&gt; grantedPermissions = new ArrayList&lt;&gt;();</div><div class="line">            for (int i = 0; i &lt; grantResults.length; i++) &#123;</div><div class="line">                // 获取授权结果，这是一个int类型的值</div><div class="line">                int grantResult = grantResults[i];</div><div class="line"></div><div class="line">                // 用户拒绝授权的权限</div><div class="line">                if (grantResult != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">                    String permission = permissions[i];</div><div class="line">                    deniedPermissions.add(permission);</div><div class="line">                &#125;</div><div class="line">                // 用户同意的权限</div><div class="line">                else &#123;</div><div class="line">                    String permission = permissions[i];</div><div class="line">                    grantedPermissions.add(permission);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 用户拒绝权限为空</div><div class="line">            if (deniedPermissions.isEmpty()) &#123;</div><div class="line">                if(mListener != null)&#123;</div><div class="line">                    mListener.onGranted();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 不为空</div><div class="line">            else &#123;</div><div class="line">                if(mListener != null)&#123;</div><div class="line">                    // 回调授权成功的接口</div><div class="line">                    mListener.onDenied(deniedPermissions);</div><div class="line">                    // 回调授权失败的接口</div><div class="line">                    mListener.onGranted(grantedPermissions);</div><div class="line">                    mListener.onDenied();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PermissionListener.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public interface PermissionListener &#123;</div><div class="line">    // 授权成功</div><div class="line">    void onGranted();</div><div class="line">    // 授权部分</div><div class="line">    void onGranted(List&lt;String&gt; grantedPermission);</div><div class="line">    // 拒绝授权</div><div class="line">    void onDenied(List&lt;String&gt; deniedPermission);</div><div class="line">    // 授权失败</div><div class="line">    void onDenied();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;p&gt;&lt;a href=&quot;&quot;&gt;第一篇：本文&lt;/a&gt;&lt;br&gt;&lt;a href=&quot;https://xianxiaotao.github.io/2019/08/02/PATTERN/01.
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>T007 自定义控件 图文弹跳加载中效果</title>
    <link href="http://yoursite.com/2019/07/20/Custom%20View/T007%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E5%9B%BE%E6%96%87%E5%BC%B9%E8%B7%B3%E5%8A%A0%E8%BD%BD%E4%B8%AD%E6%95%88%E6%9E%9C/"/>
    <id>http://yoursite.com/2019/07/20/Custom View/T007 自定义控件 图文弹跳加载中效果/</id>
    <published>2019-07-19T16:00:00.000Z</published>
    <updated>2020-01-26T10:54:47.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-03b7334fbf14edfb.gif?imageMogr2/auto-orient/strip" alt=""></p><p>要想实现上述效果，需要准备三张图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ca8cac0e6e5cd734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loading_text_1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b525f50422a24b09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loading_text_2.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a452b33c2f107f50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loading_text_3.png"></p><p>然后让控件派生自 ImageView 类，这样才能方便地更改它的源文件内容。</p><p>想让图片上下跳动，可以利用 ValueAnimator 实时产生一个 0~200 的数值，然后让当前图片的位置实时向上移动 ValueAnimator 的动态值的高度即可。要让图片的位置实时向上移动，就需要先拿到初始状态下图片的位置。重写 onLayout(boolean changed, int left, int top, int right, int bottom) 函数，就可以拿到控件的初始高度 mTop，之后在每次 ValueAnimator 的动态值到来时，计算出当前控件的 top 位置，并将控件移动到这个位置就可以了。</p><p>即：自定义一个控件 LoadingImageView， 派生自 ImageView，然后重写 onLayout() 函数，拿到控件的初始 top 值。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    // 初始 top</div><div class="line">    private int mTop;</div><div class="line">    // 当前动画图片索引</div><div class="line">    private int mCurImgIndex = 0;</div><div class="line">    // 动画图片总张数</div><div class="line">    private static int mImgCount = 3;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</div><div class="line">        super.onLayout(changed, left, top, right, bottom);</div><div class="line">        mTop = top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于我们需要在刚展示图片时就开始动画，所以将动画的操作全部写在 init() 函数中。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    ValueAnimator valueAnimator = ValueAnimator.ofInt(0, 200, 0);</div><div class="line">    valueAnimator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">    valueAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">    valueAnimator.setDuration(1000);</div><div class="line">    valueAnimator.setInterpolator(new AccelerateInterpolator());</div><div class="line">    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            Integer dx = (Integer) animation.getAnimatedValue();</div><div class="line">            setTop(mTop - dx);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过 (mTop - dx) 得到当前控件相对初始坐标上移 dx 距离后的最新坐标点，然后调用 setTop(int top) 函数将控件移动到当前位置。</p><p>接下来需要监听动画的开始和重复。当动画开始时，图片应该设置为 loading_text_1.png；在重复时，每重复一次应该更换一张图片。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 当前动画图片索引</div><div class="line">private int mCurImgIndex = 0;</div><div class="line">// 动画图片总张数</div><div class="line">private static int mImgCount = 3;</div><div class="line"></div><div class="line">private void init() &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    valueAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationStart(Animator animation) &#123;</div><div class="line">            setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">        @Override</div><div class="line">        public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">        @Override</div><div class="line">        public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">            mCurImgIndex++;</div><div class="line">            switch (mCurImgIndex % mImgCount) &#123;</div><div class="line">                case 0:</div><div class="line">                    setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">                    break;</div><div class="line">                case 1:</div><div class="line">                    setImageDrawable(getResources().getDrawable(R.drawable.loading_text_2));</div><div class="line">                    break;</div><div class="line">                case 2:</div><div class="line">                    setImageDrawable(getResources().getDrawable(R.drawable.loading_text_3));</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    valueAnimator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在更改图片时，我们使用 mCurImgIndex 来累加当前重复的次数，通过与图片总张数 (mImgCount) 取余数，来决定这次重复使用的是哪张图片。</p><p>使用控件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.LoadingImageView</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:layout_margin=&quot;50dp&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>LoadingImageView 的完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.animation.Animator;</div><div class="line">import android.animation.ValueAnimator;</div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.animation.AccelerateInterpolator;</div><div class="line"></div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private int mTop;</div><div class="line">    // 当前动画图片索引</div><div class="line">    private int mCurImgIndex = 0;</div><div class="line">    // 动画图片总张数</div><div class="line">    private static int mImgCount = 3;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        ValueAnimator valueAnimator = ValueAnimator.ofInt(0, 200, 0);</div><div class="line">        valueAnimator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">        valueAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        valueAnimator.setDuration(1000);</div><div class="line">        valueAnimator.setInterpolator(new AccelerateInterpolator());</div><div class="line">        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                Integer dx = (Integer) animation.getAnimatedValue();</div><div class="line">                setTop(mTop - dx);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        valueAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                mCurImgIndex++;</div><div class="line">                switch (mCurImgIndex % mImgCount) &#123;</div><div class="line">                    case 0:</div><div class="line">                        setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">                        break;</div><div class="line">                    case 1:</div><div class="line">                        setImageDrawable(getResources().getDrawable(R.drawable.loading_text_2));</div><div class="line">                        break;</div><div class="line">                    case 2:</div><div class="line">                        setImageDrawable(getResources().getDrawable(R.drawable.loading_text_3));</div><div class="line">                        break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        valueAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</div><div class="line">        super.onLayout(changed, left, top, right, bottom);</div><div class="line">        mTop = top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-03b7334fbf14edfb.gif?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>T006 自定义控件 扫描雷达动画</title>
    <link href="http://yoursite.com/2019/07/19/Custom%20View/T006%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E6%89%AB%E6%8F%8F%E9%9B%B7%E8%BE%BE%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2019/07/19/Custom View/T006 自定义控件 扫描雷达动画/</id>
    <published>2019-07-18T16:00:00.000Z</published>
    <updated>2020-01-24T14:37:54.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d200aff4a7b219d9.gif?imageMogr2/auto-orient/strip" alt=""></p><h3 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h3><ul><li>表层是一张指针图，增加旋转动画，每旋转一周，增加一个波纹扩散动画效果。</li><li>波纹扩散动画效果是在底层的波纹图上实现缩放和透明度变化的组合动画。</li><li>使用容器来保存波纹扩散动画，便于复用。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c358aabf4dcd605b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指针原图"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1478d5d2bd1083fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="波纹原图"></p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.animation.Animator;</div><div class="line">import android.animation.AnimatorSet;</div><div class="line">import android.animation.ObjectAnimator;</div><div class="line">import android.animation.ValueAnimator;</div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.Gravity;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.animation.LinearInterpolator;</div><div class="line">import android.widget.FrameLayout;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.TextView;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class ScanningView extends FrameLayout &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 指针</div><div class="line">     */</div><div class="line">    private ImageView ivNeedle;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 波纹</div><div class="line">     */</div><div class="line">    private ImageView ivRipple;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 中间文字</div><div class="line">     */</div><div class="line">    private TextView tvTitle;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 装波纹的容器</div><div class="line">     */</div><div class="line">    private FrameLayout fl_move_circle;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 匀速插值器</div><div class="line">     */</div><div class="line">    private LinearInterpolator interpolator = new LinearInterpolator();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 准备动画</div><div class="line">     */</div><div class="line">    private AnimatorSet prepareAnim;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 指针旋转动画</div><div class="line">     */</div><div class="line">    private ObjectAnimator needleRotateAnim;</div><div class="line"></div><div class="line">    private List&lt;AnimatorSet&gt; animList = new ArrayList&lt;&gt;();</div><div class="line">    private int animCount = 3;</div><div class="line">    private int index = 0;</div><div class="line"></div><div class="line">    public ScanningView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ScanningView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initView()&#123;</div><div class="line">        View v = LayoutInflater.from(getContext()).inflate(R.layout.rotate_view,null);</div><div class="line">        ivNeedle = v.findViewById(R.id.iv_btn);</div><div class="line">        ivRipple = v.findViewById(R.id.iv_out_circle);</div><div class="line">        tvTitle = v.findViewById(R.id.tv_title);</div><div class="line">        fl_move_circle = v.findViewById(R.id.fl_move_circle);</div><div class="line">        addView(v, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">        initAnim();</div><div class="line"></div><div class="line">        prepareAnim.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化动画</div><div class="line">     * 准备动画 prepareAnim</div><div class="line">     * 扫描动画 scanningAnim</div><div class="line">     */</div><div class="line">    private void initAnim() &#123;</div><div class="line">        initPrepareAnim();</div><div class="line">        initScanningAnim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initPrepareAnim() &#123;</div><div class="line">        // 开始循环的放大缩小波纹</div><div class="line">        ObjectAnimator outCircleAlpha = ObjectAnimator.ofFloat(ivRipple, &quot;alpha&quot;, 0.2f, 0.6f);</div><div class="line">        outCircleAlpha.setDuration(1000);</div><div class="line">        ObjectAnimator outCircleAnimX = ObjectAnimator.ofFloat(ivRipple, &quot;scaleX&quot;, 1f, 1.18f, 1f);</div><div class="line">        outCircleAnimX.setDuration(2000);</div><div class="line">        outCircleAnimX.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        outCircleAnimX.setInterpolator(interpolator);</div><div class="line">        ObjectAnimator outCircleAnimY = ObjectAnimator.ofFloat(ivRipple, &quot;scaleY&quot;, 1f, 1.18f, 1f);</div><div class="line">        outCircleAnimY.setDuration(2000);</div><div class="line">        outCircleAnimY.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        outCircleAnimY.setInterpolator(interpolator);</div><div class="line">        prepareAnim = new AnimatorSet();</div><div class="line">        prepareAnim.playTogether(outCircleAnimX, outCircleAnimY, outCircleAlpha);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initScanningAnim() &#123;</div><div class="line">        // 指针转动动画</div><div class="line">        needleRotateAnim = ObjectAnimator.ofFloat(ivNeedle, &quot;rotation&quot;, 0f, 360f);</div><div class="line">        needleRotateAnim.setDuration(1800);</div><div class="line">        needleRotateAnim.setInterpolator(interpolator);</div><div class="line">        needleRotateAnim.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        needleRotateAnim.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                playRippleAnim();</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                playRippleAnim();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initRippleAnim() &#123;</div><div class="line">        final ImageView imageView = new ImageView(getContext());</div><div class="line">        LayoutParams lp = new LayoutParams(dip2px(getContext(), 110), dip2px(getContext(), 110));</div><div class="line">        lp.gravity = Gravity.CENTER;</div><div class="line">        imageView.setLayoutParams(lp);</div><div class="line">        imageView.setImageResource(R.drawable.ripple);</div><div class="line">        fl_move_circle.addView(imageView);</div><div class="line">        ObjectAnimator outCircleAnimX = ObjectAnimator.ofFloat(imageView, &quot;scaleX&quot;, 1f, 5f);</div><div class="line">        ObjectAnimator outCircleAnimY = ObjectAnimator.ofFloat(imageView, &quot;scaleY&quot;, 1f, 5f);</div><div class="line">        ObjectAnimator alphaAnim = ObjectAnimator.ofFloat(imageView, &quot;alpha&quot;, 0.6f, 0);</div><div class="line">        outCircleAnimX.setDuration(5000);</div><div class="line">        outCircleAnimY.setDuration(5000);</div><div class="line">        alphaAnim.setDuration(5000);</div><div class="line">        final AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.playTogether(outCircleAnimX, outCircleAnimY, alphaAnim);</div><div class="line"></div><div class="line">        animList.add(animatorSet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void playRippleAnim() &#123;</div><div class="line">        if (animList.size() &lt; animCount) &#123;</div><div class="line">            initRippleAnim();</div><div class="line">        &#125;</div><div class="line">        animList.get(index).start();</div><div class="line">        index++;</div><div class="line">        if (index == animCount) index = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模拟开始</div><div class="line">     */</div><div class="line">    public void onceClick()&#123;</div><div class="line">        // 取消掉循环的波纹</div><div class="line">        prepareAnim.cancel();</div><div class="line">        ivRipple.setVisibility(GONE);</div><div class="line"></div><div class="line">        needleRotateAnim.start();</div><div class="line">        tvTitle.setText(&quot;扫描中&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据手机的分辨率从 dip 的单位 转成为 px(像素)</div><div class="line">     */</div><div class="line">    public static int dip2px(Context context, float dpValue) &#123;</div><div class="line">        final float scale = context.getResources().getDisplayMetrics().density;</div><div class="line">        return (int) (dpValue * scale + 0.5f);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其布局文件 res/layout/scanning_view.xml 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;#69C8FA&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/fl_move_circle&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_out_circle&quot;</div><div class="line">        android:layout_width=&quot;110dp&quot;</div><div class="line">        android:layout_height=&quot;110dp&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:alpha=&quot;0.6&quot;</div><div class="line">        android:src=&quot;@drawable/ripple&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_btn&quot;</div><div class="line">        android:layout_width=&quot;110dp&quot;</div><div class="line">        android:layout_height=&quot;110dp&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:src=&quot;@drawable/needle&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv_title&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:textColor=&quot;#ffffff&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:text=&quot;点击扫描&quot;</div><div class="line">        android:textSize=&quot;10sp&quot;</div><div class="line">        android:layout_marginTop=&quot;13dp&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure></p><h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class DemoActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_demo);</div><div class="line"></div><div class="line">        final ScanningView view = findViewById(R.id.scanning);</div><div class="line">        view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                view.onceClick();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.ScanningView</div><div class="line">        android:id=&quot;@+id/scanning&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-d200aff4a7b219d9.gif?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>T005 自定义控件 可配置加载 ImageView</title>
    <link href="http://yoursite.com/2019/07/18/Custom%20View/T005%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%20ImageView/"/>
    <id>http://yoursite.com/2019/07/18/Custom View/T005 自定义控件 可配置加载 ImageView/</id>
    <published>2019-07-17T16:00:00.000Z</published>
    <updated>2020-01-24T11:38:50.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dd9b1010d91ba48c.gif?imageMogr2/auto-orient/strip" alt=""></p><p>原理很简单，使一张图围绕自己的中心点匀速旋转。完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.animation.Animation;</div><div class="line">import android.view.animation.LinearInterpolator;</div><div class="line">import android.view.animation.RotateAnimation;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        RotateAnimation rotateAnim = new RotateAnimation(0, 360,</div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f,</div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">        rotateAnim.setRepeatCount(Animation.INFINITE);</div><div class="line">        rotateAnim.setDuration(1000);</div><div class="line">        rotateAnim.setInterpolator(new LinearInterpolator());</div><div class="line">        this.startAnimation(rotateAnim);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.LoadingImageView</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:layout_margin=&quot;50dp&quot;</div><div class="line">        android:src=&quot;@drawable/taiji&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-dd9b1010d91ba48c.gif?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>T004 自定义控件 由远及近 ImageView</title>
    <link href="http://yoursite.com/2019/07/17/Custom%20View/T004%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%94%B1%E8%BF%9C%E5%8F%8A%E8%BF%91%20ImageView/"/>
    <id>http://yoursite.com/2019/07/17/Custom View/T004 自定义控件 由远及近 ImageView/</id>
    <published>2019-07-16T16:00:00.000Z</published>
    <updated>2020-01-24T04:42:13.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-817072fe0e22d8fd.gif?imageMogr2/auto-orient/strip" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">ScaleAnimation</a>、<a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump5" target="_blank" rel="external">BounceInterpolator</a></p><p>借助 ScaleAnimation 实现由远及近效果，首先需要让动画从控件某点（触屏点）为中心开始缩放；其次需要在动画结束后，将控件固定在放大后的状态；并使用回弹插值器。</p><p>上述效果图完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.MotionEvent;</div><div class="line">import android.view.animation.Animation;</div><div class="line">import android.view.animation.BounceInterpolator;</div><div class="line">import android.view.animation.ScaleAnimation;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class TouchImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private boolean isPlay = false;</div><div class="line"></div><div class="line">    public TouchImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TouchImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TouchImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        if (!isPlay) &#123;</div><div class="line">            isPlay = true;</div><div class="line"></div><div class="line">            float pivotXValue = (event.getX() - getLeft()) / getWidth();</div><div class="line">            float pivotYValue = (event.getY() - getTop()) / getHeight();</div><div class="line"></div><div class="line">            ScaleAnimation scaleAnim = new ScaleAnimation(1.0f, 3f, 1.0f, 3f,</div><div class="line">                    Animation.RELATIVE_TO_SELF, pivotXValue,</div><div class="line">                    Animation.RELATIVE_TO_SELF, pivotYValue);</div><div class="line">            scaleAnim.setDuration(3000);</div><div class="line">            scaleAnim.setFillAfter(true);</div><div class="line">            scaleAnim.setInterpolator(new BounceInterpolator());</div><div class="line">            this.startAnimation(scaleAnim);</div><div class="line">        &#125; else &#123;</div><div class="line">            this.clearAnimation();</div><div class="line">            isPlay = false;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之所以继承 ImageView，是为了复用其完善的图片显示功能。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-817072fe0e22d8fd.gif?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>T003 自定义控件 裁剪动画</title>
    <link href="http://yoursite.com/2019/07/16/Custom%20View/T003%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%A3%81%E5%89%AA%E5%8A%A8%E7%94%BB/"/>
    <id>http://yoursite.com/2019/07/16/Custom View/T003 自定义控件 裁剪动画/</id>
    <published>2019-07-15T16:00:00.000Z</published>
    <updated>2020-01-24T04:42:51.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2cc64f1f2b5f86f5.gif?imageMogr2/auto-orient/strip" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas" target="_blank" rel="external">01.5 精通自定义 View 之绘图基础——Canvas</a></p><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><p>这个动画的原理很简单，就是每次将裁剪区域变大，在裁剪区域内的图像就会显示出来，而裁剪区域之外的图像不会显示。而关键问题在于如何计算裁剪区域。</p><p>再来看一下动画截图，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1c8c6731e193d120.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从图示中可以看出，有两个裁剪区域。</p><p>裁剪区域一：从左向右，逐渐变大。假设宽度是 clipWidth，高度是 CLIP_HEIGHT，那么裁剪区域一所对应的 Rect 对象如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rect(0, 0, clipWidth, CLIP_HEIGHT);</div></pre></td></tr></table></figure></p><p>裁剪区域二：从右向左，同样逐渐变大，它的宽度、高度都与裁剪区域一相同。但它是从右向左变化的，假设图片的宽度是 width，那么裁剪区域二所对应的 Rect 对象如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rect(width - clipWidth, CLIP_HEIGHT, width, 2* CLIP_HEIGHT);</div></pre></td></tr></table></figure></p><h3 id="二、示例代码"><a href="#二、示例代码" class="headerlink" title="二、示例代码"></a>二、示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">public class ClipRegionView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private int clipWidth = 0;</div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line">    private static final int CLIP_HEIGHT = 50;</div><div class="line">    private Path mPath;</div><div class="line">    private RectF mRect;</div><div class="line"></div><div class="line">    public ClipRegionView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        width = mBitmap.getWidth();</div><div class="line">        height = mBitmap.getHeight();</div><div class="line">        mPath = new Path();</div><div class="line">        mRect = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldW, int oldH) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldW, oldH);</div><div class="line"></div><div class="line">        // 原图宽高超过控件自身宽高，进行缩放</div><div class="line">        if (width &gt; w || height &gt; h) &#123;</div><div class="line">            float scaleW = w * 1f / width;</div><div class="line">            float scaleH = h * 1f / height;</div><div class="line">            float scale = Math.min(scaleW, scaleH);</div><div class="line">            // 按比例重置参数</div><div class="line">            mBitmap = scaleBitmap(mBitmap, scale);</div><div class="line">            width = (int) (width * scale);</div><div class="line">            height = (int) (height * scale);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        int i = 0;</div><div class="line">        while (i * CLIP_HEIGHT &lt;= height) &#123;</div><div class="line">            if (i % 2 == 0) &#123;</div><div class="line">                mRect.set(0, i * CLIP_HEIGHT, clipWidth, (i+1) * CLIP_HEIGHT);</div><div class="line">            &#125; else &#123;</div><div class="line">                mRect.set(width - clipWidth, i * CLIP_HEIGHT, width, (i+1) * CLIP_HEIGHT);</div><div class="line">            &#125;</div><div class="line">            // 替换 Region.union 方法</div><div class="line">            mPath.addRect(mRect, Path.Direction.CCW);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        // 因 canvas.clipRegion 方法过时，所以替换成 Path 相关 Api</div><div class="line">        canvas.clipPath(mPath);</div><div class="line">        canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">        if (clipWidth &gt; width) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        clipWidth += 5;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 按比例缩放图片</div><div class="line">     *</div><div class="line">     * @param origin 原图</div><div class="line">     * @param ratio  比例</div><div class="line">     * @return 新的bitmap</div><div class="line">     */</div><div class="line">    private Bitmap scaleBitmap(Bitmap origin, float ratio) &#123;</div><div class="line">        if (origin == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        int width = origin.getWidth();</div><div class="line">        int height = origin.getHeight();</div><div class="line">        Matrix matrix = new Matrix();</div><div class="line">        matrix.preScale(ratio, ratio);</div><div class="line">        Bitmap newBM = Bitmap.createBitmap(origin, 0, 0, width, height, matrix, false);</div><div class="line">        if (newBM.equals(origin)) &#123;</div><div class="line">            return newBM;</div><div class="line">        &#125;</div><div class="line">        origin.recycle();</div><div class="line">        return newBM;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过调用 invalidate() 函数的方式来重复触发 onDraw() 函数，然后在 onDraw() 函数中计算需要裁剪的画布。</p><p>在上述代码中，首先，由于 mPath 对象是每次都复用的，所以，在每次计算裁剪区域前, 都需要调用 mPath.reset() 函数将区域置空。</p><p>其次，根据计算裁剪区域的原理循环计算图片中每条间隔的裁剪区域并添加到 mPath 对象中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while (i * CLIP_HEIGHT &lt;= height) &#123;</div><div class="line">    if (i % 2 == 0) &#123;</div><div class="line">        mRect.set(0, i * CLIP_HEIGHT, clipWidth, (i+1) * CLIP_HEIGHT);</div><div class="line">    &#125; else &#123;</div><div class="line">        mRect.set(width - clipWidth, i * CLIP_HEIGHT, width, (i+1) * CLIP_HEIGHT);</div><div class="line">    &#125;</div><div class="line">    // 替换 Region.union 方法</div><div class="line">    mPath.addRect(mRect, Path.Direction.CCW);</div><div class="line">    i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后，将图片绘制在裁剪过的画布上，并渐变增大裁剪区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canvas.clipPath(mPath);</div><div class="line">canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">clipWidth += 5;</div></pre></td></tr></table></figure></p><p>需要注意的是，当裁剪区域超过图像大小时，表示当前图像已经完全被绘制出来，可以暂停当前的绘制，以免浪费 CPU 资源。</p><p>当图片宽高超过控件自身大小时，裁剪动画效果很差，因此对原图进行缩放并重置参数。其效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-64334c040329d581.gif?imageMogr2/auto-orient/strip" alt="有瑕疵的裁剪动画"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-2cc64f1f2b5f86f5.gif?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>T002 自定义控件 裁剪圆形和圆角头像</title>
    <link href="http://yoursite.com/2019/07/15/Custom%20View/T002%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%A3%81%E5%89%AA%E5%9C%86%E5%BD%A2%E5%92%8C%E5%9C%86%E8%A7%92%E5%A4%B4%E5%83%8F/"/>
    <id>http://yoursite.com/2019/07/15/Custom View/T002 自定义控件 裁剪圆形和圆角头像/</id>
    <published>2019-07-14T16:00:00.000Z</published>
    <updated>2020-01-24T04:35:52.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e55de3cecdfd0cbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas" target="_blank" rel="external">01.5 精通自定义 View 之绘图基础——Canvas</a></p><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><p>利用 clip 系列函数，通过与 Rect、Path、Region 取交、并、差等集合运算来获得最新的画布形状。此处只需要裁处圆形和圆角矩形，使用 Path 类构建即可，并用 clipPath 裁剪画布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Path path = new Path();</div><div class="line">RectF rect = new RectF(50, 50, 240, 200);</div><div class="line">path.addRoundRect(rect, 10, 10, Path.Direction.CCW);</div><div class="line">// float[] radii = &#123;10,15,20,25,30,35,40,45&#125;;</div><div class="line">// path.addRoundRect(rect, radii, Path.Direction.CW);</div><div class="line"></div><div class="line">canvas.clipPath(path);</div></pre></td></tr></table></figure></p><h3 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h3><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class RoundImageView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private Bitmap mBmp;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        // 禁用硬件加速</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPath = new Path();</div><div class="line">        mBmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        int x = mBmp.getWidth() / 2;</div><div class="line">        int y = mBmp.getHeight() / 2;</div><div class="line">        int r = Math.min(x, y);</div><div class="line">        mPath.addCircle(x, y, r, Path.Direction.CCW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在使用 clip 系列函数时，要禁用硬件加速功能。然后利用 BitmapFactory.decodeResource() 函数从本地 res 文件夹中提取一个 Bitmap 文件。接着根据位图文件的大小，构造一条与图像大小相同的圆形路径。</p><h4 id="2-绘制圆形图像"><a href="#2-绘制圆形图像" class="headerlink" title="2. 绘制圆形图像"></a>2. 绘制圆形图像</h4><p>在绘图时，先将画布裁剪成圆形，再将位图画上去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line"></div><div class="line">    canvas.save();</div><div class="line">    canvas.clipPath(mPath);</div><div class="line">    canvas.drawBitmap(mBmp, 0, 0, mPaint);</div><div class="line">    canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4c70e591d12eea7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><h4 id="4-绘制圆角图像"><a href="#4-绘制圆角图像" class="headerlink" title="4. 绘制圆角图像"></a>4. 绘制圆角图像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class RoundImageView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private Bitmap mBmp;</div><div class="line">    private boolean isCircle = false;   // true：圆形图像；false：圆角矩形</div><div class="line"></div><div class="line">    public RoundImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        // 禁用硬件加速</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPath = new Path();</div><div class="line">        mBmp = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">        if (isCircle) &#123;</div><div class="line">            int x = mBmp.getWidth() / 2;</div><div class="line">            int y = mBmp.getHeight() / 2;</div><div class="line">            int r = Math.min(x, y);</div><div class="line">            mPath.addCircle(x, y, r, Path.Direction.CCW);</div><div class="line">        &#125; else &#123;</div><div class="line">            RectF rectF = new RectF();</div><div class="line">            rectF.set(0, 0, mBmp.getWidth(), mBmp.getHeight());</div><div class="line">            mPath.addRoundRect(rectF, 20, 20, Path.Direction.CW);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.save();</div><div class="line">        canvas.clipPath(mPath);</div><div class="line">        canvas.drawBitmap(mBmp, 0, 0, mPaint);</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14186083-51064ec4951773ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆角图像"></p><h3 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h3><p>对上述代码可以进行以下几个方面优化：</p><ul><li>参数可配置：圆形与圆角矩形切换、圆角大小、图片资源等。</li><li>图片缩放至控件大小。</li></ul><p>由于 Android 提供的 ImageView 已经处理好了各种缩放问题，我们可以在它的基础上添加一个显示圆角圆形的功能。<a href="https://xianxiaotao.github.io/2019/07/16/Custom%20View/X001%20%E5%9C%86%E8%A7%92%E5%9C%86%E5%BD%A2%20ImageView/" target="_blank" rel="external">详见博客：圆角圆形ImageView。</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-e55de3cecdfd0cbc.png?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>T001 自定义控件 蜘蛛网状图</title>
    <link href="http://yoursite.com/2019/07/14/Custom%20View/T001%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%9C%98%E8%9B%9B%E7%BD%91%E7%8A%B6%E5%9B%BE/"/>
    <id>http://yoursite.com/2019/07/14/Custom View/T001 自定义控件 蜘蛛网状图/</id>
    <published>2019-07-13T16:00:00.000Z</published>
    <updated>2020-01-16T09:01:32.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-69b3cadcd1005e2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/" target="_blank" rel="external">01.2 精通自定义 View 之绘图基础——路径</a></p><p>从效果图中可以看出，我们要先画出一个网格，默认网格数和边角数都是 6。在代码中，为了简化逻辑，我们会将所有可变的内容，比如画笔颜色、网格数、边角数设为固定值。其实这些值都应该在初始化的时候通过对应的 set 函数设置到自定义控件内部，大家可以自行补充。</p><h3 id="一、初始化"><a href="#一、初始化" class="headerlink" title="一、初始化"></a>一、初始化</h3><p>不要在 onDraw() 函数中创建变量，所以必然会有一个初始化函数，用于在创建控件的时候初始化画笔等参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class SpiderView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mRadarPaint;                  // 蜘蛛网</div><div class="line">    private Paint mRadarLinePaint;              // 蜘蛛网辐射的六根线</div><div class="line">    private Paint mValuePaint;                  // 数据</div><div class="line"></div><div class="line">    private int mRadarPaintColor = 0xFF0099CC;  // 网格默认颜色</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    public SpiderView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * init view</div><div class="line">     * Paint、Path</div><div class="line">     */</div><div class="line">    private void init() &#123;</div><div class="line">        mRadarPaint = generatePaint(mRadarPaintColor, Paint.Style.FILL);</div><div class="line">        mRadarLinePaint = generatePaint(Color.WHITE, Paint.Style.STROKE);</div><div class="line">        mValuePaint = generatePaint(0xAFFF0000, Paint.Style.FILL);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化画笔</div><div class="line">     * @param color 画笔颜色</div><div class="line">     * @param style 画笔样式</div><div class="line">     * @return Paint</div><div class="line">     */</div><div class="line">    private Paint generatePaint(int color, Paint.Style style) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里初始化了三个画笔，其中 mRadarPaint 是用来绘制蜘蛛网格的，类型设置为填充 (也可以设置为描边)；mRadarLinePaint 是用来绘制蜘蛛网格辐射的六根线，白色描边；而 mValuePaint 是用来绘制结果图的，所以设置成带透明的红色画笔，样式为填充。</p><h3 id="二、获得布局中心"><a href="#二、获得布局中心" class="headerlink" title="二、获得布局中心"></a>二、获得布局中心</h3><p>在 onSizeChanged(int w, int h, int oldW, int oldH) 函数中，根据 View 的长、宽，获取整个布局的中心坐标，因为整个雷达都是从这个中心坐标开始绘制的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private float radius;                       // 网格最大半径</div><div class="line">private int centerX;                        // 中心 X</div><div class="line">private int centerY;                        // 中心 Y</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onSizeChanged(int w, int h, int oldW, int oldH) &#123;</div><div class="line">    // 获得布局中心</div><div class="line">    centerX = w / 2;</div><div class="line">    centerY = h / 2;</div><div class="line">    radius = Math.min(w, h) / 2f * 0.8f;</div><div class="line">    postInvalidate();</div><div class="line">    super.onSizeChanged(w, h, oldW, oldH);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道，在控件大小发生变化时，都会通过 onSizeChanged() 函数通知我们当前控件的大小。所以，我们只需要重写 onSizeChanged() 函数，即可得知当前控件的最新大小。</p><p>为了不顶边，将蜘蛛网的半径设置为 Math.min(w, h) / 2f * 0.8f 。</p><p>然后依据绘图中心，分别绘制蜘蛛网格、网格中线、数据图，即可完成整个效果图的绘制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    // 绘制蜘蛛网格</div><div class="line">    drawPolygon(canvas);</div><div class="line">    // 绘制中线</div><div class="line">    drawLines(canvas);</div><div class="line">    // 画数据图</div><div class="line">    drawRegion(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="三、绘制蜘蛛网格"><a href="#三、绘制蜘蛛网格" class="headerlink" title="三、绘制蜘蛛网格"></a>三、绘制蜘蛛网格</h3><p>下面我们就要绘制蜘蛛网格了，效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c1605cd5fc5aca77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><p>很显然，蜘蛛网格是利用 Path 的 moveTo() 和 lineTo() 函数一圈圈画出来的，我们需要计算出每个转折点的位置。比如，计算下图中所标记点的 x, y 坐标。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1ccb35d364a464c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>很明显，标记点在半径的 3/4 位置，而标记点与中心点的连线与 X 轴的夹角为 a，所以由图可得:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = centX + 3/4 * radius * sina;</div><div class="line">y = centY + 3/4 * radius * cosa;</div></pre></td></tr></table></figure></p><p>因为我们共画了 6 个角，所以每个角的度数应该是 360°/6 = 60°。<br>依据上面的原理，列出画蜘蛛网格的代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private int count = 6;                      // 多边形，默认值为 6</div><div class="line">private double angle = 2 * Math.PI / count; // 角度，值为 2π / count，默认</div><div class="line">private int maxValue = 4;                   // 最大值</div><div class="line"></div><div class="line">private void drawPolygon(Canvas canvas) &#123;</div><div class="line">    float r = radius / maxValue;            // r是蜘蛛丝之间的间距</div><div class="line">    for (int i = 1; i &lt;= maxValue; i++) &#123;   // 中心点不用绘制</div><div class="line">        float curR = r * i;                 // 当前半径</div><div class="line">        mPath.reset();</div><div class="line">        for (int j = 0; j &lt; count; j++) &#123;</div><div class="line">            if (j == 0) &#123;</div><div class="line">                mPath.moveTo(centerX + curR, centerY);</div><div class="line">            &#125; else &#123;</div><div class="line">                // 根据半径，计算出蜘蛛丝上每个点的坐标</div><div class="line">                float x = (float) (centerX + curR * Math.cos(angle * j));</div><div class="line">                float y = (float) (centerY + curR * Math.sin(angle * j));</div><div class="line">                mPath.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mPath.close();                      // 闭合路径</div><div class="line">        mRadarPaint.setAlpha(getRadarPaintColor(i));</div><div class="line">        canvas.drawPath(mPath, mRadarPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="四、画网格中线"><a href="#四、画网格中线" class="headerlink" title="四、画网格中线"></a>四、画网格中线</h3><p>在画完蜘蛛网格以后，我们需要画从网格中心到末端的直线，代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void drawLines(Canvas canvas) &#123;</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        mPath.moveTo(centerX, centerY);</div><div class="line">        float x = (float) (centerX + radius * Math.cos(angle * i));</div><div class="line">        float y = (float) (centerY + radius * Math.sin(angle * i));</div><div class="line">        mPath.lineTo(x, y);</div><div class="line">        canvas.drawPath(mPath, mRadarLinePaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1b4ac177fa2e347f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网格中线效果图"></p><p>绘制原理与绘制蜘蛛网格是一样的，先找到各个末端点的坐标，然后画一条从中心点到末端点的连线即可。</p><h3 id="五、画数据图"><a href="#五、画数据图" class="headerlink" title="五、画数据图"></a>五、画数据图</h3><p>绘制数据区域其实也很简单，首先要确定每个数据点的位置。当然，网格线中的每一层网格都应该对应一个数值，在这里为了方便起见，将网格的最大值设为 4，即每一层数值是按 1,2,3,4 分布的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private int maxValue = 4;                   // 最大值</div><div class="line">private double[] data = &#123;2,3,1,3,4,3&#125;;      // 数据</div><div class="line"></div><div class="line">private void drawRegion(Canvas canvas) &#123;</div><div class="line">    mPath.reset();</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        double percent = data[i] / maxValue;</div><div class="line">        float x = (float) (centerX + radius * Math.cos(angle * i) * percent);</div><div class="line">        float y = (float) (centerY + radius * Math.sin(angle * i) * percent);</div><div class="line">        if (i == 0) &#123;</div><div class="line">            mPath.moveTo(x, centerY);</div><div class="line">        &#125; else &#123;</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    canvas.drawPath(mPath, mValuePaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1b41b211cf4a3646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><h3 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.Path;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line"></div><div class="line">public class SpiderView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mRadarPaint;                  // 蜘蛛网</div><div class="line">    private Paint mRadarLinePaint;              // 蜘蛛网辐射的六根线</div><div class="line">    private Paint mValuePaint;                  // 数据</div><div class="line"></div><div class="line">    private int mRadarPaintColor = 0xFF0099CC;  // 网格默认颜色</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    private float radius;                       // 网格最大半径</div><div class="line">    private int centerX;                        // 中心 X</div><div class="line">    private int centerY;                        // 中心 Y</div><div class="line"></div><div class="line">    private int count = 6;                      // 多边形，默认值为 6</div><div class="line">    private double angle = 2 * Math.PI / count; // 角度，值为 2π / count，默认</div><div class="line">    private int maxValue = 4;                   // 最大值</div><div class="line">    private double[] data = &#123;2,3,1,3,4,3&#125;;      // 数据</div><div class="line"></div><div class="line">    public SpiderView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * init view</div><div class="line">     * Paint、Path</div><div class="line">     */</div><div class="line">    private void init() &#123;</div><div class="line">        mRadarPaint = generatePaint(mRadarPaintColor, Paint.Style.FILL);</div><div class="line">        mRadarLinePaint = generatePaint(Color.WHITE, Paint.Style.STROKE);</div><div class="line">        mValuePaint = generatePaint(0xAFFF0000, Paint.Style.FILL);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldW, int oldH) &#123;</div><div class="line">        // 获得布局中心</div><div class="line">        centerX = w / 2;</div><div class="line">        centerY = h / 2;</div><div class="line">        radius = Math.min(w, h) / 2f * 0.8f;</div><div class="line">        postInvalidate();</div><div class="line">        super.onSizeChanged(w, h, oldW, oldH);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 绘制蜘蛛网格</div><div class="line">        drawPolygon(canvas);</div><div class="line">        // 绘制中线</div><div class="line">        drawLines(canvas);</div><div class="line">        // 画数据图</div><div class="line">        drawRegion(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawPolygon(Canvas canvas) &#123;</div><div class="line">        float r = radius / maxValue;            // r是蜘蛛丝之间的间距</div><div class="line">        for (int i = 1; i &lt;= maxValue; i++) &#123;   // 中心点不用绘制</div><div class="line">            float curR = r * i;                 // 当前半径</div><div class="line">            mPath.reset();</div><div class="line">            for (int j = 0; j &lt; count; j++) &#123;</div><div class="line">                if (j == 0) &#123;</div><div class="line">                    mPath.moveTo(centerX + curR, centerY);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // 根据半径，计算出蜘蛛丝上每个点的坐标</div><div class="line">                    float x = (float) (centerX + curR * Math.cos(angle * j));</div><div class="line">                    float y = (float) (centerY + curR * Math.sin(angle * j));</div><div class="line">                    mPath.lineTo(x, y);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mPath.close();                      // 闭合路径</div><div class="line">            mRadarPaint.setAlpha(getRadarPaintColor(i));</div><div class="line">            canvas.drawPath(mPath, mRadarPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawLines(Canvas canvas) &#123;</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            mPath.reset();</div><div class="line">            mPath.moveTo(centerX, centerY);</div><div class="line">            float x = (float) (centerX + radius * Math.cos(angle * i));</div><div class="line">            float y = (float) (centerY + radius * Math.sin(angle * i));</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">            canvas.drawPath(mPath, mRadarLinePaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawRegion(Canvas canvas) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            double percent = data[i] / maxValue;</div><div class="line">            float x = (float) (centerX + radius * Math.cos(angle * i) * percent);</div><div class="line">            float y = (float) (centerY + radius * Math.sin(angle * i) * percent);</div><div class="line">            if (i == 0) &#123;</div><div class="line">                mPath.moveTo(x, centerY);</div><div class="line">            &#125; else &#123;</div><div class="line">                mPath.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        canvas.drawPath(mPath, mValuePaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化画笔</div><div class="line">     * @param color 画笔颜色</div><div class="line">     * @param style 画笔样式</div><div class="line">     * @return Paint</div><div class="line">     */</div><div class="line">    private Paint generatePaint(int color, Paint.Style style) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 由内到外，增加透明度</div><div class="line">     * @param i 第几个网格，从中心点算起</div><div class="line">     * @return int alpha 值</div><div class="line">     */</div><div class="line">    private int getRadarPaintColor(int i) &#123;</div><div class="line">        if (i &gt; count || i &lt; 1) &#123;</div><div class="line">            return 0xFF;</div><div class="line">        &#125;</div><div class="line">        int alpha = Color.alpha(mRadarPaintColor);</div><div class="line">        int colorStep = alpha / (maxValue - 1) - 10;</div><div class="line">        alpha = alpha - colorStep * (i - 1);</div><div class="line">        return alpha;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-69b3cadcd1005e2b.png?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>13.2 精通自定义 View 之控件高级属性——Window 与 WindowManager</title>
    <link href="http://yoursite.com/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/"/>
    <id>http://yoursite.com/2019/07/13/Custom View/13.2 精通自定义 View 之控件高级属性——Window 与 WindowManager/</id>
    <published>2019-07-12T18:00:00.000Z</published>
    <updated>2019-10-23T06:33:54.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>Window 表示窗口，在某些特殊的时候，比如需要在桌面或者锁屏上显示一些类似悬浮窗的效果，就需要用到 Window。Android 中所有的视图都是通过 Window 来呈现的，不管是 Activity、Dialog 还是 Toast，它们的视图实际上都是附加在 Window 上的。而 WindowManager 则提供了对这些 Window 的统一管理功能。</p><p><div id="jump1"></div></p><h3 id="13-2-1-Window-与-WindowManager-的联系"><a href="#13-2-1-Window-与-WindowManager-的联系" class="headerlink" title="13.2.1 Window 与 WindowManager 的联系"></a>13.2.1 Window 与 WindowManager 的联系</h3><p>为了分析 Window 的工作机制，我们需要了解如何使用 WindowManager 来添加一个 Window。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WindowManager manager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</div><div class="line">WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams(width, height, type, flags, format);</div><div class="line">manager.addView(btn, layoutParams);</div></pre></td></tr></table></figure></p><p>上面的伪代码看起来非常简单，在构建 WindowManager.LayoutParams 时，其中的 type 和 flags 参数比较重要。</p><p>flags 参数有很多选项，用来控制 Window 的显示特性。我们来看几个常用的选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int FLAG_NOT_FOCUSABLE = 0x00000008;</div></pre></td></tr></table></figure></p><p>表示此 Window 不需要获取焦点，不接收各种输入时间，此标记会同时启用 FLAG_NOT_TOUCH_MODEL，最终事件会直接传递给下层具有焦点的 Window。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int FLAG_NOT_TOUCH_MODEL = 0x00000020;</div></pre></td></tr></table></figure></p><p>自己 Window 区域内的事件自己处理；自己 Window 区域外的事件传递给底层 Window 处理。一般这个选项会默认开启，否则其他 Window 无法接收事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int FLAG_SHOW_WHEN_LOCKED = 0x00080000;</div></pre></td></tr></table></figure></p><p>可以让此 Window 显示在锁屏上。</p><p>type 参数是 int 类型的，表示 Window 的类型。Window 有三种类型：应用 Window、子 Window 和系统 Window。应用 Window 对应着一个 Activity。子 Window 不能独立存在，它需要附属在特定的父 Window 中，比如 Dialog 就是一个子 Window。系统 Window 是需要声明权限才能创建的，比如 Toast 和系统状态栏都是系统 Window。</p><p>Window 是分层的，层级大的 Window 会覆盖在层级小的 Window 上面。</p><ul><li>应用 Window 的层级范围：1 ~ 99。</li><li>子 Window 的层级范围：1000 ~ 1999。</li><li>系统 Window 的层级范围：2000 ~ 2999。</li></ul><p>type 参数就对应这些数字。如果想让 Window 置于顶层，则采用较大的层级即可；如果是系统类型的 Window，则需要在 AndroidMenifest.xml 中配置如下权限声明，否则会报权限不足的错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;</div></pre></td></tr></table></figure></p><p>WindowManager 提供的功能很简单，常用的只有三个方法，即添加 View、更新 View 和删除 View。这三个方法定义在 ViewManager 中，而 WindowManager 继承自 ViewManager。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SystemService(Context.WINDOW_SERVICE)</div><div class="line">public interface WindowManager extends ViewManager &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface ViewManager &#123;</div><div class="line">    public void addView(View view, ViewGroup.LayoutParams params);</div><div class="line">    public void updateViewLayout(View view, ViewGroup.LayoutParams params);</div><div class="line">    public void removeView(View view);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="13-2-2-示例：悬浮窗"><a href="#13-2-2-示例：悬浮窗" class="headerlink" title="13.2.2 示例：悬浮窗"></a>13.2.2 示例：悬浮窗</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4cd1f019e2f0d37f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener, View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private ImageView mImageView;</div><div class="line">    private WindowManager.LayoutParams mLayoutParams;</div><div class="line">    private WindowManager mWindowManager;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">            Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">            startActivityForResult(intent, 100);</div><div class="line">        &#125;</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initView() &#123;</div><div class="line">        findViewById(R.id.add_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.rmv_btn).setOnClickListener(this);</div><div class="line">        mWindowManager = (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        if (v.getId() == R.id.add_btn) &#123;</div><div class="line">            mImageView = new ImageView(this);</div><div class="line">            mImageView.setBackgroundResource(R.mipmap.ic_launcher_round);</div><div class="line">            mLayoutParams = new WindowManager.LayoutParams(</div><div class="line">                    WindowManager.LayoutParams.WRAP_CONTENT,</div><div class="line">                    WindowManager.LayoutParams.WRAP_CONTENT,</div><div class="line">                    2099,</div><div class="line">                    WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class="line">                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class="line">                    | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED,</div><div class="line">                    PixelFormat.TRANSPARENT );</div><div class="line">            mLayoutParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;</div><div class="line">            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class="line">            mLayoutParams.x = 0;</div><div class="line">            mLayoutParams.y = 300;</div><div class="line">            mImageView.setOnTouchListener(this);</div><div class="line">            mWindowManager.addView(mImageView, mLayoutParams);</div><div class="line">        &#125; else if (v.getId() == R.id.rmv_btn) &#123;</div><div class="line">            if (mWindowManager != null &amp;&amp; mImageView != null) &#123;</div><div class="line">                mWindowManager.removeViewImmediate(mImageView);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        int rawX = (int) event.getRawX();</div><div class="line">        int rawY = (int) event.getRawY();</div><div class="line"></div><div class="line">        if (event.getAction() == MotionEvent.ACTION_MOVE) &#123;</div><div class="line">            mLayoutParams.x = rawX;</div><div class="line">            mLayoutParams.y = rawY;</div><div class="line">            mWindowManager.updateViewLayout(mImageView, mLayoutParams);</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) &#123;</div><div class="line">        super.onActivityResult(requestCode, resultCode, data);</div><div class="line">        if (requestCode == 100) &#123;</div><div class="line">            initView();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;Window 表示窗口，在某些特殊的时候，比如需要在桌面或者锁屏上显示一些类似悬浮窗的效果，就需要用到 Window。Android 中所有的视图都是通过 Window 来呈现的，不
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>13.1 精通自定义 View 之控件高级属性——GestureDetector 手势检测</title>
    <link href="http://yoursite.com/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/"/>
    <id>http://yoursite.com/2019/07/13/Custom View/13.1 精通自定义 View 之控件高级属性——GestureDetector 手势检测/</id>
    <published>2019-07-12T17:00:00.000Z</published>
    <updated>2019-10-23T04:00:49.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="13-1-1-概述"><a href="#13-1-1-概述" class="headerlink" title="13.1.1 概述"></a>13.1.1 概述</h3><p>GestureDetector，手势检测类，通过这个类可以识别很多手势。在识别出手势之后，具体的事物处理则交由程序员自己来实现。</p><p>此类提供了两个接口（OnGestureListener、OnDoubleTapListener）和一个外部类（SimpleOnGestureListener）。这个外部类其实是两个接口中所有函数的集成，它包含了这两个接口里所有必须实现的函数，而且都已经被重写，但所有函数体都是空的。该类是一个静态类，程序员可以在外部继承这个类，重写里面的手势处理函数。</p><p><div id="jump2"></div></p><h3 id="13-1-2-GestureDetector-OnGestureListener-接口"><a href="#13-1-2-GestureDetector-OnGestureListener-接口" class="headerlink" title="13.1.2 GestureDetector.OnGestureListener 接口"></a>13.1.2 GestureDetector.OnGestureListener 接口</h3><h4 id="1-基本讲解"><a href="#1-基本讲解" class="headerlink" title="1. 基本讲解"></a>1. 基本讲解</h4><p>如果我们写一个类并继承自 OnGestureListener，则会提示有几个必须重写的函数。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onDown(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onShowPress(MotionEvent e) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onLongPress(MotionEvent e) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这些函数在什么情况下才会被触发呢？</p><ul><li>onDown(MotionEvent e)：用户按下屏幕就会触发该函数。</li><li>onShowPress(MotionEvent e)：如果按下的时间超过瞬间，而且在按下的时候没有松开或者是拖动的，该函数就会被触发。</li><li>onLongPress(MotionEvent e)：长按触摸屏，超过一定时长，就会触发这个函数。</li></ul><p>触发顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onShowPress —&gt; onLongPress</div></pre></td></tr></table></figure></p><ul><li>onSingleTapUp(MotionEvent e)：一次单独的轻击抬起操作，也就是轻击一下屏幕，立刻抬起来，才会触发这个函数。当然，如果除 down 以外还有其他操作，就不再算是单独操作了，也就不会触发这个函数。</li></ul><p>单击一下非常快的（不滑动）Touchup，触发顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onSingleTapUp —&gt; onSingleTapConfirmed</div></pre></td></tr></table></figure></p><p>单击一下稍微慢一点的（不滑动）Touchup，触发顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onShowPress —&gt; onSingleTapUp —&gt; onSingleTapConfirmed</div></pre></td></tr></table></figure></p><ul><li>onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)：滑屏，用户按下触摸屏、快速移动后松开，由一个 MotionEvent ACTION_DOWN、多个 ACTION_MOVE、一个 ACTION_UP 触发。</li><li>onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)：在屏幕上拖动事件。无论是用手拖动 View，还是以抛的动作滚动，都会多次触发这个函数，在 ACTION_MOVE 动作发生时就会触发该函数。</li></ul><p>滑屏，即手指出动屏幕后，稍微滑动后立即松开，触发顺序为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onScroll —&gt; onScroll —&gt; onScroll —&gt; ... —&gt; onFling</div></pre></td></tr></table></figure></p><p>拖动，触发顺序为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onScroll —&gt; onScroll —&gt; onFling</div></pre></td></tr></table></figure></p><p>可见，无论是滑屏还是拖动，影响的只是中间 onScroll 被触发的数量而已，最终都会触发 onFling 事件。</p><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><p>要使用 GestureDetector，有四步要走。<br>1）创建 OnGestureListener() 监听函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 可以构造实例</div><div class="line">GestureDetector.OnGestureListener listener = new GestureDetector.OnGestureListener() &#123;&#125;;</div><div class="line"></div><div class="line">// 也可以构造类</div><div class="line">private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2）创建 GestureDetector 实例 mGestureDetector。<br>构造函数有以下几个，根据需要选择即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GestureDetector(OnGestureListener listener)</div><div class="line">GestureDetector(Context context, OnGestureListener listener)</div><div class="line">GestureDetector(Context context, OnGestureListener listener, Handler handler)</div><div class="line">GestureDetector(Context context, OnGestureListener listener, Handler handler, boolean unused)</div></pre></td></tr></table></figure></p><p>3）在 onTouch(View v, MotionEvent event) 中进行拦截。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">    return mGestureDetector.onTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4）绑定控件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView tv = findViewById(R.id.tv);</div><div class="line">tv.setOnTouchListener(this);</div></pre></td></tr></table></figure></p><p>完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener &#123;</div><div class="line"></div><div class="line">    private GestureDetector mGestureDetector;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mGestureDetector = new GestureDetector(new GestureListener());</div><div class="line"></div><div class="line">        TextView tv = findViewById(R.id.tv);</div><div class="line">        tv.setOnTouchListener(this);</div><div class="line">        tv.setFocusable(true);</div><div class="line">        tv.setClickable(true);</div><div class="line">        tv.setLongClickable(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        return mGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDown(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDown&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onShowPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onShowPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onSingleTapUp&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onScroll&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onLongPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onLongPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onFling&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="13-1-3-GestureDetector-OnDoubleTapListener-接口"><a href="#13-1-3-GestureDetector-OnDoubleTapListener-接口" class="headerlink" title="13.1.3 GestureDetector.OnDoubleTapListener 接口"></a>13.1.3 GestureDetector.OnDoubleTapListener 接口</h3><h4 id="1-构建"><a href="#1-构建" class="headerlink" title="1. 构建"></a>1. 构建</h4><p>有两种方式设置双击监听。<br>方法一：新建一个类，同时派生自 OnGestureListener 和 OnDoubleTapListener。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private class GestureListener implements GestureDetector.OnGestureListener,  </div><div class="line">        GestureDetector.OnDoubleTapListener &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法二：<br>使用 GestureDetector.setOnDoubleTapListener() 函数设置双击监听。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 构建 GestureDetector 实例</div><div class="line">mGestureDetector = new GestureDetector(new GestureListener());</div><div class="line"></div><div class="line">private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 设置双击监听</div><div class="line">mGestureDetector.setOnDoubleTapListener(new DoubleTapListener());</div><div class="line">private class DoubleTapListener implements GestureDetector.OnDoubleTapListener &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>无论方法一还是方法二，都需要派生自 GestureDetector.OnGestureListener。</p><h4 id="2-函数讲解"><a href="#2-函数讲解" class="headerlink" title="2. 函数讲解"></a>2. 函数讲解</h4><p>先来看下 OnDoubleTapListener 接口必须重写的三个函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private class DoubleTapListener implements GestureDetector.OnDoubleTapListener &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onSingleTapConfirmed(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onDoubleTap(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onDoubleTapEvent(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>onSingleTapConfirmed(MotionEvent e)：单击事件，用来判定该次单击是 SingleTap，而不是 DoubleTap。如果连续单击两次，就是 DoubleTap 手势；如果只单击一次，系统等待一段时间后没有收到第二次单击，则判定该次单击为 SingleTap，而不是 DoubleTap，然后触发 SingleTapConfirm 事件。触发顺序是：onDown —&gt; onSingleTapUp —&gt; onSingleTapConfirmed。有这样一个函数 onSingleTapUp()，它和 onSingleTapConfirmed() 函数容易混淆。二者的区别是：对于 onSingleTapUp() 函数来说，只要手抬起就会被触发；而对于 onSingleTapConfirmed() 函数来说，如果双击，则该函数就不会被触发。</li><li>onDoubleTap(MotionEvent e)：双击事件。</li><li>onDoubleTapEvent(MotionEvent e)：双击间隔中发生的动作。指在触发 onDoubleTap 以后，在双击之间发生的其他动作，包含 down、up 和 move 事件。</li></ul><p>在 13.1.2 节例子的基础上，添加双击监听，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener &#123;</div><div class="line"></div><div class="line">    private GestureDetector mGestureDetector;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mGestureDetector = new GestureDetector(new GestureListener());</div><div class="line">        mGestureDetector.setOnDoubleTapListener(new DoubleTapListener());</div><div class="line"></div><div class="line">        TextView tv = findViewById(R.id.tv);</div><div class="line">        tv.setOnTouchListener(this);</div><div class="line">        tv.setFocusable(true);</div><div class="line">        tv.setClickable(true);</div><div class="line">        tv.setLongClickable(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        return mGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDown(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDown&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onShowPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onShowPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onSingleTapUp&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onScroll&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onLongPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onLongPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onFling&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class DoubleTapListener implements GestureDetector.OnDoubleTapListener &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onSingleTapConfirmed(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onSingleTapConfirmed&quot;);</div><div class="line">            Toast.makeText(MainActivity.this, &quot;onSingleTapConfirmed&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDoubleTap(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDoubleTap&quot;);</div><div class="line">            Toast.makeText(MainActivity.this, &quot;onDoubleTap&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDoubleTapEvent(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDoubleTapEvent:&quot; + e.getAction());</div><div class="line">            Toast.makeText(MainActivity.this, &quot;onDoubleTapEvent&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>双击所对应的事件触发顺序如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d8ed3d75951e7a32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>第二次单击时，先触发 onDoubleTap，再触发 onDown。</li><li>在触发 onDoubleTap 以后，就开始触发 onDoubleTapEvent。onDoubleTapEvent 后面的数字代表当前的事件，0 代表 ACTION_DOWN，1 代表 ACTION_UP，2 代表 ACTION_MOVE。</li></ul><p>轻轻单击一下，对应的事件触发顺序如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6662fcd81e5a2fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump4"></div></p><h3 id="13-1-4-GestureDetector-SimpleOnGestureListener-类"><a href="#13-1-4-GestureDetector-SimpleOnGestureListener-类" class="headerlink" title="13.1.4 GestureDetector.SimpleOnGestureListener 类"></a>13.1.4 GestureDetector.SimpleOnGestureListener 类</h3><p>SimpleOnGestureListener 类与 OnGestureListener 和 OnDoubleTapListener 接口的不同之处在于：<br>1）这是一个类，在它的基础上新建类，要用 extends 派生，而不能用 implements 继承。<br>2）OnGestureListener 和 OnDoubleTapListener 接口里的函数都是被强制重写的，即使用不到也要重写出来一个空函数；而在 SimpleOnGestureListener 类的实例或派生类中不必如此，可以根据情况，用到哪个函数就重写哪个函数，因为 SimpleOnGestureListener 类本身已经实现了这两个接口中的所有函数，只是里面全是空的而已。</p><p>下面利用 SimpleOnGestureListener 类来重新实现前面的几个效果，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener &#123;</div><div class="line"></div><div class="line">    private GestureDetector mGestureDetector;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mGestureDetector = new GestureDetector(new XSimpleGestureListener());</div><div class="line"></div><div class="line">        TextView tv = findViewById(R.id.tv);</div><div class="line">        tv.setOnTouchListener(this);</div><div class="line">        tv.setFocusable(true);</div><div class="line">        tv.setClickable(true);</div><div class="line">        tv.setLongClickable(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        return mGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class XSimpleGestureListener extends GestureDetector.SimpleOnGestureListener &#123;</div><div class="line"></div><div class="line">        /***** OnGestureListener 的函数 *****/</div><div class="line">        public boolean onDown(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onShowPress(MotionEvent e) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onLongPress(MotionEvent e) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /***** OnDoubleTapListener 的函数 *****/</div><div class="line">        public boolean onDoubleTap(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onDoubleTapEvent(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onSingleTapConfirmed(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump5"></div></p><h3 id="13-1-5-onFling-函数的应用"><a href="#13-1-5-onFling-函数的应用" class="headerlink" title="13.1.5 onFling() 函数的应用"></a>13.1.5 onFling() 函数的应用</h3><p>可以利用 onFling() 函数来识别当前用户是在左滑还是在右滑。先来看一下 onFling() 函数的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)</div></pre></td></tr></table></figure></p><p>参数：</p><ul><li>e1：第一个 ACTION_DOWN MotionEvent。</li><li>e2：最后一个 ACTION_DOWN MotionEvent。</li><li>velocityX：X 轴上的移动速度，单位为像素/秒。</li><li>velocityY：Y 轴上的移动速度，单位为像素/秒。</li></ul><p>实现的功能：当用户向左滑动距离超过 100 像素，且滑动速度超过 100 像素/秒时，即判断为向左滑动；向右同理。核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private class XSimpleGestureListener extends GestureDetector.SimpleOnGestureListener &#123;</div><div class="line"></div><div class="line">    final int FLING_MIN_DISTANCE = 100;</div><div class="line">    final int FLING_MIN_VELOCITY = 100;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">        // 向左滑</div><div class="line">        if (e1.getX() - e2.getX() &gt; FLING_MIN_DISTANCE</div><div class="line">                &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;Fling left&quot;);</div><div class="line">        &#125;</div><div class="line">        // 向右滑</div><div class="line">        else if (e2.getX() - e1.getX() &gt; FLING_MIN_DISTANCE</div><div class="line">                &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;Fling right&quot;);</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;div id=&quot;jump1&quot;&gt;&lt;/div&gt;&lt;/p&gt;
&lt;h3 id=&quot;13-1-1-概述&quot;&gt;&lt;a href=&quot;#13-1-1-概述&quot; class=&quot;headerlink&quot; title
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>12.3 精通自定义 View 之封装控件——实现 FlowLayout 容器</title>
    <link href="http://yoursite.com/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/"/>
    <id>http://yoursite.com/2019/07/12/Custom View/12.3 精通自定义 View 之封装控件——实现 FlowLayout 容器/</id>
    <published>2019-07-11T19:00:00.000Z</published>
    <updated>2019-11-01T06:52:29.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3322140af46dbd6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FlowLayout 容器效果图"></p><p><div id="jump1"></div></p><h3 id="12-3-1-XML-布局"><a href="#12-3-1-XML-布局" class="headerlink" title="12.3.1 XML 布局"></a>12.3.1 XML 布局</h3><p>先定义一个 style 标签，这是为 FlowLayout 中的 TextView 定义的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    ...</div><div class="line">    &lt;style name=&quot;text_flag&quot;&gt;</div><div class="line">        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_margin&quot;&gt;4dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:background&quot;&gt;@drawable/flag&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>/res/drawable/flag.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;rectangle&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">    &lt;padding</div><div class="line">        android:top=&quot;5dp&quot;</div><div class="line">        android:bottom=&quot;5dp&quot;</div><div class="line">        android:left=&quot;10dp&quot;</div><div class="line">        android:right=&quot;10dp&quot;/&gt;</div><div class="line">    &lt;corners android:radius=&quot;30dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p>act_main.xml 的布局代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.FlowLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;Welcome&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;IT 工程师&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;我真是可以的&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;你觉得呢&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;不要只知道挣钱&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;努力 ing&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;I thick i can&quot;/&gt;</div><div class="line">    &lt;/com.xxt.xtest.FlowLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="12-3-2-提取-margin-值与重写-onMeasure-函数"><a href="#12-3-2-提取-margin-值与重写-onMeasure-函数" class="headerlink" title="12.3.2 提取 margin 值与重写 onMeasure() 函数"></a>12.3.2 提取 margin 值与重写 onMeasure() 函数</h3><h4 id="1-提取-margin-值"><a href="#1-提取-margin-值" class="headerlink" title="1. 提取 margin 值"></a>1. 提取 margin 值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class FlowLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateLayoutParams(LayoutParams p) &#123;</div><div class="line">        return new MarginLayoutParams(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutParams generateLayoutParams(AttributeSet attrs) &#123;</div><div class="line">        return new MarginLayoutParams(getContext(), attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateDefaultLayoutParams() &#123;</div><div class="line">        return new MarginLayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-重写-onMeasure-函数"><a href="#2-重写-onMeasure-函数" class="headerlink" title="2. 重写 onMeasure() 函数"></a>2. 重写 onMeasure() 函数</h4><p>要实现 FlowLayout，必然涉及下面几个问题。<br><strong>1）何时换行</strong><br>从效果图中可以看到，FlowLayout 的布局是一行行的，如果当期已经放不下一个控件了，就把这个控件移到下一行显示。所以需要一个变量来计算当前行已经占据的宽度，以判断剩下的空间是否还能容得下下一个控件。<br><strong>2）如何得到 FlowLayout 的宽度</strong><br>FlowLayout 的宽度是所有行宽度的最大值，所以我们要记录每一行所占据的宽度值，进而找到所有值中的最大值。<br><strong>3）如何得到 FlowLayout 的高度</strong><br>FlowLayout 的高度是每一行高度的总和，而每一行的高度则取该行中所有控件高度的最大值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">    int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">    int lineWidth = 0;      // 记录每一行的宽度</div><div class="line">    int lineHeight = 0;     // 记录每一行的高度</div><div class="line">    int width = 0;          // 记录整个 FlowLayout 的宽度</div><div class="line">    int height = 0;         // 记录整个 FlowLayout 的高度</div><div class="line"></div><div class="line">    int count = getChildCount();</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        // 计算控件的宽高时，要加上上下左右的 margin 值</div><div class="line">        MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">        int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">        int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line"></div><div class="line">        if (lineWidth + childWidth &gt; measureWidth) &#123;</div><div class="line">            // 需要换行</div><div class="line">            width = Math.max(lineWidth, childWidth);</div><div class="line">            height += lineHeight;</div><div class="line">            // 当前行放不下当前控件，而将此控件调到下一行</div><div class="line">            // 所以将此控件的高度和宽度初始化给 lineWidth、lineHeight</div><div class="line">            lineWidth = childWidth;</div><div class="line">            lineHeight = childHeight;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 否则累加值 lineWidth，lineHeight 并取最大高度</div><div class="line">            lineWidth += childWidth;</div><div class="line">            lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 因为最后一行是不会超出 width 范围的，所以需要单独处理</div><div class="line">        if (i == count - 1) &#123;</div><div class="line">            width = Math.max(width, lineWidth);</div><div class="line">            height += lineHeight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">            (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-重写-onLayout-函数——布局所有子控件"><a href="#3-重写-onLayout-函数——布局所有子控件" class="headerlink" title="3. 重写 onLayout() 函数——布局所有子控件"></a>3. 重写 onLayout() 函数——布局所有子控件</h4><p>在 onLayout() 函数中需要一个个布局子控件。由于控件要后移和换行，所以我们要标记当前控件的 top 坐标和 left 坐标。然后计算每个控件的 top 坐标和 left 坐标，再调用 layout(int left, int top, int right, int bottom)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    int count = getChildCount();</div><div class="line">    int lineWidth = 0;      // 累加当前行的行宽</div><div class="line">    int lineHeight = 0;     // 当前行的行高</div><div class="line">    int top = 0, left = 0;  // 当前控件的 top 坐标和 left 坐标</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">        int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">        int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line">        if (childWidth + lineWidth &gt; getMeasuredWidth()) &#123;</div><div class="line">            // 如果换行，则当前控件将放到下一行，从最左边开始，所以 left 就是 0；</div><div class="line">            // 而 top 则需要加上上一行的行高，才是这个控件的 top 坐标</div><div class="line">            top += lineHeight;</div><div class="line">            left = 0;</div><div class="line">            lineHeight = childHeight;</div><div class="line">            lineWidth = childWidth;</div><div class="line">        &#125; else &#123;</div><div class="line">            lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">            lineWidth += childWidth;</div><div class="line">        &#125;</div><div class="line">        // 计算 childView 的 left、top、right、bottom</div><div class="line">        int lc = left + lp.leftMargin;</div><div class="line">        int tc = top + lp.topMargin;</div><div class="line">        int rc = lc + child.getMeasuredWidth();</div><div class="line">        int bc = tc + child.getMeasuredHeight();</div><div class="line">        child.layout(lc, tc, rc, bc);</div><div class="line">        // 将 left 置为下一个子控件的起始点</div><div class="line">        left += childWidth;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="12-3-3-完整代码"><a href="#12-3-3-完整代码" class="headerlink" title="12.3.3 完整代码"></a>12.3.3 完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">public class FlowLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    public FlowLayout(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">        int lineWidth = 0;      // 记录每一行的宽度</div><div class="line">        int lineHeight = 0;     // 记录每一行的高度</div><div class="line">        int width = 0;          // 记录整个 FlowLayout 的宽度</div><div class="line">        int height = 0;         // 记录整个 FlowLayout 的高度</div><div class="line"></div><div class="line">        int count = getChildCount();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">            // 计算控件的宽高时，要加上上下左右的 margin 值</div><div class="line">            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line"></div><div class="line">            if (lineWidth + childWidth &gt; measureWidth) &#123;</div><div class="line">                // 需要换行</div><div class="line">                width = Math.max(lineWidth, childWidth);</div><div class="line">                height += lineHeight;</div><div class="line">                // 当前行放不下当前控件，而将此控件调到下一行</div><div class="line">                // 所以将此控件的高度和宽度初始化给 lineWidth、lineHeight</div><div class="line">                lineWidth = childWidth;</div><div class="line">                lineHeight = childHeight;</div><div class="line">            &#125; else &#123;</div><div class="line">                // 否则累加值 lineWidth，lineHeight 并取最大高度</div><div class="line">                lineWidth += childWidth;</div><div class="line">                lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 因为最后一行是不会超出 width 范围的，所以需要单独处理</div><div class="line">            if (i == count - 1) &#123;</div><div class="line">                width = Math.max(width, lineWidth);</div><div class="line">                height += lineHeight;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">                (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int count = getChildCount();</div><div class="line">        int lineWidth = 0;      // 累加当前行的行宽</div><div class="line">        int lineHeight = 0;     // 当前行的行高</div><div class="line">        int top = 0, left = 0;  // 当前控件的 top 坐标和 left 坐标</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line">            if (childWidth + lineWidth &gt; getMeasuredWidth()) &#123;</div><div class="line">                // 如果换行，则当前控件将放到下一行，从最左边开始，所以 left 就是 0；</div><div class="line">                // 而 top 则需要加上上一行的行高，才是这个控件的 top 坐标</div><div class="line">                top += lineHeight;</div><div class="line">                left = 0;</div><div class="line">                lineHeight = childHeight;</div><div class="line">                lineWidth = childWidth;</div><div class="line">            &#125; else &#123;</div><div class="line">                lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">                lineWidth += childWidth;</div><div class="line">            &#125;</div><div class="line">            // 计算 childView 的 left、top、right、bottom</div><div class="line">            int lc = left + lp.leftMargin;</div><div class="line">            int tc = top + lp.topMargin;</div><div class="line">            int rc = lc + child.getMeasuredWidth();</div><div class="line">            int bc = tc + child.getMeasuredHeight();</div><div class="line">            child.layout(lc, tc, rc, bc);</div><div class="line">            // 将 left 置为下一个子控件的起始点</div><div class="line">            left += childWidth;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateLayoutParams(LayoutParams p) &#123;</div><div class="line">        return new MarginLayoutParams(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutParams generateLayoutParams(AttributeSet attrs) &#123;</div><div class="line">        return new MarginLayoutParams(getContext(), attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateDefaultLayoutParams() &#123;</div><div class="line">        return new MarginLayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-3322140af46dbd6a.png?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
</feed>
