<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>先小涛</title>
  
  <subtitle>我至诚我道</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2020-03-07T18:50:06.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>先小涛</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>ANDROID 博客总目录</title>
    <link href="http://yoursite.com/9999/01/01/0%20ANDROID%20%E5%8D%9A%E5%AE%A2%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/9999/01/01/0 ANDROID 博客目录/</id>
    <published>9998-12-31T16:00:00.000Z</published>
    <updated>2020-03-07T18:50:06.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>ANDROID 博客总目录<br>JAVA、DESIGN PATTERN、ANDROID、CUSTOM VIEW …</p><details><br><summary><strong>2 DESIGN PATTERN</strong></summary><br><br></details><hr><details><br><summary><strong>1 JAVA</strong></summary><br><a href="https://xianxiaotao.github.io/1900/01/01/JAVA/01%20泛型详解/" target="_blank" rel="external">01 泛型详解</a><br><a href="https://xianxiaotao.github.io/1900/01/02/JAVA/02%20反射一：基本类周边信息获取/" target="_blank" rel="external">02 反射一：基本类周边信息获取</a><br><a href="">04 反射二：泛型相关周边信息获取</a><br><a href="">05 反射三：类内部信息获取</a><br></details>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;ANDROID 博客总目录&lt;br&gt;JAVA、DESIGN PATTERN、ANDROID、CUSTOM VIEW …&lt;/p&gt;
&lt;details&gt;&lt;br&gt;&lt;summary&gt;&lt;stron
      
    
    </summary>
    
    
      <category term="CATALOG" scheme="http://yoursite.com/categories/CATALOG/"/>
    
    
      <category term="CATALOG" scheme="http://yoursite.com/tags/CATALOG/"/>
    
  </entry>
  
  <entry>
    <title>精通 Android 自定义 View 目录</title>
    <link href="http://yoursite.com/2200/01/01/Custom%20View/00%20Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%9B%AE%E5%BD%95/"/>
    <id>http://yoursite.com/2200/01/01/Custom View/00 Android 自定义控件 目录/</id>
    <published>2199-12-31T16:00:00.000Z</published>
    <updated>2019-11-05T00:49:35.000Z</updated>
    
    <content type="html"><![CDATA[<p>本篇从自定义控件的动画、绘图、视图三方面入手，分别讲解与自定义控件相关的各种知识，给大家系统的梳理相关知识。不仅适合 Android 初、中级水平从业者，也适合高水平从业者查漏补缺使用。</p><p>内容摘自启舰所著的书籍《Android 自定义控件开发入门与实践》。</p><h2 id="第1章-绘图基础"><a href="#第1章-绘图基础" class="headerlink" title="第1章  绘图基础"></a>第1章  绘图基础</h2><h3 id="1-1-基本图形绘制"><a href="#1-1-基本图形绘制" class="headerlink" title="1.1 基本图形绘制"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/" target="_blank" rel="external">1.1 基本图形绘制</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump1" target="_blank" rel="external">1.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump2" target="_blank" rel="external">1.1.2 画笔的基本设置</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump3" target="_blank" rel="external">1.1.3 Canvas使用基础</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump4" target="_blank" rel="external">1.1.4 Rect与RectF</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump5" target="_blank" rel="external">1.1.5 Color</a></p><h3 id="1-2-路径"><a href="#1-2-路径" class="headerlink" title="1.2 路径"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/" target="_blank" rel="external">1.2 路径</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump1" target="_blank" rel="external">1.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump2" target="_blank" rel="external">1.2.2 直线路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump3" target="_blank" rel="external">1.2.3 弧线路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump4" target="_blank" rel="external">1.2.4 addXXX系列函数</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump5" target="_blank" rel="external">1.2.5 填充模式</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump6" target="_blank" rel="external">1.2.6 重置路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump7" target="_blank" rel="external">1.2.7 示例:蜘蛛网状图</a></p><h3 id="1-3-文字"><a href="#1-3-文字" class="headerlink" title="1.3 文字"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/" target="_blank" rel="external">1.3 文字</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump1" target="_blank" rel="external">1.3.1 Paint设置</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump2" target="_blank" rel="external">1.3.2 Canvas绘制文本</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump3" target="_blank" rel="external">1.3.3 设置字体样式</a></p><h3 id="1-4-Region"><a href="#1-4-Region" class="headerlink" title="1.4 Region"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/" target="_blank" rel="external">1.4 Region</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump1" target="_blank" rel="external">1.4.1 构造Region</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump2" target="_blank" rel="external">1.4.2 枚举区域——RegionIterator类</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump3" target="_blank" rel="external">1.4.3 区域相交</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump4" target="_blank" rel="external">1.4.4 其他函数</a></p><h3 id="1-5-Canvas-画布"><a href="#1-5-Canvas-画布" class="headerlink" title="1.5 Canvas(画布)"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/" target="_blank" rel="external">1.5 Canvas(画布)</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump1" target="_blank" rel="external">1.5.1 Canvas变换</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump2" target="_blank" rel="external">1.5.2 画布的保存与恢复</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump3" target="_blank" rel="external">1.5.3 示例一:圆形头像</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump4" target="_blank" rel="external">1.5.4 示例二:裁剪动画</a></p><h3 id="1-6-控件的使用方法"><a href="#1-6-控件的使用方法" class="headerlink" title="1.6 控件的使用方法"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" target="_blank" rel="external">1.6 控件的使用方法</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump1" target="_blank" rel="external">1.6.1 控件概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump2" target="_blank" rel="external">1.6.2 通过XML引入控件</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump3" target="_blank" rel="external">1.6.3 动态添加控件</a></p><h2 id="第2章-视图动画"><a href="#第2章-视图动画" class="headerlink" title="第2章 视图动画"></a>第2章 视图动画</h2><h3 id="2-1-视图动画标签"><a href="#2-1-视图动画标签" class="headerlink" title="2.1 视图动画标签"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/" target="_blank" rel="external">2.1 视图动画标签</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump1" target="_blank" rel="external">2.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump2" target="_blank" rel="external">2.1.2 scale 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump3" target="_blank" rel="external">2.1.3 Animation 继承属性</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump4" target="_blank" rel="external">2.1.4 alpha 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump5" target="_blank" rel="external">2.1.5 rotate 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump6" target="_blank" rel="external">2.1.6 translate 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump7" target="_blank" rel="external">2.1.7 set 标签</a></p><h3 id="2-2-视图动画的代码实现"><a href="#2-2-视图动画的代码实现" class="headerlink" title="2.2 视图动画的代码实现"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">2.2 视图动画的代码实现</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump1" target="_blank" rel="external">2.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">2.2.2 ScaleAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump3" target="_blank" rel="external">2.2.3 AlphaAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump4" target="_blank" rel="external">2.2.4 RotateAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump5" target="_blank" rel="external">2.2.5 TranslateAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump6" target="_blank" rel="external">2.2.6 AnimationSet</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump7" target="_blank" rel="external">2.2.7 Animation</a></p><h3 id="2-3-插值器初探"><a href="#2-3-插值器初探" class="headerlink" title="2.3 插值器初探"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/" target="_blank" rel="external">2.3 插值器初探</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump1" target="_blank" rel="external">2.3.1 AccelerateDecelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump2" target="_blank" rel="external">2.3.2 AccelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump3" target="_blank" rel="external">2.3.3 DecelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump4" target="_blank" rel="external">2.3.4 LinearInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump5" target="_blank" rel="external">2.3.5 BounceInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump6" target="_blank" rel="external">2.3.6 AnticipateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump7" target="_blank" rel="external">2.3.7 OvershootInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump8" target="_blank" rel="external">2.3.8 AnticipateOvershootInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump9" target="_blank" rel="external">2.3.9 CycleInterpolator</a></p><h3 id="2-4-动画示例"><a href="#2-4-动画示例" class="headerlink" title="2.4 动画示例"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/" target="_blank" rel="external">2.4 动画示例</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump1" target="_blank" rel="external">2.4.1 镜头由远及近效果</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump2" target="_blank" rel="external">2.4.2 加载框效果</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump3" target="_blank" rel="external">2.4.3 扫描动画</a></p><h3 id="2-5-逐帧动画"><a href="#2-5-逐帧动画" class="headerlink" title="2.5 逐帧动画"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">2.5 逐帧动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">2.5.1 XML 实现</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">2.5.2 代码实现</a></p><h2 id="第3章-属性动画"><a href="#第3章-属性动画" class="headerlink" title="第3章 属性动画"></a>第3章 属性动画</h2><h3 id="3-1-ValueAnimator-的基本使用"><a href="#3-1-ValueAnimator-的基本使用" class="headerlink" title="3.1 ValueAnimator 的基本使用"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">3.1 ValueAnimator 的基本使用</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump1" target="_blank" rel="external">3.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump2" target="_blank" rel="external">3.1.2 ValueAnimator 的简单使用</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump3" target="_blank" rel="external">3.1.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump4" target="_blank" rel="external">3.1.4 示例：弹跳加载中效果</a></p><h3 id="3-2-自定义插值器与-Evaluator"><a href="#3-2-自定义插值器与-Evaluator" class="headerlink" title="3.2 自定义插值器与 Evaluator"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/" target="_blank" rel="external">3.2 自定义插值器与 Evaluator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/#jump1" target="_blank" rel="external">3.2.1 自定义插值器</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/#jump2" target="_blank" rel="external">3.2.2 Evaluator</a></p><h3 id="3-3-ValueAnimator-进阶——ofObject"><a href="#3-3-ValueAnimator-进阶——ofObject" class="headerlink" title="3.3 ValueAnimator 进阶——ofObject"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/" target="_blank" rel="external">3.3 ValueAnimator 进阶——ofObject</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/#jump1" target="_blank" rel="external">3.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/#jump2" target="_blank" rel="external">3.3.2 示例：抛物动画</a></p><h3 id="3-4-ObjectAnimator"><a href="#3-4-ObjectAnimator" class="headerlink" title="3.4 ObjectAnimator"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/" target="_blank" rel="external">3.4 ObjectAnimator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump1" target="_blank" rel="external">3.4.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump2" target="_blank" rel="external">3.4.2 ObjectAnimator 动画原理</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump3" target="_blank" rel="external">3.4.3 自定义 ObjectAnimator 属性</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump4" target="_blank" rel="external">3.4.4 何时需要实现对应的 get 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump5" target="_blank" rel="external">3.4.5 常用函数</a></p><h3 id="3-5-组合动画——AnimatorSet"><a href="#3-5-组合动画——AnimatorSet" class="headerlink" title="3.5 组合动画——AnimatorSet"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/" target="_blank" rel="external">3.5 组合动画——AnimatorSet</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump1" target="_blank" rel="external">3.5.1 playSequentially() 与 playTogether() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump2" target="_blank" rel="external">3.5.2 AnimatorSet.Builder</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump3" target="_blank" rel="external">3.5.3 AnimatorSet 监听器</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump4" target="_blank" rel="external">3.5.4 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump5" target="_blank" rel="external">3.5.5 示例：路径动画</a></p><h3 id="3-6-Animator-动画的-XML-实现"><a href="#3-6-Animator-动画的-XML-实现" class="headerlink" title="3.6 Animator 动画的 XML 实现"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">3.6 Animator 动画的 XML 实现</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump1" target="_blank" rel="external">3.6.1 animator 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">3.6.2 objectAnimator 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump3" target="_blank" rel="external">3.6.3 set 标签</a></p><h2 id="第4章-属性动画进阶"><a href="#第4章-属性动画进阶" class="headerlink" title="第4章 属性动画进阶"></a>第4章 属性动画进阶</h2><h3 id="4-1-PropertyValuesHolder-与-Keyframe"><a href="#4-1-PropertyValuesHolder-与-Keyframe" class="headerlink" title="4.1 PropertyValuesHolder 与 Keyframe"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/" target="_blank" rel="external">4.1 PropertyValuesHolder 与 Keyframe</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump1" target="_blank" rel="external">4.1.1 PropertyValuesHolder</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump2" target="_blank" rel="external">4.1.2 Keyframe</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump3" target="_blank" rel="external">4.1.3 PropertyValuesHolder 其他函数</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump4" target="_blank" rel="external">4.1.4 示例：电话响铃效果</a></p><h3 id="4-2-ViewPropertyAnimator"><a href="#4-2-ViewPropertyAnimator" class="headerlink" title="4.2 ViewPropertyAnimator"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/" target="_blank" rel="external">4.2 ViewPropertyAnimator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/#jump1" target="_blank" rel="external">4.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/#jump2" target="_blank" rel="external">4.2.2 常用函数</a></p><h3 id="4-3-为-ViewGroup-内的组件添加动画"><a href="#4-3-为-ViewGroup-内的组件添加动画" class="headerlink" title="4.3 为 ViewGroup 内的组件添加动画"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">4.3 为 ViewGroup 内的组件添加动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">4.3.1 animateLayoutChanges 属性</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">4.3.2 LayoutTransition</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">4.3.3 其他函数</a></p><h3 id="4-4-开源动画库-NineOldAndroids"><a href="#4-4-开源动画库-NineOldAndroids" class="headerlink" title="4.4 开源动画库 NineOldAndroids"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/" target="_blank" rel="external">4.4 开源动画库 NineOldAndroids</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/#jump1" target="_blank" rel="external">4.4.1 NineOldAndroids 中的 ViewPropertyAnimator</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/#jump2" target="_blank" rel="external">4.4.2 NineOldAndroids 中的 ViewHelper</a></p><h2 id="第5章-动画进阶"><a href="#第5章-动画进阶" class="headerlink" title="第5章 动画进阶"></a>第5章 动画进阶</h2><h3 id="5-1-利用-PathMeasure-实现路径动画"><a href="#5-1-利用-PathMeasure-实现路径动画" class="headerlink" title="5.1 利用 PathMeasure 实现路径动画"></a><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">5.1 利用 PathMeasure 实现路径动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">5.1.1 初始化</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">5.1.2 简单函数使用</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">5.1.3 getSegment() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump4" target="_blank" rel="external">5.1.4 getPosTan() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump5" target="_blank" rel="external">5.1.5 getMatrix() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump6" target="_blank" rel="external">5.1.6 示例：支付宝支付成功动画</a></p><h3 id="5-2-SVG-动画"><a href="#5-2-SVG-动画" class="headerlink" title="5.2 SVG 动画"></a><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">5.2 SVG 动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">5.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">5.2.2 vector 标签与图像显示</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">5.2.3 动态 Vector</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump4" target="_blank" rel="external">5.2.4 示例：输入搜索动画</a></p><h2 id="第6章-Paint-基本使用"><a href="#第6章-Paint-基本使用" class="headerlink" title="第6章 Paint 基本使用"></a>第6章 Paint 基本使用</h2><h3 id="6-1-硬件加速"><a href="#6-1-硬件加速" class="headerlink" title="6.1 硬件加速"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/" target="_blank" rel="external">6.1 硬件加速</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump1" target="_blank" rel="external">6.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump2" target="_blank" rel="external">6.1.2 软件绘制与硬件加速的区别</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump3" target="_blank" rel="external">6.1.3 禁用 GPU 硬件加速的方法</a></p><h3 id="6-2-文字"><a href="#6-2-文字" class="headerlink" title="6.2 文字"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/" target="_blank" rel="external">6.2 文字</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump1" target="_blank" rel="external">6.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump2" target="_blank" rel="external">6.2.2 绘图四格线与 FontMetrics</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump3" target="_blank" rel="external">6.2.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump4" target="_blank" rel="external">6.2.4 示例：定点写字</a></p><h3 id="6-3-Paint-常用函数"><a href="#6-3-Paint-常用函数" class="headerlink" title="6.3 Paint 常用函数"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/" target="_blank" rel="external">6.3 Paint 常用函数</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#jump1" target="_blank" rel="external">6.3.1 基本设置函数</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#jump2" target="_blank" rel="external">6.3.2 字体相关函数</a></p><h2 id="第7章-绘图进阶"><a href="#第7章-绘图进阶" class="headerlink" title="第7章 绘图进阶"></a>第7章 绘图进阶</h2><h3 id="7-1-贝济埃曲线"><a href="#7-1-贝济埃曲线" class="headerlink" title="7.1 贝济埃曲线"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/" target="_blank" rel="external">7.1 贝济埃曲线</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump1" target="_blank" rel="external">7.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump2" target="_blank" rel="external">7.1.2 贝济埃曲线之 quadTo</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump3" target="_blank" rel="external">7.1.3 贝济埃曲线之 rQuadTo</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump4" target="_blank" rel="external">7.1.4 示例：波浪效果</a></p><h3 id="7-2-setShadowLayer-与阴影效果"><a href="#7-2-setShadowLayer-与阴影效果" class="headerlink" title="7.2 setShadowLayer 与阴影效果"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/" target="_blank" rel="external">7.2 setShadowLayer 与阴影效果</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump1" target="_blank" rel="external">7.2.1 构造函数</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump2" target="_blank" rel="external">7.2.2 清除阴影</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump3" target="_blank" rel="external">7.2.3 示例：给文字添加阴影</a></p><h3 id="7-3-BlurMaskFilter-发光效果和图片阴影"><a href="#7-3-BlurMaskFilter-发光效果和图片阴影" class="headerlink" title="7.3 BlurMaskFilter 发光效果和图片阴影"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/" target="_blank" rel="external">7.3 BlurMaskFilter 发光效果和图片阴影</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump1" target="_blank" rel="external">7.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump2" target="_blank" rel="external">7.3.2 给图片添加纯色阴影</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump3" target="_blank" rel="external">7.3.3 封装控件</a></p><h3 id="7-4-Shader-与-BitmapShader"><a href="#7-4-Shader-与-BitmapShader" class="headerlink" title="7.4 Shader 与 BitmapShader"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/" target="_blank" rel="external">7.4 Shader 与 BitmapShader</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump1" target="_blank" rel="external">7.4.1 Shader 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump2" target="_blank" rel="external">7.4.2 BitmapShader 的基本用法</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump3" target="_blank" rel="external">7.4.3 示例一：望远镜效果</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump4" target="_blank" rel="external">7.4.4 示例二：生成不规则头像</a></p><h3 id="7-5-Shader-之-LinearGradient"><a href="#7-5-Shader-之-LinearGradient" class="headerlink" title="7.5 Shader 之 LinearGradient"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/" target="_blank" rel="external">7.5 Shader 之 LinearGradient</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/#jump1" target="_blank" rel="external">7.5.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/#jump2" target="_blank" rel="external">7.5.2 示例：闪光文字效果</a></p><h3 id="7-6-Shader-之-RadialGradient"><a href="#7-6-Shader-之-RadialGradient" class="headerlink" title="7.6 Shader 之 RadialGradient"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/" target="_blank" rel="external">7.6 Shader 之 RadialGradient</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump1" target="_blank" rel="external">7.6.1 双色渐变</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump2" target="_blank" rel="external">7.6.2 多色渐变</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump3" target="_blank" rel="external">7.6.3 TileMode 填充模式</a></p><h2 id="第8章-混合模式"><a href="#第8章-混合模式" class="headerlink" title="第8章 混合模式"></a>第8章 混合模式</h2><h3 id="8-1-混合模式之-AvoidXfermode"><a href="#8-1-混合模式之-AvoidXfermode" class="headerlink" title="8.1 混合模式之 AvoidXfermode"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/" target="_blank" rel="external">8.1 混合模式之 AvoidXfermode</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump1" target="_blank" rel="external">8.1.1 混合模式概述</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump2" target="_blank" rel="external">8.1.2 AvoidXfermode</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump3" target="_blank" rel="external">8.1.3 AvoidXfermode 绘制原理</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump4" target="_blank" rel="external">8.1.4 AvoidXfermode 之 Mode.AVOID</a></p><h3 id="8-2-混合模式之-PorterDuffXfermode"><a href="#8-2-混合模式之-PorterDuffXfermode" class="headerlink" title="8.2 混合模式之 PorterDuffXfermode"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/" target="_blank" rel="external">8.2 混合模式之 PorterDuffXfermode</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/#jump1" target="_blank" rel="external">8.2.1 PorterDuffXfermode 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/#jump2" target="_blank" rel="external">8.2.2 颜色叠加相关模式</a></p><h3 id="8-3-PorterDuffXfermode-之源图像模式"><a href="#8-3-PorterDuffXfermode-之源图像模式" class="headerlink" title="8.3 PorterDuffXfermode 之源图像模式"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">8.3 PorterDuffXfermode 之源图像模式</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump1" target="_blank" rel="external">8.3.1 Mode.SRC</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump2" target="_blank" rel="external">8.3.2 Mode.SRC_IN</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump3" target="_blank" rel="external">8.3.3 Mode.SRC_OUT</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump4" target="_blank" rel="external">8.3.4 Mode.SRC_OVER</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump5" target="_blank" rel="external">8.3.5 Mode.SRC_ATOP</a></p><h3 id="8-4-目标图像模式与其他模式"><a href="#8-4-目标图像模式与其他模式" class="headerlink" title="8.4 目标图像模式与其他模式"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">8.4 目标图像模式与其他模式</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump1" target="_blank" rel="external">8.4.1 目标图像模式</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump2" target="_blank" rel="external">8.4.2 其他模式——Mode.CLEAR</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump3" target="_blank" rel="external">8.4.3 模式总结</a></p><h2 id="第9章-Canvas-与图层"><a href="#第9章-Canvas-与图层" class="headerlink" title="第9章 Canvas 与图层"></a>第9章 Canvas 与图层</h2><h3 id="9-1-获取-Canvas-对象的方法"><a href="#9-1-获取-Canvas-对象的方法" class="headerlink" title="9.1 获取 Canvas 对象的方法"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external">9.1 获取 Canvas 对象的方法</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump1" target="_blank" rel="external">9.1.1 方法一：重写 onDraw()、dispatchDraw() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump2" target="_blank" rel="external">9.1.2 方法二：使用 Bitmap 创建</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump3" target="_blank" rel="external">9.1.3 方法三：调用 SurfaceHolder.lockCanvas() 函数</a></p><h3 id="9-2-图层与画布"><a href="#9-2-图层与画布" class="headerlink" title="9.2 图层与画布"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/" target="_blank" rel="external">9.2 图层与画布</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump1" target="_blank" rel="external">9.2.1 saveLayer() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump2" target="_blank" rel="external">9.2.2 画布与图层</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump3" target="_blank" rel="external">9.2.3 saveLayer() &amp; saveLayerAlpha()</a></p><h3 id="9-3-Flag-的具体含义-已过时"><a href="#9-3-Flag-的具体含义-已过时" class="headerlink" title="9.3 Flag 的具体含义 已过时"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94Flag%20%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/" target="_blank" rel="external">9.3 Flag 的具体含义 已过时</a></h3><h3 id="9-4-恢复画布"><a href="#9-4-恢复画布" class="headerlink" title="9.4 恢复画布"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/" target="_blank" rel="external">9.4 恢复画布</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/#jump1" target="_blank" rel="external">9.4.1 restoreToCount(int count)</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/#jump2" target="_blank" rel="external">9.4.2 restore() &amp; restoreToCount(int count) 的关系</a></p><h2 id="第10章-Android-画布"><a href="#第10章-Android-画布" class="headerlink" title="第10章 Android 画布"></a>第10章 Android 画布</h2><h3 id="10-1-ShapeDrawable"><a href="#10-1-ShapeDrawable" class="headerlink" title="10.1 ShapeDrawable"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/" target="_blank" rel="external">10.1 ShapeDrawable</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump1" target="_blank" rel="external">10.1.1 shape 标签与 GradientDrawable</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump2" target="_blank" rel="external">10.1.2 ShapDrawable 的构造函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump3" target="_blank" rel="external">10.1.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump4" target="_blank" rel="external">10.1.4 自定义 Drawable</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump5" target="_blank" rel="external">10.1.5 Drawable 与 Bitmap 对比</a></p><h3 id="10-2-Bitmap"><a href="#10-2-Bitmap" class="headerlink" title="10.2 Bitmap"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/" target="_blank" rel="external">10.2 Bitmap</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump1" target="_blank" rel="external">10.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump2" target="_blank" rel="external">10.2.2 创建 Bitmap 方法一：BitmapFactory</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump3" target="_blank" rel="external">10.2.3 BitmapFactory.Options</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump4" target="_blank" rel="external">10.2.4 创建 Bitmap 方法二：Bitmap 静态方法</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump5" target="_blank" rel="external">10.2.5 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump6" target="_blank" rel="external">10.2.6 常见问题</a></p><h3 id="10-3-SurfaceView"><a href="#10-3-SurfaceView" class="headerlink" title="10.3 SurfaceView"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/" target="_blank" rel="external">10.3 SurfaceView</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump1" target="_blank" rel="external">10.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump2" target="_blank" rel="external">10.3.2 基本用法</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump3" target="_blank" rel="external">10.3.3 双缓冲技术</a></p><h2 id="第11章-Matrix-与坐标变换"><a href="#第11章-Matrix-与坐标变换" class="headerlink" title="第11章 Matrix 与坐标变换"></a>第11章 Matrix 与坐标变换</h2><h3 id="11-1-矩阵运算"><a href="#11-1-矩阵运算" class="headerlink" title="11.1 矩阵运算"></a><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/" target="_blank" rel="external">11.1 矩阵运算</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump1" target="_blank" rel="external">11.1.1 矩阵的加法与减法</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump2" target="_blank" rel="external">11.1.2 矩阵与数的乘法</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump3" target="_blank" rel="external">11.1.3 矩阵与矩阵的乘法</a></p><h3 id="11-2-ColorMatrix-色彩变换"><a href="#11-2-ColorMatrix-色彩变换" class="headerlink" title="11.2 ColorMatrix 色彩变换"></a><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/" target="_blank" rel="external">11.2 ColorMatrix 色彩变换</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump1" target="_blank" rel="external">11.2.1 色彩变换矩阵</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump2" target="_blank" rel="external">11.2.2 色彩的几种运算方式</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump3" target="_blank" rel="external">11.2.3 ColorMatrix 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump4" target="_blank" rel="external">11.2.4 ColorMatrix 相乘</a></p><h2 id="第12章-封装控件"><a href="#第12章-封装控件" class="headerlink" title="第12章 封装控件"></a>第12章 封装控件</h2><h3 id="12-1-自定义属性与自定义-Style"><a href="#12-1-自定义属性与自定义-Style" class="headerlink" title="12.1 自定义属性与自定义 Style"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/" target="_blank" rel="external">12.1 自定义属性与自定义 Style</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump1" target="_blank" rel="external">12.1.1 示例</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump2" target="_blank" rel="external">12.1.2 在 XML 中使用自定义的属性</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump3" target="_blank" rel="external">12.1.3 在代码中获取自定义属性的值</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump4" target="_blank" rel="external">12.1.4 declare-styleable 标签其他属性的用法</a></p><h3 id="12-2-测量与布局"><a href="#12-2-测量与布局" class="headerlink" title="12.2 测量与布局"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/" target="_blank" rel="external">12.2 测量与布局</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump1" target="_blank" rel="external">12.2.1 ViewGroup 绘制流程</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump2" target="_blank" rel="external">12.2.2 onMeasure() 函数与 MeasureSpec</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump3" target="_blank" rel="external">12.2.3 onLayout() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump4" target="_blank" rel="external">12.2.4 获取子控件 margin 值的方法</a></p><h3 id="12-3-实现-FlowLayout-容器"><a href="#12-3-实现-FlowLayout-容器" class="headerlink" title="12.3 实现 FlowLayout 容器"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/" target="_blank" rel="external">12.3 实现 FlowLayout 容器</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump1" target="_blank" rel="external">12.3.1 XML 布局</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump2" target="_blank" rel="external">12.3.2 提取 margin 值与重写 onMeasure() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump3" target="_blank" rel="external">12.3.3 完整代码</a></p><h2 id="第13章-控件高级属性"><a href="#第13章-控件高级属性" class="headerlink" title="第13章 控件高级属性"></a>第13章 控件高级属性</h2><h3 id="13-1-GestureDetector-手势检测"><a href="#13-1-GestureDetector-手势检测" class="headerlink" title="13.1 GestureDetector 手势检测"></a><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/" target="_blank" rel="external">13.1 GestureDetector 手势检测</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump1" target="_blank" rel="external">13.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump2" target="_blank" rel="external">13.1.2 GestureDetector.OnGestureListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump3" target="_blank" rel="external">13.1.3 GestureDetector.OnDoubleTapListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump4" target="_blank" rel="external">13.1.4 GestureDetector.SimpleOnGestureListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump5" target="_blank" rel="external">13.1.5 onFling() 函数的应用</a></p><h3 id="13-2-Window-与-WindowManager"><a href="#13-2-Window-与-WindowManager" class="headerlink" title="13.2 Window 与 WindowManager"></a><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/" target="_blank" rel="external">13.2 Window 与 WindowManager</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/#jump1" target="_blank" rel="external">13.2.1 Window 与 WindowManager 的关系</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/#jump2" target="_blank" rel="external">13.2.2 示例：腾讯手机管家悬浮窗的小火箭效果</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;本篇从自定义控件的动画、绘图、视图三方面入手，分别讲解与自定义控件相关的各种知识，给大家系统的梳理相关知识。不仅适合 Android 初、中级水平从业者，也适合高水平从业者查漏补缺使用。&lt;/p&gt;
&lt;p&gt;内容摘自启舰所著的书籍《Android 自定义控件开发入门与实践》。&lt;/
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>X001 圆角圆形 ImageView</title>
    <link href="http://yoursite.com/2019/09/01/Custom%20View/X001%20%E5%9C%86%E8%A7%92%E5%9C%86%E5%BD%A2%20ImageView/"/>
    <id>http://yoursite.com/2019/09/01/Custom View/X001 圆角圆形 ImageView/</id>
    <published>2019-08-31T16:00:00.000Z</published>
    <updated>2020-01-24T05:02:47.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-99c14f4dff5bc857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>鉴于 Android 提供的 ImageView 控件已经非常完善，不仅处理好了各种缩放问题，而且有着很好的兼容性，还实现了显示图片等一系列的任务，我们只要在它的基础上添加一个显示圆角圆形的功能即可。</p><h3 id="一、属性配置"><a href="#一、属性配置" class="headerlink" title="一、属性配置"></a>一、属性配置</h3><p>首先创建一个 res/values/attrs.xml 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;RoundImageView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;type&quot; format=&quot;enum&quot;&gt;</div><div class="line">            &lt;enum name=&quot;circle&quot; value=&quot;1&quot;/&gt;</div><div class="line">            &lt;enum name=&quot;round&quot; value=&quot;2&quot;/&gt;</div><div class="line">        &lt;/attr&gt;</div><div class="line">        &lt;attr name=&quot;radius&quot; format=&quot;dimension&quot;/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><ul><li>定义一个 Java 类 RoundImageView，继承自 ImageView，重写其构造方法，获取配置属性进行初始化。</li><li>重写 onMeasure 方法，当模式为圆形的时候使其控件的宽高一致。</li><li>重写 onDraw 方法，增加两种模式处理逻辑。</li></ul><h4 id="2-完整代码"><a href="#2-完整代码" class="headerlink" title="2. 完整代码"></a>2. 完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapShader;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Matrix;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.RectF;</div><div class="line">import android.graphics.Shader;</div><div class="line">import android.graphics.drawable.Drawable;</div><div class="line">import android.os.Build;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.util.TypedValue;</div><div class="line"></div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class RoundImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private static final int MODE_NONE = 0;         // 普通模式，默认</div><div class="line">    private static final int MODE_CIRCLE = 1;       // 圆形模式</div><div class="line">    private static final int MODE_ROUND = 2;        // 圆角矩形模式</div><div class="line"></div><div class="line">    private int currMode = MODE_NONE;</div><div class="line">    private int currRound = dp2px(10);              // 圆角半径</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private RectF mRectF = null;</div><div class="line">    private Drawable mPreDrawable = null;</div><div class="line"></div><div class="line">    public RoundImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        this(context, attrs, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        obtainStyledAttrs(context, attrs, defStyleAttr);</div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void obtainStyledAttrs(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.RoundImageView,</div><div class="line">                defStyleAttr, 0);</div><div class="line">        currMode = a.getInt(R.styleable.RoundImageView_type, MODE_NONE);</div><div class="line">        currRound = a.getDimensionPixelSize(R.styleable.RoundImageView_radius, currRound);</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initViews() &#123;</div><div class="line">        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);</div><div class="line">        mRectF = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        if (currMode == MODE_CIRCLE) &#123;</div><div class="line">            int result = Math.min(getMeasuredWidth(), getMeasuredHeight());</div><div class="line">            setMeasuredDimension(result, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        Drawable drawable = getDrawable();</div><div class="line">        Matrix drawMatrix = getImageMatrix();</div><div class="line">        if (drawable == null) &#123;</div><div class="line">            return; // couldn&apos;t resolve the URI</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) &#123;</div><div class="line">            return; // nothing to draw (empty bounds)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (drawMatrix == null &amp;&amp; getPaddingTop() == 0 &amp;&amp; getPaddingLeft() == 0) &#123;</div><div class="line">            drawable.draw(canvas);</div><div class="line">        &#125; else &#123;</div><div class="line">            final int saveCount = canvas.getSaveCount();</div><div class="line">            canvas.save();</div><div class="line"></div><div class="line">            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">                if (getCropToPadding()) &#123;</div><div class="line">                    final int scrollX = getScrollX();</div><div class="line">                    final int scrollY = getScrollY();</div><div class="line">                    canvas.clipRect(scrollX + getPaddingLeft(), scrollY + getPaddingTop(),</div><div class="line">                            scrollX + getRight() - getLeft() - getPaddingRight(),</div><div class="line">                            scrollY + getBottom() - getTop() - getPaddingBottom());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            canvas.translate(getPaddingLeft(), getPaddingTop());</div><div class="line">            // 当为圆形模式的时候</div><div class="line">            if (currMode == MODE_CIRCLE) &#123;</div><div class="line">                setBitmapShader(drawable);</div><div class="line">                canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, getWidth() / 2f, mPaint);</div><div class="line">            &#125;</div><div class="line">            // 当为圆角模式的时候</div><div class="line">            else if (currMode == MODE_ROUND) &#123;</div><div class="line">                setBitmapShader(drawable);</div><div class="line">                mRectF.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</div><div class="line">                canvas.drawRoundRect(mRectF, currRound, currRound, mPaint);</div><div class="line">            &#125; else &#123;</div><div class="line">                if (drawMatrix != null) &#123;</div><div class="line">                    canvas.concat(drawMatrix);</div><div class="line">                &#125;</div><div class="line">                drawable.draw(canvas);</div><div class="line">            &#125;</div><div class="line">            canvas.restoreToCount(saveCount);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void setBitmapShader(Drawable drawable) &#123;</div><div class="line">        // 防止多次重 new 对象</div><div class="line">        if (drawable != null &amp;&amp; drawable != mPreDrawable) &#123;</div><div class="line">            Bitmap bitmap = drawable2Bitmap(drawable);</div><div class="line">            mPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));</div><div class="line">            mPreDrawable = drawable;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * drawable 转换成 bitmap</div><div class="line">     */</div><div class="line">    private Bitmap drawable2Bitmap(Drawable drawable) &#123;</div><div class="line">        if (drawable == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bitmap);</div><div class="line">        // 根据传递的 scaleType 获取 matrix 对象，设置给 bitmap</div><div class="line">        Matrix matrix = getImageMatrix();</div><div class="line">        if (matrix != null) &#123;</div><div class="line">            canvas.concat(matrix);</div><div class="line">        &#125;</div><div class="line">        drawable.draw(canvas);</div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int dp2px(float value) &#123;</div><div class="line">        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, value,</div><div class="line">                getResources().getDisplayMetrics());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 onDraw 方法中，以下代码是我们添加的逻辑，其余代码为 ImageView 源代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Drawable drawable = getDrawable();</div><div class="line">Matrix drawMatrix = getImageMatrix();</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">// 当为圆形模式的时候</div><div class="line">if (currMode == MODE_CIRCLE) &#123;</div><div class="line">    setBitmapShader(drawable);</div><div class="line">    canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, getWidth() / 2f, mPaint);</div><div class="line">&#125;</div><div class="line">// 当为圆角模式的时候</div><div class="line">else if (currMode == MODE_ROUND) &#123;</div><div class="line">    setBitmapShader(drawable);</div><div class="line">    mRectF.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</div><div class="line">    canvas.drawRoundRect(mRectF, currRound, currRound, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-在布局文件中使用"><a href="#3-在布局文件中使用" class="headerlink" title="3. 在布局文件中使用"></a>3. 在布局文件中使用</h4><p>效果如首图所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot;</div><div class="line">            app:type=&quot;round&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot;</div><div class="line">            app:type=&quot;circle&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;&lt;img src=&quot;https://upload-images.jianshu.io/upload_images/14186083-99c14f4dff5bc857.png?imag
      
    
    </summary>
    
    
      <category term="Custom View" scheme="http://yoursite.com/categories/Custom-View/"/>
    
    
      <category term="Custom View" scheme="http://yoursite.com/tags/Custom-View/"/>
    
  </entry>
  
  <entry>
    <title>23 设计模式——桥接模式</title>
    <link href="http://yoursite.com/2019/08/29/PATTERN/23%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%A1%A5%E6%8E%A5%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/29/PATTERN/23 设计模式——桥接模式/</id>
    <published>2019-08-28T17:00:00.000Z</published>
    <updated>2020-03-07T04:14:29.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>桥接（Bridge）模式：<strong>将抽象部分与实现部分分离，使它们都可以独立的变化</strong>。</p><p>在现实生活中，某些类具有两个或多个维度的变化，如图形既可按形状分，又可按颜色分。如何设计类似于 Photoshop 这样的软件，能画不同形状和不同颜色的图形呢？如果用继承方式，m 种形状和 n 种颜色的图形就有 m×n 种，不但对应的子类很多，而且扩展困难。</p><p>当然，这样的例子还有很多，如不同颜色和字体的文字、不同品牌和功率的汽车、不同性别和职业的男女、支持不同平台和不同文件格式的媒体播放器等。如果用桥接模式就能很好地解决这些问题。</p><p>当一个类存在两个独立变化的纬度，且这两个纬度都需要进行扩展，我们可以使用桥接模式。它是用组合关系代替继承关系来实现，从而降低了抽象和实现这两个可变维度的耦合度。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>由于抽象与实现分离，所以扩展能力强；</li><li>其实现细节对客户透明。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>由于聚合关系建立在抽象层，要求开发者针对抽象化进行设计与编程，这增加了系统的理解与设计难度。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>一个类存在两个或以上的独立维度的变化，且这些维度都需要进行拓展。</li><li>不希望使用继承或因为多层次继承导致类的个数急剧增加时。</li><li>如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承关系，可以通过桥接模式使他们在抽象层建立一个关联关系。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>可以将抽象化部分与实现化部分分开，取消二者的继承关系，改用组合关系。</p><p>模式包含以下主要角色。</p><ul><li>Abstraction（抽象部分）：定义抽象类，并包含一个对实现化对象的引用。</li><li>RefinedAbstraction（扩展抽象部分）：是抽象化角色的子类，实现父类中的业务方法，并通过组合关系调用实现化角色中的业务方法。</li><li>Implementor（实现部分）：定义实现化角色的接口，供扩展抽象化角色调用。</li><li>ConcreteImplementor（实现部分的具体实现）：给出实现化角色接口的具体实现。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/8298629-0ac6cb97b5dc1c6f.png?imageMogr2/auto-orient/strip|imageView2/2/w/893/format/webp" alt=""></p><p>Abstraction 和 Implementor 就是两个独立纬度变化的类，Implementor 相对于 Abstraction 是一个聚合的关系，也就是 Abstraction 可能拥有多个 Implementor，模板代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class BridgeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Implementor implementor = new ConcreteImplementor();</div><div class="line">        Abstraction abs = new RefinedAbstraction(implementor);</div><div class="line">        abs.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 实现化角色</div><div class="line">interface Implementor &#123;</div><div class="line">    void operationImpl();</div><div class="line">&#125;</div><div class="line">// 具体实现化角色</div><div class="line">class ConcreteImplementor implements Implementor &#123;</div><div class="line">    public void operationImpl() &#123;</div><div class="line">        System.out.println(&quot;具体实现化(Concrete Implementor)角色被访问&quot; );</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象化角色</div><div class="line">abstract class Abstraction &#123;</div><div class="line">    protected Implementor implementor;</div><div class="line">    protected Abstraction(Implementor implementor) &#123;</div><div class="line">        this.implementor = implementor;</div><div class="line">    &#125;</div><div class="line">    public abstract void operation();</div><div class="line">&#125;</div><div class="line">// 扩展抽象化角色</div><div class="line">class RefinedAbstraction extends Abstraction &#123;</div><div class="line">    protected RefinedAbstraction(Implementor implementor) &#123;</div><div class="line">        super(implementor);</div><div class="line">    &#125;</div><div class="line">    public void operation() &#123;</div><div class="line">        System.out.println(&quot;扩展抽象化(Refined Abstraction)角色被访问&quot; );</div><div class="line">        implementor.operationImpl();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>去咖啡馆喝咖啡一般分为 4 种，大杯加糖，大杯不加糖，小杯加糖和小杯不加糖。对于大杯和小杯，加糖和不加糖其实是两个相对独立纬度的变化。面先定一个咖啡类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public abstract class Coffee &#123;</div><div class="line">    protected CoffeeAdditives impl;</div><div class="line"></div><div class="line">    public Coffee(CoffeeAdditives impl) &#123;</div><div class="line">        this.impl = impl;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 咖啡具体是什么样的由子类决定</div><div class="line">     */</div><div class="line">    public abstract void makeCoffee();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>CoffeeAdditives 是一种桥接的方式，咖啡分为大杯和小杯，下面继续看看大杯咖啡和小杯咖啡的定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class LargeCoffee extends Coffee&#123;</div><div class="line"></div><div class="line">    public LargeCoffee(CoffeeAdditives impl) &#123;</div><div class="line">        super(impl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void makeCoffee() &#123;</div><div class="line">        System.out.println(&quot;大杯的&quot;+impl.addSomething()+&quot;咖啡&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class SmallCoffee extends Coffee &#123;</div><div class="line">    public SmallCoffee(CoffeeAdditives impl) &#123;</div><div class="line">        super(impl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void makeCoffee() &#123;</div><div class="line">        System.out.println(&quot;小杯的&quot;+impl.addSomething()+&quot;咖啡&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>至于加糖不加糖我们通过 CoffeeAdditives 这种桥接方式定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public abstract class CoffeeAdditives &#123;</div><div class="line">    public abstract String addSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Ordinary extends CoffeeAdditives &#123;</div><div class="line">    @Override</div><div class="line">    public String addSomething() &#123;</div><div class="line">        return &quot;原味&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class Sugar extends CoffeeAdditives &#123;</div><div class="line">    @Override</div><div class="line">    public String addSomething() &#123;</div><div class="line">        return &quot;加糖&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最终调用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        // 原汁原味</div><div class="line">        Ordinary ordinary = new Ordinary();</div><div class="line">        // 准备糖类</div><div class="line">        Sugar sugar = new Sugar();</div><div class="line"></div><div class="line">        // 大杯咖啡 原味</div><div class="line">        LargeCoffee largeCoffeeOrdinary = new LargeCoffee(ordinary);</div><div class="line">        largeCoffeeOrdinary.makeCoffee();</div><div class="line">        // 小杯咖啡 原味</div><div class="line">        SmallCoffee smallCoffeeOrdinary = new SmallCoffee(ordinary);</div><div class="line">        smallCoffeeOrdinary.makeCoffee();</div><div class="line">        // 大杯咖啡 加糖</div><div class="line">        LargeCoffee largeCoffeeSugar = new LargeCoffee(sugar);</div><div class="line">        largeCoffeeSugar.makeCoffee();</div><div class="line">        // 小杯咖啡 加糖</div><div class="line">        SmallCoffee smallCoffeeSugar = new SmallCoffee(sugar);</div><div class="line">        smallCoffeeSugar.makeCoffee();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如果此时咖啡馆为了满足更多人的习惯，推出中杯的咖啡怎么办呢？对于本例来说，这种需求的变化其实就是 Coffee 类的变化，定义中杯扩展类 MiddleCoffee 类即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class MiddleCoffee extends Coffee &#123;</div><div class="line">    public MiddleCoffee(CoffeeAdditives impl) &#123;</div><div class="line">        super(impl);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void makeCoffee() &#123;</div><div class="line">        System.out.println(&quot;中杯的&quot;+impl.addSomething()+&quot;咖啡&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>同样地，为了增加咖啡类口味的种类，我们也可以让 CoffeeAdditives 类变化起来，增加更多的子类表示，诸如加奶、加蜂蜜等。</p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>比较典型的是 Window 与 WindowManager 之间的关系，它们就用到了桥接这种模式。它们的关系如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8298629-19c2f003d0a0a3fd.png?imageMogr2/auto-orient/strip|imageView2/2/w/608/format/webp" alt=""></p><p>在 framework 中 Window 和 PhoneWindow 构成窗口的抽象部分，其中 Window 类为该抽象部分的抽象接口，PhoneWindow 为抽象部分具体的实现及扩展。而 WindowManager 则为实现部分的基类，WindowManagerImpl 为实现部分具体的逻辑实现，其使用 WindowManagerGlobal 通过 IWindowManager 接口与 WindowManagerService 进行交互（简称 WMS），并由 WMS 完成具体的窗口管理工作. 如下是 Window 与 WindowManager 桥梁搭建的主要代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public abstract class Window &#123;</div><div class="line">    // 代码省略...</div><div class="line">    public void setWindowManager(WindowManager wm, IBinder appToken, String appName) &#123;</div><div class="line">        setWindowManager(wm, appToken, appName, false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setWindowManager(WindowManager wm, IBinder appToken, String appName,</div><div class="line">            boolean hardwareAccelerated) &#123;</div><div class="line">        mAppToken = appToken;</div><div class="line">        mAppName = appName;</div><div class="line">        mHardwareAccelerated = hardwareAccelerated</div><div class="line">                || SystemProperties.getBoolean(PROPERTY_HARDWARE_UI, false);</div><div class="line">        if (wm == null) &#123;</div><div class="line">            wm = (WindowManager)mContext.getSystemService(Context.WINDOW_SERVICE);</div><div class="line">        &#125;</div><div class="line">        mWindowManager = ((WindowManagerImpl)wm).createLocalWindowManager(this);</div><div class="line">    &#125;</div><div class="line">    // 代码省略...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;桥接（Bridge）模式：&lt;
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>22 设计模式——外观模式</title>
    <link href="http://yoursite.com/2019/08/28/PATTERN/22%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%A4%96%E8%A7%82%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/28/PATTERN/22 设计模式——外观模式/</id>
    <published>2019-08-27T17:00:00.000Z</published>
    <updated>2020-03-07T03:29:18.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>外观（Facade）模式：<strong>要求一个子系统的外部与其内部的通信必须通过一个统一的对象进行。外观模式提供一个高层次的接口，使得子系统更易于使用</strong>。</p><p>在开发过程中的运用频率非常高，尤其是在现阶段各种第三方 SDK 充斥在我们的周边，而这些 SDK 很大概率会使用外观模式。通过一个外观类使得整个系统的接口只有一个统一的高层接口，这样能够降低用户的使用成本，也对用户屏蔽了很多实现细节。当然，在我们的开发过程中，外观模式也是我们封装 API 的常用手段，例如网络模块、ImageLoader模块等。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>外观模式是“迪米特法则”的典型应用，主要优点如下：</p><ul><li>降低了子系统与客户端之间的耦合度，使得子系统的变化不会影响调用它的客户类。</li><li>对客户屏蔽了子系统组件，减少了客户处理的对象数目，并使得子系统使用起来更加容易。</li><li>降低了大型软件系统中的编译依赖性，简化了系统在不同平台之间的移植过程，因为编译一个子系统不会影响其他的子系统，也不会影响外观对象。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>不能很好地限制客户使用子系统类。</li><li>增加新的子系统可能需要修改外观类或客户端的源代码，违背了“开闭原则”。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>为一个复杂的子系统提供一个简单接口，对外隐藏子系统的具体实现、隔离变化。</li><li>使用外观模式可以将一个子系统和使用它的客户端以及其它的子系统分离开来，这就提高了子系统的独立性和可移植性。</li><li>在构建一个层次化结构的时候，可以使用外观模式定义每一个层次对外交互的接口。这样，层与层之间只需要通过外观进行通信，从而简化层与层之间的依赖关系。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Facade（外观角色）：对外的统一入口。</li><li>Sub System（子系统）：一般由多个子系统构成，负责具体功能的实现。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5480c00b909b46a8.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class FacadePattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Facade f = new Facade();</div><div class="line">        f.method();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 外观角色</div><div class="line">class Facade &#123;</div><div class="line">    private SubSystem01 obj1 = new SubSystem01();</div><div class="line">    private SubSystem02 obj2 = new SubSystem02();</div><div class="line">    private SubSystem03 obj3 = new SubSystem03();</div><div class="line">    public void method() &#123;</div><div class="line">        obj1.method1();</div><div class="line">        obj2.method2();</div><div class="line">        obj3.method3();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 子系统角色</div><div class="line">class SubSystem01 &#123;</div><div class="line">    public  void method1() &#123;</div><div class="line">        System.out.println(&quot;子系统01的method1()被调用！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 子系统角色</div><div class="line">class SubSystem02 &#123;</div><div class="line">    public  void method2() &#123;</div><div class="line">        System.out.println(&quot;子系统02的method2()被调用！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 子系统角色</div><div class="line">class SubSystem03 &#123;</div><div class="line">    public  void method3() &#123;</div><div class="line">        System.out.println(&quot;子系统03的method3()被调用！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>手机就是一个外观模式的例子，它集合了电话功能、短信功能、GPS、拍照等于一身，通过手机你就可以完成各种功能。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-76e30b4caf60d679.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>下面模拟手机的外观模式实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public interface Camera &#123;</div><div class="line">    void open();</div><div class="line">    void takePic();</div><div class="line">    void close();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class SamsungCamera implements Camera &#123;</div><div class="line">    @Override</div><div class="line">    public void open() &#123;</div><div class="line">        System.out.println(&quot;打开相机&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void takePic() &#123;</div><div class="line">        System.out.println(&quot;拍照&quot;);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void close() &#123;</div><div class="line">        System.out.println(&quot;关闭相机&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface Phone &#123;</div><div class="line">    // 打电话</div><div class="line">    void dail();</div><div class="line">    // 挂断</div><div class="line">    void hangup();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class PhoneImpl implements Phone&#123;</div><div class="line">    @Override</div><div class="line">    public void dail() &#123;</div><div class="line">        System.out.println(&quot;打电话&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void hangup() &#123;</div><div class="line">        System.out.println(&quot;挂断&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 外观类</div><div class="line">public class MobilePhone &#123;</div><div class="line">    private Phone mPhone = new PhoneImpl();</div><div class="line">    private Camera mCamera = new SamsungCamera();</div><div class="line"></div><div class="line">    public void dail()&#123;</div><div class="line">        mPhone.dail();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void videoChat()&#123;</div><div class="line">        System.out.println(&quot;--&gt;视频聊天接通中&quot;);</div><div class="line">        mCamera.open();</div><div class="line">        mPhone.dail();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void hangup()&#123;</div><div class="line">        mPhone.hangup();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void takePic()&#123;</div><div class="line">        mCamera.open();</div><div class="line">        mCamera.takePic();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void closeCamera()&#123;</div><div class="line">        mCamera.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        MobilePhone nexus6 = new MobilePhone();</div><div class="line">        // 拍照</div><div class="line">        nexus6.videoChat();</div><div class="line">        // 拍照</div><div class="line">        nexus6.takePic();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>在用 Android 开发过程中，Context 是最重要的一个类型。Context 只是一个抽象类，它的真正实现在 ContextImpl 类中，ContextImpl 就是今天我们要分析的外观类。</p><p>在应用启动时，首先会 fork 一个子进程，并且调用 ActivityThread 的 main 方法启动该进程。ActivityThread 又会构建 Application 对象，然后和 Activity、ContextImpl 关联起来，最后会调用 Activity 的 onCreate、onStart、onResume 函数使 Activity 运行起来，此时应用的用户界面就呈现在我们面前。</p><p>main 函数会间接地调用 ActivityThread 中的 handleLaunchActivity 函数启动默认的 Activity。handleLaunchActivity 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Activity handleLaunchActivity(ActivityClientRecord r, </div><div class="line">                                     PendingTransactionActions pendingActions, </div><div class="line">                                     Intent customIntent) &#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    // 创建并且加载 Activity，调用它的 onCreate</div><div class="line">    final Activity a = performLaunchActivity(r, customIntent);</div><div class="line"></div><div class="line">    if (a != null) &#123;</div><div class="line">        r.createdConfig = new Configuration(mConfiguration);</div><div class="line">        reportSizeConfigurations(r);</div><div class="line">        if (!r.activity.mFinished &amp;&amp; pendingActions != null) &#123;</div><div class="line">            pendingActions.setOldState(r.state);</div><div class="line">            pendingActions.setRestoreInstanceState(true);</div><div class="line">            pendingActions.setCallOnPostCreate(true);</div><div class="line">        &#125;</div><div class="line">    &#125; else &#123;</div><div class="line">        // If there was an error, for any reason, tell the activity manager to stop us.</div><div class="line">        try &#123;</div><div class="line">            ActivityManager.getService()</div><div class="line">                    .finishActivity(r.token, Activity.RESULT_CANCELED, null,</div><div class="line">                            Activity.DONT_FINISH_TASK_WITH_ACTIVITY);</div><div class="line">        &#125; catch (RemoteException ex) &#123;</div><div class="line">            throw ex.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return a;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>performLaunchActivity 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</div><div class="line">    ...</div><div class="line">    </div><div class="line">    // 构建 ContextImpl</div><div class="line">    ContextImpl appContext = createBaseContextForActivity(r);</div><div class="line">    Activity activity = null;</div><div class="line">    try &#123;</div><div class="line">        java.lang.ClassLoader cl = appContext.getClassLoader();</div><div class="line">        // 创建 Activity</div><div class="line">        activity = mInstrumentation.newActivity(</div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        StrictMode.incrementExpectedActivityCount(activity.getClass());</div><div class="line">        r.intent.setExtrasClassLoader(cl);</div><div class="line">        r.intent.prepareToEnterProcess();</div><div class="line">        if (r.state != null) &#123;</div><div class="line">            r.state.setClassLoader(cl);</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        if (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">            throw new RuntimeException(</div><div class="line">                    &quot;Unable to instantiate activity &quot; + component</div><div class="line">                            + &quot;: &quot; + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        // 创建 Application</div><div class="line">        Application app = r.packageInfo.makeApplication(false, mInstrumentation);</div><div class="line"></div><div class="line">        if (localLOGV) Slog.v(TAG, &quot;Performing launch of &quot; + r);</div><div class="line">        if (localLOGV) Slog.v(</div><div class="line">                TAG, r + &quot;: app=&quot; + app</div><div class="line">                        + &quot;, appName=&quot; + app.getPackageName()</div><div class="line">                        + &quot;, pkg=&quot; + r.packageInfo.getPackageName()</div><div class="line">                        + &quot;, comp=&quot; + r.intent.getComponent().toShortString()</div><div class="line">                        + &quot;, dir=&quot; + r.packageInfo.getAppDir());</div><div class="line"></div><div class="line">        if (activity != null) &#123;</div><div class="line">            // 获取 Activity 的 title</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = new Configuration(mCompatConfiguration);</div><div class="line">            if (r.overrideConfig != null) &#123;</div><div class="line">                config.updateFrom(r.overrideConfig);</div><div class="line">            &#125;</div><div class="line">            if (DEBUG_CONFIGURATION) Slog.v(TAG, &quot;Launching activity &quot;</div><div class="line">                    + r.activityInfo.name + &quot; with config &quot; + config);</div><div class="line">            Window window = null;</div><div class="line">            if (r.mPendingRemoveWindow != null &amp;&amp; r.mPreserveWindow) &#123;</div><div class="line">                window = r.mPendingRemoveWindow;</div><div class="line">                r.mPendingRemoveWindow = null;</div><div class="line">                r.mPendingRemoveWindowManager = null;</div><div class="line">            &#125;</div><div class="line">            appContext.setOuterContext(activity);</div><div class="line">            // Activity 与 Context、Application 关联起来</div><div class="line">            activity.attach(appContext, this, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback);</div><div class="line"></div><div class="line">            if (customIntent != null) &#123;</div><div class="line">                activity.mIntent = customIntent;</div><div class="line">            &#125;</div><div class="line">            r.lastNonConfigurationInstances = null;</div><div class="line">            checkAndBlockForNetworkAccess();</div><div class="line">            activity.mStartedActivity = false;</div><div class="line">            int theme = r.activityInfo.getThemeResource();</div><div class="line">            if (theme != 0) &#123;</div><div class="line">                activity.setTheme(theme);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            activity.mCalled = false;</div><div class="line">            if (r.isPersistable()) &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">            &#125; else &#123;</div><div class="line">                // 回调 Activity 的 onCreate 方法</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">            &#125;</div><div class="line">            if (!activity.mCalled) &#123;</div><div class="line">                throw new SuperNotCalledException(</div><div class="line">                        &quot;Activity &quot; + r.intent.getComponent().toShortString() +</div><div class="line">                                &quot; did not call through to super.onCreate()&quot;);</div><div class="line">            &#125;</div><div class="line">            r.activity = activity;</div><div class="line">        &#125;</div><div class="line">        r.setState(ON_CREATE);</div><div class="line"></div><div class="line">        mActivities.put(r.token, r);</div><div class="line"></div><div class="line">    &#125; catch (SuperNotCalledException e) &#123;</div><div class="line">        throw e;</div><div class="line"></div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        if (!mInstrumentation.onException(activity, e)) &#123;</div><div class="line">            throw new RuntimeException(</div><div class="line">                    &quot;Unable to start activity &quot; + component</div><div class="line">                            + &quot;: &quot; + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return activity;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 handleLaunchActivity 中会调用 perfromLaunchActivity 执行 Applicaton、ContextImpl、Activity 的创建工作，并且通过 Activity 的 attach 将这 3 者关联起来。</p><p>Activity 是 Context 的子类，因此，Activity 就具有了 Context 定义的所有方法。但 Activity 并不实现具体的功能，它只是继承了 Context 的接口，并且将相关的操作交给 ContextImpl。ContextImpl 存储在 Activity 的上两层父类 ContextWrapper 中，变量名为 mBase，具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class ContextThemeWrapper extends ContextWrapper &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void attachBaseContext(Context newBase) &#123;</div><div class="line">        super.attachBaseContext(newBase);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public class ContextWrapper extends Context &#123;</div><div class="line">    Context mBase;</div><div class="line"></div><div class="line">    public ContextWrapper(Context base) &#123;</div><div class="line">        mBase = base;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * Set the base context for this ContextWrapper.  All calls will then be</div><div class="line">     * delegated to the base context.  Throws</div><div class="line">     * IllegalStateException if a base context has already been set.</div><div class="line">     *</div><div class="line">     * @param base The new base context for this wrapper.</div><div class="line">     */</div><div class="line">    protected void attachBaseContext(Context base) &#123;</div><div class="line">        if (mBase != null) &#123;</div><div class="line">            throw new IllegalStateException(&quot;Base context already set&quot;);</div><div class="line">        &#125;</div><div class="line">        mBase = base;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 ActivityThread 类的 perfromLaunchActivity 函数中会调用 Activity 的 attach 方法将 ContextImpl 等对象关联到 Activity 中，这个 ContextImpl 最终会被 ContentWrapper 类的 mBase 字段引用。Activity 的 attach 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">final void attach(Context context, ActivityThread aThread,</div><div class="line">                  Instrumentation instr, IBinder token, int ident,</div><div class="line">                  Application application, Intent intent, ActivityInfo info,</div><div class="line">                  CharSequence title, Activity parent, String id,</div><div class="line">                  NonConfigurationInstances lastNonConfigurationInstances,</div><div class="line">                  Configuration config, String referrer, IVoiceInteractor voiceInteractor,</div><div class="line">                  Window window, ActivityConfigCallback activityConfigCallback) &#123;</div><div class="line">    // 调用自身的 attachBaseContext</div><div class="line">    attachBaseContext(context);</div><div class="line"></div><div class="line">    mFragments.attachHost(null /*parent*/);</div><div class="line"></div><div class="line">    mWindow = new PhoneWindow(this, window, activityConfigCallback);</div><div class="line">    mWindow.setWindowControllerCallback(this);</div><div class="line">    mWindow.setCallback(this);</div><div class="line">    mWindow.setOnWindowDismissedCallback(this);</div><div class="line">    mWindow.getLayoutInflater().setPrivateFactory(this);</div><div class="line">    if (info.softInputMode != WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) &#123;</div><div class="line">        mWindow.setSoftInputMode(info.softInputMode);</div><div class="line">    &#125;</div><div class="line">    if (info.uiOptions != 0) &#123;</div><div class="line">        mWindow.setUiOptions(info.uiOptions);</div><div class="line">    &#125;</div><div class="line">    mUiThread = Thread.currentThread();</div><div class="line"></div><div class="line">    mMainThread = aThread;</div><div class="line">    mInstrumentation = instr;</div><div class="line">    mToken = token;</div><div class="line">    mIdent = ident;</div><div class="line">    mApplication = application;</div><div class="line">    mIntent = intent;</div><div class="line">    mReferrer = referrer;</div><div class="line">    mComponent = intent.getComponent();</div><div class="line">    mActivityInfo = info;</div><div class="line">    mTitle = title;</div><div class="line">    mParent = parent;</div><div class="line">    mEmbeddedID = id;</div><div class="line">    mLastNonConfigurationInstances = lastNonConfigurationInstances;</div><div class="line">    if (voiceInteractor != null) &#123;</div><div class="line">        if (lastNonConfigurationInstances != null) &#123;</div><div class="line">            mVoiceInteractor = lastNonConfigurationInstances.voiceInteractor;</div><div class="line">        &#125; else &#123;</div><div class="line">            mVoiceInteractor = new VoiceInteractor(voiceInteractor, this, this,</div><div class="line">                    Looper.myLooper());</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mWindow.setWindowManager(</div><div class="line">            (WindowManager)context.getSystemService(Context.WINDOW_SERVICE),</div><div class="line">            mToken, mComponent.flattenToString(),</div><div class="line">            (info.flags &amp; ActivityInfo.FLAG_HARDWARE_ACCELERATED) != 0);</div><div class="line">    if (mParent != null) &#123;</div><div class="line">        mWindow.setContainer(mParent.getWindow());</div><div class="line">    &#125;</div><div class="line">    mWindowManager = mWindow.getWindowManager();</div><div class="line">    mCurrentConfig = config;</div><div class="line"></div><div class="line">    mWindow.setColorMode(info.colorMode);</div><div class="line"></div><div class="line">    setAutofillCompatibilityEnabled(application.isAutofillCompatibilityEnabled());</div><div class="line">    enableAutofillCompatibilityIfNeeded();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>attach 主要就是一些赋值操作。在 attach 中，调用了 attachBaseContext 函数。attachBaseContext 调用了父类 ContextWrapper 类，它就是简单地将 Context 参数传递给 mBase 字段。此时，我们的 Activity 内部就持有了 ContextImpl 的引用。</p><p>Activity 的 attachBaseContext：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void attachBaseContext(Context newBase) &#123;</div><div class="line">    // 调用了 ContextThemeWrapper 的 attachBaseContext</div><div class="line">    super.attachBaseContext(newBase);</div><div class="line">    if (newBase != null) &#123;</div><div class="line">        newBase.setAutofillClient(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Activity 在开发过程中部分充当了代理的角色，例如，当我们通过 Activity 对象调用 sendBroadcast、getResource 等函数时，实际上 Activity 只是代理了 ContextImpl 的操作，也就是内部都调用了 mBase 对象的相应方法来处理，这些方法被封装在 Activity 的父类 ContextWrapper 中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class ContextWrapper extends Context &#123;</div><div class="line">    Context mBase;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public void sendBroadcast(Intent intent) &#123;</div><div class="line">        mBase.sendBroadcast(intent);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public Resources getResources() &#123;</div><div class="line">        return mBase.getResources();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public PackageManager getPackageManager() &#123;</div><div class="line">        return mBase.getPackageManager();</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ContextImpl 的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">class ContextImpl extends Context &#123;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public void sendBroadcast(Intent intent) &#123;</div><div class="line">        warnIfCallingFromSystemProcess();</div><div class="line">        String resolvedType = intent.resolveTypeIfNeeded(getContentResolver());</div><div class="line">        try &#123;</div><div class="line">            intent.prepareToLeaveProcess(this);</div><div class="line">            ActivityManager.getService().broadcastIntent(</div><div class="line">                    mMainThread.getApplicationThread(), intent, resolvedType, null,</div><div class="line">                    Activity.RESULT_OK, null, null, null, AppOpsManager.OP_NONE, null, false, false,</div><div class="line">                    getUserId());</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            throw e.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public Resources getResources() &#123;</div><div class="line">        return mResources;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public PackageManager getPackageManager() &#123;</div><div class="line">        if (mPackageManager != null) &#123;</div><div class="line">            return mPackageManager;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        IPackageManager pm = ActivityThread.getPackageManager();</div><div class="line">        if (pm != null) &#123;</div><div class="line">            // Doesn&apos;t matter if we make more than one instance.</div><div class="line">            return (mPackageManager = new ApplicationPackageManager(this, pm));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ContextImpl 内部封装了很多不同子系统的操作，例如，Activity 的跳转、发送广播、启动服务、设置壁纸等，这些工作并不是在 ContextImpl 中实现，而是转交给了具体的子系统进行处理。通过 Context 这个抽象类定义了一组接口，ContextImpl 实现 Context 定义的接口，使得用户可以通过 Context 这个接口统一与 Android 系统进行交互，这样用户通常情况下就不需要对每个子系统进行了解，例如启动 Activity 时用户不需要手动调用 mMainThread.getInstrumentation().execStartActivity 启动 Activity。用户与系统服务的交互都通过 Context 的高层接口。这样对用户屏蔽了具体实现的细节，降低了使用成本。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;外观（Facade）模式：&lt;
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>21 设计模式——享元模式</title>
    <link href="http://yoursite.com/2019/08/27/PATTERN/21%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E4%BA%AB%E5%85%83%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/27/PATTERN/21 设计模式——享元模式/</id>
    <published>2019-08-26T17:00:00.000Z</published>
    <updated>2020-03-06T16:20:25.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>享元（Flyweight）模式：<strong>使用共享对象可有效地支持大量的细粒度的对象</strong>。</p><p>享元模式是对象池的一种实现，代表轻量级的意思。用来尽可能减少内存使用量，它适合用于大量重复对象的场景，来缓存可共享的对象，达到对象共享，避免创建过多对象的效果，这样一来就可以提升性能，避免内存移除等。</p><p>享元模式中存在以下两种状态：</p><ul><li>内部状态，即不会随着环境的改变而改变的可共享部分；</li><li>外部状态，指随环境改变而改变的不可以共享的部分。</li></ul><p>享元模式的实现要领就是区分应用中的这两种状态，并将外部状态外部化。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><p>相同对象只要保存一份，这降低了系统中对象的数量，从而降低了系统中细粒度对象给内存带来的压力。</p><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>为了使对象可以共享，需要将一些不能共享的状态外部化，这将增加程序的复杂性。</li><li>读取享元模式的外部状态会使得运行时间稍微变长。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>系统存在大量相似或相同的对象。</li><li>需要缓冲池时。</li><li>细粒度的对象都具备较接近的外部状态，而且内部状态与环境无关，也就是说对象没有特定身份。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Flyweight（抽象享元角色）：接口或抽象类，可以同时定义出对象的外部状态和内部状态的接口或实现。</li><li>ConcreteFlyweight（具体享元角色）：实现抽象享元角色中定义的业务。</li><li>UnsharedConcreteFlyweight（不可共享的享元角色）：并不是所有的抽象享元类的子类都需要被共享，不能被共享的子类可设计为非共享具体享元类；当需要一个非共享具体享元类的对象时可以直接通过实例化创建。该对象一般不会出现在享元工厂中。</li><li>FlyweightFactory（享元工厂）：管理对象池和创建享元对象。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5451ee2a3b8aa29f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>享元模式的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">// 非享元角色</div><div class="line">class UnsharedConcreteFlyweight &#123;</div><div class="line">    private String info;</div><div class="line">    UnsharedConcreteFlyweight(String info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line">    public String getInfo() &#123;</div><div class="line">        return info;</div><div class="line">    &#125;</div><div class="line">    public void setInfo(String info) &#123;</div><div class="line">        this.info = info;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象享元角色</div><div class="line">interface Flyweight &#123;</div><div class="line">    void operation(UnsharedConcreteFlyweight state);</div><div class="line">&#125;</div><div class="line">// 具体享元角色</div><div class="line">class ConcreteFlyweight implements Flyweight &#123;</div><div class="line">    private String key;</div><div class="line">    ConcreteFlyweight(String key) &#123;</div><div class="line">        this.key = key;</div><div class="line">        System.out.println(&quot;具体享元&quot;+key+&quot;被创建！&quot;);</div><div class="line">    &#125;</div><div class="line">    public void operation(UnsharedConcreteFlyweight outState) &#123;</div><div class="line">        System.out.print(&quot;具体享元&quot;+key+&quot;被调用，&quot;);</div><div class="line">        System.out.println(&quot;非享元信息是:&quot;+outState.getInfo());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 享元工厂角色</div><div class="line">class FlyweightFactory &#123;</div><div class="line">    private HashMap&lt;String, Flyweight&gt; flyweights = new HashMap&lt;&gt;();</div><div class="line">    public Flyweight getFlyweight(String key) &#123;</div><div class="line">        Flyweight flyweight = (Flyweight)flyweights.get(key);</div><div class="line">        if(flyweight != null) &#123;</div><div class="line">            System.out.println(&quot;具体享元&quot;+key+&quot;已经存在，被成功获取！&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            flyweight = new ConcreteFlyweight(key);</div><div class="line">            flyweights.put(key, flyweight);</div><div class="line">        &#125;</div><div class="line">        return flyweight;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">FlyweightFactory factory = new FlyweightFactory();</div><div class="line">Flyweight f01 = factory.getFlyweight(&quot;a&quot;);</div><div class="line">Flyweight f02 = factory.getFlyweight(&quot;a&quot;);</div><div class="line">Flyweight f03 = factory.getFlyweight(&quot;a&quot;);</div><div class="line">Flyweight f11 = factory.getFlyweight(&quot;b&quot;);</div><div class="line">Flyweight f12 = factory.getFlyweight(&quot;b&quot;);       </div><div class="line">f01.operation(new UnsharedConcreteFlyweight(&quot;第1次调用a。&quot;));</div><div class="line">f02.operation(new UnsharedConcreteFlyweight(&quot;第2次调用a。&quot;));</div><div class="line">f03.operation(new UnsharedConcreteFlyweight(&quot;第3次调用a。&quot;));</div><div class="line">f11.operation(new UnsharedConcreteFlyweight(&quot;第1次调用b。&quot;));</div><div class="line">f12.operation(new UnsharedConcreteFlyweight(&quot;第2次调用b。&quot;));</div></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">具体享元a被创建！</div><div class="line">具体享元a已经存在，被成功获取！</div><div class="line">具体享元a已经存在，被成功获取！</div><div class="line">具体享元b被创建！</div><div class="line">具体享元b已经存在，被成功获取！</div><div class="line">具体享元a被调用，非享元信息是:第1次调用a。</div><div class="line">具体享元a被调用，非享元信息是:第2次调用a。</div><div class="line">具体享元a被调用，非享元信息是:第3次调用a。</div><div class="line">具体享元b被调用，非享元信息是:第1次调用b。</div><div class="line">具体享元b被调用，非享元信息是:第2次调用b。</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>这个是一个买车票的例子，客户端通过输入起始地和目的地到服务器，服务器返回车票价格信息，一次请求总会产生一个车票价格信息对象，如果是成千上万的用户不停的请求势必会使得服务器产生大量的重复对象，为了避免不必要的内存开销，可以使用享元模式来优化这种情况。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// 定义车票接口和展示车票信息的函数</div><div class="line">public interface Ticket &#123;</div><div class="line">    void showTicketInfo(String bunk);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 火车票实现类</div><div class="line">public class TrainTicket implements Ticket &#123;</div><div class="line">    public String from;  // 始发地：内部状态</div><div class="line">    public String to;    // 目的地：内部状态</div><div class="line">    public String bunk;  // 铺位：外部状态</div><div class="line">    public  int price;   // 价格：外部状态</div><div class="line">    public TrainTicket(String from, String to) &#123;</div><div class="line">        this.from = from;</div><div class="line">        this.to = to;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void showTicketInfo(String bunk) &#123;</div><div class="line">        price = new Random().nextInt(300);</div><div class="line">        System.out.println(&quot;购买 从 &quot;+from+&quot; 到 &quot;+to+&quot; 的 &quot;+bunk+&quot; 火车票&quot;+&quot;,价格 : &quot;+price);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// </div><div class="line">public class TicketFactory &#123;</div><div class="line">    static Map&lt;String,Ticket&gt; sTicketMap = new ConcurrentHashMap&lt;&gt;();</div><div class="line"></div><div class="line">    public static Ticket getTicket(String from, String to)&#123;</div><div class="line">        String key = from + &quot;-&quot; + to;</div><div class="line">        if (sTicketMap.containsKey(key))&#123;</div><div class="line">            System.out.println(&quot;使用缓存 ==&gt; &quot;+key);</div><div class="line">            return sTicketMap.get(key);</div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;创建对象 ==&gt; &quot;+key);</div><div class="line">            Ticket ticket = new TrainTicket(from,to);</div><div class="line">            sTicketMap.put(key,ticket);</div><div class="line">            return ticket;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这种方式把对象缓存到了sTicketMap， key为 “from + “-“ + to”，这样避免了重复的起始地和目的地产生重复对象的情况。</p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>Handler 消息机制中的 Message 消息池就是使用享元模式复用了 Message 对象。</p><p>使用 Message 时一般会用到 Message.obtain 来获取消息。如果使用 new Message() 会构造大量的 Message 对象。obtain 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public static Message obtain() &#123;</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        if (sPool != null) &#123;</div><div class="line">            Message m = sPool;</div><div class="line">            sPool = m.next;</div><div class="line">            m.next = null;</div><div class="line">            // 清空 in-use 标记</div><div class="line">            m.flags = 0; // clear in-use flag</div><div class="line">            sPoolSize--;</div><div class="line">            return m;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    return new Message();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>sPoolSync 和 sPool 定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> *</div><div class="line"> * Defines a message containing a description and arbitrary data object that can be</div><div class="line"> * sent to a &#123;@link Handler&#125;.  This object contains two extra int fields and an</div><div class="line"> * extra object field that allow you to not do allocations in many cases.</div><div class="line"> *</div><div class="line"> * &lt;p class=&quot;note&quot;&gt;While the constructor of Message is public, the best way to get</div><div class="line"> * one of these is to call &#123;@link #obtain Message.obtain()&#125; or one of the</div><div class="line"> * &#123;@link Handler#obtainMessage Handler.obtainMessage()&#125; methods, which will pull</div><div class="line"> * them from a pool of recycled objects.&lt;/p&gt;</div><div class="line"> */</div><div class="line">public final class Message implements Parcelable &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    // sometimes we store linked lists of these things</div><div class="line">    /*package*/ Message next;</div><div class="line"></div><div class="line">    public static final Object sPoolSync = new Object();</div><div class="line">    private static Message sPool;</div><div class="line">    private static int sPoolSize = 0;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>sPoolSync 是一个对象锁，用于在获取 Message 对象时进行同步锁。<br>sPool 是一个静态的 Message 对象。<br>next 是一个 Message 对象，指向下一个 Message。</p><p>可以看出，Message 消息池没有使用 map 这样的容器，而是使用的链表。</p><p>那么这些 Message 是什么时候放入链表中的呢？我们在 obtain 函数中只看到了从链表中获取，并且看到存储。如果消息池链表中没有可用对象的时候，obtain 中则是直接返回一个通过 new 创建的 Message 对象，而且并没有存储到链表中。</p><p>Message 类有一个 recycle 方法，它用来回收消息，并且把回收掉的消息添加到对象池链表中。recycle 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void recycle() &#123;</div><div class="line">    // 判断消息是否还在使用</div><div class="line">    if (isInUse()) &#123;</div><div class="line">        if (gCheckRecycle) &#123;</div><div class="line">            throw new IllegalStateException(&quot;This message cannot be recycled because it &quot;</div><div class="line">                    + &quot;is still in use.&quot;);</div><div class="line">        &#125;</div><div class="line">        return;</div><div class="line">    &#125;</div><div class="line">    // 清空状态，并且将消息添加到消息池中</div><div class="line">    recycleUnchecked();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>recycleUnchecked 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">void recycleUnchecked() &#123;</div><div class="line">    // Mark the message as in use while it remains in the recycled object pool.</div><div class="line">    // Clear out all other details.</div><div class="line">    // 清空消息状态，设置该消息 in-use flag</div><div class="line">    flags = FLAG_IN_USE;</div><div class="line">    what = 0;</div><div class="line">    arg1 = 0;</div><div class="line">    arg2 = 0;</div><div class="line">    obj = null;</div><div class="line">    replyTo = null;</div><div class="line">    sendingUid = -1;</div><div class="line">    when = 0;</div><div class="line">    target = null;</div><div class="line">    callback = null;</div><div class="line">    data = null;</div><div class="line"></div><div class="line">    // 回收消息到消息池中</div><div class="line">    synchronized (sPoolSync) &#123;</div><div class="line">        if (sPoolSize &lt; MAX_POOL_SIZE) &#123;</div><div class="line">            next = sPool;</div><div class="line">            sPool = this;</div><div class="line">            sPoolSize++;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>recycle 会将一个 Message 回收到一个全局的池。如果消息在使用就抛出异常，否则调用 recycleUnchecked。</p><p>recycleUnchecked 先清空字段，然后回收消息，将 sPool 指向当前消息，同时 size 加一。</p><p>Message 通过在内部构建一个链表来维护一个被回收的 Message 对象的对象池，当用户调用 obtain 时会优先从池中取，如果池中没有可以复用的对象则创建这个新的 Message 对象。这些新创建的 Message 对象在被使用完之后会被回收到这个对象池中，当下次再调用 obtain 时，它们就会被复用。</p><p>因为 Android 应用是事件驱动的，因此，如果通过 new 创建 Message 会产生大量的重复的 Message 对象，导致内存占用率高、频繁 GC 等问题，通过享元模式创建一个大小为 50 的消息池，避免了上述问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;享元（Flyweight）模
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>20 设计模式——装饰模式</title>
    <link href="http://yoursite.com/2019/08/26/PATTERN/20%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A3%85%E9%A5%B0%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/26/PATTERN/20 设计模式——装饰模式/</id>
    <published>2019-08-25T17:00:00.000Z</published>
    <updated>2020-03-06T14:32:41.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>装饰（Decorator）模式：<strong>动态地给一个对象添加一些额外的职责。就增加功能来说，装饰模式相比生成子类更为灵活。</strong>。</p><p>装饰模式也称为包装模式，结构型设计模式之一，其使用一种对客户端透明的方式来动态地扩展对象地功能，同时它也是继承关系的一种替代方案之一。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>采用装饰模式扩展对象的功能比采用继承方式更加灵活。</li><li>可以设计出多个不同的具体装饰类，创造出多个不同行为的组合。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>装饰模式增加了许多子类，如果过度使用会使程序变得很复杂。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>需要透明且动态地扩展类的功能。</p><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>通常情况下，扩展一个类的功能会使用继承方式来实现。但继承具有静态特征，耦合度高，并且随着扩展功能的增多，子类会很膨胀。如果使用组合关系来创建一个包装对象（即装饰对象）来包裹真实对象，并在保持真实对象的类结构不变的前提下，为其提供额外的功能，这就是装饰模式的目标。下面来分析其基本结构和实现方法。</p><p>模式包含以下主要角色。</p><ul><li>Component（抽象组件）：接口或者抽象类，被装饰的最原始的对象。具体组件与抽象装饰角色的父类。</li><li>ConcreteComponent（具体组件）：实现抽象组件的接口。</li><li>Decorator（抽象装饰角色）：一般是抽象类，抽象组件的子类，同时持有一个被装饰者的引用，用来调用被装饰者的方法;同时可以给被装饰者增加新的职责。</li><li>ConcreteDecorator（具体装饰类）：抽象装饰角色的具体实现。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-752e1b3cc271db8e.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class DecoratorPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Component p = new ConcreteComponent();</div><div class="line">        p.operation();</div><div class="line">        System.out.println(&quot;---------------------------------&quot;);</div><div class="line">        Component d = new ConcreteDecorator(p);</div><div class="line">        d.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象构件角色</div><div class="line">interface Component &#123;</div><div class="line">    void operation();</div><div class="line">&#125;</div><div class="line">// 具体构件角色</div><div class="line">class ConcreteComponent implements Component &#123;</div><div class="line">    public ConcreteComponent() &#123;</div><div class="line">        System.out.println(&quot;创建具体构件角色&quot;);</div><div class="line">    &#125;</div><div class="line">    public void operation() &#123;</div><div class="line">        System.out.println(&quot;调用具体构件角色的方法 operation()&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象装饰角色</div><div class="line">abstract class Decorator implements Component &#123;</div><div class="line">    private Component component;</div><div class="line">    public Decorator(Component component) &#123;</div><div class="line">        this.component = component;</div><div class="line">    &#125;</div><div class="line">    public void operation() &#123;</div><div class="line">        component.operation();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 具体装饰角色</div><div class="line">class ConcreteDecorator extends Decorator &#123;</div><div class="line">    public ConcreteDecorator(Component component) &#123;</div><div class="line">        super(component);</div><div class="line">    &#125;</div><div class="line">    public void operation() &#123;</div><div class="line">        super.operation();</div><div class="line">        addedFunction();</div><div class="line">    &#125;</div><div class="line">    public void addedFunction() &#123;</div><div class="line">        System.out.println(&quot;为具体构件角色增加额外的功能 addedFunction()&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">创建具体构件角色</div><div class="line">调用具体构件角色的方法 operation()</div><div class="line">---------------------------------</div><div class="line">调用具体构件角色的方法 operation()</div><div class="line">为具体构件角色增加额外的功能 addedFunction()</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>人总是要穿衣服，我们将人定义为一个抽象类，将其穿衣服的行为定义为一个抽象方法，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public abstract class Person &#123;</div><div class="line">    // Person 下有一个穿着的抽象方法</div><div class="line">    public abstract void dressed();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Boy extends Person &#123;</div><div class="line">    @Override</div><div class="line">    public void dressed() &#123;</div><div class="line">        System.out.println(&quot;穿了内衣内裤&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>PersonCloth 用来装饰 Person：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public abstract class PersonCloth extends Person &#123;</div><div class="line">    protected Person mPerson;   // 保持一个 Person 类的引用</div><div class="line"></div><div class="line">    public PersonCloth(Person person) &#123;</div><div class="line">        mPerson = person;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void dressed() &#123;</div><div class="line">        mPerson.dressed();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面两个是继承 PersonCloth 的实际装饰类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public class CheapCloth extends PersonCloth &#123;</div><div class="line">    public CheapCloth(Person person) &#123;</div><div class="line">        super(person);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void dressShorts() &#123;</div><div class="line">        System.out.println(&quot;穿条短裤&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void dressed() &#123;</div><div class="line">        super.dressed();</div><div class="line">        dressShorts()</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public class ExpensiveCloth extends PersonCloth &#123;</div><div class="line">    public ExpensiveCloth(Person person) &#123;</div><div class="line">        super(person);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 穿短袖</div><div class="line">     */</div><div class="line">    private void dressShirt() &#123;</div><div class="line">        System.out.println(&quot;穿件短袖&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 穿皮衣</div><div class="line">     */</div><div class="line">    private void dressLeather() &#123;</div><div class="line">        System.out.println(&quot;穿件皮衣&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 穿牛仔裤</div><div class="line">     */</div><div class="line">    private void dressJean() &#123;</div><div class="line">        System.out.println(&quot;穿条牛仔裤&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void dressed() &#123;</div><div class="line">        super.dressed();</div><div class="line">        dressShirt();</div><div class="line">        dressLeather();</div><div class="line">        dressJean();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 首先我们要有一个Boy</div><div class="line">Person person = new Boy();</div><div class="line"></div><div class="line">// 穿上便宜的衣服</div><div class="line">CheapCloth cheapCloth = new CheapCloth(person);</div><div class="line">cheapCloth.dressed();</div><div class="line"></div><div class="line">// 穿上昂贵的衣服</div><div class="line">ExpensiveCloth expensiveCloth = new ExpensiveCloth(person);</div><div class="line">expensiveCloth.dressed();</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>Context 类在 Android 中被称为“上帝对象”，它本质是一个抽象类，其在我们装饰者模式里相当于抽象组件，而在其内部定义了大量的抽象方法，比如我们经常会用到的 startActivity 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public abstract class Context &#123;</div><div class="line">    ...</div><div class="line">    public abstract void startActivity(@RequiresPermission Intent intent);</div><div class="line">    ...</div><div class="line">    public abstract void startActivity(@RequiresPermission Intent intent,</div><div class="line">            @Nullable Bundle options);</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>真正的实现是在 ContextImpl 中完成的，ContextImpl 继承自 Context 抽象类，并实现了 Context 中的抽象方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">class ContextImpl extends Context &#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void startActivity(Intent intent) &#123;</div><div class="line">        warnIfCallingFromSystemProcess();</div><div class="line">        startActivity(intent, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /** @hide */</div><div class="line">    @Override</div><div class="line">    public void startActivityAsUser(Intent intent, UserHandle user) &#123;</div><div class="line">        startActivityAsUser(intent, null, user);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void startActivity(Intent intent, Bundle options) &#123;</div><div class="line">        warnIfCallingFromSystemProcess();</div><div class="line"></div><div class="line">        // Calling start activity from outside an activity without FLAG_ACTIVITY_NEW_TASK is</div><div class="line">        // generally not allowed, except if the caller specifies the task id the activity should</div><div class="line">        // be launched in. A bug was existed between N and O-MR1 which allowed this to work. We</div><div class="line">        // maintain this for backwards compatibility.</div><div class="line">        final int targetSdkVersion = getApplicationInfo().targetSdkVersion;</div><div class="line"></div><div class="line">        if ((intent.getFlags() &amp; Intent.FLAG_ACTIVITY_NEW_TASK) == 0</div><div class="line">                &amp;&amp; (targetSdkVersion &lt; Build.VERSION_CODES.N</div><div class="line">                        || targetSdkVersion &gt;= Build.VERSION_CODES.P)</div><div class="line">                &amp;&amp; (options == null</div><div class="line">                        || ActivityOptions.fromBundle(options).getLaunchTaskId() == -1)) &#123;</div><div class="line">            throw new AndroidRuntimeException(</div><div class="line">                    &quot;Calling startActivity() from outside of an Activity &quot;</div><div class="line">                            + &quot; context requires the FLAG_ACTIVITY_NEW_TASK flag.&quot;</div><div class="line">                            + &quot; Is this really what you want?&quot;);</div><div class="line">        &#125;</div><div class="line">        mMainThread.getInstrumentation().execStartActivity(</div><div class="line">                getOuterContext(), mMainThread.getApplicationThread(), null,</div><div class="line">                (Activity) null, intent, -1, options);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里 ContextImpl 就相当于组件具体实现类，那么谁来承担装饰者的身份呢？</p><p>Activity 从类层次上来说本质是一个 Context。Activity 并非直接继承于 Context，而是继承于 ContextThemeWrapper。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class Activity extends ContextThemeWrapper</div><div class="line">        implements LayoutInflater.Factory2,</div><div class="line">        Window.Callback, KeyEvent.Callback,</div><div class="line">        OnCreateContextMenuListener, ComponentCallbacks2,</div><div class="line">        Window.OnWindowDismissedCallback, WindowControllerCallback,</div><div class="line">        AutofillManager.AutofillClient &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而这个 ContextThemeWrapper 又是继承于 ContextWrapper。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public class ContextThemeWrapper extends ContextWrapper &#123;&#125;</div></pre></td></tr></table></figure></p><p>最终这个 ContextWrapper 才继承于 Context。</p><p>为什么类层次会这么复杂呢？其实这里就是一个典型的装饰模式，ContextWrapper 就是我们要找的装饰者，在 ContextWrapper 中有一个 Context 的引用。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class ContextWrapper extends Context &#123;</div><div class="line">    Context mBase;</div><div class="line"></div><div class="line">    public ContextWrapper(Context base) &#123;</div><div class="line">        mBase = base;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Set the base context for this ContextWrapper.  All calls will then be</div><div class="line">     * delegated to the base context.  Throws</div><div class="line">     * IllegalStateException if a base context has already been set.</div><div class="line">     * </div><div class="line">     * @param base The new base context for this wrapper.</div><div class="line">     */</div><div class="line">    protected void attachBaseContext(Context base) &#123;</div><div class="line">        if (mBase != null) &#123;</div><div class="line">            throw new IllegalStateException(&quot;Base context already set&quot;);</div><div class="line">        &#125;</div><div class="line">        mBase = base;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ContextWrapper 类的 startActivity 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void startActivity(Intent intent) &#123;</div><div class="line">    mBase.startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看出它调用了 ContextImpl 中对应的方法。</p><p>装饰模式应用的套路都是很相似的，对于具体方法的包装扩展则由 ContextWrapper 的具体子类完成，比如我们的 Activity、Service 和 Application。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;装饰（Decorator）模
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>19 设计模式——适配器模式</title>
    <link href="http://yoursite.com/2019/08/25/PATTERN/19%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E9%80%82%E9%85%8D%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/25/PATTERN/19 设计模式——适配器模式/</id>
    <published>2019-08-24T17:00:00.000Z</published>
    <updated>2020-03-06T12:00:40.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>适配器（Adapter）模式：<strong>把一个类的接口变换成客户端所期待的另一种接口，从而使原本因接口不匹配而无法在一起工作的两个类能够一起工作</strong>。适配器模式分为类结构型模式和对象结构型模式两种，前者类之间的耦合度比后者高，且要求程序员了解现有组件库中的相关组件的内部结构，所以应用相对较少些。</p><p>适配器模式在我们开发中使用率极高，从代码中随处可见的 Adapter 可以判断出来。从最早的 ListView、GridView 到现在最新的 RecyclerView 都需要使用 Adapter。说到底，适配器是将两个不兼容的类融合在一起，它有点像粘合剂，将不同的东西通过一种转换使得它们能够协作起来。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>更好的复用性。系统需要使用现有的类，而此类的接口不符合系统的需要。那么通过适配器模式就可以让这些功能得到更好的复用。</li><li>更好的扩展性。在实现适配器功能的时候，可以调用自己开发的工功能，从而自然地扩展系统的功能。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>过多地使用适配器，会让系统非常零乱，不易整体把握。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>当想使用一个已经存在的类，但它的接口不符合需求时。</li><li>当想创建一个可以复用的类，该类可以与其他不相关的类或不可预见的类协同工作。</li><li>需要一个统一的输出接口，而输入端的类型不可预知。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>类适配器模式可采用多重继承方式实现，如 C++ 可定义一个适配器类来同时继承当前系统的业务接口和现有组件库中已经存在的组件接口；Java 不支持多继承，但可以定义一个适配器类来实现当前系统的业务接口，同时又继承现有组件库中已经存在的组件。</p><p>对象适配器模式可釆用将现有组件库中已经实现的组件引入适配器类中，该类同时实现当前系统的业务接口。现在来介绍它们的基本结构。</p><p>模式包含以下主要角色。</p><ul><li>Target：目标接口，当前系统业务所期待的接口，它可以是抽象类或接口。</li><li>Adaptee：适配者类，它是被访问和适配的现存组件库中的组件接口。</li><li>Adapter：适配器类，它是一个转换器，通过继承或引用适配者的对象，把适配者接口转换成目标接口，让客户按目标接口的格式访问适配者。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d15db3d7111f6640.gif?imageMogr2/auto-orient/strip" alt="类适配器模式的结构图"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a48b7aa9fffbb165.gif?imageMogr2/auto-orient/strip" alt="对象适配器模式的结构图"></p><p>类适配器模式的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">// 目标接口</div><div class="line">interface Target &#123;</div><div class="line">    void request();</div><div class="line">&#125;</div><div class="line">// 适配者接口</div><div class="line">class Adaptee &#123;</div><div class="line">    public void specificRequest() &#123;</div><div class="line">        System.out.println(&quot;适配者中的业务代码被调用！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 类适配器类</div><div class="line">class ClassAdapter extends Adaptee implements Target &#123;</div><div class="line">    public void request() &#123;</div><div class="line">        specificRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 客户端代码</div><div class="line">public class ClassAdapterTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.println(&quot;类适配器模式测试：&quot;);</div><div class="line">        Target target = new ClassAdapter();</div><div class="line">        target.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对象适配器模式的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 对象适配器类</div><div class="line">class ObjectAdapter implements Target &#123;</div><div class="line">    private Adaptee adaptee;</div><div class="line">    public ObjectAdapter(Adaptee adaptee) &#123;</div><div class="line">        this.adaptee = adaptee;</div><div class="line">    &#125;</div><div class="line">    public void request() &#123;</div><div class="line">        adaptee.specificRequest();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 客户端代码</div><div class="line">public class ObjectAdapterTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.println(&quot;对象适配器模式测试：&quot;);</div><div class="line">        Adaptee adaptee = new Adaptee();</div><div class="line">        Target target = new ObjectAdapter(adaptee);</div><div class="line">        target.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>说明：对象适配器模式中的“目标接口”和“适配者类”的代码同类适配器模式一样，只要修改适配器类和客户端的代码即可。<strong>与类的适配器模式不同的是，对象的适配器模式不是使用继承关系连接到 Adaptee 类，而是使用代理关系</strong>。</p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>用电源接口做例子，笔记本电脑的电源一般在 5V 电压，但是在我们生活中的电线电压一般是 220V。这个时候出现了不匹配的状况，在软件开发中称为接口不兼容，此时就需要适配器来进行一个接口转换。此时需要用一个 Adapter 层来进行接口转换。即：5V 电压就是 Target 接口，220V 电压就是 Adaptee 类，而将电压从 220V 转换到 5V 就是 Adapter。</p><ul><li><strong>类适配器模式</strong>。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">// Target</div><div class="line">public interface FiveVolt &#123;</div><div class="line">    int getVolt5();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Adaptee</div><div class="line">public class Volt220 &#123;</div><div class="line">    public int getVolt220()&#123;</div><div class="line">        return 220;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Adapter</div><div class="line">public class VoltAdapter extends Volt220 implements FiveVolt &#123;</div><div class="line">    @Override</div><div class="line">    public int getVolt5() &#123;</div><div class="line">        return 5;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        VoltAdapter adapter = new VoltAdapter();</div><div class="line">        System.out.println(&quot;输出电压 : &quot; + adapter.getVolt5());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li><strong>对象适配器模式</strong>。<br>Target 和 Adaptee 同上，但 Adapter 类不继承 Adaptee 类，而是代理，这比类适配器方式更为灵活。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class VoltAdapter implements FiveVolt &#123;</div><div class="line">    private Volt220 mVolt220;</div><div class="line"></div><div class="line">    public VoltAdapter(Volt220 mVolt220) &#123;</div><div class="line">        this.mVolt220 = mVolt220;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int getVolt220()&#123;</div><div class="line">        return mVolt220.getVolt220();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getVolt5() &#123;</div><div class="line">        return 5;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        VoltAdapter adapter = new VoltAdapter(new Volt220());</div><div class="line">        System.out.println(&quot;输出电压 : &quot;+adapter.getVolt5());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>在开发过程中，ListView 的 Adapter 是我们最常见的类型之一。ListView 中并没有 Adapter 相关的成员变量，其实 Adapter 在 ListView 的父类 AbsListView 中，AbsListView 是一个列表控件的抽象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">public abstract class AbsListView extends AdapterView&lt;ListAdapter&gt; implements TextWatcher,</div><div class="line">        ViewTreeObserver.OnGlobalLayoutListener, Filter.FilterListener,</div><div class="line">        ViewTreeObserver.OnTouchModeChangeListener,</div><div class="line">        RemoteViewsAdapter.RemoteAdapterConnectionCallback &#123;</div><div class="line">    ...</div><div class="line">    ListAdapter mAdapter;</div><div class="line">    ...</div><div class="line">    // 关联到 Window 时调用，获取调用 Adapter 中的 getCount 方法等</div><div class="line">    @Override</div><div class="line">    protected void onAttachedToWindow() &#123;</div><div class="line">        super.onAttachedToWindow();</div><div class="line"></div><div class="line">        final ViewTreeObserver treeObserver = getViewTreeObserver();</div><div class="line">        treeObserver.addOnTouchModeChangeListener(this);</div><div class="line">        if (mTextFilterEnabled &amp;&amp; mPopup != null &amp;&amp; !mGlobalLayoutListenerAddedFilter) &#123;</div><div class="line">            treeObserver.addOnGlobalLayoutListener(this);</div><div class="line">        &#125;</div><div class="line">        // 给适配器注册一个观察者</div><div class="line">        if (mAdapter != null &amp;&amp; mDataSetObserver == null) &#123;</div><div class="line">            mDataSetObserver = new AdapterDataSetObserver();</div><div class="line">            mAdapter.registerDataSetObserver(mDataSetObserver);</div><div class="line"></div><div class="line">            // Data may have changed while we were detached. Refresh.</div><div class="line">            mDataChanged = true;</div><div class="line">            mOldItemCount = mItemCount;</div><div class="line">            // 获取 Item 的数量，调用的是 mAdapter 的 getCount 方法</div><div class="line">            mItemCount = mAdapter.getCount();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    // 子类需要覆写 layoutChildren 函数来布局 child view，也就是 item view</div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        super.onLayout(changed, l, t, r, b);</div><div class="line"></div><div class="line">        mInLayout = true;</div><div class="line"></div><div class="line">        final int childCount = getChildCount();</div><div class="line">        if (changed) &#123;</div><div class="line">            for (int i = 0; i &lt; childCount; i++) &#123;</div><div class="line">                getChildAt(i).forceLayout();</div><div class="line">            &#125;</div><div class="line">            mRecycler.markChildrenDirty();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 布局 Child View</div><div class="line">        layoutChildren();</div><div class="line"></div><div class="line">        mOverscrollMax = (b - t) / OVERSCROLL_LIMIT_DIVISOR;</div><div class="line"></div><div class="line">        // TODO: Move somewhere sane. This doesn&apos;t belong in onLayout().</div><div class="line">        if (mFastScroll != null) &#123;</div><div class="line">            mFastScroll.onItemCountChanged(getChildCount(), mItemCount);</div><div class="line">        &#125;</div><div class="line">        mInLayout = false;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ListView 实现了 layoutChildren 方法，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void layoutChildren() &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        super.layoutChildren();</div><div class="line"></div><div class="line">        invalidate();</div><div class="line"></div><div class="line">        ...</div><div class="line">        // 根据布局模式来布局 item view</div><div class="line">        switch (mLayoutMode) &#123;</div><div class="line">            ...</div><div class="line">            case LAYOUT_FORCE_TOP:</div><div class="line">            case LAYOUT_FORCE_BOTTOM:</div><div class="line">            case LAYOUT_SPECIFIC:</div><div class="line">            case LAYOUT_SYNC:</div><div class="line">                break;</div><div class="line">            case LAYOUT_MOVE_SELECTION:</div><div class="line">            default:</div><div class="line">            ...</div><div class="line">        &#125;</div><div class="line">    ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ListView 覆写了 AbsListView 中的 layoutChildren 函数，在该函数中根据布局模式来布局 item view，例如，默认情况是从上到下开始布局，但是，也有从下到上开始布局的，例如 QQ 聊天窗口的气泡布局，最新的消息就会布局到窗口的最底部。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">// 从上往下填充 item view</div><div class="line">private View fillDown(int pos, int nextTop) &#123;</div><div class="line">    View selectedView = null;</div><div class="line"></div><div class="line">    int end = (mBottom - mTop);</div><div class="line">    if ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">        end -= mListPadding.bottom;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (nextTop &lt; end &amp;&amp; pos &lt; mItemCount) &#123;</div><div class="line">        // is this the selected item?</div><div class="line">        boolean selected = pos == mSelectedPosition;</div><div class="line">        // 通过 makeAndAddView 获取 item view</div><div class="line">        View child = makeAndAddView(pos, nextTop, true, mListPadding.left, selected);</div><div class="line"></div><div class="line">        nextTop = child.getBottom() + mDividerHeight;</div><div class="line">        if (selected) &#123;</div><div class="line">            selectedView = child;</div><div class="line">        &#125;</div><div class="line">        pos++;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setVisibleRangeHint(mFirstPosition, mFirstPosition + getChildCount() - 1);</div><div class="line">    return selectedView;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 从下往上填充布局</div><div class="line">private View fillUp(int pos, int nextBottom) &#123;</div><div class="line">    View selectedView = null;</div><div class="line"></div><div class="line">    int end = 0;</div><div class="line">    if ((mGroupFlags &amp; CLIP_TO_PADDING_MASK) == CLIP_TO_PADDING_MASK) &#123;</div><div class="line">        end = mListPadding.top;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    while (nextBottom &gt; end &amp;&amp; pos &gt;= 0) &#123;</div><div class="line">        // is this the selected item?</div><div class="line">        boolean selected = pos == mSelectedPosition;</div><div class="line">        // 通过 makeAndAddView 获取 item view</div><div class="line">        View child = makeAndAddView(pos, nextBottom, false, mListPadding.left, selected);</div><div class="line">        nextBottom = child.getTop() - mDividerHeight;</div><div class="line">        if (selected) &#123;</div><div class="line">            selectedView = child;</div><div class="line">        &#125;</div><div class="line">        pos--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mFirstPosition = pos + 1;</div><div class="line">    setVisibleRangeHint(mFirstPosition, mFirstPosition + getChildCount() - 1);</div><div class="line">    return selectedView;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>makeAndAddView 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private View makeAndAddView(int position, int y, boolean flow, int childrenLeft,</div><div class="line">                            boolean selected) &#123;</div><div class="line">    if (!mDataChanged) &#123;</div><div class="line">        // Try to use an existing view for this position.</div><div class="line">        final View activeView = mRecycler.getActiveView(position);</div><div class="line">        if (activeView != null) &#123;</div><div class="line">            // Found it. We&apos;re reusing an existing child, so it just needs</div><div class="line">            // to be positioned like a scrap view.</div><div class="line">            setupChild(activeView, position, y, flow, childrenLeft, selected, true);</div><div class="line">            return activeView;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取一个 item view</div><div class="line">    // Make a new view for this position, or convert an unused view if</div><div class="line">    // possible.</div><div class="line">    final View child = obtainView(position, mIsScrap);</div><div class="line"></div><div class="line">    // 将 item view 设置到对应的地方</div><div class="line">    // This needs to be positioned and measured.</div><div class="line">    setupChild(child, position, y, flow, childrenLeft, selected, mIsScrap[0]);</div><div class="line"></div><div class="line">    return child;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>makeAndAddView 分为两个步骤，第一个是根据 position 获取一个 item view，然后将这个 view 布局到特定的位置。获取一个 item view 调用的是 obtainView 方法。这个方法在 AbsListView 中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">View obtainView(int position, boolean[] outMetadata) &#123;</div><div class="line">    Trace.traceBegin(Trace.TRACE_TAG_VIEW, &quot;obtainView&quot;);</div><div class="line"></div><div class="line">    outMetadata[0] = false;</div><div class="line"></div><div class="line">    // Check whether we have a transient state view. Attempt to re-bind the</div><div class="line">    // data and discard the view if we fail.</div><div class="line">    final View transientView = mRecycler.getTransientStateView(position);</div><div class="line">    if (transientView != null) &#123;</div><div class="line">        final LayoutParams params = (LayoutParams) transientView.getLayoutParams();</div><div class="line"></div><div class="line">        // If the view type hasn&apos;t changed, attempt to re-bind the data.</div><div class="line">        if (params.viewType == mAdapter.getItemViewType(position)) &#123;</div><div class="line">            final View updatedView = mAdapter.getView(position, transientView, this);</div><div class="line"></div><div class="line">            // If we failed to re-bind the data, scrap the obtained view.</div><div class="line">            if (updatedView != transientView) &#123;</div><div class="line">                setItemViewLayoutParams(updatedView, position);</div><div class="line">                mRecycler.addScrapView(updatedView, position);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        outMetadata[0] = true;</div><div class="line"></div><div class="line">        // Finish the temporary detach started in addScrapView().</div><div class="line">        transientView.dispatchFinishTemporaryDetach();</div><div class="line">        return transientView;</div><div class="line">    &#125;</div><div class="line">    // 1. 从缓存的 item view 中获取，ListView 的复用机制就在这里</div><div class="line">    final View scrapView = mRecycler.getScrapView(position);</div><div class="line">    // 2. 注意，这里将 scrapView 设置给了 Adapter 的 getView 函数</div><div class="line">    final View child = mAdapter.getView(position, scrapView, this);</div><div class="line">    if (scrapView != null) &#123;</div><div class="line">        if (child != scrapView) &#123;</div><div class="line">            // Failed to re-bind the data, return scrap to the heap.</div><div class="line">            mRecycler.addScrapView(scrapView, position);</div><div class="line">        &#125; else if (child.isTemporarilyDetached()) &#123;</div><div class="line">            outMetadata[0] = true;</div><div class="line"></div><div class="line">            // Finish the temporary detach started in addScrapView().</div><div class="line">            child.dispatchFinishTemporaryDetach();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    return child;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>obtainView 方法定义了列表控件的 item view 的复用逻辑，首先会从 RecyclerBin 中获取一个缓存的 View。如果有缓存则将这个缓存的 View 传递到 Adapter 的 getView 的第二个参数中，这也就是我们对 Adapter 的最常见的优化方式，即判断 getView 的 convertView 是否为空。如果为空则从 xml 中创建视图，否则使用缓存的 View。这样避免了每次都从 xml 加载布局的消耗，能够显著提升 ListView 的效率。</p><p>在 ListView 的适配器模式中，target 角色就是 View，Adapter 就是将 item view 输出为 view 抽象的角色，adaptee 就是需要被处理的 item view。通过增加 adapter 一层来将 item view 的操作抽象起来，listView 等集合视图通过 adapter 对象获得 item 的个数、数据、item view 等，从而达到适配各种数据、各种 item 视图的效果。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;适配器（Adapter）模式
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>18 设计模式——组合模式</title>
    <link href="http://yoursite.com/2019/08/24/PATTERN/18%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%BB%84%E5%90%88%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/24/PATTERN/18 设计模式——组合模式/</id>
    <published>2019-08-23T17:00:00.000Z</published>
    <updated>2020-03-06T10:37:12.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>组合（Composite）模式：<strong>将对象组合成树形结构以表示“部分-整体”的层次结构，使得用户对单个对象和组合对象的使用具有一致性</strong>。</p><p>组合模式也是结构模式之一，组合模式比较简单，它将一组相似的对象看作一个对象处理，并根据一个树状结构来组合对象，然后提供一个统一的方法去访问相应的对象，以此忽略掉对象与对象之间的差别。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>组合模式使得客户端代码可以一致地处理单个对象和组合对象，无须关心自己处理的是单个对象，还是组合对象，这简化了客户端代码。</li><li>更容易在组合体内加入新的对象，客户端不会因为加入了新的对象而更改源代码，满足“开闭原则”。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>设计较复杂，客户端需要花更多时间理清类之间的层次关系。</li><li>不容易限制容器中的构件。</li><li>不容易用继承的方法来增加构件的新功能。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>表示对象的部分-整体层次结构时。</li><li>从一个整体中能独立出部分模块或功能的场景。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Component：抽象根节点，为组合中的对象声明接口。</li><li>Composite：定义有子节点的那些枝干节点的行为，存储子节点，在 Component 接口中实现与子节点有关的操作。</li><li>Leaf：在组合中表示叶子节点对象。</li><li>Client：通过 Component 接口操作组合节点的对象。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/8298629-8f5922c06863de28.png?imageMogr2/auto-orient/strip|imageView2/2/w/646/format/webp" alt=""></p><p>下面是它的模版代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">public abstract class Component &#123;</div><div class="line">    protected String name;</div><div class="line">    public Component(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    // 具体逻辑的方法由子类实现</div><div class="line">    public abstract void doSomething();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public class Composite extends Component&#123;</div><div class="line">    /**</div><div class="line">     * 存储节点的容器</div><div class="line">     * @param name</div><div class="line">     */</div><div class="line">    private List&lt;Component&gt; components = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public Composite(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void doSomething() &#123;</div><div class="line">        System.out.println(name);</div><div class="line">        if (null != components)&#123;</div><div class="line">            for (Component c : components)&#123;</div><div class="line">                c.doSomething();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加子节点</div><div class="line">     * @param child</div><div class="line">     */</div><div class="line">    public void addChild(Component child)&#123;</div><div class="line">        components.add(child);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 移除子节点</div><div class="line">     * @param child</div><div class="line">     */</div><div class="line">    public void removeChild(Component child)&#123;</div><div class="line">        components.remove(child);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取子节点</div><div class="line">     * @param index</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public Component getChildren(int index)&#123;</div><div class="line">        return components.get(index);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public class Leaf extends Component&#123;</div><div class="line">    public Leaf(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void doSomething() &#123;</div><div class="line">        System.out.print(name);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户端测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args)&#123;</div><div class="line">        // 构造一个根节点</div><div class="line">        Composite root = new Composite(&quot;Root&quot;);</div><div class="line"></div><div class="line">        // 构造两个枝干节点</div><div class="line">        Composite branch1 = new Composite(&quot;Branch1&quot;);</div><div class="line">        Composite branch2 = new Composite(&quot;Branch2&quot;);</div><div class="line"></div><div class="line">        // 构造两个叶子节点</div><div class="line">        Leaf leaf1 = new Leaf(&quot;Leaf1&quot;);</div><div class="line">        Leaf leaf2 = new Leaf(&quot;Leaf2&quot;);</div><div class="line"></div><div class="line">        // 将叶子节点添加至枝干节点中</div><div class="line">        branch1.addChild(leaf1);</div><div class="line">        branch2.addChild(leaf2);</div><div class="line"></div><div class="line">        // 将枝干节点添加至根节点中</div><div class="line">        root.addChild(branch1);</div><div class="line">        root.addChild(branch2);</div><div class="line"></div><div class="line">        // 执行方法</div><div class="line">        root.doSomething();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>下面我们以文件夹系统为例讲解一下组合模式的简单实现，整个文件夹系统如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/8298629-445ff6bc22fcd625.png?imageMogr2/auto-orient/strip|imageView2/2/w/686/format/webp" alt=""></p><p>首先声明一个抽象类，表示文件或文件夹：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public abstract class Dir &#123;</div><div class="line">    /**</div><div class="line">     * 声明一个List成员变量存储文件夹下的所有元素</div><div class="line">     */</div><div class="line">    protected List&lt;Dir&gt; dirs = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    private String name; //当前文件夹名</div><div class="line"></div><div class="line">    public Dir(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 添加一个文件或文件夹</div><div class="line">     */</div><div class="line">    public abstract void addDir(Dir dir);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 移除一个文件或文件夹</div><div class="line">     */</div><div class="line">    public abstract void rmDir(Dir dir);</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 清除文件夹下面的所有元素</div><div class="line">     */</div><div class="line">    public abstract void clear();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 清空文件夹下的所有元素</div><div class="line">     */</div><div class="line">    public abstract void print();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取文件夹下所有的文件或子文件夹</div><div class="line">     */</div><div class="line">    public abstract List&lt;Dir&gt; getFiles();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 获取文件或文件夹名</div><div class="line">     */</div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后定义文件夹类和文件类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div></pre></td><td class="code"><pre><div class="line">public class Folder extends Dir&#123;</div><div class="line">    public Folder(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addDir(Dir dir) &#123;</div><div class="line">        dirs.add(dir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void rmDir(Dir dir) &#123;</div><div class="line">        dirs.remove(dir);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void clear() &#123;</div><div class="line">        dirs.clear();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void print() &#123;</div><div class="line">        System.out.print(getName()+&quot;(&quot;);</div><div class="line">        Iterator&lt;Dir&gt; iter = dirs.iterator();</div><div class="line">        while (iter.hasNext())&#123;</div><div class="line">            Dir dir = iter.next();</div><div class="line">            dir.print();</div><div class="line">            if (iter.hasNext())&#123;</div><div class="line">                System.out.print(&quot;,&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        System.out.print(&quot;)&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;Dir&gt; getFiles() &#123;</div><div class="line">        return dirs;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">public class File extends Dir&#123;</div><div class="line">    public File(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void addDir(Dir dir) &#123;</div><div class="line">        throw new UnsupportedOperationException(&quot;文件对象不支持该操作&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void rmDir(Dir dir) &#123;</div><div class="line">        throw new UnsupportedOperationException(&quot;文件对象不支持该操作&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void clear() &#123;</div><div class="line">        throw new UnsupportedOperationException(&quot;文件对象不支持该操作&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void print() &#123;</div><div class="line">        System.out.print(getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public List&lt;Dir&gt; getFiles() &#123;</div><div class="line">        throw new UnsupportedOperationException(&quot;文件对象不支持该操作&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>像这样将组合所使用的方法定义在抽象类的方式称为<strong>透明的组合模式</strong>，遵循了依赖倒置原则，但却违反了单一职责原则与接口隔离原则。</p><p>而前面模板代码中所描述的组合模式则称为<strong>安全地组合模式</strong>，这种模式客户端在使用的时候必须依赖具体的实现，这违反了依赖倒置原则，但遵循了单一职责原则与接口隔离原则。</p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 构造一个目录对象表示 C 盘根目录</div><div class="line">        Dir diskC = new Folder(&quot;C&quot;);</div><div class="line"></div><div class="line">        // C 盘根目录下有一个文件 ImbaMallLog.txt</div><div class="line">        diskC.addDir(new File(&quot;ImbaMallLog.txt&quot;));</div><div class="line"></div><div class="line">        // C 盘目录下还有3个子目录 Windows,PrefLogs,Program File</div><div class="line">        Dir dirWin = new Folder(&quot;Windows&quot;);</div><div class="line"></div><div class="line">        // Windows 目录下有文件 explorer.exe</div><div class="line">        dirWin.addDir(new File(&quot;explorer.exe&quot;));</div><div class="line">        diskC.addDir(dirWin);</div><div class="line"></div><div class="line">        // PerfLogs 目录</div><div class="line">        Dir dirPer = new Folder(&quot;PerfLogs&quot;);</div><div class="line"></div><div class="line">        // PerfLogs 目录下有文件 null.txt</div><div class="line">        dirPer.addDir(new File(&quot;null.txt&quot;));</div><div class="line">        diskC.addDir(dirPer);</div><div class="line"></div><div class="line">        // Program File 目录</div><div class="line">        Dir dirPro = new Folder(&quot;Program File&quot;);</div><div class="line"></div><div class="line">        // Program File 目录下有文件 ftp.txt</div><div class="line">        dirPro.addDir(new File(&quot;ftp.txt&quot;));</div><div class="line">        diskC.addDir(dirPro);</div><div class="line"></div><div class="line">        // 打印出文件结构</div><div class="line">        diskC.print();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>Android 中的 View 和 ViewGroup 的嵌套组合是一个典型的组合模式实现，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/8298629-d908c3e49c7b7480.png?imageMogr2/auto-orient/strip|imageView2/2/w/605/format/webp" alt=""></p><p>在 Android 的这个视图层级中，容器一定是 ViewGroup，而且只有 ViewGroup 才能包含其他的 View，比如 LinearLayout 能包含 TextView、Button、CheckBox 等，但是反过来 TextView 是不能包含 LinearLayout 的，因为 TextView 直接继承于 View，其并非一个容器。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public abstract class ViewGroup extends View implements ViewParent, ViewManager &#123;</div><div class="line">    ...</div><div class="line">    public void addView(View child) &#123;</div><div class="line">        addView(child, -1);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    @Override</div><div class="line">    public void removeView(View view) &#123;</div><div class="line">        if (removeViewInternal(view)) &#123;</div><div class="line">            requestLayout();</div><div class="line">            invalidate(true);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    public View getChildAt(int index) &#123;</div><div class="line">        if (index &lt; 0 || index &gt;= mChildrenCount) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        return mChildren[index];</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ViewGroup 是继承于 View 类的，但为什么有容器的功能呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class ViewGroup extends View implements ViewParent, ViewManager &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从继承的角度来说，ViewGroup 拥有 View 类所有的非私有方法。既然如此，两者的差别就在于 ViewGroup 所实现的 ViewParent 和 ViewManager 接口上，而事实也是如此。</p><p>ViewManager 定义了 addView、removeView 等对子视图操作的方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public interface ViewManager &#123;</div><div class="line">    public void addView(View view, ViewGroup.LayoutParams params);</div><div class="line">    public void updateViewLayout(View view, ViewGroup.LayoutParams params);</div><div class="line">    public void removeView(View view);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而 ViewParent 则定义了刷新容器的接口 requestLayout 和其他一些焦点事件的处理的接口。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public interface ViewParent &#123;</div><div class="line">    // 请求重新布局</div><div class="line">    public void requestLayout();</div><div class="line"></div><div class="line">    // 是否已经请求布局。这里需要注意，当我们调用 requestLayout 请求布局后，</div><div class="line">    // 这一过程并非是立即执行的，Android 会将请求布局的操作以消息的形式发送</div><div class="line">    // 至主线程的 Handler 并由其分发处理。因此在调用 requestLayout 方法请</div><div class="line">    // 求布局到布局真正接收到重新布局的命令时需要一段时间间隔</div><div class="line">    public boolean isLayoutRequested();</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    // 获取当前 View 的 ViewParent</div><div class="line">    public ViewParent getParent();</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中有一些方法比较常见，比如 requestLayout 和 bringChildToFront 等。</p><p>ViewGroup 除了所实现的这两个接口与 View 不一样外，还有重要的一点就是 ViewGroup 是抽象类，将 View 的 onLayout 重置为抽象方法。容器子类必须实现 onLayout 来布局定位。</p><p>除此之外，在 View 中比较重要的两个测绘流程的方法 onMeasure 和 onDraw 在 ViewGroup 中都没有被重写，相对于 onMeasure 方法，在 ViewGroup 中增加了一些计算子 View 的方法，如 measureChildren、measureChildrenWithMargins 等；而对于 onDraw 方法，ViewGroup 定义了一个 dispatchDraw 方法来调用其每一个子 View 的 onDraw 方法，由此可见，ViewGroup 真的就象一个容器一样，其职责只是负责对子元素的操作而非具体的个体行为。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;组合（Composite）模
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>17 设计模式——代理模式</title>
    <link href="http://yoursite.com/2019/08/23/PATTERN/17%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E4%BB%A3%E7%90%86%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/23/PATTERN/17 设计模式——代理模式/</id>
    <published>2019-08-22T17:00:00.000Z</published>
    <updated>2020-03-06T09:37:04.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>代理（Proxy）模式：<strong>为其他对象提供一种代理以控制这个对象的访问</strong>。代理模式也叫委托模式，属于结构型模式。</p><p>在有些情况下，一个客户不能或者不想直接访问另一个对象，这时需要找一个中介帮忙完成某项任务，这个中介就是代理对象。例如，购买火车票不一定要去火车站买，可以通过 12306 网站或者去火车票代售点买。又如找女朋友、找保姆、找工作等都可以通过找中介完成。</p><p>在软件设计中，使用代理模式的例子也很多。例如，要访问的远程对象比较大（如视频或大图像等），其下载要花很多时间。还有因为安全原因需要屏蔽客户端直接访问真实对象，如某单位的内部数据库等。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>代理模式在客户端与目标对象之间起到一个中介作用和保护目标对象的作用；</li><li>代理对象可以扩展目标对象的功能；</li><li>代理模式能将客户端与目标对象分离，在一定程度上降低了系统的耦合度；</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>在客户端和目标对象之间增加一个代理对象，会造成请求处理速度变慢；</li><li>增加了系统的复杂度；</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>当无法或不想直接访问某个对象或访问某个对象存在困难时，可以通过一个代理对象来间接访问，为了保证客户端使用的透明性，委托对象与代理对象需要实现相同的接口。</p><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Subject（抽象主题类）：接口或者抽象类，声明真实主题与代理的共同接口方法。</li><li>RealSubject（真实主题类）：也叫做被代理类或被委托类，定义了代理所表示的真实对象，负责具体业务逻辑的执行，客户端可以通过代理类间接的调用真实主题类的方法。</li><li>Proxy（代理类）：也叫委托类，持有对真实主题类的引用，在其所实现的接口方法中调用真实主题类中相应的接口方法执行。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e57bd2ef4c75480d.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代理模式的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class ProxyTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Proxy proxy = new Proxy();</div><div class="line">        proxy.request();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象主题</div><div class="line">interface Subject &#123;</div><div class="line">    void request();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 真实主题</div><div class="line">class RealSubject implements Subject &#123;</div><div class="line">    public void request() &#123;</div><div class="line">        System.out.println(&quot;访问真实主题方法...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 代理</div><div class="line">class Proxy implements Subject &#123;</div><div class="line">    private RealSubject realSubject;</div><div class="line">    public void request() &#123;</div><div class="line">        if (realSubject == null) &#123;</div><div class="line">            realSubject = new RealSubject();</div><div class="line">        &#125;</div><div class="line">        preRequest();</div><div class="line">        realSubject.request();</div><div class="line">        postRequest();</div><div class="line">    &#125;</div><div class="line">    public void preRequest() &#123;</div><div class="line">        System.out.println(&quot;访问真实主题之前的预处理。&quot;);</div><div class="line">    &#125;</div><div class="line">    public void postRequest() &#123;</div><div class="line">        System.out.println(&quot;访问真实主题之后的后续处理。&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序运行的结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">访问真实主题之前的预处理。</div><div class="line">访问真实主题方法...</div><div class="line">访问真实主题之后的后续处理。</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>小明被拖欠工资，想走法律程序，找律师去申述这一个过程，使用代理模式律师就是代理者，小明就是被代理者，下面看看这样一个过程，代码应该怎样去实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">public interface ILawsuit &#123;</div><div class="line">    // 提交申请</div><div class="line">    void submit();</div><div class="line">    // 进行举证</div><div class="line">    void burden();</div><div class="line">    // 开始维护</div><div class="line">    void defend();</div><div class="line">    // 诉讼完成</div><div class="line">    void finish();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class XiaoMin implements ILawsuit&#123;</div><div class="line">    @Override</div><div class="line">    public void submit() &#123;</div><div class="line">        // 老板欠小民工资 小小民只好申请仲裁</div><div class="line">        System.out.println(&quot;老板拖欠工资，特此申请仲裁&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void burden() &#123;</div><div class="line">        // 小民证据充足，不怕告不赢</div><div class="line">        System.out.println(&quot;这是合同书和过去一年的银行工资流水&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void defend() &#123;</div><div class="line">        // 铁证如山，辩护也没什么好说的</div><div class="line">        System.out.println(&quot;证据确凿! 不需要再说什么了&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void finish() &#123;</div><div class="line">        // 结果也是肯定的,必赢</div><div class="line">        System.out.println(&quot;诉讼成功! 判决老板即日起七天内结算工资&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Lawyer implements ILawsuit &#123;</div><div class="line">    private ILawsuit mLawsuit;</div><div class="line"></div><div class="line">    public Lawyer(ILawsuit lawsuit) &#123;</div><div class="line">        this.mLawsuit = lawsuit;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void submit() &#123;</div><div class="line">        mLawsuit.submit();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void burden() &#123;</div><div class="line">        mLawsuit.burden();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void defend() &#123;</div><div class="line">        mLawsuit.defend();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void finish() &#123;</div><div class="line">        mLawsuit.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ILawsuit xiaomin = new XiaoMin();</div><div class="line">        // 构造代理律师</div><div class="line">        ILawsuit lawsuit = new Lawyer(xiaomin);</div><div class="line">        // 律师提交诉讼申请</div><div class="line">        lawsuit.submit();</div><div class="line">        // 律师进行举证</div><div class="line">        lawsuit.burden();</div><div class="line">        // 律师代替小民进行辩护</div><div class="line">        lawsuit.defend();</div><div class="line">        // 完成诉讼</div><div class="line">        lawsuit.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从代码的角度来分，代理可以分为两种：一种是<strong>静态代理</strong>，另一种是<strong>动态代理</strong>。</p><p><strong>静态代理</strong>就是在程序运行前就已经存在代理类的字节码文件，代理类和委托类的关系在运行前就确定了。上面的例子实现就是静态代理。</p><p><strong>动态代理</strong>类的源码是在程序运行期间根据反射等机制动态的生成，所以不存在代理类的字节码文件。代理类和委托类的关系是在程序运行时确定。</p><p>下面我们实现动态代理，Java 提供了动态的代理接口 InvocationHandler，实现该接口需要重写 invoke() 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class DynamicProxy implements InvocationHandler &#123;</div><div class="line"></div><div class="line">    private Object obj;    // 被代理的类引用</div><div class="line"></div><div class="line">    public DynamicProxy(Object obj) &#123;</div><div class="line">        this.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object invoke(Object proxy, Method method, Object[] args) throws Throwable &#123;</div><div class="line">        // 调用被代理类对象的方法</div><div class="line">        Object result = method.invoke(obj,args);</div><div class="line">        return result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用这个动态代理修改小明案例中的客户类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 构造一个小民</div><div class="line">        ILawsuit xiaomin = new XiaoMin();</div><div class="line">        // 构造一个动态代理</div><div class="line">        DynamicProxy proxy = new DynamicProxy(xiaomin);</div><div class="line">        // 获取被代理类小民的 ClassLoader</div><div class="line">        ClassLoader loader = xiaomin.getClass().getClassLoader();</div><div class="line">        // 动态构造一个代理者律师</div><div class="line">        ILawsuit lawyer = (ILawsuit) Proxy.newProxyInstance(loader, new Class[]&#123;ILawsuit.class&#125;, proxy);</div><div class="line">        // 律师提交诉讼申请</div><div class="line">        lawyer.submit();</div><div class="line">        // 律师进行举证</div><div class="line">        lawyer.burden();</div><div class="line">        // 律师代替小民进行辩护</div><div class="line">        lawyer.defend();</div><div class="line">        // 完成诉讼</div><div class="line">        lawyer.finish();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>静态代理的缺点：</strong></p><ul><li>如果接口新增一个方法，除了所有实现类（真实主题类）需要实现这个方法外，所有代理类也需要实现此方法。增加了代码维护的复杂度。</li><li>代理对象只服务于一种类型的对象，如果要服务多类型的对象。必须要为每一种对象都进行代理，静态代理在程序规模稍大时就无法胜任了。</li></ul><p><strong>动态代理的优点：</strong></p><ul><li>可以通过一个代理类完成全部的代理功能，接口中声明的所有方法都被转移到调用处理器一个集中的方法中处理（InvocationHandler.invoke）。当接口方法数量较多时，我们可以进行灵活处理，而不需要像静态代理那样每一个方法进行中转。</li><li>动态代理的应用使我们的类职责更加单一，复用性更强。</li></ul><p><strong>动态代理的缺点：</strong></p><ul><li>不能对类进行代理，只能对接口进行代理，如果我们的类没有实现任何接口，那么就不能使用这种方式进行动态代理。</li></ul><p>根据适用范围，代理模式可以分为以下几种：</p><ul><li><strong>远程代理</strong>：为一个对象在不同的地址空间提供局部代表，这样系统可以将Server部分的事项隐藏。</li><li><strong>虚拟代理</strong>：如果要创建一个资源消耗较大的对象，可以先用一个代理对象表示，在真正需要的时候才真正创建。</li><li><strong>保护代理</strong>：用代理对象控制对一个对象的访问，给不同的用户提供不同的访问权限。</li><li><strong>智能引用</strong>：在引用原始对象的时候附加额外操作，并对指向原始对象的引用增加引用计数。</li></ul><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>ANDROID 源码中多个地方都用到代理模式，比如 ActivityManagerProxy 这个代理类。其具体代理的是 ActivityManagerNative 的子类 ActivityManagerService。</p><p>ActivityManagerProxy 实现了 IActivityManager 接口，该接口定义了一些 Activity 相关的接口方法，其中有一些我们在应用开发中也时常接触到。IActivityManager 这个接口相当于代理模式中的抽象主题，那么真正的实现主题是 ActivityManagerNative 的子类 ActivityManagerService，这几个类大致的关系：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b691edd2aa2e8f47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>ActivityManagerProxy 实际上代理的是 ActivityManagerService，但是 ActivityManagerProxy 和 ActivityManagerService 是分别运行在不同的进程里（ActivityManagerProxy 是运行在应用的进程，而 ActivityManagerService 是运行在系统进程），所以它们之间的这个代理过程是跨进程的，这里跨进程是用到 Android 的 Binder 机制完成。不过 ActivityManagerProxy 在实际逻辑处理中并未过多地被外部类使用，因为在 Android 中管理与维护 Activity 相关信息的类是另外一个叫做 ActivityManager 的类，ActivityManager 虽然说管理着 Activity 信息，但是实质上大多数逻辑由 ActivityManagerProxy 承担，这里以其中的 getAppTasks 方法为例，在 ActivityManager 中 getAppTasks 方法逻辑如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public List&lt;ActivityManager.AppTask&gt; getAppTasks() &#123;</div><div class="line">    ArrayList&lt;AppTask&gt; tasks = new ArrayList&lt;AppTask&gt;();</div><div class="line">    List&lt;IBinder&gt; appTasks;</div><div class="line">    try &#123;</div><div class="line">        appTasks = getService().getAppTasks(mContext.getPackageName());</div><div class="line">    &#125; catch (RemoteException e) &#123;</div><div class="line">        throw e.rethrowFromSystemServer();</div><div class="line">    &#125;</div><div class="line">    int numAppTasks = appTasks.size();</div><div class="line">    for (int i = 0; i &lt; numAppTasks; i++) &#123;</div><div class="line">        tasks.add(new AppTask(IAppTask.Stub.asInterface(appTasks.get(i))));</div><div class="line">    &#125;</div><div class="line">    return tasks;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>getService() 其实返回的是一个 IActivityManager，那这个 IActivityManager 的实体类是什么呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public static IActivityManager getService() &#123;</div><div class="line">    return IActivityManagerSingleton.get();</div><div class="line">&#125;</div><div class="line"></div><div class="line">private static final Singleton&lt;IActivityManager&gt; IActivityManagerSingleton =</div><div class="line">        new Singleton&lt;IActivityManager&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            protected IActivityManager create() &#123;</div><div class="line">                final IBinder b = ServiceManager.getService(Context.ACTIVITY_SERVICE);</div><div class="line">                final IActivityManager am = IActivityManager.Stub.asInterface(b);</div><div class="line">                return am;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div></pre></td></tr></table></figure></p><p>ServiceManager.getService() 返回的是一个系统级的 Service，这个 Service 实际上是 ActivityManagerService，这里也完成创建一个对 ActivityManagerService 的 Client 代理对象 ActivityManagerProxy 实例。ActivityManagerProxy 中的 getAppTasks 方法逻辑就很明确，将数据打包跨进程传递给 Server 端 ActivityManagerService 处理并返回结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public List&lt;IAppTask&gt; getAppTasks(String callingPackage) throws RemoteException &#123;</div><div class="line">    Parcel data = Parcel.obtain();</div><div class="line">    Parcel reply = Parcel.obtain();</div><div class="line">    data.writeInterfaceToken(IActivityManager.descriptor);</div><div class="line">    data.writeString(callingPackage);</div><div class="line">    mRemote.transact(GET_APP_TASKS_TRANSACTION, data, reply, 0);</div><div class="line">    reply.readException();</div><div class="line">    ArrayList&lt;IAppTask&gt; list = null;</div><div class="line">    int N = reply.readInt();</div><div class="line">    if (N &gt;= 0) &#123;</div><div class="line">        list = new ArrayList&lt;&gt;();</div><div class="line">        while (N &gt; 0) &#123;</div><div class="line">            IAppTask task = IAppTask.Stub.asInterface(reply.readStrongBinder());</div><div class="line">            list.add(task);</div><div class="line">            N--;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    data.recycle();</div><div class="line">    reply.recycle();</div><div class="line">    return list;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>再来看看 ActivityManagerService 中的 getAppTasks：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public List&lt;IAppTask&gt; getAppTasks(String callingPackage) &#123;</div><div class="line">    int callingUid = Binder.getCallingUid();</div><div class="line">    long ident = Binder.clearCallingIdentity();</div><div class="line"></div><div class="line">    synchronized(this) &#123;</div><div class="line">        ArrayList&lt;IAppTask&gt; list = new ArrayList&lt;IAppTask&gt;();</div><div class="line">        try &#123;</div><div class="line">            if (DEBUG_ALL) Slog.v(TAG, &quot;getAppTasks&quot;);</div><div class="line"></div><div class="line">            final int N = mRecentTasks.size();</div><div class="line">            for (int i = 0; i &lt; N; i++) &#123;</div><div class="line">                TaskRecord tr = mRecentTasks.get(i);</div><div class="line">                // Skip tasks that do not match the caller.  We don&apos;t need to verify</div><div class="line">                // callingPackage, because we are also limiting to callingUid and know</div><div class="line">                // that will limit to the correct security sandbox.</div><div class="line">                if (tr.effectiveUid != callingUid) &#123;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">                Intent intent = tr.getBaseIntent();</div><div class="line">                if (intent == null ||</div><div class="line">                        !callingPackage.equals(intent.getComponent().getPackageName())) &#123;</div><div class="line">                    continue;</div><div class="line">                &#125;</div><div class="line">                ActivityManager.RecentTaskInfo taskInfo =</div><div class="line">                        createRecentTaskInfoFromTaskRecord(tr);</div><div class="line">                AppTaskImpl taskImpl = new AppTaskImpl(taskInfo.persistentId, callingUid);</div><div class="line">                list.add(taskImpl);</div><div class="line">            &#125;</div><div class="line">        &#125; finally &#123;</div><div class="line">            Binder.restoreCallingIdentity(ident);</div><div class="line">        &#125;</div><div class="line">        return list;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="Binder-跨进程通信机制"><a href="#Binder-跨进程通信机制" class="headerlink" title="Binder 跨进程通信机制"></a>Binder 跨进程通信机制</h3><hr><p>在 Android 中进程间通信我们通常使用到的是 binder 机制，binder 机制所使用到的四个基本模块是 Binder Client、Binder Server、ServerManager 和 Binder Driver。这四者之间的关系类似与网络访问，Binder Client 相当于我们的客户端 pc , Binder Server 相当于服务器，ServerManager 相当于 DNS 服务器，而 Binder Driver 则相当于一个路由器。其中 Binder Driver 实现在内核空间中，而其余的 3 者 Binder Client、Binder Server、ServerManager 实现在用户空间中。</p><p><img src="https://upload-images.jianshu.io/upload_images/8298629-53b95c66788842b7.png?imageMogr2/auto-orient/strip|imageView2/2/w/563/format/webp" alt=""></p><p>Binder Client 与 Binder Server 之间的跨进程通信统一通过 Binder Driver 处理转发，对于 Binder Client 来说，其只需要知道自己要使用的 Binder 的名字以及该 Binder 实体在 ServerManager 中的 0 号引用即可，访问原理也比较简单，Binder Client 先是通过 0 号引用去访问 ServerManager 获取 Binder 的引用，得到引用后就可以像普通方法那样调用 Binder 实体方法。最后我们的 ServerManager 则用来管理 Binder Server，Binder Client 可以通过它来查询 Binder Server接口，刚才提到过 Binder Client 可以通过 ServerManager 来获取 Binder 的引用，这个 Binder 引用就是由 ServerManager 来转换的。</p><p>可以想象成 Binder Driver 就是一个管道，ServerManager 是一个注册表，所有的 Binder Client 和 Binder Server 都要在它那里注册，Binder Client 也通过 ServerManager 去查找对应的 Binder Server。最后，Binder Client 和 Binder Server 其实实现的接口是一样的，所以大家可以联想到 Binder 机制其实也是一种代理模式。</p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><hr><p>Notification 适配。通过代理模式解决各个版本的 Notification 碎片化问题，为每种不同的 Notification 样式定义一个类，这里以正常的 64dp Height、256dp Height 和 headsUpContentView 为例，先定义一个抽象类表示通知。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public abstract class Notify &#123;</div><div class="line">    protected Context context;</div><div class="line">    protected NotificationManager nm;</div><div class="line">    protected NotificationCompat.Builder builder;</div><div class="line"></div><div class="line">    public Notify(Context context) &#123;</div><div class="line">        this.context = context;</div><div class="line"></div><div class="line">        nm = (NotificationManager) context.getSystemService(Context.NOTIFICATION_SERVICE);</div><div class="line">        builder = new NotificationCompat.Builder(context, &quot;default&quot;);</div><div class="line">        PendingIntent intent = PendingIntent.getActivity(context, 0, </div><div class="line">                new Intent(context, TestActivity.class),</div><div class="line">                PendingIntent.FLAG_CANCEL_CURRENT);</div><div class="line">        builder.setSmallIcon(R.drawable.taiji)</div><div class="line">                .setContentIntent(intent);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public abstract void send();    // 发送一条通知</div><div class="line">    public abstract void cancel();  // 取消一条通知</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>Notify 声明两个成员变量处理与通知相关的逻辑，且让所有子类共有。两个抽象方法 send 和 cancel 均有具体的子类去实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class NotifyNormal extends Notify &#123;</div><div class="line"></div><div class="line">    public NotifyNormal(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void send() &#123;</div><div class="line">        Notification n = builder.build();</div><div class="line">        n.contentView = new RemoteViews(context.getPackageName(), R.layout.notify_normal);</div><div class="line">        nm.notify(0, n);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void cancel() &#123;</div><div class="line">        nm.cancel(0);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class NotifyBig extends Notify &#123;</div><div class="line"></div><div class="line">    public NotifyBig(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void send() &#123;</div><div class="line">        Notification n = builder.build();</div><div class="line">        n.contentView = new RemoteViews(context.getPackageName(), R.layout.notify_normal);</div><div class="line">        n.bigContentView = new RemoteViews(context.getPackageName(), R.layout.notify_big);</div><div class="line">        nm.notify(0, n);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void cancel() &#123;</div><div class="line">        nm.cancel(0);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">public class NotifyHeadsUp extends Notify &#123;</div><div class="line"></div><div class="line">    public NotifyHeadsUp(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void send() &#123;</div><div class="line">        Notification n = builder.build();</div><div class="line">        n.contentView = new RemoteViews(context.getPackageName(), R.layout.notify_normal);</div><div class="line">        n.bigContentView = new RemoteViews(context.getPackageName(), R.layout.notify_big);</div><div class="line">        n.headsUpContentView = new RemoteViews(context.getPackageName(), R.layout.notify_normal);</div><div class="line">        nm.notify(0, n);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void cancel() &#123;</div><div class="line">        nm.cancel(0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后定义一个代理类来整合上面的几个类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class NotifyProxy extends Notify &#123;</div><div class="line">    private Notify notify;</div><div class="line"></div><div class="line">    public NotifyProxy(Context context) &#123;</div><div class="line">        super(context);</div><div class="line"></div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.LOLLIPOP) &#123;</div><div class="line">            notify = new NotifyHeadsUp(context);</div><div class="line">        &#125; else if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            notify = new NotifyBig(context);</div><div class="line">        &#125; else &#123;</div><div class="line">            notify = new NotifyNormal(context);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void send() &#123;</div><div class="line">        notify.send();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void cancel() &#123;</div><div class="line">        notify.cancel();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 NotifyProxy 类中定义一个 Notify 类型的成员变量，在构造方法里根据 SDK 版本的不同去实例化不同的 Notify 子类，最终由该类的 send 和 cancel 方法去调用不同的逻辑实现，这样一来，我们的客户端也就是我们的 Activity 类中就很简单了，直接调用 NotifyProxy 中的方法即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new NotifyProxy(TestActivity.this).send();</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;代理（Proxy）模式：&lt;s
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>16 设计模式——中介者模式</title>
    <link href="http://yoursite.com/2019/08/22/PATTERN/16%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E4%B8%AD%E4%BB%8B%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/22/PATTERN/16 设计模式——中介者模式/</id>
    <published>2019-08-21T17:00:00.000Z</published>
    <updated>2020-03-05T05:53:16.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>中介者（Mediator）模式：<strong>定义一个中介对象来封装一系列对象之间的交互，使原有对象之间的耦合松散，且可以独立地改变它们之间的交互</strong>。中介者模式又叫调停模式，它是迪米特法则的典型应用。</p><p>在现实生活中，常常会出现好多对象之间存在复杂的交互关系，这种交互关系常常是“网状结构”，它要求每个对象都必须知道它需要交互的对象。例如，每个人必须记住他（她）所有朋友的电话；而且，朋友中如果有人的电话修改了，他（她）必须告诉其他所有的朋友修改，这叫作“牵一发而动全身”，非常复杂。</p><p>如果把这种“网状结构”改为“星形结构”的话，将大大降低它们之间的“耦合性”，这时只要找一个“中介者”就可以了。如前面所说的“每个人必须记住所有朋友电话”的问题，只要在网上建立一个每个朋友都可以访问的“通信录”就解决了。这样的例子还有很多，例如，你刚刚参力口工作想租房，可以找“房屋中介”；或者，自己刚刚到一个陌生城市找工作，可以找“人才交流中心”帮忙。</p><p>在软件的开发过程中，这样的例子也很多，例如，在 MVC 框架中，控制器（C）就是模型（M）和视图（V）的中介者；还有大家常用的 QQ 聊天程序的“中介者”是 QQ 服务器。所有这些，都可以采用“中介者模式”来实现，它将大大降低对象之间的耦合性，提高系统的灵活性。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>降低了对象之间的耦合性，使得对象易于独立地被复用。</li><li>将对象间的多对多关联转变为一对多的关联，提高系统的灵活性，使得系统易于维护和扩展。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>当同事类太多时，中介者的职责将很大，它会变得复杂而庞大，以至于系统难以维护。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>当程序存在大量的类时，多个对象之间存在着依赖的关系，呈现出网状结构，那么程序的可读性和可维护性就变差了，并且修改一个类需要牵涉到其他类，不符合开闭原则。</p><p><img src="https://upload-images.jianshu.io/upload_images/6163786-9895aed658c4cd0c.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/431/format/webp" alt="网状结构"></p><p>因此我们可以引入中介者，将网状结构转化成星型结构，可以降低程序的复杂性，并且可以减少各个对象之间的耦合。</p><p><img src="https://upload-images.jianshu.io/upload_images/6163786-9f940f9d6c3755a7.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/427/format/webp" alt="星型结构"></p><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Mediator（抽象中介者角色）：抽象类或者接口，定义统一的接口，用于各同事角色之间的通信。</li><li>ConcreteMediator（具体中介者角色）：继承或者实现了抽象中介者，实现了父类定义的方法，协调各个具体同事进行通信。</li><li>Colleague（抽象同事角色）：抽象类或者接口，定义统一的接口，它只知道中介者而不知道其他同事对象。</li><li>ConcreteColleague（具体同事角色）：继承或者实现了抽象同事角色，每个具体同事类都知道自己本身的行为，其他的行为只能通过中介者去进行。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1b7bcadcf0abb67a.gif?imageMogr2/auto-orient/strip" alt=""></p><p>中介者模式的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">public class MediatorPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Mediator md = new ConcreteMediator();</div><div class="line">        Colleague c1,c2;</div><div class="line">        c1 = new ConcreteColleague1();</div><div class="line">        c2 = new ConcreteColleague2();</div><div class="line">        md.register(c1);</div><div class="line">        md.register(c2);</div><div class="line">        c1.send();</div><div class="line">        System.out.println(&quot;-------------&quot;);</div><div class="line">        c2.send();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象中介者</div><div class="line">abstract class Mediator &#123;</div><div class="line">    public abstract void register(Colleague colleague);</div><div class="line">    public abstract void relay(Colleague cl); // 转发</div><div class="line">&#125;</div><div class="line">// 具体中介者</div><div class="line">class ConcreteMediator extends Mediator &#123;</div><div class="line">    private List&lt;Colleague&gt; colleagues = new ArrayList&lt;&gt;();</div><div class="line">    public void register(Colleague colleague) &#123;</div><div class="line">        if (!colleagues.contains(colleague)) &#123;</div><div class="line">            colleagues.add(colleague);</div><div class="line">            colleague.setMedium(this);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public void relay(Colleague cl) &#123;</div><div class="line">        for (Colleague ob : colleagues) &#123;</div><div class="line">            if (!ob.equals(cl)) &#123;</div><div class="line">                ob.receive();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象同事类</div><div class="line">abstract class Colleague &#123;</div><div class="line">    protected Mediator mediator;</div><div class="line">    public void setMedium(Mediator mediator) &#123;</div><div class="line">        this.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">    public abstract void receive();</div><div class="line">    public abstract void send();</div><div class="line">&#125;</div><div class="line">// 具体同事类</div><div class="line">class ConcreteColleague1 extends Colleague &#123;</div><div class="line">    public void receive() &#123;</div><div class="line">        System.out.println(&quot;具体同事类1收到请求。&quot;);</div><div class="line">    &#125;</div><div class="line">    public void send() &#123;</div><div class="line">        System.out.println(&quot;具体同事类1发出请求。&quot;);</div><div class="line">        mediator.relay(this); // 请中介者转发</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 具体同事类</div><div class="line">class ConcreteColleague2 extends Colleague &#123;</div><div class="line">    public void receive() &#123;</div><div class="line">        System.out.println(&quot;具体同事类2收到请求。&quot;);</div><div class="line">    &#125;</div><div class="line">    public void send() &#123;</div><div class="line">        System.out.println(&quot;具体同事类2发出请求。&quot;);</div><div class="line">        mediator.relay(this); //请中介者转发</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序的运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">具体同事类1发出请求。</div><div class="line">具体同事类2收到请求。</div><div class="line">-------------</div><div class="line">具体同事类2发出请求。</div><div class="line">具体同事类1收到请求。</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>我们的电脑组件异常之多，读取一个 CD 光盘需要使用 CPU 、光驱、声卡、显卡、内存等一系列组件。如果我们不使用设计模式，那我们每个组件都要保持其他组件的引用，这就会造成我们的类结构复杂难懂，变成一个网状结构。</p><p>解决方法：使用中介者模式可以使一系列组件只和我们的中介（主板）打交道，这就将网状结构变成星型结构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">public abstract class Mediator &#123;</div><div class="line">    /**</div><div class="line">     * 同事对象改变时通知中介者的方法</div><div class="line">     * 同事对象改变时由中介者去通知其他同事。</div><div class="line">     * @param c Colleague</div><div class="line">     */</div><div class="line">    public abstract void changed(Colleague c);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//主板</div><div class="line">public class MainBoard extends Mediator &#123;</div><div class="line">    private CDDevice cd;                // 光驱设备</div><div class="line">    private CPU cpu;                    // CPU</div><div class="line">    private SoundCard soundCard;        // 声卡设备</div><div class="line">    private GraphicsCard graphicsCard;  // 显卡设备</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void changed(Colleague c) &#123;</div><div class="line">        // 如果 CD 读取到数据</div><div class="line">        if (c == cd) &#123;</div><div class="line">            handleCD((CDDevice) c);</div><div class="line">        &#125; else if (c == cpu) &#123;</div><div class="line">            handleCPU((CPU) c);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void handleCD(CDDevice c) &#123;</div><div class="line">        cpu.setData(c.read());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void handleCPU(CPU c) &#123;</div><div class="line">        soundCard.videoPlay(c.getDataSound());</div><div class="line">        graphicsCard.videoPlay(c.getDataVideo());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCpu(CPU cpu) &#123;</div><div class="line">        this.cpu = cpu;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setSoundCard(SoundCard soundCard) &#123;</div><div class="line">        this.soundCard = soundCard;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setgCard(GraphicsCard graphicsCard) &#123;</div><div class="line">        this.graphicsCard = graphicsCard;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCd(CDDevice cd) &#123;</div><div class="line">        this.cd = cd;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public abstract class Colleague &#123;</div><div class="line">    private Mediator mediator;</div><div class="line"></div><div class="line">    public Colleague(Mediator mediator) &#123;</div><div class="line">        this.mediator = mediator;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class CDDevice extends Colleague &#123;</div><div class="line"></div><div class="line">    private String data;</div><div class="line"></div><div class="line">    public CDDevice(Mediator mediator) &#123;</div><div class="line">        super(mediator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String read() &#123;</div><div class="line">        return data;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加载视频数据</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public void load() &#123;</div><div class="line">        data = &quot;视频数据，音频数据&quot;;</div><div class="line">        mediator.changed(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div><div class="line"></div><div class="line">public class CPU extends Colleague &#123;</div><div class="line"></div><div class="line">    private String dataVideo, dataSound;    // 视频和音频数据</div><div class="line"></div><div class="line">    public CPU(Mediator mediator) &#123;</div><div class="line">        super(mediator);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDataVideo() &#123;</div><div class="line">        return dataVideo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String getDataSound() &#123;</div><div class="line">        return dataSound;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setData(String data) &#123;</div><div class="line">        // 分割音、视频数据</div><div class="line">        String[] tmp = data.split(&quot;,&quot;);</div><div class="line">        this.dataVideo = tmp[0];</div><div class="line">        this.dataSound =  tmp[1];</div><div class="line">        // 告诉中介者自身状态改变</div><div class="line">        mediator.changed(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class GraphicsCard extends Colleague &#123;</div><div class="line">    public GraphicsCard(Mediator mediator) &#123;</div><div class="line">        super(mediator);</div><div class="line">    &#125;</div><div class="line">    public void videoPlay(String data)&#123;</div><div class="line">        System.out.println(&quot;视频：&quot;+ data);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class SoundCard extends Colleague &#123;</div><div class="line">    public SoundCard(Mediator mediator) &#123;</div><div class="line">        super(mediator);</div><div class="line">    &#125;</div><div class="line">    public void videoPlay(String data)&#123;</div><div class="line">        System.out.println(&quot;音频：&quot;+ data);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>每个对象只需要关心自己的职责，自己事情处理完成后通知中介者，让中介者调节指导下一步操作。</p><p>客户端代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MainBoard mainBoard = new MainBoard();</div><div class="line"></div><div class="line">        CDDevice cd = new CDDevice(mainBoard);</div><div class="line">        CPU cpu = new CPU(mainBoard);</div><div class="line">        GCard gc = new GCard(mainBoard);</div><div class="line">        SoundCard sc = new SoundCard(mainBoard);</div><div class="line"></div><div class="line">        mainBoard.setCd(cd);</div><div class="line">        mainBoard.setCpu(cpu);</div><div class="line">        mainBoard.setgCard(gc);</div><div class="line">        mainBoard.setSoundCard(sc);</div><div class="line"></div><div class="line">        cd.load();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>ANDROID 中的锁屏功能就用到了中介者模式，KeyguardService（锁屏服务）通过 KeyguardViewMediator（锁屏中介者）来协调各种 Manager 的状态以达到锁屏的功能。这里各种 Manager 都充当了同事的角色。源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">// 锁屏服务，同事角色</div><div class="line">public class KeyguardService extends Service &#123;</div><div class="line">    // 锁屏中介者</div><div class="line">    private KeyguardViewMediator mKeyguardViewMediator;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate() &#123;</div><div class="line">        ((SystemUIApplication) getApplication()).startServicesIfNeeded();</div><div class="line">        // 初始化中介者</div><div class="line">        mKeyguardViewMediator = ((SystemUIApplication) getApplication()).getComponent(KeyguardViewMediator.class);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private final IKeyguardService.Stub mBinder = new IKeyguardService.Stub() &#123;</div><div class="line"></div><div class="line">        @Override // Binder interface</div><div class="line">        public void addStateMonitorCallback(IKeyguardStateCallback callback) &#123;</div><div class="line">            checkPermission();</div><div class="line">            // 调用中介者的接口</div><div class="line">            mKeyguardViewMediator.addStateMonitorCallback(callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override // Binder interface</div><div class="line">        public void verifyUnlock(IKeyguardExitCallback callback) &#123;</div><div class="line">            checkPermission();</div><div class="line">            // 调用中介者的接口</div><div class="line">            mKeyguardViewMediator.verifyUnlock(callback);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 其他代码略</div><div class="line"></div><div class="line">    &#125;;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 锁屏中介者</div><div class="line">public class KeyguardViewMediator extends SystemUI &#123;</div><div class="line">    // 各种 Manager，同事角色</div><div class="line">    private AlarmManager mAlarmManager;</div><div class="line">    private AudioManager mAudioManager;</div><div class="line">    private StatusBarManager mStatusBarManager;</div><div class="line">    private PowerManager mPM;</div><div class="line">    private IWindowManager mWM;</div><div class="line">    private TrustManager mTrustManager;</div><div class="line">    private SearchManager mSearchManager;</div><div class="line">    private PowerManager.WakeLock mShowKeyguardWakeLock;</div><div class="line">    private StatusBarKeyguardViewManager mStatusBarKeyguardViewManager;</div><div class="line"></div><div class="line">    //其他代码略</div><div class="line"></div><div class="line">    // 通过 AudioManager 去播放声音</div><div class="line">    private void playSound(int soundId) &#123;</div><div class="line">        if (soundId == 0) return;</div><div class="line">        final ContentResolver cr = mContext.getContentResolver();</div><div class="line">        if (Settings.System.getInt(cr, Settings.System.LOCKSCREEN_SOUNDS_ENABLED, 1) == 1) &#123;</div><div class="line"></div><div class="line">            mLockSounds.stop(mLockSoundStreamId);</div><div class="line">            // Init mAudioManager</div><div class="line">            if (mAudioManager == null) &#123;</div><div class="line">                mAudioManager = (AudioManager) mContext.getSystemService(Context.AUDIO_SERVICE);</div><div class="line">                if (mAudioManager == null) return;</div><div class="line">                mUiSoundsStreamType = mAudioManager.getUiSoundsStreamType();</div><div class="line">            &#125;</div><div class="line">            // If the stream is muted, don&apos;t play the sound</div><div class="line">            if (mAudioManager.isStreamMute(mUiSoundsStreamType)) return;</div><div class="line"></div><div class="line">            mLockSoundStreamId = mLockSounds.play(soundId,</div><div class="line">                    mLockSoundVolume, mLockSoundVolume, 1/*priortiy*/, 0/*loop*/, 1.0f/*rate*/);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>KeyguardViewMediator 中通过 playSound 方法能够协调 AudioManager 去控制声音的播放等等，其他 Manager 同理。</p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><hr><p>登录界面运用中介者模式，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ea27b82b9898512f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>一个简单的登录界面，包含两个文本框、两个复选框、两个按钮。只有 6 个元素，但要实现如下逻辑：<br>1）当用户名没有输入时，除了账户文本输入框、取消按钮外均不可用；当有用户名输入时，记住账号也可用。<br>2）当密码文本框有输入时，自动登录、确定按钮皆可用，否则皆不可用。<br>3）勾选自动登录，那么记住账号会被同时勾选。<br>4）清空密码，取消自动登录选中状态并且不可用；清空账号则取消两个复选框的状态并且都不可用。<br>5）……</p><p>这是一个多 UI 控件交互的情景，此时很适合让 Activity 来充当一个中介者并在其中处理相关逻辑。具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div></pre></td><td class="code"><pre><div class="line">public class LoginActivity extends BaseActivity &#123;</div><div class="line"></div><div class="line">    private EditText etAccount, etPassword;</div><div class="line">    private CheckBox cbRemember, cbAuto;</div><div class="line">    private Button btnEnsure, btnCancel;</div><div class="line"></div><div class="line">    private String strAccount, strPassword; // 账户、密码</div><div class="line">    private boolean isRemember, isAuto;     // 是否记住账号、自动登录</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_test);</div><div class="line"></div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initViews() &#123;</div><div class="line">        etAccount = findViewById(R.id.login_account_et);</div><div class="line">        etPassword = findViewById(R.id.login_password_et);</div><div class="line"></div><div class="line">        cbRemember = findViewById(R.id.login_remember_cb);</div><div class="line">        cbAuto = findViewById(R.id.login_auto_cb);</div><div class="line"></div><div class="line">        btnEnsure = findViewById(R.id.login_ensure_btn);</div><div class="line">        btnCancel = findViewById(R.id.login_cancel_btn);</div><div class="line"></div><div class="line">        // 账户</div><div class="line">        etAccount.addTextChangedListener(new TextWatcher() &#123;</div><div class="line">            @Override</div><div class="line">            public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class="line">                // 回传数据</div><div class="line">                strAccount = s.toString();</div><div class="line">                // 通知 Activity 状态改变</div><div class="line">                change();</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void afterTextChanged(Editable s) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 密码</div><div class="line">        etPassword.setEnabled(false);</div><div class="line">        etPassword.addTextChangedListener(new TextWatcher() &#123;</div><div class="line">            @Override</div><div class="line">            public void beforeTextChanged(CharSequence s, int start, int count, int after) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onTextChanged(CharSequence s, int start, int before, int count) &#123;</div><div class="line">                // 回传数据</div><div class="line">                strPassword = s.toString();</div><div class="line">                // 通知 Activity 状态改变</div><div class="line">                change();</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void afterTextChanged(Editable s) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 记住账户</div><div class="line">        cbRemember.setEnabled(false);</div><div class="line">        cbRemember.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123;</div><div class="line">                // 回传数据</div><div class="line">                isRemember = isChecked;</div><div class="line">                // 通知 Activity 状态改变</div><div class="line">                change();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 自动登录</div><div class="line">        cbAuto.setEnabled(false);</div><div class="line">        cbAuto.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onCheckedChanged(CompoundButton buttonView, boolean isChecked) &#123;</div><div class="line">                // 回传数据</div><div class="line">                isAuto = isChecked;</div><div class="line">                isRemember = isAuto || isRemember;</div><div class="line">                // 通知 Activity 状态改变</div><div class="line">                change();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 确定按钮</div><div class="line">        btnEnsure.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Toast.makeText(LoginActivity.this, &quot;登录成功&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 取消按钮</div><div class="line">        btnCancel.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Toast.makeText(LoginActivity.this, &quot;取消登录&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 各控件状态改变后协调各控件状态显示</div><div class="line">     */</div><div class="line">    private void change() &#123;</div><div class="line">        if (TextUtils.isEmpty(strAccount)) &#123;</div><div class="line">            etPassword.setEnabled(false);</div><div class="line">            cbRemember.setEnabled(false);</div><div class="line">            cbAuto.setEnabled(false);</div><div class="line">            btnEnsure.setEnabled(false);</div><div class="line">            btnCancel.setEnabled(true);</div><div class="line">            isRemember = false;</div><div class="line">            isAuto = false;</div><div class="line">        &#125; else if (!TextUtils.isEmpty(strAccount)</div><div class="line">                &amp;&amp; TextUtils.isEmpty(strPassword)) &#123;</div><div class="line">            etPassword.setEnabled(true);</div><div class="line">            cbRemember.setEnabled(true);</div><div class="line">            cbAuto.setEnabled(false);</div><div class="line">            btnEnsure.setEnabled(false);</div><div class="line">            btnCancel.setEnabled(true);</div><div class="line">            isAuto = false;</div><div class="line">        &#125; else if (!TextUtils.isEmpty(strAccount)</div><div class="line">                &amp;&amp; !TextUtils.isEmpty(strPassword)) &#123;</div><div class="line">            etPassword.setEnabled(true);</div><div class="line">            cbRemember.setEnabled(true);</div><div class="line">            cbAuto.setEnabled(true);</div><div class="line">            btnEnsure.setEnabled(true);</div><div class="line">            btnCancel.setEnabled(true);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        cbRemember.setChecked(isRemember);</div><div class="line">        cbAuto.setChecked(isAuto);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;中介者（Mediator）模
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>15 设计模式——访问者模式</title>
    <link href="http://yoursite.com/2019/08/21/PATTERN/15%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%AE%BF%E9%97%AE%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/21/PATTERN/15 设计模式——访问者模式/</id>
    <published>2019-08-20T17:00:00.000Z</published>
    <updated>2020-03-05T02:20:37.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>访问者（Visitor）模式：<strong>封装某些作用于某种数据结构中各元素的操作，它可以在不改变数据结构的前提下定义作用于这些元素的新的操作</strong>。</p><p>访问者模式是一种将数据操作与数据结构分离的设计模式，它是 23 种设计模式中最复杂的一个，但是它的使用频率并不高，正如《设计模式》的作者 GOF 对访问者模式的描述：大多数情况下，并不需要使用访问者模式，但是当你一旦需要使用它时，那你就是真的需要它了。</p><p>访问者模式的基本想法是，软件系统中拥有一个由许多对象构成的、比较稳定的对象结构，这些对象的类都拥有一个 accept 方法用来接受访问者对象的访问。访问者是一个接口，它拥有一个 visit 方法，这个方法对访问到的对象结构中不同类型的元素做出不同的处理。在对象结构的每一次访问过程中，我们遍历整个对象结构，对每一个元素都实施 accept 方法，在每一个元素的 accept 方法中会调用访问者的 visit 方法，从而使访问者得以处理对象结构的每一个元素，我们可以针对对象结构设计不同的访问者类来完成不同的操作，达到区别对待的效果。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>各角色职责分离，符合单一职责原则。</li><li>具有优秀的扩展性。</li><li>使得数据结构和作用于结构上的操作解耦，使得操作集合可以独立变化。</li><li>灵活性。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>具体元素对访问者公布细节，违反了迪米特原则。</li><li>违反了依赖倒置原则，为了达到“区别对待”而依赖了具体类，没有依赖抽象。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>对象结构比较稳定，但经常需要在此对象结构上定义新的操作。</li><li>需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免这些操作“污染”这些对象的类，也不希望在增加新操作时修改这些类。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Visitor（抽象访问者）：接口或者抽象类，为每一个元素（Element）声明一个访问的方法。</li><li>ConcreteVisitor（具体访问者）：实现抽象访问者中的方法，即对每一个元素都有其具体的访问行为。</li><li>Element（抽象元素）：接口或者抽象类，定义一个accept方法，能够接受访问者（Visitor）的访问。</li><li>ConcreteElementA、ConcreteElementB（具体元素）：实现抽象元素中的accept方法，通常是调用访问者提供的访问该元素的方法。</li><li>Object Structure（对象结构）：是一个包含元素角色的容器，提供让访问者对象遍历容器中的所有元素的方法，通常由 List、Set、Map 等聚合类实现。</li><li>Client（客户端类）：即要使用访问者模式的地方。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fbc56ff0dc65be02.gif?imageMogr2/auto-orient/strip" alt=""></p><p>访问者模式的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">public class VisitorPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ObjectStructure os = new ObjectStructure();</div><div class="line">        os.add(new ConcreteElementA());</div><div class="line">        os.add(new ConcreteElementB());</div><div class="line">        Visitor visitor = new ConcreteVisitorA();</div><div class="line">        os.accept(visitor);</div><div class="line">        System.out.println(&quot;------------------------&quot;);</div><div class="line">        visitor = new ConcreteVisitorB();</div><div class="line">        os.accept(visitor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象访问者</div><div class="line">interface Visitor &#123;</div><div class="line">    void visit(ConcreteElementA element);</div><div class="line">    void visit(ConcreteElementB element);</div><div class="line">&#125;</div><div class="line">// 具体访问者 A 类</div><div class="line">class ConcreteVisitorA implements Visitor &#123;</div><div class="line">    public void visit(ConcreteElementA element) &#123;</div><div class="line">        System.out.println(&quot;具体访问者A访问--&gt;&quot;+element.operationA());</div><div class="line">    &#125;</div><div class="line">    public void visit(ConcreteElementB element) &#123;</div><div class="line">        System.out.println(&quot;具体访问者A访问--&gt;&quot;+element.operationB());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 具体访问者 B 类</div><div class="line">class ConcreteVisitorB implements Visitor &#123;</div><div class="line">    public void visit(ConcreteElementA element) &#123;</div><div class="line">        System.out.println(&quot;具体访问者B访问--&gt;&quot;+element.operationA());</div><div class="line">    &#125;</div><div class="line">    public void visit(ConcreteElementB element) &#123;</div><div class="line">        System.out.println(&quot;具体访问者B访问--&gt;&quot;+element.operationB());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象元素类</div><div class="line">interface Element &#123;</div><div class="line">    void accept(Visitor visitor);</div><div class="line">&#125;</div><div class="line">// 具体元素 A 类</div><div class="line">class ConcreteElementA implements Element &#123;</div><div class="line">    public void accept(Visitor visitor) &#123;</div><div class="line">        visitor.visit(this);</div><div class="line">    &#125;</div><div class="line">    public String operationA() &#123;</div><div class="line">        return &quot;具体元素A的操作。&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 具体元素 B 类</div><div class="line">class ConcreteElementB implements Element &#123;</div><div class="line">    public void accept(Visitor visitor) &#123;</div><div class="line">        visitor.visit(this);</div><div class="line">    &#125;</div><div class="line">    public String operationB() &#123;</div><div class="line">        return &quot;具体元素B的操作。&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 对象结构角色</div><div class="line">class ObjectStructure &#123;</div><div class="line">    private List&lt;Element&gt; list = new ArrayList&lt;Element&gt;();</div><div class="line">    public void accept(Visitor visitor) &#123;</div><div class="line">        Iterator&lt;Element&gt; i= list.iterator();</div><div class="line">        while (i.hasNext()) &#123;</div><div class="line">            ((Element) i.next()).accept(visitor);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    public void add(Element element) &#123;</div><div class="line">        list.add(element);</div><div class="line">    &#125;</div><div class="line">    public void remove(Element element) &#123;</div><div class="line">        list.remove(element);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序的运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">具体访问者A访问--&gt;具体元素A的操作。</div><div class="line">具体访问者A访问--&gt;具体元素B的操作。</div><div class="line">------------------------</div><div class="line">具体访问者B访问--&gt;具体元素A的操作。</div><div class="line">具体访问者B访问--&gt;具体元素B的操作。</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>利用“访问者（Visitor）模式”模拟艺术公司与造币公司的功能。</p><p>分析：艺术公司利用“铜”可以设计出铜像，利用“纸”可以画出图画；造币公司利用“铜”可以印出铜币，利用“纸”可以印出纸币。对“铜”和“纸”这两种元素，两个公司的处理方法不同，所以该实例用访问者模式来实现比较适合。</p><p>首先，定义一个公司（Company）接口，它是抽象访问者，提供了两个根据纸（Paper）或铜（Cuprum）这两种元素创建作品的方法；再定义艺术公司（ArtCompany）类和造币公司（Mint）类，它们是具体访问者，实现了父接口的方法；然后，定义一个材料（Material）接口，它是抽象元素，提供了 accept（Company visitor）方法来接受访问者（Company）对象访问；再定义纸（Paper）类和铜（Cuprum）类，它们是具体元素类，实现了父接口中的方法；最后，定义一个材料集（SetMaterial）类，它是对象结构角色，拥有保存所有元素的容器 List，并提供让访问者对象遍历容器中的所有元素的 accept（Company visitor）方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">// 抽象访问者：公司</div><div class="line">interface Company &#123;</div><div class="line">    String create(Paper element);</div><div class="line">    String create(Cuprum element);</div><div class="line">&#125;</div><div class="line">// 具体访问者：艺术公司</div><div class="line">class ArtCompany implements Company &#123;</div><div class="line">    public String create(Paper element) &#123;</div><div class="line">        return &quot;讲学图&quot;;</div><div class="line">    &#125;</div><div class="line">    public String create(Cuprum element) &#123;</div><div class="line">        return &quot;朱熹铜像&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 具体访问者：造币公司</div><div class="line">class Mint implements Company &#123;</div><div class="line">    public String create(Paper element) &#123;</div><div class="line">        return &quot;纸币&quot;;</div><div class="line">    &#125;</div><div class="line">    public String create(Cuprum element) &#123;</div><div class="line">        return &quot;铜币&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象元素：材料</div><div class="line">interface Material &#123;</div><div class="line">    String accept(Company visitor);</div><div class="line">&#125;</div><div class="line">// 具体元素：纸</div><div class="line">class Paper implements Material &#123;</div><div class="line">    public String accept(Company visitor) &#123;</div><div class="line">        return (visitor.create(this));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 具体元素：铜</div><div class="line">class Cuprum implements Material &#123;</div><div class="line">    public String accept(Company visitor) &#123;</div><div class="line">        return (visitor.create(this));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 对象结构角色:材料集</div><div class="line">class SetMaterial &#123;</div><div class="line">    private List&lt;Material&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    public String accept(Company visitor) &#123;</div><div class="line">        Iterator&lt;Material&gt; iterator = list.iterator();</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        String temp;</div><div class="line">        while(iterator.hasNext()) &#123;</div><div class="line">            temp = iterator.next().accept(visitor);</div><div class="line">            sb.append(temp).append(&quot; &quot;);</div><div class="line">        &#125;</div><div class="line">        return sb.toString(); // 返回某公司的作品集</div><div class="line">    &#125;</div><div class="line">    public void add(Material element) &#123;</div><div class="line">        list.add(element);</div><div class="line">    &#125;</div><div class="line">    public void remove(Material element) &#123;</div><div class="line">        list.remove(element);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>Android 的编译时注解是一种访问者模式。编译时注解的核心原理依赖 APT （Annotation Processing Tools）实现。</p><p>编译时注解解析的基本原理是，在某些代码元素上（如类型、函数、字段等）添加注解，在编译时编译器会检查 AbstractProcessor 的子类，并且调用该类型的 process 函数，然后将添加了注解的所有元素都传递到 process 函数中，使得开发人员可以在编译期进行相应的处理。</p><p>编写注解处理器的核心是 AnnotationProcessorFactory 和 AnnotationProcessor 两个接口，后者表示的是注解处理器，而前者则是为某些注解类型创建注解处理器的工厂。</p><p>对于编译器来说，代码中的元素结构是基本不变的，例如，组成代码的基本元素由包、类、函数、字段、类型参数、变量。JDK 中为这些元素定义了一个基类，也就是 Element 类，它有如下几个子类：</p><ul><li>PackageElement 包元素，包含了某个包下的信息，可以获取到包名等；</li><li>TypeElement：类型元素，如某个字段属于某种类型；</li><li>ExecutableElement：可执行元素，代表了函数类型的元素；</li><li>VariableElement：变量元素；</li><li>TypeParameterElement：类型参数元素。</li></ul><p>因为注解可以指定作用在哪些元素上，因此，通过上述的抽象来对应这些元素，例如下面这个注解，指定的是只能作用于方法上面，并且这个注解只能保留在 class 文件中（编译时注解）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Target(ElementType. METHOD)</div><div class="line">@Retention(RetentionPolicy.CLASS)</div><div class="line">public @interface Test &#123;</div><div class="line">    String value();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该注解因为只能作用于函数类型，因此，它对应的元素类型就是 ExecutableElement，当我们想通过 APT 处理这个注解时就可以获取目标对象上的 Test 注解，并将所有这些元素转换为 ExecutableElement 元素，以便获取到它们对应的信息。</p><p>我们看看元素基类的实现，完整的路径为 javax.lang.model.element.Element。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public interface Element extends AnnotatedConstruct &#123;</div><div class="line">    TypeMirror asType();</div><div class="line">    // 获取元素类型</div><div class="line">    ElementKind getKind();</div><div class="line">    // 获取元素修饰符，如 public、static、final 等</div><div class="line">    Set&lt;Modifier&gt; getModifiers();</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    List&lt;? extends Element&gt; getEnclosedElements();</div><div class="line">    // 接受访问者的访问</div><div class="line">    &lt;R, P&gt; R accept(ElementVisitor&lt;R, P&gt; v, P p);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到 Element 定义了一个代码元素的一些通用接口，其中很显眼的就是 accept 函数，这个函数接收一个 ElementVisitor 和类型为 P 的参数，ElementVisitor 就是访问者类型，而 P 则用于传递一些额外的参数给 visitor。这是一个典型的访问者模式。</p><p>ElementVisitor 定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 元素访问者</div><div class="line">public interface ElementVisitor&lt;R, P&gt; &#123;</div><div class="line">    // 访问元素</div><div class="line">    R visit(Element var1, P var2);</div><div class="line"></div><div class="line">    R visit(Element var1);</div><div class="line">    // 访问包元素</div><div class="line">    R visitPackage(PackageElement var1, P var2);</div><div class="line">    // 访问类型元素</div><div class="line">    R visitType(TypeElement var1, P var2);</div><div class="line">    // 访问变量元素</div><div class="line">    R visitVariable(VariableElement var1, P var2);</div><div class="line">    // 访问可执行元素</div><div class="line">    R visitExecutable(ExecutableElement var1, P var2);</div><div class="line">    // 访问参数元素</div><div class="line">    R visitTypeParameter(TypeParameterElement var1, P var2);</div><div class="line">    // 访问位置元素，为后续扩展预留的接口</div><div class="line">    R visitUnknown(Element var1, P var2);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当 Visitor 对元素结构进行访问时，就可以针对不同的类型进行不同的处理。例如 SimpleElementVisitor6 就是其中一个访问者，它基本上没做什么操作，直接返回了元素的默认值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@SupportedSourceVersion(SourceVersion.RELEASE_6)</div><div class="line">public class SimpleElementVisitor6&lt;R, P&gt; extends AbstractElementVisitor6&lt;R, P&gt; &#123;</div><div class="line">    protected final R DEFAULT_VALUE;</div><div class="line"></div><div class="line">    protected SimpleElementVisitor6() &#123;</div><div class="line">        this.DEFAULT_VALUE = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected SimpleElementVisitor6(R var1) &#123;</div><div class="line">        this.DEFAULT_VALUE = var1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected R defaultAction(Element var1, P var2) &#123;</div><div class="line">        return this.DEFAULT_VALUE;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitPackage(PackageElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitType(TypeElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitVariable(VariableElement var1, P var2) &#123;</div><div class="line">        return var1.getKind() != ElementKind.RESOURCE_VARIABLE ? this.defaultAction(var1, var2) : this.visitUnknown(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitExecutable(ExecutableElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitTypeParameter(TypeParameterElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>另一个提取元素类型的访问者是 ElementKindVisitor6：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">@SupportedSourceVersion(SourceVersion.RELEASE_6)</div><div class="line">public class ElementKindVisitor6&lt;R, P&gt; extends SimpleElementVisitor6&lt;R, P&gt; &#123;</div><div class="line">    protected ElementKindVisitor6() &#123;</div><div class="line">        super((Object)null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected ElementKindVisitor6(R var1) &#123;</div><div class="line">        super(var1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitPackage(PackageElement var1, P var2) &#123;</div><div class="line">        assert var1.getKind() == ElementKind.PACKAGE : &quot;Bad kind on PackageElement&quot;;</div><div class="line"></div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line">    // 访问类型元素，比如类、注解、枚举、接口</div><div class="line">    public R visitType(TypeElement var1, P var2) &#123;</div><div class="line">        ElementKind var3 = var1.getKind();</div><div class="line">        switch(var3) &#123;</div><div class="line">        case ANNOTATION_TYPE:</div><div class="line">            return this.visitTypeAsAnnotationType(var1, var2);</div><div class="line">        case CLASS:</div><div class="line">            return this.visitTypeAsClass(var1, var2);</div><div class="line">        case ENUM:</div><div class="line">            return this.visitTypeAsEnum(var1, var2);</div><div class="line">        case INTERFACE:</div><div class="line">            return this.visitTypeAsInterface(var1, var2);</div><div class="line">        default:</div><div class="line">            throw new AssertionError(&quot;Bad kind &quot; + var3 + &quot; for TypeElement&quot; + var1);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitTypeAsAnnotationType(TypeElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitTypeAsClass(TypeElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitTypeAsEnum(TypeElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public R visitTypeAsInterface(TypeElement var1, P var2) &#123;</div><div class="line">        return this.defaultAction(var1, var2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ElementKindVisitor6 对于不同的类型进行不同的处理，提取各个元素的类型信息，例如，上述代码中对于 Type 类型的元素将分别进行处理，如类、枚举、接口、注解等。</p><p>首先，编译器将代码抽象成一个代码元素的树，然后再编译时对整棵树进行遍历访问，每个元素都有一个 accept 函数接受访问者的访问，每个访问者中都有对应的 visit 函数，例如，visitType 函数就是对类型元素的访问，在每个 visit 函数中对不同的类型进行不同的处理，这样就达到了差异处理的效果，同时将数据结构和数据操作分离，使得每个类型的职责单一，易于升级维护。JDK 还特意预留了 visitUnknown 接口来应对 Java 语言后续发展可能添加元素类型的问题，灵活地将访问者模式的缺点优化。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;访问者（Visitor）模式
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>14 设计模式——模板方法模式</title>
    <link href="http://yoursite.com/2019/08/20/PATTERN/14%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E6%A8%A1%E6%9D%BF%E6%96%B9%E6%B3%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/20/PATTERN/14 设计模式——模板方法模式/</id>
    <published>2019-08-19T17:00:00.000Z</published>
    <updated>2020-03-04T15:35:14.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>模板方法（Template Method）模式：<strong>定义一个操作中的算法的框架，而将一些步骤延迟到子类中，使得子类可以不改变一个算法的结构即可重定义该算法的某些特定步骤</strong>。</p><p>在面向对象开发过程中，通常会遇到这样的一个问题，我们知道一个算法所需的关键步骤，并确定了这些步骤的执行顺序，但是某些步骤的具体实现是未知的，或者说某些步骤的实现是会随着环境的变化而改变的。</p><p>例如，执行程序的流程大致如下：<br>1）检查代码的正确性；<br>2）链接相关的类库；<br>3）编译相关代码；<br>4）执行程序。</p><p>对于不同的程序设计语言，上述 4 个步骤都是不一样的，但是它们的执行流程都是固定的，这类问题的解决方案就是模板方法模式。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。</li><li>它在父类中提取了公共的部分代码，便于代码复用。</li><li>部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象。</li><li>父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>多个子类有公有的方法，并且逻辑基本相同是。</li><li>重要、复杂的算法，可以把核心算法设计为模板方法，周边的相关细节功能由各个子类实现。</li><li>重构时，模板方法模式是一个经常使用的模式，把相同的代码抽取到父类中，然后通过钩子函数约束其行为。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模板方法模式需要注意抽象类与具体子类之间的协作。它用到了虚函数的多态性技术以及“不用调用我，让我来调用你”的反向控制技术。现在来介绍它们的基本结构。</p><p>模式包含以下主要角色。</p><ul><li>AbstractClass：抽象类，定义了一整套算法框架。它由一个模板方法和若干个基本方法构成。这些方法的定义如下。<ul><li>模板方法：定义了算法的骨架，按某种顺序调用其包含的基本方法。</li><li>基本方法：是整个算法中的一个步骤，包含以下几种类型。<ul><li>抽象方法：在抽象类中申明，由具体子类实现。</li><li>具体方法：在抽象类中已经实现，在具体子类中可以继承或重写它。</li><li>钩子方法：在抽象类中已经实现，包括用于判断的逻辑方法和需要子类重写的空方法两种。</li></ul></li></ul></li><li>ConcreteClass：具体实现类，根据需要去实现抽象类中的方法。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0df76e430f09a758.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class TemplateMethodPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        AbstractClass tm = new ConcreteClass();</div><div class="line">        tm.TemplateMethod();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象类</div><div class="line">abstract class AbstractClass &#123;</div><div class="line">    // 模板方法，不允许覆写</div><div class="line">    public final void TemplateMethod() &#123;</div><div class="line">        SpecificMethod();</div><div class="line">        abstractMethod1();</div><div class="line">        abstractMethod2();</div><div class="line">    &#125;</div><div class="line">    // 具体方法</div><div class="line">    public void SpecificMethod() &#123;</div><div class="line">        System.out.println(&quot;抽象类中的具体方法被调用...&quot;);</div><div class="line">    &#125;</div><div class="line">    public abstract void abstractMethod1(); // 抽象方法1</div><div class="line">    public abstract void abstractMethod2(); // 抽象方法2</div><div class="line">&#125;</div><div class="line">// 具体子类</div><div class="line">class ConcreteClass extends AbstractClass &#123;</div><div class="line">    public void abstractMethod1() &#123;</div><div class="line">        System.out.println(&quot;抽象方法1的实现被调用...&quot;);</div><div class="line">    &#125;</div><div class="line">    public void abstractMethod2() &#123;</div><div class="line">        System.out.println(&quot;抽象方法2的实现被调用...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>以送快递为例，快递员送快递基本就是一套固定的流程：收到快递 &gt;&gt; 准备派送 &gt;&gt; 联系收货人 &gt;&gt; 确定结果。</p><p>定义算法框架，这里是快递员派送快递的步骤：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 抽象快递员类</div><div class="line">public abstract class Postman &#123;</div><div class="line">    // 派送流程</div><div class="line">    // 这里申明为final，不希望子类覆盖这个方法，防止更改流程的执行顺序</div><div class="line">    public final void post() &#123;</div><div class="line">        prepare();      // 准备派送</div><div class="line">        call();         // 联系收货人</div><div class="line">        if (isSign()) &#123; // 是否签收</div><div class="line">            sign();     // 签收</div><div class="line">        &#125; else &#123;</div><div class="line">            refuse();   //拒签</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 准备操作，固定流程，父类实现</div><div class="line">    protected void prepare() &#123;</div><div class="line">        System.out.println(&quot;快递已达到，准备派送&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 联系收货人，联系人不一样，所以为抽象方法，子类实现</div><div class="line">    protected abstract void call();</div><div class="line"></div><div class="line">    // 是否签收,这个是钩子方法，用来控制流程的走向</div><div class="line">    protected boolean isSign() &#123;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 签收，这个是固定流程，父类实现</div><div class="line">    protected void sign() &#123;</div><div class="line">        System.out.println(&quot;客户已签收，上报系统&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 拒签，空实现，这个也是钩子方法，子类可以跟进实际来决定是否去实现这个方法</div><div class="line">    protected void refuse() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>根据需要去实现抽象类中的方法，下面以派送给两个不同的人为例，其中一个签收，另一个拒收：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 派送给 A 先生</div><div class="line">public class PostA extends Postman &#123;</div><div class="line">    // 联系收货，实现父类的抽象方法</div><div class="line">    @Override</div><div class="line">    protected void call() &#123;</div><div class="line">        System.out.println(&quot;联系A先生并送到门口&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 派送给 B 先生</div><div class="line">public class PostB extends Postman &#123;</div><div class="line">    // 联系收货，实现父类的抽象方法</div><div class="line">    @Override</div><div class="line">    protected void call() &#123;</div><div class="line">        System.out.println(&quot;联系B先生并送到门口&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 是否签收，覆盖父类的钩子方法，控制流程的走向</div><div class="line">    @Override</div><div class="line">    protected boolean isSign() &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 拒签，覆盖父类的钩子方法</div><div class="line">    @Override</div><div class="line">    protected void refuse() &#123;</div><div class="line">        System.out.println(&quot;拒绝签收：商品不符&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户端测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public void test()&#123;</div><div class="line">    System.out.println(&quot;----派送A----&quot;);</div><div class="line">    Postman postA=new PostA();</div><div class="line">    postA.post();</div><div class="line">    System.out.println(&quot;----派送B----&quot;);</div><div class="line">    Postman postB=new PostB();</div><div class="line">    postB.post();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">----派送A----</div><div class="line">快递已达到，准备派送</div><div class="line">联系A先生并送到门口</div><div class="line">客户已签收，上报系统</div><div class="line">----派送B----</div><div class="line">快递已达到，准备派送</div><div class="line">联系B先生并送到门口</div><div class="line">拒绝签收：商品不符</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>在 ANDROID 中，使用模板方法模式的示例有很多。例如：Activity 的生命周期函数、View 的 draw 方法 和 AsyncTask 类。</p><p>AsyncTask 的整个执行过程其实是一个框架，具体的实现都需要子类来完成，而且它执行的算法框架是固定的，调用 execute 后会依次执行 onPreExecute、doInBackground、onPostExecute，当然也可以通过 onProgressUpdate 来更新进度。</p><p>AsyncTask 的 execute 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">@MainThread</div><div class="line">public final AsyncTask&lt;Params, Progress, Result&gt; execute(Params... params) &#123;</div><div class="line">    return executeOnExecutor(sDefaultExecutor, params);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@MainThread</div><div class="line">public final AsyncTask&lt;Params, Progress, Result&gt; executeOnExecutor(Executor exec,</div><div class="line">                                                                   Params... params) &#123;</div><div class="line">    if (mStatus != Status.PENDING) &#123;</div><div class="line">        switch (mStatus) &#123;</div><div class="line">            case RUNNING:</div><div class="line">                throw new IllegalStateException(&quot;Cannot execute task:&quot;</div><div class="line">                        + &quot; the task is already running.&quot;);</div><div class="line">            case FINISHED:</div><div class="line">                throw new IllegalStateException(&quot;Cannot execute task:&quot;</div><div class="line">                        + &quot; the task has already been executed &quot;</div><div class="line">                        + &quot;(a task can be executed only once)&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    mStatus = Status.RUNNING;</div><div class="line">    onPreExecute();</div><div class="line"></div><div class="line">    mWorker.mParams = params;</div><div class="line">    exec.execute(mFuture);</div><div class="line"></div><div class="line">    return this;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到 execute 方法是一个 final 方法，它调用了 executeOnExecutor 方法。如果不是 Pending 状态会抛出依次，这也解释了为什么 AsyncTask 只能被执行一次，因为 AsyncTask 的 Running 和 Finished 状态都会抛出异常，因此每次使用 AsyncTask 时都需要重新创建一个对象。</p><p>继续往下看，在 executeOnExecutor 方法中首先执行了 onPreExecute 方法，因为 AsyncTask 的要求是需要在 UI 线程中调用 execute 方法。因此，onPreExecute 方法也在 UI 线程中执行，然后将 params 参数传递给 mWorker 对象的 mParams 字段，并且执行了 exec.execute(mFuture) 方法。而 mWorker 和 mFuture 这两个字段都是在构造函数中初始化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public AsyncTask(@Nullable Looper callbackLooper) &#123;</div><div class="line">    // 构建一个 Worker 对象</div><div class="line">    mWorker = new WorkerRunnable&lt;Params, Result&gt;() &#123;</div><div class="line">        public Result call() throws Exception &#123;</div><div class="line">            mTaskInvoked.set(true);</div><div class="line">            Result result = null;</div><div class="line">            try &#123;</div><div class="line">                Process.setThreadPriority(Process.THREAD_PRIORITY_BACKGROUND);</div><div class="line">                // 调用 doInBackground</div><div class="line">                result = doInBackground(mParams);</div><div class="line">                Binder.flushPendingCommands();</div><div class="line">            &#125; catch (Throwable tr) &#123;</div><div class="line">                mCancelled.set(true);</div><div class="line">                throw tr;</div><div class="line">            &#125; finally &#123;</div><div class="line">                postResult(result);</div><div class="line">            &#125;</div><div class="line">            return result;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line"></div><div class="line">    mFuture = new FutureTask&lt;Result&gt;(mWorker) &#123;</div><div class="line">        @Override</div><div class="line">        protected void done() &#123;</div><div class="line">            try &#123;</div><div class="line">                postResultIfNotInvoked(get());</div><div class="line">            &#125; </div><div class="line">            // 代码省略</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>mWorker 的 call 方法会调用 doInBackground，并且在 finally 方法里面将 result 通过 postResult 方法传递出去。</p><p>mFuture 包装了 mWorker 对象，在这个 mFuture 对象的 run 函数中又会调用 mWorker 对象的 call 方法，在 call 方法中调用了 doInBackground 函数。因为 mFuture 提交给了线程池来执行，所以使得 doInBackground 执行在非 UI 线程。得到 doInBackground 的结果后，通过 postResult 传递结果给 UI 线程。</p><p>postResult 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private Result postResult(Result result) &#123;</div><div class="line">    @SuppressWarnings(&quot;unchecked&quot;)</div><div class="line">    Message message = getHandler().obtainMessage(MESSAGE_POST_RESULT,</div><div class="line">            new AsyncTaskResult&lt;Result&gt;(this, result));</div><div class="line">    message.sendToTarget();</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>postResult 方法把一个消息（MESSAGE_POST_RESULT）发送给 Handler 执行。Handler 是 InternalHandler 类型。当 InternalHandler 接到 MESSAGE_POST_RESULT 类型的消息时，就会调用 result.mTask.finish() 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">private static class InternalHandler extends Handler &#123;</div><div class="line">    public InternalHandler(Looper looper) &#123;</div><div class="line">        super(looper);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings(&#123;&quot;unchecked&quot;, &quot;RawUseOfParameterizedType&quot;&#125;)</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        AsyncTaskResult&lt;?&gt; result = (AsyncTaskResult&lt;?&gt;) msg.obj;</div><div class="line">        switch (msg.what) &#123;</div><div class="line">            case MESSAGE_POST_RESULT:</div><div class="line">                // There is only one result</div><div class="line">                // 调用了 AsyncTask 的 finish 方法</div><div class="line">                result.mTask.finish(result.mData[0]);</div><div class="line">                break;</div><div class="line">            case MESSAGE_POST_PROGRESS:</div><div class="line">                result.mTask.onProgressUpdate(result.mData);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void finish(Result result) &#123;</div><div class="line">        if (isCancelled()) &#123;</div><div class="line">            onCancelled(result);</div><div class="line">        &#125; else &#123;</div><div class="line">            // 结果通过 onPostExecute 回调给用户</div><div class="line">            onPostExecute(result);</div><div class="line">        &#125;</div><div class="line">        mStatus = Status.FINISHED;  // 修改状态</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>AsyncTask 的 finish 方法又调用了 onPostExecute ，这个时候执行过程就完成了。</p><p>总之，execute 方法内部封装了 onPreExecute、doInBackground、onPostExecute 这个逻辑流程，用户可以根据自己的需求再覆写这几个方法，使得用户可以很方便地使用异步任务来完成耗时地操作以及更新UI，这其实就是通过线程池来执行耗时地任务，得到结果之后，通过 Handler 将结果传递到 UI 线程来执行。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;模板方法（Template 
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>13 设计模式——迭代器模式</title>
    <link href="http://yoursite.com/2019/08/19/PATTERN/13%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%BF%AD%E4%BB%A3%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/19/PATTERN/13 设计模式——迭代器模式/</id>
    <published>2019-08-18T17:00:00.000Z</published>
    <updated>2020-03-04T13:34:12.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>迭代器（Iterator）模式：<strong>提供一种方法顺序访问一个容器对象中的各个元素，而又不需暴露该对象的内部细节</strong>。</p><p>在程序设计中，经常要访问一个聚合对象中的各个元素，如数据结构中的链表遍历，通常的做法是将链表的创建和遍历都放在同一个类中，但这种方式不利于程序的扩展，如果要更换遍历方法就必须修改程序源代码，这违背了 “开闭原则”。</p><p>既然将遍历方法封装在聚合类中不可取，那么聚合类中不提供遍历方法，将遍历方法由用户自己实现是否可行呢？答案是同样不可取，因为这种方式会存在两个缺点：暴露了聚合类的内部表示，使其数据不安全；增加了客户的负担。</p><p><strong>迭代器模式</strong>能较好地克服以上缺点，它在客户访问类与聚合类之间插入一个迭代器，这分离了聚合对象与其遍历行为，对客户也隐藏了其内部细节，且满足“单一职责原则”和“开闭原则”，如 Java 中的 Collection、List、Set、Map 等都包含了迭代器。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>访问一个聚合对象的内容而无须暴露它的内部表示。</li><li>遍历任务交由迭代器完成，这简化了聚合类。</li><li>它支持以不同方式遍历一个聚合，甚至可以自定义迭代器的子类以支持新的遍历。</li><li>增加新的聚合类和迭代器类都很方便，无须修改原有代码。</li><li>封装性良好，为遍历不同的聚合结构提供一个统一的接口。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>增加了类的个数，这在一定程度上增加了系统的复杂性。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>遍历一个容器对象时。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>迭代器模式是通过将聚合对象的遍历行为分离出来，抽象成迭代器类来实现的，其目的是在不暴露聚合对象的内部结构的情况下，让外部代码透明地访问聚合的内部数据。现在我们来分析其基本结构与实现方法。</p><p>模式包含以下主要角色。</p><ul><li>Iterator（迭代器接口）：负责定义、访问和遍历元素的接口。</li><li>ConcreteIterator（具体迭代器类）：实现迭代器接口。</li><li>Aggregate（容器接口）：定义容器的基本功能以及提供创建迭代器的接口。</li><li>ConcreteAggregate（具体容器类）：实现容器接口中的功能。</li><li>Client（客户端类）：即要使用迭代器模式的地方。</li></ul><p>其结构图如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f3ac7a8df08cf0bf.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class IteratorPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Aggregate&lt;String&gt; aggregate = new ConcreteAggregate&lt;&gt;(); </div><div class="line">        aggregate.add(&quot;中山大学&quot;); </div><div class="line">        aggregate.add(&quot;华南理工&quot;); </div><div class="line">        aggregate.add(&quot;韶关学院&quot;);</div><div class="line">        System.out.print(&quot;聚合的内容有：&quot;);</div><div class="line">        Iterator&lt;String&gt; it = aggregate.getIterator(); </div><div class="line">        while (it.hasNext()) &#123;</div><div class="line">            System.out.print(it.next() + &quot;\t&quot;); </div><div class="line">        &#125;</div><div class="line">        System.out.println(&quot;\nFirst：&quot; + it.first());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 抽象聚合</div><div class="line">interface Aggregate&lt;T&gt; &#123; </div><div class="line">    void add(T obj); </div><div class="line">    void remove(T obj); </div><div class="line">    Iterator&lt;T&gt; iterator(); </div><div class="line">&#125;</div><div class="line">// 具体聚合，具体容器</div><div class="line">class ConcreteAggregate&lt;T&gt; implements Aggregate&lt;T&gt; &#123; </div><div class="line">    private List&lt;T&gt; list = new ArrayList&lt;T&gt;(); </div><div class="line">    public void add(T obj) &#123; </div><div class="line">        list.add(obj); </div><div class="line">    &#125;</div><div class="line">    public void remove(T obj) &#123; </div><div class="line">        list.remove(obj); </div><div class="line">    &#125;</div><div class="line">    public Iterator&lt;T&gt; getIterator() &#123; </div><div class="line">        return(new ConcreteIterator&lt;T&gt;(list)); </div><div class="line">    &#125;     </div><div class="line">&#125;</div><div class="line">// 抽象迭代器</div><div class="line">interface Iterator&lt;T&gt; &#123;</div><div class="line">    T first();</div><div class="line">    T next();</div><div class="line">    boolean hasNext();</div><div class="line">&#125;</div><div class="line">// 具体迭代器</div><div class="line">class ConcreteIterator&lt;T&gt; implements Iterator&lt;T&gt; &#123; </div><div class="line">    private List&lt;T&gt; list; </div><div class="line">    private int index = -1; </div><div class="line">    public ConcreteIterator(List&lt;T&gt; list) &#123; </div><div class="line">        this.list = list; </div><div class="line">    &#125; </div><div class="line">    public boolean hasNext() &#123; </div><div class="line">        return index &lt; list.size() - 1;</div><div class="line">    &#125;</div><div class="line">    public T first() &#123;</div><div class="line">        index = 0;</div><div class="line">        return list.get(index);</div><div class="line">    &#125;</div><div class="line">    public T next() &#123; </div><div class="line">        T obj = null; </div><div class="line">        if (this.hasNext()) &#123; </div><div class="line">            obj = list.get(++index); </div><div class="line">        &#125; </div><div class="line">        return obj; </div><div class="line">    &#125;   </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>用迭代器模式编写一个浏览婺源旅游风景图的程序。</p><p>分析：婺源的名胜古迹较多，要设计一个查看相关景点图片和简介的程序，用“迭代器模式”设计比较合适。</p><p>首先，设计一个婺源景点（WyViewSpot）类来保存每张图片的名称与简介；再设计一个景点集（ViewSpotSet）接口，它是抽象聚合类，提供了增加和删除婺源景点的方法，以及获取迭代器的方法。</p><p>然后，定义一个婺源景点集（WyViewSpotSet）类，它是具体聚合类，用 ArrayList 来保存所有景点信息，并实现父类中的抽象方法；再定义婺源景点的抽象迭代器（ViewSpotltemtor）接口，其中包含了查看景点信息的相关方法。</p><p>最后，定义婺源景点的具体迭代器（WyViewSpotlterator）类，它实现了父类的抽象方法。</p><p>程序代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">// 婺源景点类</div><div class="line">class WyViewSpot &#123;</div><div class="line">    private String name;</div><div class="line">    private String introduce;</div><div class="line">    WyViewSpot(String name, String Introduce) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.introduce = introduce;</div><div class="line">    &#125;</div><div class="line">    public String getName() &#123;</div><div class="line">        return name;</div><div class="line">    &#125;</div><div class="line">    public String getIntroduce() &#123;</div><div class="line">        return introduce;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象聚合：婺源景点集接口</div><div class="line">interface ViewSpotSet &#123;</div><div class="line">    void add(WyViewSpot obj);</div><div class="line">    void remove(WyViewSpot obj);</div><div class="line">    ViewSpotIterator iterator();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体聚合：婺源景点集</div><div class="line">class WyViewSpotSet implements ViewSpotSet &#123;</div><div class="line">    private List&lt;WyViewSpot&gt; list = new ArrayList&lt;&gt;();</div><div class="line">    public void add(WyViewSpot obj) &#123;</div><div class="line">        list.add(obj);</div><div class="line">    &#125;</div><div class="line">    public void remove(WyViewSpot obj) &#123;</div><div class="line">        list.remove(obj);</div><div class="line">    &#125;</div><div class="line">    public ViewSpotIterator iterator() &#123;</div><div class="line">        return(new WyViewSpotIterator(list));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象迭代器：婺源景点迭代器接口</div><div class="line">interface ViewSpotIterator &#123;</div><div class="line">    boolean hasNext();</div><div class="line">    WyViewSpot next();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体迭代器：婺源景点迭代器</div><div class="line">class WyViewSpotIterator implements ViewSpotIterator &#123;</div><div class="line">    private List&lt;WyViewSpot&gt; list;</div><div class="line">    private int index = -1;</div><div class="line">    public WyViewSpotIterator(List&lt;WyViewSpot&gt; list) &#123;</div><div class="line">        this.list = list;</div><div class="line">    &#125;</div><div class="line">    public boolean hasNext() &#123;</div><div class="line">        return index &lt; list.size() - 1;</div><div class="line">    &#125;</div><div class="line">    public WyViewSpot next() &#123;</div><div class="line">        return list.get(++index);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于聚合与迭代器的关系非常密切，所以大多数语言在实现聚合类时都提供了迭代器类，因此大数情况下使用语言中已有的聚合类的迭代器就已经够了。</p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>ANDROID 中典型的迭代器模式例子是数据库查询使用 Cursor，当我们使用 SQLiteDatabase 的 query 方法查询数据时，会返回一个 Cursor 游标对象，该游标对象实质就是一个具体的迭代器，我们可以使用它遍历数据库查询所得到的结果集。</p><p>首先定义一个 SQLiteOpenHelper：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class DBHelper extends SQLiteOpenHelper &#123;</div><div class="line"></div><div class="line">    public DBHelper(Context context) &#123;</div><div class="line">        super(context, &quot;DB_AIGE&quot;, null, 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(SQLiteDatabase db) &#123;</div><div class="line">        db.execSQL(&quot;CREATE TABLE table_aige (_id INTEGER PRIMARY KEY AUTOINCREMENT, name TEXT, sex TEXT)&quot;);</div><div class="line">        db.execSQL(&quot;INSERT INTO table_aige (name, sex) values (&apos;Aige&apos;, &apos;man&apos;)&quot;);</div><div class="line">        db.execSQL(&quot;INSERT INTO table_aige (name, sex) values (&apos;SMBrother&apos;, &apos;man&apos;)&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onUpgrade(SQLiteDatabase db, int oldVersion, int newVersion) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>构造 ContentProvider：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class DataProvider extends ContentProvider &#123;</div><div class="line"></div><div class="line">    private DBHelper dbHelper;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onCreate() &#123;</div><div class="line">        dbHelper = new DBHelper(getContext());</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public Cursor query(@NonNull Uri uri, @Nullable String[] projection, @Nullable String selection, @Nullable String[] selectionArgs, @Nullable String sortOrder) &#123;</div><div class="line">        SQLiteDatabase db = dbHelper.getReadableDatabase();</div><div class="line">        return db.query(&quot;table_aige&quot;, projection, null, null, null, null, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public String getType(@NonNull Uri uri) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public Uri insert(@NonNull Uri uri, @Nullable ContentValues values) &#123;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int delete(@NonNull Uri uri, @Nullable String selection, @Nullable String[] selectionArgs) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int update(@NonNull Uri uri, @Nullable ContentValues values, @Nullable String selection, @Nullable String[] selectionArgs) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 Activity 使用 ContentProvider：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class IteratorActivity extends ListActivity &#123;</div><div class="line"></div><div class="line">    private static final Uri URI = Uri.parse(&quot;content://com.android.androidsamples.dataprovider/table_aige&quot;);</div><div class="line"></div><div class="line">    private static final String[] PROJECTION = new String[]&#123;&quot;name&quot;, &quot;sex&quot;&#125;;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(@Nullable Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        Cursor cursor = getContentResolver().query(URI, PROJECTION, null, null, null);</div><div class="line"></div><div class="line">        List&lt;Map&lt;String, String&gt;&gt; list = new ArrayList&lt;&gt;();</div><div class="line">        cursor.moveToFirst();</div><div class="line">        do &#123;</div><div class="line">            Map&lt;String, String&gt; item = new HashMap&lt;&gt;();</div><div class="line">            item.put(&quot;name&quot;, cursor.getString(0));</div><div class="line">            item.put(&quot;sex&quot;, cursor.getString(1));</div><div class="line">            list.add(item);</div><div class="line">        &#125; while (cursor.moveToNext());</div><div class="line">        cursor.close();</div><div class="line">        setListAdapter(new SimpleAdapter(this, list, android.R.layout.simple_list_item_2,</div><div class="line">                new String[]&#123;&quot;name&quot;, &quot;sex&quot;&#125;, new int[]&#123;android.R.id.text1, android.R.id.text2&#125;));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注册组件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=&quot;.iterator.IteratorActivity&quot; /&gt;</div><div class="line">&lt;provider android:authorities=&quot;com.android.androidsamples.dataprovider&quot; </div><div class="line">        android:name=&quot;.iterator.DataProvider&quot;/&gt;</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;迭代器（Iterator）模
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>12 设计模式——备忘录模式</title>
    <link href="http://yoursite.com/2019/08/18/PATTERN/12%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%A4%87%E5%BF%98%E5%BD%95%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/18/PATTERN/12 设计模式——备忘录模式/</id>
    <published>2019-08-17T17:00:00.000Z</published>
    <updated>2020-03-04T04:55:06.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>备忘录（Memento）模式：<strong>在不破坏封装性的前提下，捕获一个对象的内部状态，并在该对象之外保存这个状态，这样以后就可以将该对象恢复到先前保存的状态</strong>。</p><p>其实很多应用软件都使用了该模式，如 Word、记事本、Photoshop、Eclipse 等软件在编辑时按 Ctrl+Z 组合键时能撤销当前操作，使文档恢复到之前的状态；还有在 IE 中的后退键、数据库事务管理中的回滚操作、玩游戏时的中间结果存档功能、数据库与操作系统的备份操作、棋类游戏中的悔棋功能等都属于这类。</p><p>备忘录模式能记录一个对象的内部状态，当用户后悔时能撤销当前操作，使数据恢复到它原先的状态。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>提供了一种可以恢复状态的机制。当用户需要时能够比较方便地将数据恢复到某个历史的状态。</li><li>实现了内部状态的封装。除了创建它的发起人之外，其他对象都不能够访问这些状态信息。</li><li>简化了发起人类。发起人不需要管理和保存其内部状态的各个备份，所有状态信息都保存在备忘录中，并由管理者进行管理，这符合单一职责原则。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>资源消耗大。如果要保存的内部状态信息过多或者特别频繁，将会占用比较大的内存资源。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>需要保存一个对象在某一时刻的状态或部分状态。</li><li>如果用一个接口来让其他对象得到这些状态，将会暴露对象的实现细节并破坏对象的封装性，一个对象不希望外界直接访问其内部状态，通过中间对象可以间接访问其内部状态。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>模式包含以下主要角色。</p><ul><li>Originator（发起人角色）：负责创建一个备忘录（Memoto），能够记录内部状态，以及恢复原来记录的状态。并且能够决定哪些状态是需要备忘的。</li><li>Memoto（备忘录角色）：将发起人（Originator）对象的内部状态存储起来；并且可以防止发起人（Originator）之外的对象访问备忘录（Memoto）。</li><li>Caretaker（负责人角色）：负责保存备忘录（Memoto），不能对备忘录（Memoto）的内容进行操作和访问，只能将备忘录传递给其他对象。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3ab336b83af0aa4f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>备忘录模式的实现代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public class MementoPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Originator originator = new Originator();</div><div class="line">        Caretaker caretaker = new Caretaker();       </div><div class="line">        originator.setState(&quot;S0&quot;); </div><div class="line">        System.out.println(&quot;初始状态:&quot; + originator.getState());           </div><div class="line">        caretaker.setMemento(originator.createMemento()); // 保存状态      </div><div class="line">        originator.setState(&quot;S1&quot;); </div><div class="line">        System.out.println(&quot;新的状态:&quot; + originator.getState());        </div><div class="line">        originator.restoreMemento(caretaker.getMemento()); // 恢复状态</div><div class="line">        System.out.println(&quot;恢复状态:&quot; + originator.getState());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 备忘录</div><div class="line">class Memento &#123; </div><div class="line">    private String state; </div><div class="line">    public Memento(String state) &#123; </div><div class="line">        this.state=state; </div><div class="line">    &#125;     </div><div class="line">    public void setState(String state) &#123; </div><div class="line">        this.state=state; </div><div class="line">    &#125;</div><div class="line">    public String getState() &#123; </div><div class="line">        return state; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 发起人</div><div class="line">class Originator &#123; </div><div class="line">    private String state;     </div><div class="line">    public void setState(String state) &#123; </div><div class="line">        this.state=state; </div><div class="line">    &#125;</div><div class="line">    public String getState() &#123; </div><div class="line">        return state; </div><div class="line">    &#125;</div><div class="line">    public Memento createMemento() &#123; </div><div class="line">        return new Memento(state); </div><div class="line">    &#125; </div><div class="line">    public void restoreMemento(Memento m) &#123; </div><div class="line">        this.setState(m.getState()); </div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line">// 管理者</div><div class="line">class Caretaker &#123; </div><div class="line">    private Memento memento;       </div><div class="line">    public void setMemento(Memento m) &#123; </div><div class="line">        memento=m; </div><div class="line">    &#125;</div><div class="line">    public Memento getMemento() &#123; </div><div class="line">        return memento; </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>以游戏存档为例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Originator</div><div class="line"> * 这里则是游戏类，游戏类提供存档和读档的功能</div><div class="line"> */</div><div class="line">public class Game &#123;</div><div class="line">    private int mLevel = 1; // 等级</div><div class="line">    private int mCoin = 0;  // 金币数量</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;game&#123;&quot; +</div><div class="line">                &quot;mLevel=&quot; + mLevel +</div><div class="line">                &quot;, mCoin=&quot; + mCoin +</div><div class="line">                &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void play() &#123;</div><div class="line">        System.out.println(&quot;升级了&quot;);</div><div class="line">        mLevel++;</div><div class="line">        System.out.println(&quot;当前等级为:&quot; + mLevel);</div><div class="line">        System.out.println(&quot;获得金币:32&quot;);</div><div class="line">        mCoin += 32;</div><div class="line">        System.out.println(&quot;当前金币数量为:&quot; + mCoin);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void exit() &#123;</div><div class="line">        System.out.println(&quot;退出游戏&quot;);</div><div class="line">        System.out.println(&quot;退出游戏时的属性 : &quot; + toString());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 创建备忘录,即游戏存档</div><div class="line">    public Memento createMemento() &#123;</div><div class="line">        Memento memento = new Memento();</div><div class="line">        memento.level = mLevel;</div><div class="line">        memento.coin = mCoin;</div><div class="line">        return memento;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMemento(Memento memento) &#123;</div><div class="line">        mLevel = memento.level;</div><div class="line">        mCoin = memento.coin;</div><div class="line">        System.out.println(&quot;读取存档信息:&quot; + toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Memento</div><div class="line"> * 负责将游戏类的内部状态存储起来</div><div class="line"> */</div><div class="line">public class Memento &#123;</div><div class="line">    public int level;   // 等级</div><div class="line">    public int coin;    // 金币数量</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Caretaker</div><div class="line"> * 备忘录管理类</div><div class="line"> */</div><div class="line">public class Caretaker &#123;</div><div class="line">    private Memento mMemento;</div><div class="line"></div><div class="line">    public void setMemento(Memento memento) &#123;</div><div class="line">        mMemento = memento;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Memento getMemento() &#123;</div><div class="line">        return mMemento;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户端测试：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public void test() &#123;</div><div class="line">    System.out.println(&quot;首次进入游戏&quot;);</div><div class="line">    Game game = new Game();</div><div class="line">    game.play();</div><div class="line">    Memento memento = game.createMemento(); // 创建存档</div><div class="line">    Caretaker caretaker = new Caretaker();</div><div class="line">    caretaker.setMemento(memento);          // 保存存档</div><div class="line">    game.exit();</div><div class="line"></div><div class="line">    System.out.println(&quot;-------------&quot;);</div><div class="line">    System.out.println(&quot;二次进入游戏&quot;);</div><div class="line">    Game secondGame = new Game();</div><div class="line">    secondGame.setMemento(caretaker.getMemento()); // 读取存档</div><div class="line">    secondGame.play(); </div><div class="line">    secondGame.exit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">首次进入游戏</div><div class="line">升级了</div><div class="line">当前等级为:2</div><div class="line">获得金币:32</div><div class="line">当前金币数量为:32</div><div class="line">退出游戏</div><div class="line">退出游戏时的属性 : game&#123;mLevel=2, mCoin=32&#125;</div><div class="line">-------------</div><div class="line">二次进入游戏</div><div class="line">读取存档信息:game&#123;mLevel=2, mCoin=32&#125;</div><div class="line">升级了</div><div class="line">当前等级为:3</div><div class="line">获得金币:32</div><div class="line">当前金币数量为:64</div><div class="line">退出游戏</div><div class="line">退出游戏时的属性 : game&#123;mLevel=3, mCoin=64&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>状态保存是 ANDROID 中备忘录模式的典型使用，主要对应 Activity的两个回调方法 onSaveInstanceState() 和 onRestoreInstanceState()。</p><p>onSaveInstanceState 方法的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">protected void onSaveInstanceState(Bundle outState) &#123;</div><div class="line">    // 存储当前窗口的视图树的状态</div><div class="line">    outState.putBundle(WINDOW_HIERARCHY_TAG, mWindow.saveHierarchyState());</div><div class="line"></div><div class="line">    outState.putInt(LAST_AUTOFILL_ID, mLastAutofillId);</div><div class="line">    // 存储 fragment 的状态</div><div class="line">    Parcelable p = mFragments.saveAllState();</div><div class="line">    if (p != null) &#123;</div><div class="line">        outState.putParcelable(FRAGMENTS_TAG, p);</div><div class="line">    &#125;</div><div class="line">    // 存储自动填充的字段</div><div class="line">    if (mAutoFillResetNeeded) &#123;</div><div class="line">        outState.putBoolean(AUTOFILL_RESET_NEEDED, true);</div><div class="line">        getAutofillManager().onSaveInstanceState(outState);</div><div class="line">    &#125;</div><div class="line">    // 如果用户还设置了 Activity 的 ActivityLifecycleCallbacks，</div><div class="line">    // 那么调用这些 ActivityLifecycleCallbacks 的 onSaveInstanceState 进行存储状态</div><div class="line">    getApplication().dispatchActivitySaveInstanceState(this, outState);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述 onSaveInstanceState 函数中，主要分为如下 3 步：<br>1）存储窗口的视图树的状态；<br>2）存储 Fragment 的状态<br>3）调用 ActivityLifecycleCallbacks 的 onSaveInstanceState 函数进行状态存储。</p><p>我们先看第一步，在这一步将 Window 对象中的视图树中欧冠各个 View 状态存储到 Bundle 中。这样一来，当用户重新进入到该 Activity 时，用户 UI 的结构、状态才会被重新恢复，以此来保证用户界面的一致性。Window 类的具体实现类是 PhoneWindow，其中 saveHierarchyState 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Bundle saveHierarchyState() &#123;</div><div class="line">    Bundle outState = new Bundle();</div><div class="line">    if (mContentParent == null) &#123;</div><div class="line">        return outState;</div><div class="line">    &#125;</div><div class="line">    // 通过 SparseArray 类来存储，这相当于一个 key 为整型的 map</div><div class="line">    SparseArray&lt;Parcelable&gt; states = new SparseArray&lt;Parcelable&gt;();</div><div class="line">    // 调用 mContentParent 的 saveHierarchyState 方法，这个 mContentParent 就是调用 Activity 的 </div><div class="line">    // setContentView 函数设置的内容视图，它是内容视图的根节点，在这里存储整棵视图树的结构。</div><div class="line">    mContentParent.saveHierarchyState(states);</div><div class="line">    // 将视图树结构放到 outState 中</div><div class="line">    outState.putSparseParcelableArray(VIEWS_TAG, states);</div><div class="line"></div><div class="line">    // 保存当前界面中获取了焦点的 View</div><div class="line">    // Save the focused view ID.</div><div class="line">    final View focusedView = mContentParent.findFocus();</div><div class="line">    if (focusedView != null &amp;&amp; focusedView.getId() != View.NO_ID) &#123;</div><div class="line">        // 持有焦点的 View 必须要设置 id，否则重新进入该界面时不会恢复它的焦点状态</div><div class="line">        outState.putInt(FOCUSED_ID_TAG, focusedView.getId());</div><div class="line">    &#125;</div><div class="line">    // 存储整个面板的状态</div><div class="line">    // save the panels</div><div class="line">    SparseArray&lt;Parcelable&gt; panelStates = new SparseArray&lt;Parcelable&gt;();</div><div class="line">    savePanelState(panelStates);</div><div class="line">    if (panelStates.size() &gt; 0) &#123;</div><div class="line">        outState.putSparseParcelableArray(PANELS_TAG, panelStates);</div><div class="line">    &#125;</div><div class="line">    // 存储 ActionBar 的状态</div><div class="line">    if (mDecorContentParent != null) &#123;</div><div class="line">        SparseArray&lt;Parcelable&gt; actionBarStates = new SparseArray&lt;Parcelable&gt;();</div><div class="line">        mDecorContentParent.saveToolbarHierarchyState(actionBarStates);</div><div class="line">        outState.putSparseParcelableArray(ACTION_BAR_TAG, actionBarStates);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return outState;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 saveHierarchyState 中，主要时存储了与当前 UI、ActionBar 相关的 View 状态，这里用 mContentParent 来分析。这个 mContentParent 就是我们通过 Activity 的 setContentView 函数设置的内容视图，它是整个内容视图的根节点，存储它层级结构中的 View 状态也就存储了用户界面的状态。mContentParent 是一个 ViewGroup 对象，但是，saveHierarchyState 并不是在 ViewGroup 中，而是在 ViewGroup 的父类 View。</p><p>View 的 saveHierarchyState 方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public void saveHierarchyState(SparseArray&lt;Parcelable&gt; container) &#123;</div><div class="line">    dispatchSaveInstanceState(container);</div><div class="line">&#125;</div><div class="line"></div><div class="line">protected void dispatchSaveInstanceState(SparseArray&lt;Parcelable&gt; container) &#123;</div><div class="line">    // 注意：如果 View 没有设置 id，那么这个 View 的状态将不会被存储。</div><div class="line">    if (mID != NO_ID &amp;&amp; (mViewFlags &amp; SAVE_DISABLED_MASK) == 0) &#123;</div><div class="line">        mPrivateFlags &amp;= ~PFLAG_SAVE_STATE_CALLED;</div><div class="line">        // 调用 onSaveInstanceState 获取自身的状态</div><div class="line">        Parcelable state = onSaveInstanceState();</div><div class="line">        if ((mPrivateFlags &amp; PFLAG_SAVE_STATE_CALLED) == 0) &#123;</div><div class="line">            throw new IllegalStateException(</div><div class="line">                    &quot;Derived class did not call super.onSaveInstanceState()&quot;);</div><div class="line">        &#125;</div><div class="line">        if (state != null) &#123;</div><div class="line">            // 将自身状态放到 container 中，key 为 id、value 为自身状态。</div><div class="line">            container.put(mID, state);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// View 类默认存储的状态为空</div><div class="line">protected Parcelable onSaveInstanceState() &#123;</div><div class="line">    mPrivateFlags |= PFLAG_SAVE_STATE_CALLED;</div><div class="line">    ...</div><div class="line">    return BaseSavedState.EMPTY_STATE;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 View 类中的 saveHierarchyState 函数调用了 dispatchSaveInstanceState 函数来存储自身的状态，而 ViewGroup 则覆写了 dispatchSaveInstanceState 函数来存储自身以及子视图的状态，函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void dispatchSaveInstanceState(SparseArray&lt;Parcelable&gt; container) &#123;</div><div class="line">    super.dispatchSaveInstanceState(container);</div><div class="line">    final int count = mChildrenCount;</div><div class="line">    final View[] children = mChildren;</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View c = children[i];</div><div class="line">        if ((c.mViewFlags &amp; PARENT_SAVE_DISABLED_MASK) != PARENT_SAVE_DISABLED) &#123;</div><div class="line">            c.dispatchSaveInstanceState(container);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>dispatchSaveInstanceState 会首先调用 super 的方法存储自身的状态，然后调用每个子视图的 dispatchSaveInstanceState。</p><blockquote><p>注意：如果 View 没有设置 id，那么这个 View 的状态将不会被存储。设置了这个 id 也要保证在一个 Activity 的布局中必须是唯一的，否则会出现状态覆盖的情况。</p></blockquote><p>这些被存储的状态通过 onSaveInstanceState 函数得到，但在 View 类中我们看到返回的是一个空状态。这就意味着，当我们需要存储 View 状态是，需要覆写 onSaveInstanceState 方法，将要存储的数据放到 Parcelable 对象中，并且将它返回。我们看看 TextView 的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public Parcelable onSaveInstanceState() &#123;</div><div class="line">    Parcelable superState = super.onSaveInstanceState();</div><div class="line">    </div><div class="line">    // 代码省略</div><div class="line">    </div><div class="line">    // 存储 TextView 的 start、end 以及文本内容</div><div class="line">    if (freezesText || hasSelection) &#123;</div><div class="line">        SavedState ss = new SavedState(superState);</div><div class="line"></div><div class="line">        if (freezesText) &#123;</div><div class="line">            if (mText instanceof Spanned) &#123;</div><div class="line">                final Spannable sp = new SpannableStringBuilder(mText);</div><div class="line"></div><div class="line">                if (mEditor != null) &#123;</div><div class="line">                    removeMisspelledSpans(sp);</div><div class="line">                    sp.removeSpan(mEditor.mSuggestionRangeSpan);</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                ss.text = sp;</div><div class="line">            &#125; else &#123;</div><div class="line">                ss.text = mText.toString();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (hasSelection) &#123;</div><div class="line">            // XXX Should also save the current scroll position!</div><div class="line">            ss.selStart = start;</div><div class="line">            ss.selEnd = end;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 代码省略</div><div class="line"></div><div class="line">        return superState;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>存储完 Window 的视图树状态后，会存储每个 Fragment 的状态，调用它们的 onSaveInstanceState 方法。最后调用 ActivityLifecycleCallbacks 的 onSaveInstanceState。</p><p>P 版本（Android 9）之前，onSaveInstanceState 会在 onStop 之前调用。P 版本（Android 9）之后，onSaveInstanceState 会在 onStop 之后调用。ActivityThread 的 performStopActivity 会调用 callActivityOnStop。callActivityOnStop 代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">private void callActivityOnStop(ActivityClientRecord r, boolean saveState, String reason) &#123;</div><div class="line">    // Before P onSaveInstanceState was called before onStop, starting with P it&apos;s</div><div class="line">    // called after. Before Honeycomb state was always saved before onPause.</div><div class="line">    final boolean shouldSaveState = saveState &amp;&amp; !r.activity.mFinished &amp;&amp; r.state == null</div><div class="line">            &amp;&amp; !r.isPreHoneycomb();</div><div class="line">    final boolean isPreP = r.isPreP();</div><div class="line">    if (shouldSaveState &amp;&amp; isPreP) &#123;</div><div class="line">        callActivityOnSaveInstanceState(r);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        r.activity.performStop(false /*preserveWindow*/, reason);</div><div class="line">    &#125; catch (SuperNotCalledException e) &#123;</div><div class="line">        throw e;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        if (!mInstrumentation.onException(r.activity, e)) &#123;</div><div class="line">            throw new RuntimeException(</div><div class="line">                    &quot;Unable to stop activity &quot;</div><div class="line">                            + r.intent.getComponent().toShortString()</div><div class="line">                            + &quot;: &quot; + e.toString(), e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    r.setState(ON_STOP);</div><div class="line"></div><div class="line">    if (shouldSaveState &amp;&amp; !isPreP) &#123;</div><div class="line">        callActivityOnSaveInstanceState(r);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>callActivityOnSaveInstanceState 方法会将状态信息存储到 ActivityClientRecord 对象的 state 字段中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">private void callActivityOnSaveInstanceState(ActivityClientRecord r) &#123;</div><div class="line">    r.state = new Bundle();</div><div class="line">    r.state.setAllowFds(false);</div><div class="line">    if (r.isPersistable()) &#123;</div><div class="line">        r.persistentState = new PersistableBundle();</div><div class="line">        mInstrumentation.callActivityOnSaveInstanceState(r.activity, r.state,</div><div class="line">                r.persistentState);</div><div class="line">    &#125; else &#123;</div><div class="line">        mInstrumentation.callActivityOnSaveInstanceState(r.activity, r.state);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 ActivityThread 类的 performLaunchActivity 方法会回调 onCreate，将 ActivityClientRecord 对象的 state 字段传递给 onCreate。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</div><div class="line">    ...</div><div class="line">    if (r.isPersistable()) &#123;</div><div class="line">        mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">    &#125; else &#123;</div><div class="line">        mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">    return activity;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 ActivityThread 类的 handleStartActivity 方法中会调用 callActivityOnRestoreInstanceState 恢复 InstanceState。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void handleStartActivity(ActivityClientRecord r,</div><div class="line">                                PendingTransactionActions pendingActions) &#123;</div><div class="line">    ...</div><div class="line">    // Restore instance state</div><div class="line">    if (pendingActions.shouldRestoreInstanceState()) &#123;</div><div class="line">        if (r.isPersistable()) &#123;</div><div class="line">            if (r.state != null || r.persistentState != null) &#123;</div><div class="line">                mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state,</div><div class="line">                        r.persistentState);</div><div class="line">            &#125;</div><div class="line">        &#125; else if (r.state != null) &#123;</div><div class="line">            mInstrumentation.callActivityOnRestoreInstanceState(activity, r.state);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>总结：</p><ul><li>Bundle 对应备忘录：Android 的状态，包括视图树状态和 Fragment 状态以及生命周期状态都是通过 Bundle 这个数据结构存储键值对的 Parcel 对象保存的，特别注意一点，对于同一个 Activity的视图放到一个 Bundle 中用 SparceArray（类似 HashMap 不过空间使用效率更高，内部查找二分法，而且键只能是整数）来存储。键：ViewId。值：对应的 Parcel 对象，所以 ViewId 不能重复，不然会覆盖。</li><li>Activity 对应备忘录管理类。严格来说应该是 Activity 中的内部属性。mActivities 实际是一个 ActivityClientRecord 集合，每个 Activity 的信息对应一个 ActivityClientRecord，相应的键是 Token。ActivityClientRecord 的 Bundle 类型的 State 对应 Bundle（备忘录）。</li><li>View 和 Fragment 等都对应 Originator 类，他们都需要伴随 Activity 的生命周期函数 onSaveInstanceState() 和 OnRestoreInstanceState() 通过 Bundle 这种数据结构完成自己状态的管理。</li></ul><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><hr><p>简化版记事本：保存、撤销、重做。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public class NoteEditText extends AppCompatEditText &#123;</div><div class="line">    public NoteEditText(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public NoteEditText(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public NoteEditText(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 创建备忘录对象，即存储编辑器的指定数据</div><div class="line">    public Memo createMemo() &#123;</div><div class="line">        Memo memo = new Memo();</div><div class="line">        memo.text = getText().toString();</div><div class="line">        memo.cursor = getSelectionStart();</div><div class="line">        return memo;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 从备忘录中恢复数据，设置光标位置</div><div class="line">    public void restore(Memo memo) &#123;</div><div class="line">        setText(memo.text);</div><div class="line">        setSelection(memo.cursor);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Memo &#123;</div><div class="line">    public String text;</div><div class="line">    public int cursor;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 负责管理 Memo 对象</div><div class="line">public class NoteCaretaker &#123;</div><div class="line">    // 最大存储数量</div><div class="line">    private static final int MAX = 30;</div><div class="line">    // 存储 30 条记录</div><div class="line">    private List&lt;Memo&gt; mMemos = new ArrayList&lt;&gt;(MAX);</div><div class="line">    private int mIndex = 0;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 保存备忘录到记录列表中</div><div class="line">     * @param memo Memo</div><div class="line">     */</div><div class="line">    public void saveMemo(Memo memo) &#123;</div><div class="line">        if (mMemos.size() &gt; MAX) &#123;</div><div class="line">            mMemos.remove(0);</div><div class="line">        &#125;</div><div class="line">        mMemos.add(memo);</div><div class="line">        mIndex = mMemos.size() - 1;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取上一个存档信息，相当于撤销功能</div><div class="line">    public Memo getPrevMemo() &#123;</div><div class="line">        mIndex = mIndex &gt; 0 ? --mIndex : mIndex;</div><div class="line">        return mMemos.get(mIndex);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取下一个存档信息，相当于重做功能</div><div class="line">    public Memo getNextMemo() &#123;</div><div class="line">        mIndex = mIndex &lt; mMemos.size() - 1 ? ++mIndex : mIndex;</div><div class="line">        return mMemos.get(mIndex);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 TestActivity 的代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">public class TestActivity extends BaseActivity &#123;</div><div class="line"></div><div class="line">    private NoteEditText mNoteEditText;</div><div class="line">    private TextView mSaveBtn;</div><div class="line">    private ImageView mUndoBtn;</div><div class="line">    private ImageView mRedoBtn;</div><div class="line">    private NoteCaretaker mCaretaker = new NoteCaretaker();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_test);</div><div class="line"></div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initViews() &#123;</div><div class="line">        mNoteEditText = findViewById(R.id.et_note);</div><div class="line">        mSaveBtn = findViewById(R.id.btn_save);</div><div class="line">        mUndoBtn = findViewById(R.id.btn_undo);</div><div class="line">        mRedoBtn = findViewById(R.id.btn_redo);</div><div class="line"></div><div class="line">        mSaveBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                mCaretaker.saveMemo(mNoteEditText.createMemo());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mUndoBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                mNoteEditText.restore(mCaretaker.getPrevMemo());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        mRedoBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                mNoteEditText.restore(mCaretaker.getNextMemo());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>附 res/layout/test.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.demo.NoteEditText</div><div class="line">        android:id=&quot;@+id/et_note&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0dp&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;</div><div class="line">        android:gravity=&quot;left&quot;</div><div class="line">        android:hint=&quot;写点嘛~&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;RelativeLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:paddingLeft=&quot;50dp&quot;</div><div class="line">        android:paddingRight=&quot;50dp&quot;</div><div class="line">        android:paddingBottom=&quot;10dp&quot;&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/btn_undo&quot;</div><div class="line">            android:layout_width=&quot;30dp&quot;</div><div class="line">            android:layout_height=&quot;30dp&quot;</div><div class="line">            android:layout_alignParentLeft=&quot;true&quot;</div><div class="line">            android:layout_alignParentStart=&quot;true&quot;</div><div class="line">            android:src=&quot;@drawable/undo&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:id=&quot;@+id/btn_save&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:layout_centerInParent=&quot;true&quot;</div><div class="line">            android:text=&quot;保存&quot;</div><div class="line">            android:textSize=&quot;20sp&quot;</div><div class="line">            android:textColor=&quot;#000&quot;/&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/btn_redo&quot;</div><div class="line">            android:layout_width=&quot;30dp&quot;</div><div class="line">            android:layout_height=&quot;30dp&quot;</div><div class="line">            android:layout_alignParentRight=&quot;true&quot;</div><div class="line">            android:layout_alignParentEnd=&quot;true&quot;</div><div class="line">            android:src=&quot;@drawable/redo&quot;/&gt;</div><div class="line">    &lt;/RelativeLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a2925a1807fb7c36.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;备忘录（Memento）模式
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>11 设计模式——观察者模式</title>
    <link href="http://yoursite.com/2019/08/17/PATTERN/11%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A7%82%E5%AF%9F%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/17/PATTERN/11 设计模式——观察者模式/</id>
    <published>2019-08-16T17:00:00.000Z</published>
    <updated>2020-03-03T15:27:05.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>观察者（Observer）模式：<strong>定义对象间的一种一个对多的依赖关系，当一个对象的状态发送改变时，所以依赖于它的对象都得到通知并被自动更新</strong>。这种模式有时又称作发布—订阅模式、模型—视图模式，它是对象行为型模式。</p><p>观察者模式是一个使用率非常高的模式，它最常用的地方是 GUI 系统、订阅——发布系统。因为这个模式的一个重要作用就是解耦，将被观察者和观察者解耦，使得它们之间的依赖性更小，甚至做到毫无依赖。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>降低了目标与观察者之间的耦合关系，两者之间是抽象耦合关系。</li><li>目标与观察者之间建立了一套触发机制。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>目标与观察者之间的依赖关系并没有完全解除，而且有可能出现循环引用。</li><li>当观察者对象很多时，通知的发布会花费很多时间，影响程序的效率。</li></ul><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>关联行为场景。需要注意的是，关联行为是可拆分的，而不是“组合”关系。</li><li>事件多级触发场景。</li><li>跨系统的信息交换场景，如消息队列、事件总线的处理机制。</li></ul><h4 id="使用例子"><a href="#使用例子" class="headerlink" title="使用例子"></a>使用例子</h4><ul><li>常见的发布—订阅模式。</li><li>ListView 的 Adapter 的 notifyDataSetChanged 更新方法。</li><li>BroadcastReceiver。</li><li>开源库 EventBus。</li><li>RxJava。</li></ul><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>观察者模式包含以下主要角色。</p><ul><li>抽象主题（Subject）：也就是被观察（Observable）的角色。它提供了一个用于保存观察者对象的聚集类和增加、删除观察者对象的方法，以及通知所有观察者的抽象方法。</li><li>具体主题（ConcreteSubject）：也就是具体被观察者（ConcreteObservable）。它实现抽象目标中的通知方法，当具体主题的内部状态发生改变时，通知所有注册过的观察者对象。</li><li>抽象观察者（Observer）：它是一个抽象类或接口，它包含了一个更新自己的抽象方法，当接到具体主题的更改通知时被调用。</li><li>具体观察者（ConcreteObserver）：实现抽象观察者中定义的抽象方法，以便在得到目标的更改通知时更新自身的状态。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ef244b435a52a1b5.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div></pre></td><td class="code"><pre><div class="line">public class ObserverPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Subject subject = new ConcreteSubject();</div><div class="line">        Observer observer1 = new ConcreteObserver1();</div><div class="line">        Observer observer2 = new ConcreteObserver2();</div><div class="line">        subject.add(observer1);</div><div class="line">        subject.add(observer2);</div><div class="line">        subject.notifyObserver();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//  抽象目标，被观察者</div><div class="line">abstract class Subject &#123;</div><div class="line">    // 观察者集合</div><div class="line">    protected List&lt;Observer&gt; observers = new ArrayList&lt;Observer&gt;();   </div><div class="line">    // 增加观察者方法</div><div class="line">    public void add(Observer observer) &#123;</div><div class="line">        observers.add(observer);</div><div class="line">    &#125;    </div><div class="line">    // 删除观察者方法</div><div class="line">    public void remove(Observer observer) &#123;</div><div class="line">        observers.remove(observer);</div><div class="line">    &#125;   </div><div class="line">    public abstract void notifyObserver(); // 通知观察者方法</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体目标，具体被观察者</div><div class="line">class ConcreteSubject extends Subject &#123;</div><div class="line">    public void notifyObserver() &#123;</div><div class="line">        System.out.println(&quot;具体目标发生改变...&quot;);</div><div class="line">        System.out.println(&quot;--------------&quot;);       </div><div class="line">       </div><div class="line">        for(Object obs:observers) &#123;</div><div class="line">            // 通知所有观察者</div><div class="line">            ((Observer)obs).response();</div><div class="line">        &#125;</div><div class="line">    &#125;          </div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象观察者</div><div class="line">interface Observer &#123;</div><div class="line">    void response(); // 反应</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体观察者 1</div><div class="line">class ConcreteObserver1 implements Observer &#123;</div><div class="line">    public void response() &#123;</div><div class="line">        System.out.println(&quot;具体观察者1作出反应！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体观察者1</div><div class="line">class ConcreteObserver2 implements Observer &#123;</div><div class="line">    public void response() &#123;</div><div class="line">        System.out.println(&quot;具体观察者2作出反应！&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们也可以利用 JDK 中 Observable 类和 Observer 接口实现。观察者实现 Observer 接口，被观察者继承 Observable 类。被观察者通过 Observable 类的 addObserver 方法添加观察者。其代码形式如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">// 具体观察者</div><div class="line">public class MyObserver implements Observer &#123;</div><div class="line">    private String mName;</div><div class="line"></div><div class="line">    public MyObserver(String name) &#123;</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void update(Observable o, Object arg) &#123;</div><div class="line">        System.out.println(mName + &quot;--&gt;&quot; + &quot;update: &quot; + arg);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体被观察者</div><div class="line">public class MyObservable extends Observable &#123;</div><div class="line">    public void sendChangeMsg(String content) &#123;</div><div class="line">        // 方法继承自 Observable，标示状态或是内容发生改变</div><div class="line">        setChanged();</div><div class="line"></div><div class="line">        // 方法继承自 Observable，通知所有观察者，最后会调用每个 Observer 的 update 方法</div><div class="line">        notifyObservers(content);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试</div><div class="line">public class ObserverPatternTest &#123;</div><div class="line">    @Test</div><div class="line">    public void test1() throws Exception &#123;</div><div class="line">        MyObservable myObservable = new MyObservable();</div><div class="line"></div><div class="line">        MyObserver myObserver1 = new MyObserver(&quot;observer-1&quot;);</div><div class="line">        MyObserver myObserver2 = new MyObserver(&quot;observer-2&quot;);</div><div class="line">        myObservable.addObserver(myObserver1);</div><div class="line">        myObservable.addObserver(myObserver2);</div><div class="line"></div><div class="line">        // 发布消息</div><div class="line">        myObservable.sendChangeMsg(&quot;发布更新啦&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>被观察者通过 setChanged() 方法标示改变，通过 notifyObservers 方法通知所有观察者。notifyObservers 方法会遍历所有的观察者 Observer，并调用它们的 update 方法。notifyObservers 方法中的参数就是最后传到观察者 update 方法的参数 Object arg。</p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>利用观察者模式设计一个程序，分析“人民币汇率”的升值或贬值对进口公司的进口产品成本或出口公司的出口产品收入以及公司的利润率的影响。</p><p>分析：当“人民币汇率”升值时，进口公司的进口产品成本降低且利润率提升，出口公司的出口产品收入降低且利润率降低；当“人民币汇率”贬值时，进口公司的进口产品成本提升且利润率降低，出口公司的出口产品收入提升且利润率提升。</p><p>这里的汇率（Rate）类是抽象目标类，它包含了保存观察者（Company）的 List 和增加/删除观察者的方法，以及有关汇率改变的抽象方法 change(int number)；而人民币汇率（RMBRate）类是具体目标， 它实现了父类的 change(int number) 方法，即当人民币汇率发生改变时通过相关公司；公司（Company）类是抽象观察者，它定义了一个有关汇率反应的抽象方法 response(int number)；进口公司（ImportCompany）类和出口公司（ExportCompany）类是具体观察者类，它们实现了父类的 response(int number) 方法，即当它们接收到汇率发生改变的通知时作为相应的反应。下图所示是其结构图。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-04bef627a9b8c679.gif?imageMogr2/auto-orient/strip" alt=""></p><p>程序代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public class RMBRateTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Rate rate = new RMBRate();</div><div class="line">        Company watcher1 = new ImportCompany();</div><div class="line">        Company watcher2 = new ExportCompany();          </div><div class="line">        rate.add(watcher1); </div><div class="line">        rate.add(watcher2);      </div><div class="line">        rate.change(10);</div><div class="line">        rate.change(-9);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象目标：汇率</div><div class="line">abstract class Rate &#123;</div><div class="line">    protected List&lt;Company&gt; companies = new ArrayList&lt;Company&gt;();   </div><div class="line">    // 增加观察者方法</div><div class="line">    public void add(Company company) &#123;</div><div class="line">        companies.add(company);</div><div class="line">    &#125;</div><div class="line">    // 删除观察者方法</div><div class="line">    public void remove(Company company) &#123;</div><div class="line">        companies.remove(company);</div><div class="line">    &#125;</div><div class="line">    public abstract void change(int number);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体目标：人民币汇率</div><div class="line">class RMBRate extends Rate &#123;</div><div class="line">    public void change(int number) &#123;       </div><div class="line">        for(Company observer : companies) &#123;</div><div class="line">            ((Company) observer).response(number);</div><div class="line">        &#125;       </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象观察者：公司</div><div class="line">interface Company &#123;</div><div class="line">    void response(int number);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体观察者1：进口公司 </div><div class="line">class ImportCompany implements Company &#123;</div><div class="line">    public void response(int number) &#123;</div><div class="line">        if (number&gt;0) &#123;</div><div class="line">            System.out.println(&quot;人民币汇率升值&quot;+number+&quot;个基点，降低了进口产品成本，提升了进口公司利润率。&quot;); </div><div class="line">        &#125; else if (number&lt;0) &#123;</div><div class="line">            System.out.println(&quot;人民币汇率贬值&quot;+(-number)+&quot;个基点，提升了进口产品成本，降低了进口公司利润率。&quot;); </div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125; </div><div class="line"></div><div class="line">// 具体观察者2：出口公司</div><div class="line">class ExportCompany implements Company &#123;</div><div class="line">    public void response(int number) &#123;</div><div class="line">        if (number&gt;0) &#123;</div><div class="line">            System.out.println(&quot;人民币汇率升值&quot;+number+&quot;个基点，降低了出口产品收入，降低了出口公司的销售利润率。&quot;); </div><div class="line">        &#125; else if(number&lt;0) &#123;</div><div class="line">            System.out.println(&quot;人民币汇率贬值&quot;+(-number)+&quot;个基点，提升了出口产品收入，提升了出口公司的销售利润率。&quot;); </div><div class="line">        &#125;</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">人民币汇率升值10个基点，降低了进口产品成本，提升了进口公司利润率。</div><div class="line">人民币汇率升值10个基点，降低了出口产品收入，降低了出口公司的销售利润率。</div><div class="line">人民币汇率贬值9个基点，提升了进口产品成本，降低了进口公司利润率。</div><div class="line">人民币汇率贬值9个基点，提升了出口产品收入，提升了出口公司的销售利润率。</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>ListView 是 ANDROID 中最重要的控件之一，而 ListView 最重要的一个功能就是 Adapter。当我们往 ListView 添加数据后，都会调用 Adapter 的 notifyDataSetChanged() 方法，通知界面刷新。这是一个典型的观察者模式案例。我们追踪 notifyDataSetChanged() 这个方法，它定义在 BaseAdapter 中，具体代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public abstract class BaseAdapter implements ListAdapter, SpinnerAdapter &#123;</div><div class="line">    // 数据集（被观察者）</div><div class="line">    private final DataSetObservable mDataSetObservable = new DataSetObservable();</div><div class="line">    </div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    public void registerDataSetObserver(DataSetObserver observer) &#123;</div><div class="line">        mDataSetObservable.registerObserver(observer);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void unregisterDataSetObserver(DataSetObserver observer) &#123;</div><div class="line">        mDataSetObservable.unregisterObserver(observer);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 当数据集变化时，通知所有观察者</div><div class="line">     */</div><div class="line">    public void notifyDataSetChanged() &#123;</div><div class="line">        mDataSetObservable.notifyChanged();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>追踪 mDataSetObservable.notifyChanged() 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 数据集被观察者</div><div class="line"> */</div><div class="line">public class DataSetObservable extends Observable&lt;DataSetObserver&gt; &#123;</div><div class="line">    // 调用每个观察者的 onChange 函数来通知它们被观察者发生了变化</div><div class="line">    public void notifyChanged() &#123;</div><div class="line">        synchronized (mObservers) &#123;</div><div class="line">            for (int i = mObservers.size() - 1; i &gt;= 0; i--) &#123;</div><div class="line">                mObservers.get(i).onChanged();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>而这些观察者是 ListView 通过 setAdapter 方法产生的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void setAdapter(ListAdapter adapter) &#123;</div><div class="line">    // 如果已经有了一个 Adapter，那么先注销该 Adapter 对应的观察者</div><div class="line">    if (mAdapter != null &amp;&amp; mDataSetObserver != null) &#123;</div><div class="line">        mAdapter.unregisterDataSetObserver(mDataSetObserver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    super.setAdapter(adapter);</div><div class="line"></div><div class="line">    if (mAdapter != null) &#123;</div><div class="line">        mAreAllItemsSelectable = mAdapter.areAllItemsEnabled();</div><div class="line">        mOldItemCount = mItemCount;</div><div class="line">        // 获取数据的数量</div><div class="line">        mItemCount = mAdapter.getCount();</div><div class="line">        checkFocus();</div><div class="line">        // 注意这里：创建一个数据集观察者</div><div class="line">        mDataSetObserver = new AdapterDataSetObserver();</div><div class="line">        // 将这个观察者注册到 Adapter 中，实际上是注册到 DataSetObservable 中</div><div class="line">        mAdapter.registerDataSetObserver(mDataSetObserver);</div><div class="line"></div><div class="line">        // 代码省略</div><div class="line">    &#125; else &#123;</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    requestLayout();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>观察者 AdapterDataSetObserver 定义在 ListView 的父类 AbsListView 中，具体代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public abstract class AbsListView extends AdapterView&lt;ListAdapter&gt; implements TextWatcher,</div><div class="line">        ViewTreeObserver.OnGlobalLayoutListener, Filter.FilterListener,</div><div class="line">        ViewTreeObserver.OnTouchModeChangeListener,</div><div class="line">        RemoteViewsAdapter.RemoteAdapterConnectionCallback &#123;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    class AdapterDataSetObserver extends AdapterView&lt;ListAdapter&gt;.AdapterDataSetObserver &#123;</div><div class="line">        @Override</div><div class="line">        public void onChanged() &#123;</div><div class="line">            super.onChanged();</div><div class="line">            if (mFastScroll != null) &#123;</div><div class="line">                mFastScroll.onSectionsChanged();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onInvalidated() &#123;</div><div class="line">            super.onInvalidated();</div><div class="line">            if (mFastScroll != null) &#123;</div><div class="line">                mFastScroll.onSectionsChanged();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过 super.onChanged() 继续跟踪。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public abstract class AdapterView&lt;T extends Adapter&gt; extends ViewGroup &#123;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    class AdapterDataSetObserver extends DataSetObserver &#123;</div><div class="line"></div><div class="line">        private Parcelable mInstanceState = null;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onChanged() &#123;</div><div class="line">            mDataChanged = true;</div><div class="line">            mOldItemCount = mItemCount;</div><div class="line">            mItemCount = getAdapter().getCount();</div><div class="line"></div><div class="line">            // Detect the case where a cursor that was previously invalidated has</div><div class="line">            // been repopulated with new data.</div><div class="line">            if (AdapterView.this.getAdapter().hasStableIds() &amp;&amp; mInstanceState != null</div><div class="line">                    &amp;&amp; mOldItemCount == 0 &amp;&amp; mItemCount &gt; 0) &#123;</div><div class="line">                AdapterView.this.onRestoreInstanceState(mInstanceState);</div><div class="line">                mInstanceState = null;</div><div class="line">            &#125; else &#123;</div><div class="line">                rememberSyncState();</div><div class="line">            &#125;</div><div class="line">            checkFocus();</div><div class="line">            // 重新布局 ListView、GridView 等 AdapterView 组件</div><div class="line">            requestLayout();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 代码省略</div><div class="line">    </div><div class="line">        public void clearSavedState() &#123;</div><div class="line">            mInstanceState = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>到这里我们就知道了，当 ListView 的数据发生变化时，调用 Adapter 的 notifyDataSetChanged 函数，这个函数又会调用 DataSetObservable 的 notifyChanged 函数，这个函数会调用所有观察者（AdapterDataSetObserver）的 onChanged 方法，在 onChanged 函数中又会调用 ListView  重新布局的函数使得 ListView 刷新界面。这就是一个观察者模式！</p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><hr><p>利用观察者模式设计一个学校铃声的事件处理程序。</p><p>分析：在本实例中，学校的“铃”是事件源和目标，“老师”和“学生”是事件监听器和具体观察者，“铃声”是事件类。学生和老师来到学校的教学区，都会注意学校的铃，这叫事件绑定；当上课时间或下课时间到，会触发铃发声，这时会生成“铃声”事件；学生和老师听到铃声会开始上课或下课，这叫事件处理。这个实例非常适合用观察者模式实现，下图给出了学校铃声的事件模型。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-495f8bd557e07c06.gif?imageMogr2/auto-orient/strip" alt=""></p><p>现在用“观察者模式”来实现该事件处理模型。首先，定义一个铃声事件（RingEvent）类，它记录了铃声的类型（上课铃声/下课铃声）；再定义一个学校的铃（BellEventSource）类，它是事件源，是观察者目标类，该类里面包含了监听器容器 listener，可以绑定监听者（学生或老师），并且有产生铃声事件和通知所有监听者的方法；然后，定义一声事件监听者（BellEventListener）类，它是抽象观察者，它包含了铃声事件处理方法 heardBell(RingEvent e)；最后，定义老师类（TeachEventListener）和学生类（StuEventListener），它们是事件监听器，是具体观察者，听到铃声会去上课或下课。下图给出了学校铃声事件处理程序的结构。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4fc93200df08a7c0.gif?imageMogr2/auto-orient/strip" alt=""></p><p>程序代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class BellEventTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        BellEventSource bell = new BellEventSource();    // 铃（事件源）    </div><div class="line">        bell.addPersonListener(new TeachEventListener()); // 注册监听器（老师）</div><div class="line">        bell.addPersonListener(new StudentEventListener());    // 注册监听器（学生）</div><div class="line">        bell.ring(true);   // 打上课铃声</div><div class="line">        System.out.println(&quot;------------&quot;);</div><div class="line">        bell.ring(false);  // 打下课铃声</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 铃声事件类：用于封装事件源及一些与事件相关的参数</div><div class="line">class RingEvent extends EventObject &#123;   </div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    private boolean sound;    // true 表示上课铃声，false 表示下课铃声</div><div class="line">    public RingEvent(Object source,boolean sound) &#123;</div><div class="line">        super(source);</div><div class="line">        this.sound=sound;</div><div class="line">    &#125;   </div><div class="line">    public void setSound(boolean sound) &#123;</div><div class="line">        this.sound=sound;</div><div class="line">    &#125;</div><div class="line">    public boolean getSound() &#123;</div><div class="line">        return this.sound;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 目标类：事件源，铃</div><div class="line">class BellEventSource &#123;    </div><div class="line">    private List&lt;BellEventListener&gt; listener; // 监听器容器</div><div class="line">    public BellEventSource() &#123; </div><div class="line">        listener = new ArrayList&lt;BellEventListener&gt;();        </div><div class="line">    &#125;</div><div class="line">    // 给事件源绑定监听器 </div><div class="line">    public void addPersonListener(BellEventListener ren) &#123; </div><div class="line">        listener.add(ren); </div><div class="line">    &#125;</div><div class="line">    // 事件触发器：敲钟，当铃声 sound 的值发生变化时，触发事件。</div><div class="line">    public void ring(boolean sound) &#123;</div><div class="line">        String type = sound? &quot;上课铃&quot; : &quot;下课铃&quot;;</div><div class="line">        System.out.println(type+&quot;响！&quot;);</div><div class="line">        RingEvent event = new RingEvent(this, sound);     </div><div class="line">        notifies(event);    // 通知注册在该事件源上的所有监听器                </div><div class="line">    &#125;   </div><div class="line">    // 当事件发生时,通知绑定在该事件源上的所有监听器做出反应（调用事件处理方法）</div><div class="line">    protected void notifies(RingEvent e) &#123; </div><div class="line">        BellEventListener person; </div><div class="line">        Iterator&lt;BellEventListener&gt; iterator = listener.iterator(); </div><div class="line">        while(iterator.hasNext()) &#123; </div><div class="line">            person = iterator.next(); </div><div class="line">            person.heardBell(e); </div><div class="line">        &#125; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象观察者类：铃声事件监听器</div><div class="line">interface  BellEventListener extends EventListener &#123;</div><div class="line">    // 事件处理方法，听到铃声</div><div class="line">    void heardBell(RingEvent e);</div><div class="line">&#125;</div><div class="line"></div><div class="line">//具体观察者类：老师事件监听器</div><div class="line">class TeachEventListener implements BellEventListener &#123;</div><div class="line">    public void heardBell(RingEvent e) &#123;        </div><div class="line">        if (e.getSound()) &#123;</div><div class="line">            System.out.println(&quot;老师上课了...&quot;);           </div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;老师下课了...&quot;);   </div><div class="line">        &#125;          </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体观察者类：学生事件监听器</div><div class="line">class StudentEventListener implements BellEventListener &#123;</div><div class="line">    public void heardBell(RingEvent e) &#123;        </div><div class="line">        if (e.getSound()) &#123;</div><div class="line">            System.out.println(&quot;同学们，上课了...&quot;);           </div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;同学们，下课了...&quot;);   </div><div class="line">        &#125;          </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">上课铃响！</div><div class="line">老师上课了...</div><div class="line">同学们，上课了...</div><div class="line">------------</div><div class="line">下课铃响！</div><div class="line">老师下课了...</div><div class="line">同学们，下课了...</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;观察者（Observer）模
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>10 设计模式——命令模式</title>
    <link href="http://yoursite.com/2019/08/16/PATTERN/10%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%91%BD%E4%BB%A4%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/16/PATTERN/10 设计模式——命令模式/</id>
    <published>2019-08-15T17:00:00.000Z</published>
    <updated>2020-03-03T13:39:35.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>命令（Command）模式：<strong>将一个请求封装成一个对象，从而使你可用不同的请求对客户进行参数化，对请求排队或记录请求日志，以及支持可撤销的操作</strong>。</p><p>在软件开发系统中，常常出现“方法的请求者”与“方法的实现者”之间存在紧密的耦合关系。这不利于软件功能的扩展与维护。例如，想对行为进行“撤销、重做、记录”等处理都很不方便，因此“如何将方法的请求者与方法的实现者解耦？”变得很重要，命令模式能很好地解决这个问题。</p><p>在现实生活中，这样的例子也很多，例如，电视机遥控器（命令发送者）通过按钮（具体命令）来遥控电视机（命令接收者），还有计算机键盘上的“功能键”等。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>对于大多数请求——响应模式的功能，比较适合使用命令模式。</p><ul><li>系统需要将请求调用者和请求接收者解耦，使得调用者和接收者不直接交互。</li><li>系统需要在不同的时间指定请求、将请求排队（如：线程池+工作队列）和执行请求。</li><li>系统需要支持命令的撤销(Undo)操作和恢复(Redo)操作（比如系统挂掉之后重启做一些恢复操作，还有数据库的事务等）。</li><li>系统需要将一组操作组合在一起，即支持宏命令。</li></ul><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ol><li>降低系统的耦合度。命令模式能将调用操作的对象与实现该操作的对象解耦。</li><li>增加或删除命令非常方便。采用命令模式增加与删除命令不会影响其他类，它满足“开闭原则”，对扩展比较灵活。</li><li>可以实现宏命令。命令模式可以与组合模式结合，将多个命令装配成一个组合命令，即宏命令。</li><li>方便实现 Undo 和 Redo 操作。命令模式可以与后面介绍的备忘录模式结合，实现命令的撤销与恢复。</li></ol><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><p>可能产生大量具体命令类。因为计对每一个具体操作都需要设计一个具体命令类，这将增加系统的复杂性。</p><hr><h3 id="结构与实现"><a href="#结构与实现" class="headerlink" title="结构与实现"></a>结构与实现</h3><hr><p>命令模式包含以下主要角色。</p><ul><li>抽象命令类（Command）：声明执行命令的接口，拥有执行命令的抽象方法 execute()。</li><li>具体命令角色（Concrete Command）：是抽象命令类的具体实现类，它拥有接收者对象，并通过调用接收者的功能来完成命令要执行的操作。</li><li>实现者/接收者（Receiver）：执行命令功能的相关操作，是具体命令对象业务的真正实现者。</li><li>调用者/请求者（Invoker）：是请求的发送者，它通常拥有很多的命令对象，并通过访问命令对象来执行相关请求，它不直接访问接收者。</li></ul><p>其结构图如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cfc7f6f783091bfa.gif?imageMogr2/auto-orient/strip" alt=""></p><p>命令模式的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class CommandPattern &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Receiver receiver = new Receiver();</div><div class="line">        Command cmd = new ConcreteCommand(receiver);</div><div class="line">        Invoker invoker = new Invoker(cmd);</div><div class="line">        invoker.call();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 调用者</div><div class="line">class Invoker &#123;</div><div class="line">    private Command command;</div><div class="line">    public Invoker(Command command) &#123;</div><div class="line">        this.command=command;</div><div class="line">    &#125;</div><div class="line">    public void setCommand(Command command) &#123;</div><div class="line">        this.command=command;</div><div class="line">    &#125;</div><div class="line">    public void call() &#123;</div><div class="line">        // 调用具体命令对象的相关方法，执行具体命令</div><div class="line">        command.execute();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象命令</div><div class="line">interface Command &#123;</div><div class="line">    void execute();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体命令</div><div class="line">class ConcreteCommand implements Command &#123;</div><div class="line">    private Receiver receiver;</div><div class="line">    ConcreteCommand(Receiver receiver) &#123;</div><div class="line">        this.receiver = receiver;</div><div class="line">    &#125;</div><div class="line">    public void execute() &#123;</div><div class="line">        receiver.action();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接收者</div><div class="line">class Receiver &#123;</div><div class="line">    // 真正执行具体命令逻辑的方法</div><div class="line">    public void action() &#123;</div><div class="line">        System.out.println(&quot;接收者执行具体操作&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>用命令模式实现客户去餐馆吃早餐的实例。</p><p>分析：客户去餐馆可选择的早餐有肠粉、河粉和馄饨等，客户可向服务员选择以上早餐中的若干种，服务员将客户的请求交给相关的厨师去做。这里的点早餐相当于“命令”，服务员相当于“调用者”，厨师相当于“接收者”，所以用命令模式实现比较合适。</p><p>首先，定义一个早餐类（Breakfast），它是抽象命令类，有抽象方法 cooking()，说明要做什么；再定义其子类肠粉类（ChangFen）、馄饨类（HunTun）和河粉类（HeFen），它们是具体命令类，实现早餐类的 cooking() 方法，但它们不会具体做，而是交给具体的厨师去做；具体厨师类有肠粉厨师（ChangFenChef）、馄蚀厨师（HunTunChef）和河粉厨师（HeFenChef），他们是命令的接收者，所以把每个厨师类定义为 JFrame 的子类；最后，定义服务员类（Waiter），它接收客户的做菜请求，并发出做菜的命令。客户类是通过服务员类来点菜的，下图所示是其结构图。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fe94a57ee9420e84.gif?imageMogr2/auto-orient/strip" alt=""></p><p>程序代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div></pre></td><td class="code"><pre><div class="line">public class CookingCommand &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Breakfast food1 = new ChangFen();</div><div class="line">        Breakfast food2 = new HunTun();</div><div class="line">        Breakfast food3 = new HeFen();</div><div class="line">        Waiter waiter = new Waiter();</div><div class="line">        waiter.setChangFen(food1);//设置肠粉菜单</div><div class="line">        waiter.setHunTun(food2);  //设置河粉菜单</div><div class="line">        waiter.setHeFen(food3);   //设置馄饨菜单</div><div class="line">        waiter.chooseChangFen();  //选择肠粉</div><div class="line">        waiter.chooseHeFen();     //选择河粉</div><div class="line">        waiter.chooseHunTun();    //选择馄饨</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 调用者：服务员</div><div class="line">class Waiter &#123;</div><div class="line">    private Breakfast changFen, hunTun, heFen;</div><div class="line">    public void setChangFen(Breakfast f) &#123;</div><div class="line">        changFen = f;</div><div class="line">    &#125;</div><div class="line">    public void setHunTun(Breakfast f) &#123;</div><div class="line">        hunTun=f;</div><div class="line">    &#125;</div><div class="line">    public void setHeFen(Breakfast f) &#123;</div><div class="line">        heFen=f;</div><div class="line">    &#125;</div><div class="line">    public void chooseChangFen() &#123;</div><div class="line">        changFen.cooking();</div><div class="line">    &#125;</div><div class="line">    public void chooseHunTun() &#123;</div><div class="line">        hunTun.cooking();</div><div class="line">    &#125;</div><div class="line">    public void chooseHeFen() &#123;</div><div class="line">        heFen.cooking();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象命令：早餐</div><div class="line">interface Breakfast &#123;</div><div class="line">    void cooking();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体命令：肠粉</div><div class="line">class ChangFen implements Breakfast &#123;</div><div class="line">    private ChangFenChef receiver;</div><div class="line">    ChangFen() &#123;</div><div class="line">        receiver = new ChangFenChef();</div><div class="line">    &#125;</div><div class="line">    public void cooking() &#123;       </div><div class="line">        receiver.cooking();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体命令：馄饨</div><div class="line">class HunTun implements Breakfast &#123;</div><div class="line">    private HunTunChef receiver;</div><div class="line">    HunTun() &#123;</div><div class="line">        receiver=new HunTunChef();</div><div class="line">    &#125;</div><div class="line">    public void cooking() &#123;</div><div class="line">        receiver.cooking();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体命令：河粉</div><div class="line">class HeFen implements Breakfast &#123;</div><div class="line">    private HeFenChef receiver;</div><div class="line">    HeFen() &#123;</div><div class="line">        receiver=new HeFenChef();</div><div class="line">    &#125;</div><div class="line">    public void cooking() &#123;</div><div class="line">        receiver.cooking();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接收者：肠粉厨师</div><div class="line">class ChangFenChef extends JFrame &#123;   </div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    JLabel l = new JLabel();</div><div class="line">    ChangFenChef() &#123;</div><div class="line">        super(&quot;煮肠粉&quot;);</div><div class="line">        l.setIcon(new ImageIcon(&quot;src/command/ChangFen.jpg&quot;));</div><div class="line">        this.add(l);</div><div class="line">        this.setLocation(30, 30);</div><div class="line">        this.pack();</div><div class="line">        this.setResizable(false);</div><div class="line">        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);   </div><div class="line">    &#125;</div><div class="line">    public void cooking() &#123;</div><div class="line">        this.setVisible(true);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接收者：馄饨厨师</div><div class="line">class HunTunChef extends JFrame &#123;</div><div class="line">    private static final long serialVersionUID=1L;</div><div class="line">    JLabel l = new JLabel();</div><div class="line">    HunTunChef() &#123;</div><div class="line">        super(&quot;煮馄饨&quot;);</div><div class="line">        l.setIcon(new ImageIcon(&quot;src/command/HunTun.jpg&quot;));</div><div class="line">        this.add(l);</div><div class="line">        this.setLocation(350, 50);</div><div class="line">        this.pack();</div><div class="line">        this.setResizable(false);</div><div class="line">        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);    </div><div class="line">    &#125;</div><div class="line">    public void cooking() &#123;</div><div class="line">        this.setVisible(true);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接收者：河粉厨师</div><div class="line">class HeFenChef extends JFrame &#123;</div><div class="line">    private static final long serialVersionUID=1L;</div><div class="line">    JLabel l = new JLabel();</div><div class="line">    HeFenChef() &#123;</div><div class="line">        super(&quot;煮河粉&quot;);</div><div class="line">        l.setIcon(new ImageIcon(&quot;src/command/HeFen.jpg&quot;));</div><div class="line">        this.add(l);</div><div class="line">        this.setLocation(200, 280);</div><div class="line">        this.pack();</div><div class="line">        this.setResizable(false);</div><div class="line">        this.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);</div><div class="line">    &#125;</div><div class="line">    public void cooking() &#123;</div><div class="line">        this.setVisible(true);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><hr><p>命令模式在 GUI 上应用广泛，比如手写签名功能，需要提供撤销或重做等功能。</p><ul><li>首先声明一个抽象接口 IBrush，用它定义不同笔触需要实现的方法。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public interface IBrush &#123;</div><div class="line">    /**</div><div class="line">     * 触点接触时</div><div class="line">     * @param path  路径对象</div><div class="line">     * @param x     当前位置的 x 坐标</div><div class="line">     * @param y     当前位置的 y 坐标</div><div class="line">     */</div><div class="line">    void down(Path path, float x, float y);</div><div class="line">    /**</div><div class="line">     * 触点移动时</div><div class="line">     * @param path  路径对象</div><div class="line">     * @param x     当前位置的 x 坐标</div><div class="line">     * @param y     当前位置的 y 坐标</div><div class="line">     */</div><div class="line">    void move(Path path, float x, float y);</div><div class="line">    /**</div><div class="line">     * 触点离开时</div><div class="line">     * @param path  路径对象</div><div class="line">     * @param x     当前位置的 x 坐标</div><div class="line">     * @param y     当前位置的 y 坐标</div><div class="line">     */</div><div class="line">    void up(Path path, float x, float y);</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>为了简便起见，这里只定义两种类型的笔触，一种为普通的线条，另一种为由圆点组成的线条轨迹。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">// 普通笔触</div><div class="line">public class NormalBrush implements IBrush &#123;</div><div class="line">    @Override</div><div class="line">    public void down(Path path, float x, float y) &#123;</div><div class="line">        path.moveTo(x, y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void move(Path path, float x, float y) &#123;</div><div class="line">        path.lineTo(x, y);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void up(Path path, float x, float y) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 圆形笔触</div><div class="line">public class CircleBrush implements IBrush &#123;</div><div class="line">    @Override</div><div class="line">    public void down(Path path, float x, float y) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void move(Path path, float x, float y) &#123;</div><div class="line">        path.addCircle(x, y, 10, Path.Direction.CCW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void up(Path path, float x, float y) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>对于每一次路径的绘制，都可以有两个命令，一个是绘制命令，另一个是撤销命令，我们将其封装为一个命令接口。注意，这里结合命令模式去构思。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public interface IDraw &#123;</div><div class="line">    /**</div><div class="line">     * 绘制命令</div><div class="line">     * @param canvas  画布对象</div><div class="line">     */</div><div class="line">    void draw(Canvas canvas);</div><div class="line">    /**</div><div class="line">     * 撤销命令</div><div class="line">     */</div><div class="line">    void undo();</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>这里只有一种绘制路径方法，即一个具体命令。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class DrawPath implements IDraw &#123;</div><div class="line">    public Path path;      // 需要绘制的路径</div><div class="line">    public Paint paint;    // 绘制画笔</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void draw(Canvas canvas) &#123;</div><div class="line">        canvas.drawPath(path, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void undo() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>需要一个请求者角色（Invoker）来对命令做进一步封装。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public class DrawInvoker &#123;</div><div class="line">    // 绘制列表</div><div class="line">    private List&lt;DrawPath&gt; drawList = Collections.synchronizedList(new ArrayList&lt;DrawPath&gt;());</div><div class="line">    // 重做列表</div><div class="line">    private List&lt;DrawPath&gt; redoList = Collections.synchronizedList(new ArrayList&lt;DrawPath&gt;());</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 增加一个命令</div><div class="line">     * @param command DrawPath</div><div class="line">     */</div><div class="line">    public void add(DrawPath command) &#123;</div><div class="line">        redoList.clear();</div><div class="line">        drawList.add(command);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 撤销上一步命令</div><div class="line">     */</div><div class="line">    public void undo() &#123;</div><div class="line">        if (drawList.size() &gt; 0) &#123;</div><div class="line">            int index = drawList.size() - 1;</div><div class="line">            DrawPath undo = drawList.get(index);</div><div class="line">            drawList.remove(index);</div><div class="line">            undo.undo();</div><div class="line">            redoList.add(undo);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 重做上一步撤销的命令</div><div class="line">     */</div><div class="line">    public void redo() &#123;</div><div class="line">        if (redoList.size() &gt; 0) &#123;</div><div class="line">            int index = redoList.size() - 1;</div><div class="line">            DrawPath redoCommand = redoList.get(index);</div><div class="line">            redoList.remove(index);</div><div class="line">            drawList.add(redoCommand);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 执行命令</div><div class="line">     */</div><div class="line">    public void execute(Canvas canvas) &#123;</div><div class="line">        if (drawList != null) &#123;</div><div class="line">            for (DrawPath tmp : drawList) &#123;</div><div class="line">                tmp.draw(canvas);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 是否可以重做</div><div class="line">     */</div><div class="line">    public boolean canRedo() &#123;</div><div class="line">        return  redoList.size() &gt; 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 是否可以撤销</div><div class="line">     */</div><div class="line">    public boolean canUndo() &#123;</div><div class="line">        return  drawList.size() &gt; 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>需要一个具体的接收者，这里承担重任的是一个 SurfaceView 对象。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">public class DrawCanvas extends SurfaceView implements SurfaceHolder.Callback &#123;</div><div class="line">    // 标识是否可以绘制、绘制线程是否可以运行</div><div class="line">    public boolean isDrawing, isRunning;</div><div class="line"></div><div class="line">    private Bitmap mBitmap;         // 绘制到的位图对象</div><div class="line">    private DrawInvoker mInvoker;   // 绘制命令请求对象</div><div class="line">    private DrawThread mThread;     // 绘制线程</div><div class="line"></div><div class="line">    public DrawCanvas(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mInvoker = new DrawInvoker();</div><div class="line">        mThread = new DrawThread();</div><div class="line"></div><div class="line">        getHolder().addCallback(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void surfaceCreated(SurfaceHolder holder) &#123;</div><div class="line">        isRunning = true;</div><div class="line">        mThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) &#123;</div><div class="line">        mBitmap = Bitmap.createBitmap(width, height, Bitmap.Config.RGB_565);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void surfaceDestroyed(SurfaceHolder holder) &#123;</div><div class="line">        boolean retry = true;</div><div class="line">        isRunning = false;</div><div class="line">        while (retry) &#123;</div><div class="line">            try &#123;</div><div class="line">                mThread.join();</div><div class="line">                retry = false;</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 增加一条绘制路径</div><div class="line">     * @param path DrawPath</div><div class="line">     */</div><div class="line">    public void add(DrawPath path) &#123;</div><div class="line">        mInvoker.add(path);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 撤销上一步的绘制</div><div class="line">     */</div><div class="line">    public void undo() &#123;</div><div class="line">        isDrawing = true;</div><div class="line">        mInvoker.undo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 重做上一步撤销的绘制</div><div class="line">     */</div><div class="line">    public void redo() &#123;</div><div class="line">        isDrawing = true;</div><div class="line">        mInvoker.redo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 是否可以重做</div><div class="line">     */</div><div class="line">    public boolean canRedo() &#123;</div><div class="line">        return mInvoker.canRedo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 是否可以撤销</div><div class="line">     */</div><div class="line">    public boolean canUndo() &#123;</div><div class="line">        return mInvoker.canUndo();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class DrawThread extends Thread &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            Canvas canvas = null;</div><div class="line">            while (isRunning) &#123;</div><div class="line">                if (isDrawing) &#123;</div><div class="line">                    try &#123;</div><div class="line">                        canvas = getHolder().lockCanvas();</div><div class="line">                        if (mBitmap == null) &#123;</div><div class="line">                            mBitmap = Bitmap.createBitmap(1, 1, Bitmap.Config.ARGB_8888);</div><div class="line">                        &#125;</div><div class="line">                        Canvas c = new Canvas(mBitmap);</div><div class="line">                        c.drawColor(0, PorterDuff.Mode.CLEAR);</div><div class="line"></div><div class="line">                        canvas.drawColor(0, PorterDuff.Mode.CLEAR);</div><div class="line">                        mInvoker.execute(c);</div><div class="line">                        canvas.drawBitmap(mBitmap, 0, 0, null);</div><div class="line">                    &#125; finally &#123;</div><div class="line">                        getHolder().unlockCanvasAndPost(canvas);</div><div class="line">                    &#125;</div><div class="line">                    isDrawing = false;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><ul><li>最后在 Activity 中整合各个功能模块。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.Path;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.MotionEvent;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.Button;</div><div class="line"></div><div class="line">import com.xxt.xtest.demo.CircleBrush;</div><div class="line">import com.xxt.xtest.demo.DrawCanvas;</div><div class="line">import com.xxt.xtest.demo.DrawPath;</div><div class="line">import com.xxt.xtest.demo.IBrush;</div><div class="line">import com.xxt.xtest.demo.NormalBrush;</div><div class="line"></div><div class="line">public class TestActivity extends BaseActivity &#123;</div><div class="line">    private DrawCanvas mCanvas; // 绘制画布</div><div class="line">    private DrawPath mPath;     // 路径绘制命令</div><div class="line">    private Paint mPaint;       // 画笔对象</div><div class="line">    private IBrush mBrush;      // 笔触对象</div><div class="line"></div><div class="line">    private Button btnRedo, btnUndo;    // 重做、撤销按钮</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_test);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(0xFFFFFFFF);</div><div class="line">        mPaint.setStrokeWidth(3);</div><div class="line"></div><div class="line">        mBrush = new NormalBrush();</div><div class="line"></div><div class="line">        mCanvas = findViewById(R.id.draw_canvas);</div><div class="line">        mCanvas.setOnTouchListener(new DrawTouchListener());</div><div class="line"></div><div class="line">        btnRedo = findViewById(R.id.redo_btn);</div><div class="line">        btnRedo.setEnabled(false);</div><div class="line">        btnUndo = findViewById(R.id.undo_btn);</div><div class="line">        btnUndo.setEnabled(false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void onClick(View view) &#123;</div><div class="line">        switch (view.getId()) &#123;</div><div class="line">            case R.id.red_btn:</div><div class="line">                mPaint = new Paint();</div><div class="line">                mPaint.setStrokeWidth(3);</div><div class="line">                mPaint.setColor(0xFFFF0000);</div><div class="line">                break;</div><div class="line">            case R.id.green_btn:</div><div class="line">                mPaint = new Paint();</div><div class="line">                mPaint.setStrokeWidth(3);</div><div class="line">                mPaint.setColor(0xFF00FF00);</div><div class="line">                break;</div><div class="line">            case R.id.blue_btn:</div><div class="line">                mPaint = new Paint();</div><div class="line">                mPaint.setStrokeWidth(3);</div><div class="line">                mPaint.setColor(0xFF0000FF);</div><div class="line">                break;</div><div class="line">            case R.id.normal_brush_btn:</div><div class="line">                mBrush = new NormalBrush();</div><div class="line">                break;</div><div class="line">            case R.id.circle_brush_btn:</div><div class="line">                mBrush = new CircleBrush();</div><div class="line">                break;</div><div class="line">            case R.id.undo_btn:</div><div class="line">                mCanvas.undo();</div><div class="line">                if (!mCanvas.canUndo()) &#123;</div><div class="line">                    btnUndo.setEnabled(false);</div><div class="line">                &#125;</div><div class="line">                btnRedo.setEnabled(true);</div><div class="line">                break;</div><div class="line">            case R.id.redo_btn:</div><div class="line">                mCanvas.redo();</div><div class="line">                if (!mCanvas.canRedo()) &#123;</div><div class="line">                    btnRedo.setEnabled(false);</div><div class="line">                &#125;</div><div class="line">                btnUndo.setEnabled(true);</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class DrawTouchListener implements View.OnTouchListener &#123;</div><div class="line">        @Override</div><div class="line">        public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">            if (MotionEvent.ACTION_DOWN == event.getAction()) &#123;</div><div class="line">                mPath = new DrawPath();</div><div class="line">                mPath.paint = mPaint;</div><div class="line">                mPath.path = new Path();</div><div class="line">                mBrush.down(mPath.path, event.getX(), event.getY());</div><div class="line">            &#125; else if (MotionEvent.ACTION_MOVE == event.getAction()) &#123;</div><div class="line">                mBrush.move(mPath.path, event.getX(), event.getY());</div><div class="line">            &#125; else if (MotionEvent.ACTION_UP == event.getAction()) &#123;</div><div class="line">                mBrush.up(mPath.path, event.getX(), event.getY());</div><div class="line">                mCanvas.add(mPath);</div><div class="line">                mCanvas.isDrawing = true;</div><div class="line">                btnUndo.setEnabled(true);</div><div class="line">                btnRedo.setEnabled(false);</div><div class="line">            &#125;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>res/layout/act_test.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.demo.DrawCanvas</div><div class="line">        android:id=&quot;@+id/draw_canvas&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;0dp&quot;</div><div class="line">        android:layout_weight=&quot;1&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/red_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:textColor=&quot;#FF0000&quot;</div><div class="line">            android:text=&quot;红色&quot; /&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/green_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:textColor=&quot;#00FF00&quot;</div><div class="line">            android:text=&quot;绿色&quot; /&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/blue_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:textColor=&quot;#0000FF&quot;</div><div class="line">            android:text=&quot;蓝色&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/normal_brush_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:text=&quot;普通笔刷&quot; /&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/circle_brush_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:text=&quot;圆形笔刷&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/undo_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:text=&quot;撤销&quot; /&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/redo_btn&quot;</div><div class="line">            android:layout_width=&quot;0dp&quot;</div><div class="line">            android:layout_weight=&quot;1&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:onClick=&quot;onClick&quot;</div><div class="line">            android:text=&quot;重做&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>效果图如下</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-57d2cfc82b98e8cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;命令（Command）模式：
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>09 设计模式——解释器模式</title>
    <link href="http://yoursite.com/2019/08/15/PATTERN/09%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%A7%A3%E9%87%8A%E5%99%A8%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/15/PATTERN/09 设计模式——解释器模式/</id>
    <published>2019-08-14T17:00:00.000Z</published>
    <updated>2020-03-03T05:02:39.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>参考链接：<br><a href="https://www.jianshu.com/p/331f47bb8e26" target="_blank" rel="external">设计模式 | 解释器模式及典型应用</a><br><a href="http://c.biancheng.net/view/1402.html" target="_blank" rel="external">解释器模式（详解版）</a></p><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>解释器（Interpreter）模式：<strong>给分析对象定义一个语言，并定义该语言的文法表示，再设计一个解析器来解释语言中的句子。也就是说，用编译语言的方式来分析应用中的实例。这种模式实现了文法表达式处理的接口，该接口解释一个特定的上下文</strong>。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>在软件开发中，会遇到有些问题多次重复出现，而且有一定的相似性和规律性。如果将它们归纳成一种简单的语言，那么这些问题实例将是该语言的一些句子，这样就可以用“编译原理”中的解释器模式来实现了。</p><p>虽然使用解释器模式的实例不是很多，但对于满足以上特点，且对运行效率要求不是很高的应用实例，如果用解释器模式来实现，其效果是非常好的。比如<strong>正则表达式、XML文档解释</strong>等领域。</p><h4 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h4><ul><li>扩展性好。由于在解释器模式中使用类来表示语言的文法规则，因此可以通过继承等机制来改变或扩展文法。</li><li>容易实现。在语法树中的每个表达式节点类都是相似的，所以实现其文法较为容易。</li></ul><h4 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h4><ul><li>执行效率较低。解释器模式中通常使用大量的循环和递归调用，当要解释的句子较复杂时，其运行速度很慢，且代码的调试过程也比较麻烦。</li><li>会引起类膨胀。解释器模式中的每条规则至少需要定义一个类，当包含的文法规则很多时，类的个数将急剧增加，导致系统难以管理与维护。</li><li>可应用的场景比较少。在软件开发中，需要定义语言文法的应用实例非常少，所以这种模式很少被使用到。</li></ul><hr><h3 id="模式的结构与实现"><a href="#模式的结构与实现" class="headerlink" title="模式的结构与实现"></a>模式的结构与实现</h3><hr><h4 id="文法、句子、语法树"><a href="#文法、句子、语法树" class="headerlink" title="文法、句子、语法树"></a>文法、句子、语法树</h4><p>解释器模式常用于对简单语言的编译或分析实例中，为了掌握好它的结构与实现，必须先了解编译原理中的“文法、句子、语法树”等相关概念。</p><h5 id="文法"><a href="#文法" class="headerlink" title="文法"></a>文法</h5><p>文法是用于描述语言的语法结构的形式规则。没有规矩不成方圆，例如，有些人认为完美爱情的准则是“相互吸引、感情专一、任何一方都没有恋爱经历”，虽然最后一条准则较苛刻，但任何事情都要有规则，语言也一样，不管它是机器语言还是自然语言，都有它自己的文法规则。例如，中文中的“句子”的文法如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">〈主语〉::=〈代词〉|〈名词〉</div><div class="line">〈谓语〉::=〈动词〉</div><div class="line">〈宾语〉::=〈代词〉|〈名词〉</div><div class="line">〈代词〉你|我|他</div><div class="line">〈名词〉7大学生I筱霞I英语</div><div class="line">〈动词〉::=是|学习</div></pre></td></tr></table></figure></p><p>这里的符号“::=”表示“定义为”的意思，用“〈”和“〉”括住的是非终结符，没有括住的是终结符。</p><h5 id="句子"><a href="#句子" class="headerlink" title="句子"></a>句子</h5><p>句子是语言的基本单位，是语言集中的一个元素，它由终结符构成，能由“文法”推导出。例如，上述文法可以推出“我是大学生”，所以它是句子。</p><h5 id="语法树"><a href="#语法树" class="headerlink" title="语法树"></a>语法树</h5><p>语法树是句子结构的一种树型表示，它代表了句子的推导结果，它有利于理解句子语法结构的层次。下图所示是“我是大学生”的语法树。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7e95a18623742e1e.gif?imageMogr2/auto-orient/strip" alt=""></p><h4 id="模式的结构"><a href="#模式的结构" class="headerlink" title="模式的结构"></a>模式的结构</h4><p>解释器模式包含以下主要角色。</p><ul><li>抽象表达式（Abstract Expression）：定义解释器的接口，约定解释器的解释操作，主要包含解释方法 interpret()。</li><li>终结符表达式（Terminal    Expression）：是抽象表达式的子类，用来实现文法中与终结符相关的操作，文法中的每一个终结符都有一个具体终结表达式与之相对应。</li><li>非终结符表达式（Nonterminal Expression）：也是抽象表达式的子类，用来实现文法中与非终结符相关的操作，文法中的每条规则都对应于一个非终结符表达式。</li><li>环境（Context）：通常包含各个解释器需要的数据或是公共的功能，一般用来传递被所有解释器共享的数据，后面的解释器可以从这里获取这些值。</li><li>客户端（Client）：主要任务是将需要分析的句子或表达式转换成使用解释器对象描述的抽象语法树，然后调用解释器的解释方法，当然也可以通过环境角色间接访问解释器的解释方法。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d96ee97e5419f1a7.gif?imageMogr2/auto-orient/strip" alt="解释器模式的结构图"></p><h4 id="模式的实现"><a href="#模式的实现" class="headerlink" title="模式的实现"></a>模式的实现</h4><p>解释器模式实现的关键是定义文法规则、设计终结符类与非终结符类、画出结构图，必要时构建语法树，其代码结构如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 抽象表达式类</div><div class="line">interface AbstractExpression &#123;</div><div class="line">    public Object interpret(String info);    // 解释方法</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 终结符表达式类</div><div class="line">class TerminalExpression implements AbstractExpression &#123;</div><div class="line">    public Object interpret(String info) &#123;</div><div class="line">        // 对终结符表达式的处理</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 非终结符表达式类</div><div class="line">class NonterminalExpression implements AbstractExpression &#123;</div><div class="line">    private AbstractExpression exp1;</div><div class="line">    private AbstractExpression exp2;</div><div class="line">    public Object interpret(String info) &#123;</div><div class="line">        // 非对终结符表达式的处理</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 环境类</div><div class="line">class Context &#123;</div><div class="line">    private AbstractExpression exp;</div><div class="line">    public Context() &#123;</div><div class="line">        // 数据初始化</div><div class="line">    &#125;</div><div class="line">    public void operation(String info) &#123;</div><div class="line">        // 调用相关表达式类的解释方法</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>需求：比如算数表达式 m + n + p。代表数字的m、n、p三个字符看成终结符号，+ 看做非终结符号。</p><p>1、抽象的算术运算解释器，为所有解释器共性的提取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public abstract class ArithmeticExpression &#123;</div><div class="line">    /**</div><div class="line">     * 抽象的解析方法</div><div class="line">     * 具体的解析逻辑由具体的子类实现</div><div class="line">     * @return 解析得到具体的值</div><div class="line">     */</div><div class="line">    public abstract int interpret();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、数字解释器，仅仅为了解释数字<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class NumExpression extends ArithmeticExpression &#123;</div><div class="line">    private int num;</div><div class="line"></div><div class="line">    public NumExpression(int num) &#123;</div><div class="line">        this.num = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int interpret() &#123;</div><div class="line">        return num;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、运算符号抽象解释器，为所有运算符号解释器共性的提取<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public abstract class OperatorExpression extends ArithmeticExpression &#123;</div><div class="line">    // 声明两个成员变量存储运算符号两边的数字解释器</div><div class="line">    protected ArithmeticExpression exp1, exp2;</div><div class="line"></div><div class="line">    public OperatorExpression(ArithmeticExpression exp1, ArithmeticExpression exp2) &#123;</div><div class="line">        this.exp1 = exp1;</div><div class="line">        this.exp2 = exp2;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4、加法运算抽象解释器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class AdditionExpression extends OperatorExpression &#123;</div><div class="line">    public AdditionExpression(ArithmeticExpression exp1, ArithmeticExpression exp2) &#123;</div><div class="line">        super(exp1, exp2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int interpret() &#123;</div><div class="line">        return exp1.interpret() + exp2.interpret();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>5、处理与解释相关的一些业务<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class Calculator &#123;</div><div class="line">    // 声明一个 Stack 栈存储并操作所有相关的解释器</div><div class="line">    private Stack&lt;ArithmeticExpression&gt; mExpStack = new Stack&lt;&gt;();</div><div class="line"></div><div class="line">    public Calculator(String expression) &#123;</div><div class="line">        // 声明两个 TerminalExpression 类型的临时变量，存储运算符左右两边的数字解释器</div><div class="line">        ArithmeticExpression exp1, exp2;</div><div class="line"></div><div class="line">        String[] elements = expression.split(&quot; &quot;);</div><div class="line"></div><div class="line">        // 循环遍历表达式元素数组</div><div class="line">        for (int i = 0; i &lt; elements.length; i++) &#123;</div><div class="line">            // 判断运算符号</div><div class="line">            switch (elements[i].charAt(0)) &#123;</div><div class="line">                case &apos;+&apos;:   // 如果是加号</div><div class="line">                    // 将栈中的解释器弹出作为运算符号右边的解释器</div><div class="line">                    exp1 = mExpStack.pop();</div><div class="line">                    // 同时将运算符号数组下标下一个元素构造为一个数字解释器</div><div class="line">                    exp2 = new NumExpression(Integer.valueOf(elements[++i]));</div><div class="line">                    // 通过尚明两个数字解释器构造加法运算解释器</div><div class="line">                    mExpStack.push(new AdditionExpression(exp1, exp2));</div><div class="line">                    break;    </div><div class="line">                default:    // 如果是数字</div><div class="line">                    // 直接构造数字解释器并压入栈</div><div class="line">                    mExpStack.push(new NumExpression(Integer.valueOf(elements[i])));</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int calculate() &#123;</div><div class="line">        return mExpStack.pop().interpret();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>6、客户类<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Calculator calculator = new Calculator(&quot;1 + 2 + 3 + 10&quot;);</div><div class="line">        System.out.println(calculator.calculate());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此时只是定义了加法运算，如果需要增加减法运算，则可以在 Calculator 中增加以下分支。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">case &apos;-&apos;:   //如果是减号</div><div class="line">    exp1 = mExpStack.pop();</div><div class="line">    exp2 = new NumExpression(Integer.valueOf(elements[++i]));</div><div class="line">    mExpStack.push(new SubtractionExpression(exp1, exp2));</div><div class="line">    break;</div></pre></td></tr></table></figure></p><p>此时，在 Client 中就可以开始使用了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Calculator calculator = new Calculator(&quot;1 - 2 - 3 + 10&quot;);</div><div class="line">        System.out.println(calculator.calculate());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="ANDROID-源码中的实现"><a href="#ANDROID-源码中的实现" class="headerlink" title="ANDROID 源码中的实现"></a>ANDROID 源码中的实现</h3><hr><p>AndroidManifest.xml 配置文件的读取。源代码追踪关键词：PackageParser 类的 parseSplitApk()、parseSplitApplication() 方法。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-db1c250de134f85f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="parseSplitApplication"></p><hr><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><hr><p>用解释器模式设计一个“韶粵通”公交车卡的读卡器程序。</p><p>说明：假如“韶粵通”公交车读卡器可以判断乘客的身份，如果是“韶关”或者“广州”的“老人” “妇女”“儿童”就可以免费乘车，其他人员乘车一次扣 2 元。</p><p>分析：本实例用“解释器模式”设计比较适合，首先设计其文法规则如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;expression&gt; ::= &lt;city&gt;的&lt;person&gt;</div><div class="line">&lt;city&gt; ::= 韶关|广州</div><div class="line">&lt;person&gt; ::= 老人|妇女|儿童</div></pre></td></tr></table></figure></p><p>然后，根据文法规则按以下步骤设计公交车卡的读卡器程序的类图。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b44052f9073ec65a.gif?imageMogr2/auto-orient/strip" alt=""></p><p>程序代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">/*文法规则</div><div class="line">  &lt;expression&gt; ::= &lt;city&gt;的&lt;person&gt;</div><div class="line">  &lt;city&gt; ::= 韶关|广州</div><div class="line">  &lt;person&gt; ::= 老人|妇女|儿童</div><div class="line">*/</div><div class="line">public class InterpreterPatternDemo &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Context bus = new Context();</div><div class="line">        bus.freeRide(&quot;韶关的老人&quot;);</div><div class="line">        bus.freeRide(&quot;韶关的年轻人&quot;);</div><div class="line">        bus.freeRide(&quot;广州的妇女&quot;);</div><div class="line">        bus.freeRide(&quot;广州的儿童&quot;);</div><div class="line">        bus.freeRide(&quot;山东的儿童&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象表达式类</div><div class="line">interface Expression &#123;</div><div class="line">    public boolean interpret(String info);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 终结符表达式类</div><div class="line">class TerminalExpression implements Expression &#123;</div><div class="line">    private Set&lt;String&gt; set = new HashSet&lt;String&gt;();</div><div class="line">    public TerminalExpression(String[] data) &#123;</div><div class="line">        for(int i=0; i&lt;data.length; i++) set.add(data[i]);</div><div class="line">    &#125;</div><div class="line">    public boolean interpret(String info) &#123;</div><div class="line">        if (set.contains(info)) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 非终结符表达式类</div><div class="line">class AndExpression implements Expression &#123;</div><div class="line">    private Expression city;    </div><div class="line">    private Expression person;</div><div class="line">    public AndExpression(Expression city,Expression person) &#123;</div><div class="line">        this.city=city;</div><div class="line">        this.person=person;</div><div class="line">    &#125;</div><div class="line">    public boolean interpret(String info) &#123;</div><div class="line">        String s[] = info.split(&quot;的&quot;);       </div><div class="line">        return city.interpret(s[0]) &amp;&amp; person.interpret(s[1]);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 环境类</div><div class="line">class Context &#123;</div><div class="line">    private String[] cities = &#123;&quot;韶关&quot;,&quot;广州&quot;&#125;;</div><div class="line">    private String[] persons = &#123;&quot;老人&quot;,&quot;妇女&quot;,&quot;儿童&quot;&#125;;</div><div class="line">    private Expression cityPerson;</div><div class="line">    public Context() &#123;</div><div class="line">        Expression city = new TerminalExpression(cities);</div><div class="line">        Expression person = new TerminalExpression(persons);</div><div class="line">        cityPerson = new AndExpression(city,person);</div><div class="line">    &#125;</div><div class="line">    public void freeRide(String info) &#123;</div><div class="line">        boolean ok = cityPerson.interpret(info);</div><div class="line">        if (ok) System.out.println(&quot;您是&quot;+info+&quot;，您本次乘车免费！&quot;);</div><div class="line">        else System.out.println(info+&quot;，您不是免费人员，本次乘车扣费2元！&quot;);   </div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">您是韶关的老人，您本次乘车免费！</div><div class="line">韶关的年轻人，您不是免费人员，本次乘车扣费2元！</div><div class="line">您是广州的妇女，您本次乘车免费！</div><div class="line">您是广州的儿童，您本次乘车免费！</div><div class="line">山东的儿童，您不是免费人员，本次乘车扣费2元！</div></pre></td></tr></table></figure></p><h4 id="数学公式解析器"><a href="#数学公式解析器" class="headerlink" title="数学公式解析器"></a>数学公式解析器</h4><p>在项目开发中，如果要对数据表达式进行分析与计算，无须再用解释器模式进行设计了，Java 提供了以下强大的数学公式解析器：Expression4J、MESP(Math Expression String Parser) 和 Jep 等，它们可以解释一些复杂的文法，功能强大，使用简单。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class JepDemo &#123;</div><div class="line">    public static void main(String[] args) throws JepException &#123;</div><div class="line">        Jep jep = new Jep();</div><div class="line">        // 定义要计算的数据表达式</div><div class="line">        String 存款利息 = &quot;本金*利率*时间&quot;;</div><div class="line">        // 给相关变量赋值</div><div class="line">        jep.addVariable(&quot;本金&quot;,10000);</div><div class="line">        jep.addVariable(&quot;利率&quot;,0.038);</div><div class="line">        jep.addVariable(&quot;时间&quot;,2);</div><div class="line">        jep.parse(存款利息);    // 解析表达式</div><div class="line">        Object accrual=jep.evaluate();    // 计算</div><div class="line">        System.out.println(&quot;存款利息：&quot; + accrual);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>程序运行结果如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">存款利息：760.0</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;p&gt;参考链接：&lt;br&gt;&lt;a href=&quot;https://www.jianshu.com/p/331f47bb8e26&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;设计
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>08 设计模式——责任链模式</title>
    <link href="http://yoursite.com/2019/08/14/PATTERN/08%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/14/PATTERN/08 设计模式——责任链模式/</id>
    <published>2019-08-13T17:00:00.000Z</published>
    <updated>2020-03-02T18:21:41.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>责任链模式：<strong>使多个对象都有机会处理请求，从而避免了请求的发送者和接受者之间的耦合关系。将这些对象连城一条链，并沿着这条链传递该请求，直到有对象处理它为止</strong>。</p><p>它是行为型设计模式之一。我们将多个节点首尾相连构成的模型称为链，而每个节点都可以拆开再连接。因此，链式结构具有很好的灵活性。将这样一种结构应用于编程领域，将每一个节点看作是一个对象，每一个对象拥有不同的处理逻辑，将一个请求从链式的首端发出，沿着链的路径依次传递给每一个节点对象，直至有对象处理这个请求为止。我们将这样的一种模式称为<strong>责任链模式</strong>。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>多个对象可以处理同一请求，但具体由哪个对象处理则在运行时动态决定。<br>在请求处理者不明确的情况下向多个对象中的一个提交一个请求。<br>需要动态指定一组对象处理请求。</p><h4 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h4><p><strong>优点</strong>：对请求者和处理者关系解耦，提高代码的灵活性。<br><strong>缺点</strong>：如果处理者太多，那么遍历必定会影响性能。</p><h4 id="UML-关系图"><a href="#UML-关系图" class="headerlink" title="UML 关系图"></a>UML 关系图</h4><h5 id="简化版-UML-类图"><a href="#简化版-UML-类图" class="headerlink" title="简化版 UML 类图"></a>简化版 UML 类图</h5><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e1892ae495a60100.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>根据类图我们可以得出如下简化版的通用模板代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">// 抽象处理者</div><div class="line">abstract class Handler &#123;</div><div class="line">    protected Handler successor;    // 下一个节点的处理者</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 请求处理</div><div class="line">     * @param condition 请求条件</div><div class="line">     */</div><div class="line">    public abstract void handleRequest(String condition);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体的处理者 1</div><div class="line">class ConcreteHandler1 extends Handler &#123;</div><div class="line">    @Override</div><div class="line">    public void handleRequest(String condition) &#123;</div><div class="line">        if (&quot;ConcreteHandler1&quot;.equals(condition)) &#123;</div><div class="line">            System.out.println(&quot;ConcreteHandler1 handled&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            successor.handleRequest(condition);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体的处理者 2</div><div class="line">class ConcreteHandler2 extends Handler &#123;</div><div class="line">    @Override</div><div class="line">    public void handleRequest(String condition) &#123;</div><div class="line">        if (&quot;ConcreteHandler2&quot;.equals(condition)) &#123;</div><div class="line">            System.out.println(&quot;ConcreteHandler2 handled&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            successor.handleRequest(condition);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 客户类</div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        ConcreteHandler1 handler1 = new ConcreteHandler1();</div><div class="line">        ConcreteHandler2 handler2 = new ConcreteHandler2();</div><div class="line">        handler1.successor = handler2;</div><div class="line">        handler2.successor = handler1;</div><div class="line">        handler1.handleRequest(&quot;ConcreteHandler2&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>角色介绍：</p><ul><li>Handler：抽象处理者角色，声明一个请求处理的方法，并在其中保持一个对下一个处理节点 Handler 对象的引用。</li><li>ConcreteHandler：具体处理者角色，对请求进行处理，如果不能处理则将该请求转发给下一个节点上的处理对象。</li></ul><h5 id="完整版-UML-类图"><a href="#完整版-UML-类图" class="headerlink" title="完整版 UML 类图"></a>完整版 UML 类图</h5><p>上面的请求形式为固定的字符串，处理规则为该字符串是否与之匹配。然而在大多数情况下，责任链中的请求和对应的处理规则是不尽相同的，在这种情况下可以将请求进行封装，同时对请求的处理规则也进行封装作为一个独立的对象。类图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bb2f101a9bf496a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>对应模板代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div></pre></td><td class="code"><pre><div class="line">// 抽象处理者</div><div class="line">abstract class AbstractHandler &#123;</div><div class="line">    protected AbstractHandler nextHandler;    // 下一个节点上的处理者对象</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理请求</div><div class="line">     * @param request 请求对象</div><div class="line">     */</div><div class="line">    public final void handleRequest(AbstractRequest request) &#123;</div><div class="line">        if (getHandlerLevel() == request.getRequestLevel()) &#123;</div><div class="line">            // 一致则由该处理对象处理</div><div class="line">            handle(request);</div><div class="line">        &#125; else &#123;</div><div class="line">            // 否则将该请求转发给下一个节点上的请求对象</div><div class="line">            if (nextHandler != null) &#123;</div><div class="line">                nextHandler.handleRequest(request);</div><div class="line">            &#125; else &#123;</div><div class="line">                System.out.println(&quot;All of handler can not handle the request&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected abstract int getHandlerLevel();</div><div class="line">    // 每个处理者对象的具体处理方式</div><div class="line">    protected abstract void handle(AbstractRequest request);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象请求者</div><div class="line">abstract class AbstractRequest &#123;</div><div class="line">    private Object obj; // 处理对象</div><div class="line"></div><div class="line">    public AbstractRequest(Object obj) &#123;</div><div class="line">        this.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Object getContent() &#123;</div><div class="line">        return obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 获取请求级别</div><div class="line">    public abstract int getRequestLevel();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体处理者</div><div class="line">class Handler1 extends AbstractHandler &#123;</div><div class="line">    @Override</div><div class="line">    protected int getHandlerLevel() &#123;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(AbstractRequest request) &#123;</div><div class="line">        System.out.println(&quot;Handler1 handle request: &quot;</div><div class="line">                + request.getRequestLevel());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Handler2 extends AbstractHandler &#123;</div><div class="line">    @Override</div><div class="line">    protected int getHandlerLevel() &#123;</div><div class="line">        return 2;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(AbstractRequest request) &#123;</div><div class="line">        System.out.println(&quot;Handler2 handle request: &quot;</div><div class="line">                + request.getRequestLevel());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Handler3 extends AbstractHandler &#123;</div><div class="line">    @Override</div><div class="line">    protected int getHandlerLevel() &#123;</div><div class="line">        return 3;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(AbstractRequest request) &#123;</div><div class="line">        System.out.println(&quot;Handler3 handle request: &quot;</div><div class="line">                + request.getRequestLevel());</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体请求者</div><div class="line">class ConcreteRequest1 extends AbstractRequest &#123;</div><div class="line">    public ConcreteRequest1(Object obj) &#123;</div><div class="line">        super(obj);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public int getRequestLevel() &#123;</div><div class="line">        return 1;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ConcreteRequest2 extends AbstractRequest &#123;</div><div class="line">    public ConcreteRequest2(Object obj) &#123;</div><div class="line">        super(obj);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public int getRequestLevel() &#123;</div><div class="line">        return 2;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class ConcreteRequest3 extends AbstractRequest &#123;</div><div class="line">    public ConcreteRequest3(Object obj) &#123;</div><div class="line">        super(obj);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public int getRequestLevel() &#123;</div><div class="line">        return 3;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>下面是客户类：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 构造 3 个处理者对象</div><div class="line">        AbstractHandler handler1 = new Handler1();</div><div class="line">        AbstractHandler handler2 = new Handler2();</div><div class="line">        AbstractHandler handler3 = new Handler3();</div><div class="line">        // 设置当前处理者对象的下一个节点的处理者对象</div><div class="line">        handler1.nextHandler = handler2;</div><div class="line">        handler2.nextHandler = handler3;</div><div class="line">        // 构造 3 个请求者对象</div><div class="line">        AbstractRequest request1 = new ConcreteRequest1(&quot;Request1&quot;);</div><div class="line">        AbstractRequest request2 = new ConcreteRequest2(&quot;Request2&quot;);</div><div class="line">        AbstractRequest request3 = new ConcreteRequest3(&quot;Request3&quot;);</div><div class="line">        // 总是从链式的首端发起请求</div><div class="line">        handler1.handleRequest(request1);</div><div class="line">        handler1.handleRequest(request2);</div><div class="line">        // 不从链式的首端发起请求</div><div class="line">        handler2.handleRequest(request3);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于责任链中的一个处理者对象，其只有两个行为：一是处理请求，而是将请求转发给下一个节点。不允许某个处理者对象在处理了请求后又将请求转发给上一个节点的情况。对于一条责任链来说，一个请求最终只有两种情况：一是被某个处理对象所处理，另一个是所有对象均未对其处理。前一种情况称之为纯的责任链，后一种情况称之为不纯的责任链。</p><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>小先向组长报销 5 万元费用，组长一看是笔不小的数目，他没有权限审批，于是组长拿着票据去找部门主管；主管的权限内只能批五千以下的费用，于是主管又跑去找经理；经理权限也不够直接奔向老板的办公室。使用责任链模式的代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">// 抽象领导者</div><div class="line">abstract class Leader &#123;</div><div class="line">    protected Leader nextHandler;    // 上一级领导处理者</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 处理报账请求</div><div class="line">     * @param money 能批复的报账额度</div><div class="line">     */</div><div class="line">    public final void handleRequest(int money) &#123;</div><div class="line">        if (money &lt;= limit()) &#123;</div><div class="line">            handle(money);</div><div class="line">        &#125; else &#123;</div><div class="line">            if (nextHandler != null) &#123;</div><div class="line">                nextHandler.handleRequest(money);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 自身能批复的额度权限</div><div class="line">    protected abstract int limit();</div><div class="line">    // 处理报账行为</div><div class="line">    protected abstract void handle(int money);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 各个具体的领导者</div><div class="line">class GroupLeader extends Leader &#123;</div><div class="line">    @Override</div><div class="line">    protected int limit() &#123;</div><div class="line">        return 1000;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(int money) &#123;</div><div class="line">        System.out.println(&quot;组长批复报销&quot; + money + &quot;元&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Director extends Leader &#123;</div><div class="line">    @Override</div><div class="line">    protected int limit() &#123;</div><div class="line">        return 5000;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(int money) &#123;</div><div class="line">        System.out.println(&quot;主管批复报销&quot; + money + &quot;元&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Manager extends Leader &#123;</div><div class="line">    @Override</div><div class="line">    protected int limit() &#123;</div><div class="line">        return 10000;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(int money) &#123;</div><div class="line">        System.out.println(&quot;经理批复报销&quot; + money + &quot;元&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Boss extends Leader &#123;</div><div class="line">    @Override</div><div class="line">    protected int limit() &#123;</div><div class="line">        return Integer.MAX_VALUE;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void handle(int money) &#123;</div><div class="line">        System.out.println(&quot;老板批复报销&quot; + money + &quot;元&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 客户类</div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        // 构造各个领导对象</div><div class="line">        GroupLeader groupLeader = new GroupLeader();</div><div class="line">        Director director = new Director();</div><div class="line">        Manager manager = new Manager();</div><div class="line">        Boss boss = new Boss();</div><div class="line">        // 设置上一级领导处理对象</div><div class="line">        groupLeader.nextHandler = director;</div><div class="line">        director.nextHandler = manager;</div><div class="line">        manager.nextHandler = boss;</div><div class="line">        // 发起报账请求</div><div class="line">        groupLeader.handleRequest(50000);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>责任链模式的灵活之处在于请求的发起可以从责任链的任何一个节点处开始，同时也可以改变责任链内部传递的规则。比如，直接越过组长找主管报账，或者直接将经理设置为组长的上一级节点。</p><hr><h3 id="ANDROID-源码中的责任链模式实现"><a href="#ANDROID-源码中的责任链模式实现" class="headerlink" title="ANDROID 源码中的责任链模式实现"></a>ANDROID 源码中的责任链模式实现</h3><hr><p>责任链模式在 ANDROID 源码中比较类似的实现莫过于对事件的分发处理，每当用户解除屏幕时，ANDROID 都会将对应的事件包装成一个事件对象从 ViewTree 的顶部自上而下地分发传递。而 ViewGroup 中执行事件派发的方法是 dispatchTouchEvent，在该方法中其对事件进行了统一的分发。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div></pre></td><td class="code"><pre><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">    if (mInputEventConsistencyVerifier != null) &#123;</div><div class="line">        mInputEventConsistencyVerifier.onTouchEvent(ev, 1);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 对于辅助功能的事件处理</div><div class="line">    if (ev.isTargetAccessibilityFocus() &amp;&amp; isAccessibilityFocusedViewOrHost()) &#123;</div><div class="line">        ev.setTargetAccessibilityFocus(false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    boolean handled = false;</div><div class="line">    if (onFilterTouchEventForSecurity(ev)) &#123;</div><div class="line">        final int action = ev.getAction();</div><div class="line">        final int actionMasked = action &amp; MotionEvent.ACTION_MASK;</div><div class="line"></div><div class="line">        // 处理原始的 DOWN 事件</div><div class="line">        if (actionMasked == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            // 这里主要是在新事件开始时处理完上一个事件</div><div class="line">            cancelAndClearTouchTargets(ev);</div><div class="line">            resetTouchState();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 检查事件拦截</div><div class="line">        final boolean intercepted;</div><div class="line">        if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                || mFirstTouchTarget != null) &#123;</div><div class="line">            final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">            if (!disallowIntercept) &#123;</div><div class="line">                intercepted = onInterceptTouchEvent(ev);</div><div class="line">                ev.setAction(action); // 恢复事件防止其改变</div><div class="line">            &#125; else &#123;</div><div class="line">                intercepted = false;</div><div class="line">            &#125;</div><div class="line">        &#125; else &#123;</div><div class="line">            intercepted = true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 如果事件被拦截了，则进行正常的事件分发</div><div class="line">        if (intercepted || mFirstTouchTarget != null) &#123;</div><div class="line">            ev.setTargetAccessibilityFocus(false);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 检查事件是否取消</div><div class="line">        final boolean canceled = resetCancelNextUpFlag(this)</div><div class="line">                || actionMasked == MotionEvent.ACTION_CANCEL;</div><div class="line"></div><div class="line">        // 如果有必要的话，为 DOWN 事件检查所有的目标对象</div><div class="line">        final boolean split = (mGroupFlags &amp; FLAG_SPLIT_MOTION_EVENTS) != 0;</div><div class="line">        TouchTarget newTouchTarget = null;</div><div class="line">        boolean alreadyDispatchedToNewTouchTarget = false;</div><div class="line">        // 如果事件未被取消且未被拦截</div><div class="line">        if (!canceled &amp;&amp; !intercepted) &#123;</div><div class="line">            // 如果有辅助功能的参与，则直接将事件投递到对应的 View</div><div class="line">            // 否则将事件分发给所有的子 View</div><div class="line">            View childWithAccessibilityFocus = ev.isTargetAccessibilityFocus()</div><div class="line">                    ? findChildWithAccessibilityFocus() : null;</div><div class="line">            // 如果事件为起始事件</div><div class="line">            if (actionMasked == MotionEvent.ACTION_DOWN</div><div class="line">                    || (split &amp;&amp; actionMasked == MotionEvent.ACTION_POINTER_DOWN)</div><div class="line">                    || actionMasked == MotionEvent.ACTION_HOVER_MOVE) &#123;</div><div class="line">                final int actionIndex = ev.getActionIndex(); // always 0 for down</div><div class="line">                final int idBitsToAssign = split ? 1 &lt;&lt; ev.getPointerId(actionIndex)</div><div class="line">                        : TouchTarget.ALL_POINTER_IDS;</div><div class="line"></div><div class="line">                removePointersFromTouchTargets(idBitsToAssign);</div><div class="line"></div><div class="line">                final int childrenCount = mChildrenCount;</div><div class="line">                // 如果 newTouchTarget 为空且子元素不为 0</div><div class="line">                if (newTouchTarget == null &amp;&amp; childrenCount != 0) &#123;</div><div class="line">                    final float x = ev.getX(actionIndex);</div><div class="line">                    final float y = ev.getY(actionIndex);</div><div class="line">                    // 自上而下去寻找一个可以接收该事件的子 View</div><div class="line">                    final ArrayList&lt;View&gt; preorderedList = buildTouchDispatchChildList();</div><div class="line">                    final boolean customOrder = preorderedList == null</div><div class="line">                            &amp;&amp; isChildrenDrawingOrderEnabled();</div><div class="line">                    final View[] children = mChildren;</div><div class="line">                    // 遍历子元素</div><div class="line">                    for (int i = childrenCount - 1; i &gt;= 0; i--) &#123;</div><div class="line">                        final int childIndex = getAndVerifyPreorderedIndex(</div><div class="line">                                childrenCount, i, customOrder);</div><div class="line">                        final View child = getAndVerifyPreorderedView(</div><div class="line">                                preorderedList, children, childIndex);</div><div class="line"></div><div class="line">                        if (childWithAccessibilityFocus != null) &#123;</div><div class="line">                            if (childWithAccessibilityFocus != child) &#123;</div><div class="line">                                continue;</div><div class="line">                            &#125;</div><div class="line">                            childWithAccessibilityFocus = null;</div><div class="line">                            i = childrenCount - 1;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        // 如果子元素无法接收 PointerEvent 或这个事件点压根就没有</div><div class="line">                        // 落在子元素的边界范围内，那么就跳出该次循环继续遍历</div><div class="line">                        if (!canViewReceivePointerEvents(child)</div><div class="line">                                || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                            ev.setTargetAccessibilityFocus(false);</div><div class="line">                            continue;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        // 找到 Event 该由哪个子元素持有</div><div class="line">                        newTouchTarget = getTouchTarget(child);</div><div class="line">                        if (newTouchTarget != null) &#123;</div><div class="line">                            newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line"></div><div class="line">                        resetCancelNextUpFlag(child);</div><div class="line">                        // 投递事件执行触摸操作</div><div class="line">                        // 如果子元素还是一个 ViewGroup，则递归调用重复此过程</div><div class="line">                        // 如果子元素是一个 View，那么会调用 View 的 dispatchTouchEvent，</div><div class="line">                        // 并最终有 onTouchEvent 处理</div><div class="line">                        if (dispatchTransformedTouchEvent(ev, false, child, idBitsToAssign)) &#123;</div><div class="line">                            // 子 View 在其边界范围内接收该事件</div><div class="line">                            mLastTouchDownTime = ev.getDownTime();</div><div class="line">                            if (preorderedList != null) &#123;</div><div class="line">                                for (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                                    if (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                                        mLastTouchDownIndex = j;</div><div class="line">                                        break;</div><div class="line">                                    &#125;</div><div class="line">                                &#125;</div><div class="line">                            &#125; else &#123;</div><div class="line">                                mLastTouchDownIndex = childIndex;</div><div class="line">                            &#125;</div><div class="line">                            mLastTouchDownX = ev.getX();</div><div class="line">                            mLastTouchDownY = ev.getY();</div><div class="line">                            newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                            alreadyDispatchedToNewTouchTarget = true;</div><div class="line">                            break;</div><div class="line">                        &#125;</div><div class="line">                        ev.setTargetAccessibilityFocus(false);</div><div class="line">                    &#125;</div><div class="line">                    if (preorderedList != null) preorderedList.clear();</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                // 如果没有发现子元素可以持有该次事件</div><div class="line">                if (newTouchTarget == null &amp;&amp; mFirstTouchTarget != null) &#123;</div><div class="line">                    newTouchTarget = mFirstTouchTarget;</div><div class="line">                    while (newTouchTarget.next != null) &#123;</div><div class="line">                        newTouchTarget = newTouchTarget.next;</div><div class="line">                    &#125;</div><div class="line">                    newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (mFirstTouchTarget == null) &#123;</div><div class="line">            // 重点：dispatchTransformedTouchEvent</div><div class="line">            handled = dispatchTransformedTouchEvent(ev, canceled, null,</div><div class="line">                    TouchTarget.ALL_POINTER_IDS);</div><div class="line">        &#125; else &#123;</div><div class="line">            TouchTarget predecessor = null;</div><div class="line">            TouchTarget target = mFirstTouchTarget;</div><div class="line">            while (target != null) &#123;</div><div class="line">                final TouchTarget next = target.next;</div><div class="line">                if (alreadyDispatchedToNewTouchTarget &amp;&amp; target == newTouchTarget) &#123;</div><div class="line">                    handled = true;</div><div class="line">                &#125; else &#123;</div><div class="line">                    final boolean cancelChild = resetCancelNextUpFlag(target.child)</div><div class="line">                            || intercepted;</div><div class="line">                    // 重点：dispatchTransformedTouchEvent</div><div class="line">                    if (dispatchTransformedTouchEvent(ev, cancelChild,</div><div class="line">                            target.child, target.pointerIdBits)) &#123;</div><div class="line">                        handled = true;</div><div class="line">                    &#125;</div><div class="line">                    if (cancelChild) &#123;</div><div class="line">                        if (predecessor == null) &#123;</div><div class="line">                            mFirstTouchTarget = next;</div><div class="line">                        &#125; else &#123;</div><div class="line">                            predecessor.next = next;</div><div class="line">                        &#125;</div><div class="line">                        target.recycle();</div><div class="line">                        target = next;</div><div class="line">                        continue;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                predecessor = target;</div><div class="line">                target = next;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    return handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里我们主要看看 dispatchTransformedTouchEvent 方法是如何调度子元素 dispatchTouchEvent 方法的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div></pre></td><td class="code"><pre><div class="line">private boolean dispatchTransformedTouchEvent(MotionEvent event, boolean cancel,</div><div class="line">                                              View child, int desiredPointerIdBits) &#123;</div><div class="line">    final boolean handled;</div><div class="line">    final int oldAction = event.getAction();</div><div class="line">    // 如果事件被取消</div><div class="line">    if (cancel || oldAction == MotionEvent.ACTION_CANCEL) &#123;</div><div class="line">        event.setAction(MotionEvent.ACTION_CANCEL);</div><div class="line">        // 如果没有子元素，则会调用父类的 dispatchTouchEvent。这里的父类终会为 View 类</div><div class="line">        if (child == null) &#123;</div><div class="line">            handled = super.dispatchTouchEvent(event);</div><div class="line">        &#125; else &#123;</div><div class="line">            // 如果有子元素则传递 cancel 事件</div><div class="line">            handled = child.dispatchTouchEvent(event);</div><div class="line">        &#125;</div><div class="line">        event.setAction(oldAction);</div><div class="line">        return handled;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 计算即将被传递的点的数量</div><div class="line">    final int oldPointerIdBits = event.getPointerIdBits();</div><div class="line">    final int newPointerIdBits = oldPointerIdBits &amp; desiredPointerIdBits;</div><div class="line"></div><div class="line">    // 如果没有相应的点，那么就丢弃该事件</div><div class="line">    if (newPointerIdBits == 0) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 声明临时变量保存坐标转换后的 MotionEvent</div><div class="line">    final MotionEvent transformedEvent;</div><div class="line">    if (newPointerIdBits == oldPointerIdBits) &#123;</div><div class="line">        // 如果子元素为空或者有一个单位矩阵</div><div class="line">        if (child == null || child.hasIdentityMatrix()) &#123;</div><div class="line">            if (child == null) &#123;</div><div class="line">                // 为空则调用父类 dispatchTouchEvent</div><div class="line">                handled = super.dispatchTouchEvent(event);</div><div class="line">            &#125; else &#123;</div><div class="line">                // 否则尝试获取 xy 方向上的偏移量（如果通过 scrollTo 或 scrollBy</div><div class="line">                // 对子视图进行滚动的话）</div><div class="line">                final float offsetX = mScrollX - child.mLeft;</div><div class="line">                final float offsetY = mScrollY - child.mTop;</div><div class="line">                // 将 MotionEvent 进行坐标变换</div><div class="line">                event.offsetLocation(offsetX, offsetY);</div><div class="line">                // 再将变换后的 MotionEvent 传递给子元素</div><div class="line">                handled = child.dispatchTouchEvent(event);</div><div class="line">                // 复位 MotionEvent 以便以后再次使用</div><div class="line">                event.offsetLocation(-offsetX, -offsetY);</div><div class="line">            &#125;</div><div class="line">            // 如果通过以上的逻辑判断，当前事件被持有则可以直接返回</div><div class="line">            return handled;</div><div class="line">        &#125;</div><div class="line">        transformedEvent = MotionEvent.obtain(event);</div><div class="line">    &#125; else &#123;</div><div class="line">        transformedEvent = event.split(newPointerIdBits);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Perform any necessary transformations and dispatch.</div><div class="line">    if (child == null) &#123;</div><div class="line">        handled = super.dispatchTouchEvent(transformedEvent);</div><div class="line">    &#125; else &#123;</div><div class="line">        final float offsetX = mScrollX - child.mLeft;</div><div class="line">        final float offsetY = mScrollY - child.mTop;</div><div class="line">        transformedEvent.offsetLocation(offsetX, offsetY);</div><div class="line">        if (! child.hasIdentityMatrix()) &#123;</div><div class="line">            transformedEvent.transform(child.getInverseMatrix());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        handled = child.dispatchTouchEvent(transformedEvent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // Done.</div><div class="line">    transformedEvent.recycle();</div><div class="line">    return handled;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ViewGroup 事件投递的递归调用就类似于一条责任链，一旦其寻找到责任者，那么将由责任者持有并消费掉该次事件，具体地体现在<br>View 的 onTouchEvent 方法中返回值的设置，如果 onTouchEvent 返回 false，那么意味着当前 View 不会是该次事件的责任人，将不会持有；如果为 true 则相反，此时 View 会持有该事件并不再向外传递。</p><hr><h3 id="责任链模式实战"><a href="#责任链模式实战" class="headerlink" title="责任链模式实战"></a>责任链模式实战</h3><hr><p>ANDROID 中的 BroastCast 分为两种，一种是普通广播，另一种是有序广播。普通广播是异步的，发出时可以被所有的接收者收到。而有序广播是根据优先级依次传播的，直到有接收者将其终止或者所有接收者都不终止它。有序广播的这一特性与我们的责任链模式很相近，我们可以轻松地实现一种全局的责任链事件处理。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;责任链模式：&lt;strong&gt;
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
  <entry>
    <title>07 设计模式——状态模式</title>
    <link href="http://yoursite.com/2019/08/13/PATTERN/07%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%8A%B6%E6%80%81%E6%A8%A1%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/08/13/PATTERN/07 设计模式——状态模式/</id>
    <published>2019-08-12T17:00:00.000Z</published>
    <updated>2020-03-02T11:15:59.000Z</updated>
    
    <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>状态模式：<strong>当一个对象的内在状态改变时允许改变其行为，这个对象看起来像是改变了其类</strong>。</p><p>状态模式中的行为是由状态来决定的，不同的状态下有不同的行为。状态模式和策略模式的结构几乎完全一样，但它们的目的、本质却完全不一样。状态模式的行为是平行的、不可替换的，策略模式的行为是彼此独立、可相互替换的。用一句话来表述，状态模式把对象的行为包装在不同状态对象里，每一个状态对象都有一个共同的抽象状态基类。状态模式的意图是让一个对象在其内部状态改变的时候，其行为也随之改变。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><ul><li>一个对象的行为取决于它的状态，并且它必须在运行时根据状态改变它的行为。</li><li>代码中包含大量与对象状态有关的条件语句，例如，一个操作中含有庞大的多分支语句（if-else 或 switch-case），且这些分支依赖于该对象的状态。</li></ul><p>状态模式将每一个条件分支放入一个独立的类中，这使得你可以根据对象自身的情况将对象的状态作为一个对象，这一对象可以不依赖于其他对象而独立变化，这样通过多态来去除过多的、重复的 if-else 等分支语句。</p><h4 id="UML-关系图"><a href="#UML-关系图" class="headerlink" title="UML 关系图"></a>UML 关系图</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-050ce5696b445d29.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>上图中的角色介绍：</p><ul><li>Context：环境类，定义客户端感兴趣的接口，维护一个 State 子类的实例，这个实例定义了对象当前状态。</li><li>State：抽象状态类或状态接口，定义一个或一组接口，表示该状态下的行为。</li><li>ConcreteStateA、ConcreteStateB：具体状态类，每个具体状态类实现抽象状态类中定义的接口，从而达到不同状态下的不同行为。</li></ul><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>以电视遥控器为例来演示一下状态模式的实现。我们先将电视的状态简单分为开机状态和关机状态，在开机状态下可以通过遥控器进行频道切换、调整音量等操作，但是，此时重复按开机键是无效的；而在关机状态下，频道切换、调整音量、关机都是无效的操作，只有按开机按钮时会生效。</p><h4 id="未使用状态模式"><a href="#未使用状态模式" class="headerlink" title="未使用状态模式"></a>未使用状态模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">// 电视遥控器,含有 开机,关机,下一个频道,上一个频道,调高音量,调低音量</div><div class="line">public class TVController &#123;</div><div class="line">    // 开机状态</div><div class="line">    private final static int POWER_ON = 1;</div><div class="line"></div><div class="line">    // 关机状态</div><div class="line">    private final static int POWER_OFF = 2;</div><div class="line"></div><div class="line">    private int state = POWER_OFF;</div><div class="line"></div><div class="line">    public void powerOn() &#123;</div><div class="line">        if (state == POWER_OFF) &#123;</div><div class="line">            System.out.println(&quot;开机啦&quot;);</div><div class="line">        &#125;</div><div class="line">        state = POWER_ON;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void powerOff() &#123;</div><div class="line">        if (state == POWER_ON) &#123;</div><div class="line">            System.out.println(&quot;关机啦&quot;);</div><div class="line">        &#125;</div><div class="line">        state = POWER_OFF;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void nextChannel() &#123;</div><div class="line">        if (state == POWER_ON) &#123;</div><div class="line">            System.out.println(&quot;下一个频道&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;两个红灯提示没有开机&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void prevChannel() &#123;</div><div class="line">        if (state == POWER_ON) &#123;</div><div class="line">            System.out.println(&quot;上一个频道&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;两个红灯提示没有开机&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void turnUp() &#123;</div><div class="line">        if (state == POWER_ON) &#123;</div><div class="line">            System.out.println(&quot;调高音量&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;两个红灯提示没有开机&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void turnDown() &#123;</div><div class="line">        if (state == POWER_ON) &#123;</div><div class="line">            System.out.println(&quot;调低音量&quot;);</div><div class="line">        &#125; else &#123;</div><div class="line">            System.out.println(&quot;两个红灯提示没有开机&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>可以看到，在 TVController 类中，通过 state 字段存储了电视的状态，并且在各个操作中根据状态来判断是否该执行。这就导致了在每个功能中都需要使用 if-else，代码重复、相对较为混乱，这是在只有两个状态和几个简单功能函数的情况下，那么当状态变成 5 个、功能函数变为 10 个呢？每个函数中都要用 if-else 进行判断，而这些代码都充斥在一个类中，这些重复的代码无法被提取出来，这使得这个类变得越来越难以维护。</p><h4 id="使用状态模式"><a href="#使用状态模式" class="headerlink" title="使用状态模式"></a>使用状态模式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div></pre></td><td class="code"><pre><div class="line">// 电视状态接口，定义电视操作的函数</div><div class="line">public interface TvState &#123;</div><div class="line">    public void nextChannel();</div><div class="line">    public void prevChannel();</div><div class="line">    public void turnUp();</div><div class="line">    public void turnDown();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 关机状态，此时只有开机功能是有效的</div><div class="line">public class PowerOffStatus implements TvState&#123;</div><div class="line">    @Override</div><div class="line">    public void nextChannel() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void prevChannel() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void turnUp() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void turnDown() &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 开机状态，此时再出发开机功能不能做任何操作</div><div class="line">public class PowerOnState implements TvState &#123;</div><div class="line">    @Override</div><div class="line">    public void nextChannel() &#123;</div><div class="line">        System.out.println(&quot;下一个频道&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void prevChannel() &#123;</div><div class="line">        System.out.println(&quot;上一个频道&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void turnUp() &#123;</div><div class="line">        System.out.println(&quot;声音调大&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void turnDown() &#123;</div><div class="line">        System.out.println(&quot;声音调小&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 电源操作接口</div><div class="line">public interface PowerController &#123;</div><div class="line">    public void powerOn();</div><div class="line">    public void powerOff();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 电视遥控器，类似于经典状态模式中的 Context</div><div class="line">public class TvController implements PowerController &#123;</div><div class="line">    TvState tvState;</div><div class="line"></div><div class="line">    public void setTvState(TvState tvState) &#123;</div><div class="line">        this.tvState = tvState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void powerOn() &#123;</div><div class="line">        setTvState(new PowerOnState());</div><div class="line">        System.out.println(&quot;开机啦&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void powerOff() &#123;</div><div class="line">        setTvState(new PowerOffStatus());</div><div class="line">        System.out.println(&quot;关机啦&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void nextChannel()&#123;</div><div class="line">        tvState.nextChannel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void prevChannel()&#123;</div><div class="line">        tvState.prevChannel();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void turnUp()&#123;</div><div class="line">        tvState.turnUp();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void turnDown()&#123;</div><div class="line">        tvState.turnDown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>客户端调用代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    TvController tvController = new TvController();</div><div class="line">    // 设置开机状态</div><div class="line">    tvController.powerOn();</div><div class="line">    // 下一个频道</div><div class="line">    tvController.nextChannel();</div><div class="line">    // 调高音量</div><div class="line">    tvController.turnUp();</div><div class="line">    // 设置关机状态</div><div class="line">    tvController.powerOff();</div><div class="line">    // 调低音量，此时不会生效</div><div class="line">    tvController.turnDown();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">开机啦</div><div class="line">下一个频道</div><div class="line">声音调大</div><div class="line">关机啦</div></pre></td></tr></table></figure></p><hr><h3 id="状态模式实战"><a href="#状态模式实战" class="headerlink" title="状态模式实战"></a>状态模式实战</h3><hr><p>在开发过程中，我们用到状态模式最常见的地方应该是用户登录系统。在用户已登录和未登录的情况下，对于同一事件的处理行为是不一样的。例如，在新浪微博中，用户在未登录的情况下点击转发或评论按钮，此时会先让用户登录，然后再执行操作；如果是已登录的情况下，那么用户可以直接进行操作。</p><p>首先抽象出状态类，定义两个操作接口：转发和评论。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public interface UserState &#123;</div><div class="line">    /**</div><div class="line">     * 转发</div><div class="line">     */</div><div class="line">    public void forward(Context context);</div><div class="line">    /**</div><div class="line">     * 评论</div><div class="line">     */</div><div class="line">    public void comment(Context context);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后实现两个状态子类：已登录状态类、未登录状态类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 已登录状态</div><div class="line">public class LoggedState implements UserState &#123;</div><div class="line">    @Override</div><div class="line">    public void forward(Context context) &#123;</div><div class="line">        Toast.makeText(context, &quot;转发成功&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void comment(Context context) &#123;</div><div class="line">        Toast.makeText(context, &quot;评论成功&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 未登录状态</div><div class="line">public class LogoutState implements UserState &#123;</div><div class="line">    @Override</div><div class="line">    public void forward(Context context) &#123;</div><div class="line">        gotoLoginActivity(context);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void comment(Context context) &#123;</div><div class="line">        gotoLoginActivity(context);</div><div class="line">    &#125;</div><div class="line">    private void gotoLoginActivity(Context context) &#123;</div><div class="line">        Intent intent = new Intent(context, LoginActivity.class)</div><div class="line">        startActivity(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后实现 Context 角色，即用户的操作对象和状态管理对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class LoginContext &#123;</div><div class="line">    // 用户状态，默认为未登录状态</div><div class="line">    private UserState userState = new LogoutState();</div><div class="line">    // 单例</div><div class="line">    private static LoginContext loginContext = new LoginContext();</div><div class="line">    private LoginContext() &#123;&#125;</div><div class="line"></div><div class="line">    public LoginContext getLoginContext() &#123;</div><div class="line">        return loginContext;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setUserState(UserState userState) &#123;</div><div class="line">        this.userState = userState;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void forward(Context context) &#123;</div><div class="line">        userState.forward(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void comment(Context context) &#123;</div><div class="line">        userState.comment(context);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户端调用样例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 转发微博</div><div class="line">LoginContext.getLoginContext().forward(MainActivity.this)</div><div class="line">// 分享微博</div><div class="line">LoginContext.getLoginContext().comment(MainActivity.this)</div><div class="line">// 登录成功后修改为已登录状态</div><div class="line">LoginContext.getLoginContext().setUserState(new LoggedState())</div><div class="line">// 注销登录，修改为未登录状态</div><div class="line">LoginContext.getLoginContext().setUserState(new LogoutState());</div></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;meta name=&quot;referrer&quot; content=&quot;no-referrer&quot;&gt;

&lt;hr&gt;
&lt;h3 id=&quot;介绍&quot;&gt;&lt;a href=&quot;#介绍&quot; class=&quot;headerlink&quot; title=&quot;介绍&quot;&gt;&lt;/a&gt;介绍&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;状态模式：&lt;strong&gt;当
      
    
    </summary>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/categories/PATTERN/"/>
    
    
      <category term="PATTERN" scheme="http://yoursite.com/tags/PATTERN/"/>
    
  </entry>
  
</feed>
