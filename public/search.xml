<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>精通 Android 自定义 View 目录</title>
      <link href="/2200/01/01/Custom%20View/00%20Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%9B%AE%E5%BD%95/"/>
      <url>/2200/01/01/Custom%20View/00%20Android%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%9B%AE%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<p>本篇从自定义控件的动画、绘图、视图三方面入手，分别讲解与自定义控件相关的各种知识，给大家系统的梳理相关知识。不仅适合 Android 初、中级水平从业者，也适合高水平从业者查漏补缺使用。</p><p>内容摘自启舰所著的书籍《Android 自定义控件开发入门与实践》。</p><h2 id="第1章-绘图基础"><a href="#第1章-绘图基础" class="headerlink" title="第1章  绘图基础"></a>第1章  绘图基础</h2><h3 id="1-1-基本图形绘制"><a href="#1-1-基本图形绘制" class="headerlink" title="1.1 基本图形绘制"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/" target="_blank" rel="external">1.1 基本图形绘制</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump1" target="_blank" rel="external">1.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump2" target="_blank" rel="external">1.1.2 画笔的基本设置</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump3" target="_blank" rel="external">1.1.3 Canvas使用基础</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump4" target="_blank" rel="external">1.1.4 Rect与RectF</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/#jump5" target="_blank" rel="external">1.1.5 Color</a></p><h3 id="1-2-路径"><a href="#1-2-路径" class="headerlink" title="1.2 路径"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/" target="_blank" rel="external">1.2 路径</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump1" target="_blank" rel="external">1.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump2" target="_blank" rel="external">1.2.2 直线路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump3" target="_blank" rel="external">1.2.3 弧线路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump4" target="_blank" rel="external">1.2.4 addXXX系列函数</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump5" target="_blank" rel="external">1.2.5 填充模式</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump6" target="_blank" rel="external">1.2.6 重置路径</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/#jump7" target="_blank" rel="external">1.2.7 示例:蜘蛛网状图</a></p><h3 id="1-3-文字"><a href="#1-3-文字" class="headerlink" title="1.3 文字"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/" target="_blank" rel="external">1.3 文字</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump1" target="_blank" rel="external">1.3.1 Paint设置</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump2" target="_blank" rel="external">1.3.2 Canvas绘制文本</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump3" target="_blank" rel="external">1.3.3 设置字体样式</a></p><h3 id="1-4-Region"><a href="#1-4-Region" class="headerlink" title="1.4 Region"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/" target="_blank" rel="external">1.4 Region</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump1" target="_blank" rel="external">1.4.1 构造Region</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump2" target="_blank" rel="external">1.4.2 枚举区域——RegionIterator类</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump3" target="_blank" rel="external">1.4.3 区域相交</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/#jump4" target="_blank" rel="external">1.4.4 其他函数</a></p><h3 id="1-5-Canvas-画布"><a href="#1-5-Canvas-画布" class="headerlink" title="1.5 Canvas(画布)"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/" target="_blank" rel="external">1.5 Canvas(画布)</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump1" target="_blank" rel="external">1.5.1 Canvas变换</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump2" target="_blank" rel="external">1.5.2 画布的保存与恢复</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump3" target="_blank" rel="external">1.5.3 示例一:圆形头像</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/#jump4" target="_blank" rel="external">1.5.4 示例二:裁剪动画</a></p><h3 id="1-6-控件的使用方法"><a href="#1-6-控件的使用方法" class="headerlink" title="1.6 控件的使用方法"></a><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/" target="_blank" rel="external">1.6 控件的使用方法</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump1" target="_blank" rel="external">1.6.1 控件概述</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump2" target="_blank" rel="external">1.6.2 通过XML引入控件</a><br><a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/#jump3" target="_blank" rel="external">1.6.3 动态添加控件</a></p><h2 id="第2章-视图动画"><a href="#第2章-视图动画" class="headerlink" title="第2章 视图动画"></a>第2章 视图动画</h2><h3 id="2-1-视图动画标签"><a href="#2-1-视图动画标签" class="headerlink" title="2.1 视图动画标签"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/" target="_blank" rel="external">2.1 视图动画标签</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump1" target="_blank" rel="external">2.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump2" target="_blank" rel="external">2.1.2 scale 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump3" target="_blank" rel="external">2.1.3 Animation 继承属性</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump4" target="_blank" rel="external">2.1.4 alpha 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump5" target="_blank" rel="external">2.1.5 rotate 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump6" target="_blank" rel="external">2.1.6 translate 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/#jump7" target="_blank" rel="external">2.1.7 set 标签</a></p><h3 id="2-2-视图动画的代码实现"><a href="#2-2-视图动画的代码实现" class="headerlink" title="2.2 视图动画的代码实现"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">2.2 视图动画的代码实现</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump1" target="_blank" rel="external">2.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">2.2.2 ScaleAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump3" target="_blank" rel="external">2.2.3 AlphaAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump4" target="_blank" rel="external">2.2.4 RotateAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump5" target="_blank" rel="external">2.2.5 TranslateAnimation</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump6" target="_blank" rel="external">2.2.6 AnimationSet</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump7" target="_blank" rel="external">2.2.7 Animation</a></p><h3 id="2-3-插值器初探"><a href="#2-3-插值器初探" class="headerlink" title="2.3 插值器初探"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/" target="_blank" rel="external">2.3 插值器初探</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump1" target="_blank" rel="external">2.3.1 AccelerateDecelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump2" target="_blank" rel="external">2.3.2 AccelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump3" target="_blank" rel="external">2.3.3 DecelerateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump4" target="_blank" rel="external">2.3.4 LinearInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump5" target="_blank" rel="external">2.3.5 BounceInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump6" target="_blank" rel="external">2.3.6 AnticipateInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump7" target="_blank" rel="external">2.3.7 OvershootInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump8" target="_blank" rel="external">2.3.8 AnticipateOvershootInterpolator</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump9" target="_blank" rel="external">2.3.9 CycleInterpolator</a></p><h3 id="2-4-动画示例"><a href="#2-4-动画示例" class="headerlink" title="2.4 动画示例"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/" target="_blank" rel="external">2.4 动画示例</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump1" target="_blank" rel="external">2.4.1 镜头由远及近效果</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump2" target="_blank" rel="external">2.4.2 加载框效果</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/#jump3" target="_blank" rel="external">2.4.3 扫描动画</a></p><h3 id="2-5-逐帧动画"><a href="#2-5-逐帧动画" class="headerlink" title="2.5 逐帧动画"></a><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">2.5 逐帧动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">2.5.1 XML 实现</a><br><a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">2.5.2 代码实现</a></p><h2 id="第3章-属性动画"><a href="#第3章-属性动画" class="headerlink" title="第3章 属性动画"></a>第3章 属性动画</h2><h3 id="3-1-ValueAnimator-的基本使用"><a href="#3-1-ValueAnimator-的基本使用" class="headerlink" title="3.1 ValueAnimator 的基本使用"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/" target="_blank" rel="external">3.1 ValueAnimator 的基本使用</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump1" target="_blank" rel="external">3.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump2" target="_blank" rel="external">3.1.2 ValueAnimator 的简单使用</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump3" target="_blank" rel="external">3.1.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/#jump4" target="_blank" rel="external">3.1.4 示例：弹跳加载中效果</a></p><h3 id="3-2-自定义插值器与-Evaluator"><a href="#3-2-自定义插值器与-Evaluator" class="headerlink" title="3.2 自定义插值器与 Evaluator"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/" target="_blank" rel="external">3.2 自定义插值器与 Evaluator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/#jump1" target="_blank" rel="external">3.2.1 自定义插值器</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/#jump2" target="_blank" rel="external">3.2.2 Evaluator</a></p><h3 id="3-3-ValueAnimator-进阶——ofObject"><a href="#3-3-ValueAnimator-进阶——ofObject" class="headerlink" title="3.3 ValueAnimator 进阶——ofObject"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/" target="_blank" rel="external">3.3 ValueAnimator 进阶——ofObject</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/#jump1" target="_blank" rel="external">3.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/#jump2" target="_blank" rel="external">3.3.2 示例：抛物动画</a></p><h3 id="3-4-ObjectAnimator"><a href="#3-4-ObjectAnimator" class="headerlink" title="3.4 ObjectAnimator"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/" target="_blank" rel="external">3.4 ObjectAnimator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump1" target="_blank" rel="external">3.4.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump2" target="_blank" rel="external">3.4.2 ObjectAnimator 动画原理</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump3" target="_blank" rel="external">3.4.3 自定义 ObjectAnimator 属性</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump4" target="_blank" rel="external">3.4.4 何时需要实现对应的 get 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/#jump5" target="_blank" rel="external">3.4.5 常用函数</a></p><h3 id="3-5-组合动画——AnimatorSet"><a href="#3-5-组合动画——AnimatorSet" class="headerlink" title="3.5 组合动画——AnimatorSet"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/" target="_blank" rel="external">3.5 组合动画——AnimatorSet</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump1" target="_blank" rel="external">3.5.1 playSequentially() 与 playTogether() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump2" target="_blank" rel="external">3.5.2 AnimatorSet.Builder</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump3" target="_blank" rel="external">3.5.3 AnimatorSet 监听器</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump4" target="_blank" rel="external">3.5.4 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/#jump5" target="_blank" rel="external">3.5.5 示例：路径动画</a></p><h3 id="3-6-Animator-动画的-XML-实现"><a href="#3-6-Animator-动画的-XML-实现" class="headerlink" title="3.6 Animator 动画的 XML 实现"></a><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/" target="_blank" rel="external">3.6 Animator 动画的 XML 实现</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump1" target="_blank" rel="external">3.6.1 animator 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">3.6.2 objectAnimator 标签</a><br><a href="https://xianxiaotao.github.io/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/#jump3" target="_blank" rel="external">3.6.3 set 标签</a></p><h2 id="第4章-属性动画进阶"><a href="#第4章-属性动画进阶" class="headerlink" title="第4章 属性动画进阶"></a>第4章 属性动画进阶</h2><h3 id="4-1-PropertyValuesHolder-与-Keyframe"><a href="#4-1-PropertyValuesHolder-与-Keyframe" class="headerlink" title="4.1 PropertyValuesHolder 与 Keyframe"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/" target="_blank" rel="external">4.1 PropertyValuesHolder 与 Keyframe</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump1" target="_blank" rel="external">4.1.1 PropertyValuesHolder</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump2" target="_blank" rel="external">4.1.2 Keyframe</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump3" target="_blank" rel="external">4.1.3 PropertyValuesHolder 其他函数</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/#jump4" target="_blank" rel="external">4.1.4 示例：电话响铃效果</a></p><h3 id="4-2-ViewPropertyAnimator"><a href="#4-2-ViewPropertyAnimator" class="headerlink" title="4.2 ViewPropertyAnimator"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/" target="_blank" rel="external">4.2 ViewPropertyAnimator</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/#jump1" target="_blank" rel="external">4.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/#jump2" target="_blank" rel="external">4.2.2 常用函数</a></p><h3 id="4-3-为-ViewGroup-内的组件添加动画"><a href="#4-3-为-ViewGroup-内的组件添加动画" class="headerlink" title="4.3 为 ViewGroup 内的组件添加动画"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">4.3 为 ViewGroup 内的组件添加动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">4.3.1 animateLayoutChanges 属性</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">4.3.2 LayoutTransition</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">4.3.3 其他函数</a></p><h3 id="4-4-开源动画库-NineOldAndroids"><a href="#4-4-开源动画库-NineOldAndroids" class="headerlink" title="4.4 开源动画库 NineOldAndroids"></a><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/" target="_blank" rel="external">4.4 开源动画库 NineOldAndroids</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/#jump1" target="_blank" rel="external">4.4.1 NineOldAndroids 中的 ViewPropertyAnimator</a><br><a href="https://xianxiaotao.github.io/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/#jump2" target="_blank" rel="external">4.4.2 NineOldAndroids 中的 ViewHelper</a></p><h2 id="第5章-动画进阶"><a href="#第5章-动画进阶" class="headerlink" title="第5章 动画进阶"></a>第5章 动画进阶</h2><h3 id="5-1-利用-PathMeasure-实现路径动画"><a href="#5-1-利用-PathMeasure-实现路径动画" class="headerlink" title="5.1 利用 PathMeasure 实现路径动画"></a><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">5.1 利用 PathMeasure 实现路径动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">5.1.1 初始化</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">5.1.2 简单函数使用</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">5.1.3 getSegment() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump4" target="_blank" rel="external">5.1.4 getPosTan() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump5" target="_blank" rel="external">5.1.5 getMatrix() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/#jump6" target="_blank" rel="external">5.1.6 示例：支付宝支付成功动画</a></p><h3 id="5-2-SVG-动画"><a href="#5-2-SVG-动画" class="headerlink" title="5.2 SVG 动画"></a><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/" target="_blank" rel="external">5.2 SVG 动画</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump1" target="_blank" rel="external">5.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump2" target="_blank" rel="external">5.2.2 vector 标签与图像显示</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump3" target="_blank" rel="external">5.2.3 动态 Vector</a><br><a href="https://xianxiaotao.github.io/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/#jump4" target="_blank" rel="external">5.2.4 示例：输入搜索动画</a></p><h2 id="第6章-Paint-基本使用"><a href="#第6章-Paint-基本使用" class="headerlink" title="第6章 Paint 基本使用"></a>第6章 Paint 基本使用</h2><h3 id="6-1-硬件加速"><a href="#6-1-硬件加速" class="headerlink" title="6.1 硬件加速"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/" target="_blank" rel="external">6.1 硬件加速</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump1" target="_blank" rel="external">6.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump2" target="_blank" rel="external">6.1.2 软件绘制与硬件加速的区别</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/#jump3" target="_blank" rel="external">6.1.3 禁用 GPU 硬件加速的方法</a></p><h3 id="6-2-文字"><a href="#6-2-文字" class="headerlink" title="6.2 文字"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/" target="_blank" rel="external">6.2 文字</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump1" target="_blank" rel="external">6.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump2" target="_blank" rel="external">6.2.2 绘图四格线与 FontMetrics</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump3" target="_blank" rel="external">6.2.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/#jump4" target="_blank" rel="external">6.2.4 示例：定点写字</a></p><h3 id="6-3-Paint-常用函数"><a href="#6-3-Paint-常用函数" class="headerlink" title="6.3 Paint 常用函数"></a><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/" target="_blank" rel="external">6.3 Paint 常用函数</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#jump1" target="_blank" rel="external">6.3.1 基本设置函数</a><br><a href="https://xianxiaotao.github.io/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/#jump2" target="_blank" rel="external">6.3.2 字体相关函数</a></p><h2 id="第7章-绘图进阶"><a href="#第7章-绘图进阶" class="headerlink" title="第7章 绘图进阶"></a>第7章 绘图进阶</h2><h3 id="7-1-贝济埃曲线"><a href="#7-1-贝济埃曲线" class="headerlink" title="7.1 贝济埃曲线"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/" target="_blank" rel="external">7.1 贝济埃曲线</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump1" target="_blank" rel="external">7.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump2" target="_blank" rel="external">7.1.2 贝济埃曲线之 quadTo</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump3" target="_blank" rel="external">7.1.3 贝济埃曲线之 rQuadTo</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/#jump4" target="_blank" rel="external">7.1.4 示例：波浪效果</a></p><h3 id="7-2-setShadowLayer-与阴影效果"><a href="#7-2-setShadowLayer-与阴影效果" class="headerlink" title="7.2 setShadowLayer 与阴影效果"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/" target="_blank" rel="external">7.2 setShadowLayer 与阴影效果</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump1" target="_blank" rel="external">7.2.1 构造函数</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump2" target="_blank" rel="external">7.2.2 清除阴影</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/#jump3" target="_blank" rel="external">7.2.3 示例：给文字添加阴影</a></p><h3 id="7-3-BlurMaskFilter-发光效果和图片阴影"><a href="#7-3-BlurMaskFilter-发光效果和图片阴影" class="headerlink" title="7.3 BlurMaskFilter 发光效果和图片阴影"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/" target="_blank" rel="external">7.3 BlurMaskFilter 发光效果和图片阴影</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump1" target="_blank" rel="external">7.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump2" target="_blank" rel="external">7.3.2 给图片添加纯色阴影</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/#jump3" target="_blank" rel="external">7.3.3 封装控件</a></p><h3 id="7-4-Shader-与-BitmapShader"><a href="#7-4-Shader-与-BitmapShader" class="headerlink" title="7.4 Shader 与 BitmapShader"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/" target="_blank" rel="external">7.4 Shader 与 BitmapShader</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump1" target="_blank" rel="external">7.4.1 Shader 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump2" target="_blank" rel="external">7.4.2 BitmapShader 的基本用法</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump3" target="_blank" rel="external">7.4.3 示例一：望远镜效果</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/#jump4" target="_blank" rel="external">7.4.4 示例二：生成不规则头像</a></p><h3 id="7-5-Shader-之-LinearGradient"><a href="#7-5-Shader-之-LinearGradient" class="headerlink" title="7.5 Shader 之 LinearGradient"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/" target="_blank" rel="external">7.5 Shader 之 LinearGradient</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/#jump1" target="_blank" rel="external">7.5.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/#jump2" target="_blank" rel="external">7.5.2 示例：闪光文字效果</a></p><h3 id="7-6-Shader-之-RadialGradient"><a href="#7-6-Shader-之-RadialGradient" class="headerlink" title="7.6 Shader 之 RadialGradient"></a><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/" target="_blank" rel="external">7.6 Shader 之 RadialGradient</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump1" target="_blank" rel="external">7.6.1 双色渐变</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump2" target="_blank" rel="external">7.6.2 多色渐变</a><br><a href="https://xianxiaotao.github.io/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/#jump3" target="_blank" rel="external">7.6.3 TileMode 填充模式</a></p><h2 id="第8章-混合模式"><a href="#第8章-混合模式" class="headerlink" title="第8章 混合模式"></a>第8章 混合模式</h2><h3 id="8-1-混合模式之-AvoidXfermode"><a href="#8-1-混合模式之-AvoidXfermode" class="headerlink" title="8.1 混合模式之 AvoidXfermode"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/" target="_blank" rel="external">8.1 混合模式之 AvoidXfermode</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump1" target="_blank" rel="external">8.1.1 混合模式概述</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump2" target="_blank" rel="external">8.1.2 AvoidXfermode</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump3" target="_blank" rel="external">8.1.3 AvoidXfermode 绘制原理</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/#jump4" target="_blank" rel="external">8.1.4 AvoidXfermode 之 Mode.AVOID</a></p><h3 id="8-2-混合模式之-PorterDuffXfermode"><a href="#8-2-混合模式之-PorterDuffXfermode" class="headerlink" title="8.2 混合模式之 PorterDuffXfermode"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/" target="_blank" rel="external">8.2 混合模式之 PorterDuffXfermode</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/#jump1" target="_blank" rel="external">8.2.1 PorterDuffXfermode 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/#jump2" target="_blank" rel="external">8.2.2 颜色叠加相关模式</a></p><h3 id="8-3-PorterDuffXfermode-之源图像模式"><a href="#8-3-PorterDuffXfermode-之源图像模式" class="headerlink" title="8.3 PorterDuffXfermode 之源图像模式"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">8.3 PorterDuffXfermode 之源图像模式</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump1" target="_blank" rel="external">8.3.1 Mode.SRC</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump2" target="_blank" rel="external">8.3.2 Mode.SRC_IN</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump3" target="_blank" rel="external">8.3.3 Mode.SRC_OUT</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump4" target="_blank" rel="external">8.3.4 Mode.SRC_OVER</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/#jump5" target="_blank" rel="external">8.3.5 Mode.SRC_ATOP</a></p><h3 id="8-4-目标图像模式与其他模式"><a href="#8-4-目标图像模式与其他模式" class="headerlink" title="8.4 目标图像模式与其他模式"></a><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">8.4 目标图像模式与其他模式</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump1" target="_blank" rel="external">8.4.1 目标图像模式</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump2" target="_blank" rel="external">8.4.2 其他模式——Mode.CLEAR</a><br><a href="https://xianxiaotao.github.io/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/#jump3" target="_blank" rel="external">8.4.3 模式总结</a></p><h2 id="第9章-Canvas-与图层"><a href="#第9章-Canvas-与图层" class="headerlink" title="第9章 Canvas 与图层"></a>第9章 Canvas 与图层</h2><h3 id="9-1-获取-Canvas-对象的方法"><a href="#9-1-获取-Canvas-对象的方法" class="headerlink" title="9.1 获取 Canvas 对象的方法"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/" target="_blank" rel="external">9.1 获取 Canvas 对象的方法</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump1" target="_blank" rel="external">9.1.1 方法一：重写 onDraw()、dispatchDraw() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump2" target="_blank" rel="external">9.1.2 方法二：使用 Bitmap 创建</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/#jump3" target="_blank" rel="external">9.1.3 方法三：调用 SurfaceHolder.lockCanvas() 函数</a></p><h3 id="9-2-图层与画布"><a href="#9-2-图层与画布" class="headerlink" title="9.2 图层与画布"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/" target="_blank" rel="external">9.2 图层与画布</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump1" target="_blank" rel="external">9.2.1 saveLayer() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump2" target="_blank" rel="external">9.2.2 画布与图层</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/#jump3" target="_blank" rel="external">9.2.3 saveLayer() &amp; saveLayerAlpha()</a></p><h3 id="9-3-Flag-的具体含义-已过时"><a href="#9-3-Flag-的具体含义-已过时" class="headerlink" title="9.3 Flag 的具体含义 已过时"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94Flag%20%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/" target="_blank" rel="external">9.3 Flag 的具体含义 已过时</a></h3><h3 id="9-4-恢复画布"><a href="#9-4-恢复画布" class="headerlink" title="9.4 恢复画布"></a><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/" target="_blank" rel="external">9.4 恢复画布</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/#jump1" target="_blank" rel="external">9.4.1 restoreToCount(int count)</a><br><a href="https://xianxiaotao.github.io/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/#jump2" target="_blank" rel="external">9.4.2 restore() &amp; restoreToCount(int count) 的关系</a></p><h2 id="第10章-Android-画布"><a href="#第10章-Android-画布" class="headerlink" title="第10章 Android 画布"></a>第10章 Android 画布</h2><h3 id="10-1-ShapeDrawable"><a href="#10-1-ShapeDrawable" class="headerlink" title="10.1 ShapeDrawable"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/" target="_blank" rel="external">10.1 ShapeDrawable</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump1" target="_blank" rel="external">10.1.1 shape 标签与 GradientDrawable</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump2" target="_blank" rel="external">10.1.2 ShapDrawable 的构造函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump3" target="_blank" rel="external">10.1.3 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump4" target="_blank" rel="external">10.1.4 自定义 Drawable</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/#jump5" target="_blank" rel="external">10.1.5 Drawable 与 Bitmap 对比</a></p><h3 id="10-2-Bitmap"><a href="#10-2-Bitmap" class="headerlink" title="10.2 Bitmap"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/" target="_blank" rel="external">10.2 Bitmap</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump1" target="_blank" rel="external">10.2.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump2" target="_blank" rel="external">10.2.2 创建 Bitmap 方法一：BitmapFactory</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump3" target="_blank" rel="external">10.2.3 BitmapFactory.Options</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump4" target="_blank" rel="external">10.2.4 创建 Bitmap 方法二：Bitmap 静态方法</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump5" target="_blank" rel="external">10.2.5 常用函数</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/#jump6" target="_blank" rel="external">10.2.6 常见问题</a></p><h3 id="10-3-SurfaceView"><a href="#10-3-SurfaceView" class="headerlink" title="10.3 SurfaceView"></a><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/" target="_blank" rel="external">10.3 SurfaceView</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump1" target="_blank" rel="external">10.3.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump2" target="_blank" rel="external">10.3.2 基本用法</a><br><a href="https://xianxiaotao.github.io/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/#jump3" target="_blank" rel="external">10.3.3 双缓冲技术</a></p><h2 id="第11章-Matrix-与坐标变换"><a href="#第11章-Matrix-与坐标变换" class="headerlink" title="第11章 Matrix 与坐标变换"></a>第11章 Matrix 与坐标变换</h2><h3 id="11-1-矩阵运算"><a href="#11-1-矩阵运算" class="headerlink" title="11.1 矩阵运算"></a><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/" target="_blank" rel="external">11.1 矩阵运算</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump1" target="_blank" rel="external">11.1.1 矩阵的加法与减法</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump2" target="_blank" rel="external">11.1.2 矩阵与数的乘法</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/#jump3" target="_blank" rel="external">11.1.3 矩阵与矩阵的乘法</a></p><h3 id="11-2-ColorMatrix-色彩变换"><a href="#11-2-ColorMatrix-色彩变换" class="headerlink" title="11.2 ColorMatrix 色彩变换"></a><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/" target="_blank" rel="external">11.2 ColorMatrix 色彩变换</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump1" target="_blank" rel="external">11.2.1 色彩变换矩阵</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump2" target="_blank" rel="external">11.2.2 色彩的几种运算方式</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump3" target="_blank" rel="external">11.2.3 ColorMatrix 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/#jump4" target="_blank" rel="external">11.2.4 ColorMatrix 相乘</a></p><h2 id="第12章-封装控件"><a href="#第12章-封装控件" class="headerlink" title="第12章 封装控件"></a>第12章 封装控件</h2><h3 id="12-1-自定义属性与自定义-Style"><a href="#12-1-自定义属性与自定义-Style" class="headerlink" title="12.1 自定义属性与自定义 Style"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/" target="_blank" rel="external">12.1 自定义属性与自定义 Style</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump1" target="_blank" rel="external">12.1.1 示例</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump2" target="_blank" rel="external">12.1.2 在 XML 中使用自定义的属性</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump3" target="_blank" rel="external">12.1.3 在代码中获取自定义属性的值</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/#jump4" target="_blank" rel="external">12.1.4 declare-styleable 标签其他属性的用法</a></p><h3 id="12-2-测量与布局"><a href="#12-2-测量与布局" class="headerlink" title="12.2 测量与布局"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/" target="_blank" rel="external">12.2 测量与布局</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump1" target="_blank" rel="external">12.2.1 ViewGroup 绘制流程</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump2" target="_blank" rel="external">12.2.2 onMeasure() 函数与 MeasureSpec</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump3" target="_blank" rel="external">12.2.3 onLayout() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/#jump4" target="_blank" rel="external">12.2.4 获取子控件 margin 值的方法</a></p><h3 id="12-3-实现-FlowLayout-容器"><a href="#12-3-实现-FlowLayout-容器" class="headerlink" title="12.3 实现 FlowLayout 容器"></a><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/" target="_blank" rel="external">12.3 实现 FlowLayout 容器</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump1" target="_blank" rel="external">12.3.1 XML 布局</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump2" target="_blank" rel="external">12.3.2 提取 margin 值与重写 onMeasure() 函数</a><br><a href="https://xianxiaotao.github.io/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/#jump3" target="_blank" rel="external">12.3.3 完整代码</a></p><h2 id="第13章-控件高级属性"><a href="#第13章-控件高级属性" class="headerlink" title="第13章 控件高级属性"></a>第13章 控件高级属性</h2><h3 id="13-1-GestureDetector-手势检测"><a href="#13-1-GestureDetector-手势检测" class="headerlink" title="13.1 GestureDetector 手势检测"></a><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/" target="_blank" rel="external">13.1 GestureDetector 手势检测</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump1" target="_blank" rel="external">13.1.1 概述</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump2" target="_blank" rel="external">13.1.2 GestureDetector.OnGestureListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump3" target="_blank" rel="external">13.1.3 GestureDetector.OnDoubleTapListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump4" target="_blank" rel="external">13.1.4 GestureDetector.SimpleOnGestureListener</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/#jump5" target="_blank" rel="external">13.1.5 onFling() 函数的应用</a></p><h3 id="13-2-Window-与-WindowManager"><a href="#13-2-Window-与-WindowManager" class="headerlink" title="13.2 Window 与 WindowManager"></a><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/" target="_blank" rel="external">13.2 Window 与 WindowManager</a></h3><p><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/#jump1" target="_blank" rel="external">13.2.1 Window 与 WindowManager 的关系</a><br><a href="https://xianxiaotao.github.io/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/#jump2" target="_blank" rel="external">13.2.2 示例：腾讯手机管家悬浮窗的小火箭效果</a></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>X001 圆角圆形 ImageView</title>
      <link href="/2019/09/01/Custom%20View/X001%20%E5%9C%86%E8%A7%92%E5%9C%86%E5%BD%A2%20ImageView/"/>
      <url>/2019/09/01/Custom%20View/X001%20%E5%9C%86%E8%A7%92%E5%9C%86%E5%BD%A2%20ImageView/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-99c14f4dff5bc857.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>鉴于 Android 提供的 ImageView 控件已经非常完善，不仅处理好了各种缩放问题，而且有着很好的兼容性，还实现了显示图片等一系列的任务，我们只要在它的基础上添加一个显示圆角圆形的功能即可。</p><h3 id="一、属性配置"><a href="#一、属性配置" class="headerlink" title="一、属性配置"></a>一、属性配置</h3><p>首先创建一个 res/values/attrs.xml 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;RoundImageView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;type&quot; format=&quot;enum&quot;&gt;</div><div class="line">            &lt;enum name=&quot;circle&quot; value=&quot;1&quot;/&gt;</div><div class="line">            &lt;enum name=&quot;round&quot; value=&quot;2&quot;/&gt;</div><div class="line">        &lt;/attr&gt;</div><div class="line">        &lt;attr name=&quot;radius&quot; format=&quot;dimension&quot;/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><h3 id="二、代码实现"><a href="#二、代码实现" class="headerlink" title="二、代码实现"></a>二、代码实现</h3><h4 id="1-思路"><a href="#1-思路" class="headerlink" title="1. 思路"></a>1. 思路</h4><ul><li>定义一个 Java 类 RoundImageView，继承自 ImageView，重写其构造方法，获取配置属性进行初始化。</li><li>重写 onMeasure 方法，当模式为圆形的时候使其控件的宽高一致。</li><li>重写 onDraw 方法，增加两种模式处理逻辑。</li></ul><h4 id="2-完整代码"><a href="#2-完整代码" class="headerlink" title="2. 完整代码"></a>2. 完整代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapShader;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Matrix;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.RectF;</div><div class="line">import android.graphics.Shader;</div><div class="line">import android.graphics.drawable.Drawable;</div><div class="line">import android.os.Build;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.util.TypedValue;</div><div class="line"></div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class RoundImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private static final int MODE_NONE = 0;         // 普通模式，默认</div><div class="line">    private static final int MODE_CIRCLE = 1;       // 圆形模式</div><div class="line">    private static final int MODE_ROUND = 2;        // 圆角矩形模式</div><div class="line"></div><div class="line">    private int currMode = MODE_NONE;</div><div class="line">    private int currRound = dp2px(10);              // 圆角半径</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private RectF mRectF = null;</div><div class="line">    private Drawable mPreDrawable = null;</div><div class="line"></div><div class="line">    public RoundImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        this(context, attrs, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        obtainStyledAttrs(context, attrs, defStyleAttr);</div><div class="line">        initViews();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void obtainStyledAttrs(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.RoundImageView,</div><div class="line">                defStyleAttr, 0);</div><div class="line">        currMode = a.getInt(R.styleable.RoundImageView_type, MODE_NONE);</div><div class="line">        currRound = a.getDimensionPixelSize(R.styleable.RoundImageView_radius, currRound);</div><div class="line">        a.recycle();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initViews() &#123;</div><div class="line">        mPaint = new Paint(Paint.ANTI_ALIAS_FLAG | Paint.DITHER_FLAG);</div><div class="line">        mRectF = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        if (currMode == MODE_CIRCLE) &#123;</div><div class="line">            int result = Math.min(getMeasuredWidth(), getMeasuredHeight());</div><div class="line">            setMeasuredDimension(result, result);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        Drawable drawable = getDrawable();</div><div class="line">        Matrix drawMatrix = getImageMatrix();</div><div class="line">        if (drawable == null) &#123;</div><div class="line">            return; // couldn&apos;t resolve the URI</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (drawable.getIntrinsicWidth() == 0 || drawable.getIntrinsicHeight() == 0) &#123;</div><div class="line">            return; // nothing to draw (empty bounds)</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (drawMatrix == null &amp;&amp; getPaddingTop() == 0 &amp;&amp; getPaddingLeft() == 0) &#123;</div><div class="line">            drawable.draw(canvas);</div><div class="line">        &#125; else &#123;</div><div class="line">            final int saveCount = canvas.getSaveCount();</div><div class="line">            canvas.save();</div><div class="line"></div><div class="line">            if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.JELLY_BEAN) &#123;</div><div class="line">                if (getCropToPadding()) &#123;</div><div class="line">                    final int scrollX = getScrollX();</div><div class="line">                    final int scrollY = getScrollY();</div><div class="line">                    canvas.clipRect(scrollX + getPaddingLeft(), scrollY + getPaddingTop(),</div><div class="line">                            scrollX + getRight() - getLeft() - getPaddingRight(),</div><div class="line">                            scrollY + getBottom() - getTop() - getPaddingBottom());</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            canvas.translate(getPaddingLeft(), getPaddingTop());</div><div class="line">            // 当为圆形模式的时候</div><div class="line">            if (currMode == MODE_CIRCLE) &#123;</div><div class="line">                setBitmapShader(drawable);</div><div class="line">                canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, getWidth() / 2f, mPaint);</div><div class="line">            &#125;</div><div class="line">            // 当为圆角模式的时候</div><div class="line">            else if (currMode == MODE_ROUND) &#123;</div><div class="line">                setBitmapShader(drawable);</div><div class="line">                mRectF.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</div><div class="line">                canvas.drawRoundRect(mRectF, currRound, currRound, mPaint);</div><div class="line">            &#125; else &#123;</div><div class="line">                if (drawMatrix != null) &#123;</div><div class="line">                    canvas.concat(drawMatrix);</div><div class="line">                &#125;</div><div class="line">                drawable.draw(canvas);</div><div class="line">            &#125;</div><div class="line">            canvas.restoreToCount(saveCount);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void setBitmapShader(Drawable drawable) &#123;</div><div class="line">        // 防止多次重 new 对象</div><div class="line">        if (drawable != null &amp;&amp; drawable != mPreDrawable) &#123;</div><div class="line">            Bitmap bitmap = drawable2Bitmap(drawable);</div><div class="line">            mPaint.setShader(new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP));</div><div class="line">            mPreDrawable = drawable;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * drawable 转换成 bitmap</div><div class="line">     */</div><div class="line">    private Bitmap drawable2Bitmap(Drawable drawable) &#123;</div><div class="line">        if (drawable == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bitmap);</div><div class="line">        // 根据传递的 scaleType 获取 matrix 对象，设置给 bitmap</div><div class="line">        Matrix matrix = getImageMatrix();</div><div class="line">        if (matrix != null) &#123;</div><div class="line">            canvas.concat(matrix);</div><div class="line">        &#125;</div><div class="line">        drawable.draw(canvas);</div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private int dp2px(float value) &#123;</div><div class="line">        return (int) TypedValue.applyDimension(TypedValue.COMPLEX_UNIT_DIP, value,</div><div class="line">                getResources().getDisplayMetrics());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 onDraw 方法中，以下代码是我们添加的逻辑，其余代码为 ImageView 源代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">Drawable drawable = getDrawable();</div><div class="line">Matrix drawMatrix = getImageMatrix();</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">// 当为圆形模式的时候</div><div class="line">if (currMode == MODE_CIRCLE) &#123;</div><div class="line">    setBitmapShader(drawable);</div><div class="line">    canvas.drawCircle(getWidth() / 2f, getHeight() / 2f, getWidth() / 2f, mPaint);</div><div class="line">&#125;</div><div class="line">// 当为圆角模式的时候</div><div class="line">else if (currMode == MODE_ROUND) &#123;</div><div class="line">    setBitmapShader(drawable);</div><div class="line">    mRectF.set(getPaddingLeft(), getPaddingTop(), getWidth() - getPaddingRight(), getHeight() - getPaddingBottom());</div><div class="line">    canvas.drawRoundRect(mRectF, currRound, currRound, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-在布局文件中使用"><a href="#3-在布局文件中使用" class="headerlink" title="3. 在布局文件中使用"></a>3. 在布局文件中使用</h4><p>效果如首图所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;</div><div class="line">            app:type=&quot;round&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;fitXY&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;100dp&quot;</div><div class="line">            android:layout_margin=&quot;20dp&quot;</div><div class="line">            android:src=&quot;@drawable/meinv&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;</div><div class="line">            app:type=&quot;circle&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot;</div><div class="line">            app:type=&quot;round&quot; /&gt;</div><div class="line">        &lt;com.xxt.xtest.RoundImageView</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:layout_width=&quot;50dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:src=&quot;@color/colorAccent&quot;</div><div class="line">            app:type=&quot;circle&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 设计模式——建造者模式</title>
      <link href="/2019/08/08/PATTERN/02%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/08/PATTERN/02%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%BB%BA%E9%80%A0%E8%80%85%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>建造者模式：<strong>将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的表示</strong>。</p><p>Builder 模式是一步一步创建一个复杂对象的创建型模式，它允许用户在不知道内部构建细节的情况下，可以更精细地控制对象的构造流程。该模式是为了将构建复杂对象的过程和它的部件解耦，使得构建过程和部件的表示隔离开来。</p><p>因为一个负责对象有大量组成部分，如汽车有车轮、方向盘、发动机、车盘，还有各种小零件，如何将这些部件装配成一辆汽车，这个装配过程很漫长，也很复杂，对于这种情况，为了在构建过程中对外部隐藏实现细节，就可以使用 Builder 模式将部件和组装过程分离，使得构建过程和部件都可以自由扩展，两者之间的耦合也降到最低。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>1）相同的方法，不同的执行顺序，产生不同的事件结果时。<br>2）多个部件或零件，都可以装配到一个对象中，但是产生的运行结果又不相同时。<br>3）产品类非常复杂，或者产品类中的调用顺序不同产生了不同的作用，这个时候使用建造者模式非常合适。<br>4）当初始化一个对象特别复杂，如参数多，且很多参数都具有默认值时。</p><h4 id="UML-类图"><a href="#UML-类图" class="headerlink" title="UML 类图"></a>UML 类图</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3ce7e4cc79db97a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从上图可以看到，经典 Buider 模式中有四个角色：</p><ul><li>Product 产品类 —— 产品的抽象类；</li><li>Builder —— 抽象 Builder 类，规范产品的组建，一般是由子类实现具体的组建过程；</li><li>ConcreteBuilder —— 具体的 Builder 类；</li><li>Director —— 统一组装过程。</li></ul><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><p>计算机的组装过程较为复杂，并且组装顺序是不固定的，为了易于理解，我们把计算机组装的过程简化为构建主机、设置操作系统、设置显示器 3 个部分，然后通过 Director 和具体的 Builder 来构建计算机对象。请看下面示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">// 计算机抽象类，即 Product 角色</div><div class="line">public abstract class Computer &#123;</div><div class="line">    protected String mBoard;</div><div class="line">    protected String mDisplay;</div><div class="line">    protected String mOS;</div><div class="line"></div><div class="line">    protected Computer() &#123;&#125;</div><div class="line"></div><div class="line">    public void setBoard(String board) &#123;</div><div class="line">        this.mBoard = board;</div><div class="line">    &#125;</div><div class="line">    public void setDisplay(String display) &#123;</div><div class="line">        this.mDisplay = display;</div><div class="line">    &#125;</div><div class="line">    public abstract void setOS();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Computer [&quot; + &quot;mBoard=&apos;&quot; + mBoard + &apos;\&apos;&apos; +</div><div class="line">                &quot;, mDisplay=&apos;&quot; + mDisplay + &apos;\&apos;&apos; + &quot;, mOS=&apos;&quot; + mOS + &apos;]&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体的 Computer 类，Macbook</div><div class="line">public class Macbook extends Computer &#123;</div><div class="line">    protected Macbook() &#123;&#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setOS() &#123;</div><div class="line">        mOS = &quot;Mac OS X 10.10&quot;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 抽象 Builder 类</div><div class="line">public abstract class Builder &#123;</div><div class="line">    public abstract void buildBoard(String board);</div><div class="line">    public abstract void buildDisplay(String display);</div><div class="line">    public abstract void buildOS();</div><div class="line">    public abstract Computer create();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 具体的 Builder 类，MacbookBuilder</div><div class="line">public class MacbookBuilder extends Builder &#123;</div><div class="line">    private Computer mComputer = new Macbook();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void buildBoard(String board) &#123;</div><div class="line">        mComputer.setBoard(board);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void buildDisplay(String display) &#123;</div><div class="line">        mComputer.setDisplay(display);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void buildOS() &#123;</div><div class="line">        mComputer.setOS();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Computer create() &#123;</div><div class="line">        return mComputer;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Director 类，负责构造 Computer</div><div class="line">public class Director &#123;</div><div class="line">    Builder mBuilder = null;</div><div class="line"></div><div class="line">    public Director(Builder builder) &#123;</div><div class="line">        this.mBuilder = builder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void construct(String board, String display) &#123;</div><div class="line">        mBuilder.buildBoard(board);</div><div class="line">        mBuilder.buildDisplay(display);</div><div class="line">        mBuilder.buildOS();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试代码</div><div class="line">public class Test &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Builder builder = new MacbookBuilder();</div><div class="line">        Director pcDirector = new Director(builder);</div><div class="line">        pcDirector.construct(&quot;英特尔主板&quot;, &quot;Retina 显示器&quot;);</div><div class="line">        System.out.println(&quot;Computer Info : &quot; + builder.create().toString());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出结果：</p><blockquote><p>Computer Info : Computer [mBoard=英特尔主板, mDisplay=Retina 显示器, mOS=Mac OS X 10.10]</p></blockquote><p>上述示例中，通过具体的 MacbookBuilder 来构建 Macbook 对象，而 Director 封装了构建复杂产品对象的过程，对外隐藏构建细节。Builder 与 Director 一起将一个复杂对象的构建与它的表示分离，使得同样的构建过程可以创建不同的对象。</p><p>值得注意的是，在现实开发过程当中，Director 角色经常会被省略。而直接使用一个 Builder 来进行对象的组装，这个 Builder 通常为链式调用，它的关键点是每个 setter 方法都返回自身，也就是 return this，这样就使得 setter 方法可以链式调用，代码大致如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new TestBuilder().setA(&quot;A&quot;).setB(&quot;B&quot;).create();</div></pre></td></tr></table></figure></p><p>通过这种形式不仅去除了 Director 角色，整个结构也更加简单，也能对 Product 对象的组装过程有更精细的控制。</p><hr><h3 id="ANDROID-源码中的-Builder-模式"><a href="#ANDROID-源码中的-Builder-模式" class="headerlink" title="ANDROID 源码中的 Builder 模式"></a>ANDROID 源码中的 Builder 模式</h3><hr><p>在 ANDROID 源码中，最常用到的 Builder 模式就是 AlertDialog.Builder，使用该 Builder 来构建复杂的 AlertDialog 对象。在开发过程中，我们经常用到 AlertDialog，具体示例如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">private void showDialog(final Context context) &#123;</div><div class="line">    AlertDialog.Builder builder = new AlertDialog.Builder(context);</div><div class="line">    builder.setIcon(R.drawable.taiji)</div><div class="line">            .setTitle(&quot;Title&quot;)</div><div class="line">            .setMessage(&quot;Message&quot;)</div><div class="line">            .setPositiveButton(&quot;Button1&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                    Toast.makeText(context, &quot;Button1&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .setNeutralButton(&quot;Button2&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                    Toast.makeText(context, &quot;Button2&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .setNegativeButton(&quot;Button3&quot;, new DialogInterface.OnClickListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(DialogInterface dialog, int which) &#123;</div><div class="line">                    Toast.makeText(context, &quot;Button3&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">                &#125;</div><div class="line">            &#125;)</div><div class="line">            .create()</div><div class="line">            .show();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>显示结果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aada48ecfbd9eca5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从类名就可以看出这就是一个 Builder 模式，通过 Builder 对象来组装 Dialog 的各个部分，如 title、buttons、message 等，将 Dialog 的构造和表示进行分离。下面看看 AlertDialog 的相关源码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">public class AlertDialog extends AppCompatDialog implements DialogInterface &#123;</div><div class="line">    // AlertController 接收 Builder 成员变量 p 中的各个参数</div><div class="line">    final AlertController mAlert;</div><div class="line"></div><div class="line">    protected AlertDialog(@NonNull Context context, @StyleRes int themeResId) &#123;</div><div class="line">        super(context, resolveDialogTheme(context, themeResId));</div><div class="line">        // 构造 AlertController</div><div class="line">        mAlert = new AlertController(getContext(), this, getWindow());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setTitle(CharSequence title) &#123;</div><div class="line">        super.setTitle(title);</div><div class="line">        mAlert.setTitle(title);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setMessage(CharSequence message) &#123;</div><div class="line">        mAlert.setMessage(message);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    public static class Builder &#123;</div><div class="line">        // 1、存储 AlertDialog 的各个参数，如 title、message、icon 等</div><div class="line">        private final AlertController.AlertParams P;</div><div class="line">        private final int mTheme;</div><div class="line"></div><div class="line">        public Builder(@NonNull Context context) &#123;</div><div class="line">            this(context, resolveDialogTheme(context, 0));</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder(@NonNull Context context, @StyleRes int themeResId) &#123;</div><div class="line">            P = new AlertController.AlertParams(new ContextThemeWrapper(</div><div class="line">                    context, resolveDialogTheme(context, themeResId)));</div><div class="line">            mTheme = themeResId;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 代码省略</div><div class="line"></div><div class="line">        // 2、设置各种参数</div><div class="line">        public Builder setTitle(@Nullable CharSequence title) &#123;</div><div class="line">            P.mTitle = title;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setMessage(@StringRes int messageId) &#123;</div><div class="line">            P.mMessage = P.mContext.getText(messageId);</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setView(View view) &#123;</div><div class="line">            P.mView = view;</div><div class="line">            P.mViewLayoutResId = 0;</div><div class="line">            P.mViewSpacingSpecified = false;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 3、构建 AlertDialog，传递参数</div><div class="line">        public AlertDialog create() &#123;</div><div class="line">            // 4、调用 new AlertDialog 构造对象，并且将参数传递给个体 AlertDialog</div><div class="line">            final AlertDialog dialog = new AlertDialog(P.mContext, mTheme);</div><div class="line">            // 5、将 P 中的参数应用到 dialog 中的 mAlert 对象中</div><div class="line">            P.apply(dialog.mAlert);</div><div class="line">            dialog.setCancelable(P.mCancelable);</div><div class="line">            if (P.mCancelable) &#123;</div><div class="line">                dialog.setCanceledOnTouchOutside(true);</div><div class="line">            &#125;</div><div class="line">            dialog.setOnCancelListener(P.mOnCancelListener);</div><div class="line">            dialog.setOnDismissListener(P.mOnDismissListener);</div><div class="line">            if (P.mOnKeyListener != null) &#123;</div><div class="line">                dialog.setOnKeyListener(P.mOnKeyListener);</div><div class="line">            &#125;</div><div class="line">            return dialog;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述代码中，Builder 类可以设置 AlertDialog 中的 title、message、button 等参数，这些参数都存储在类型为 AlertController.AlertParams 的成员变量 P 中，AlertController.AlertParams 中包含了与 AlertDialog 视图中对应的成员变量。在调用 Builder 类的 create 函数时会创建 AlertDialog，并且将 Builder 成员变量 P 中保存的参数应用到 AlertDialog 的 mAlert 对象中，即 P.apply(dialog.mAlert) 代码段。我们再看看 apply 函数的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public void apply(AlertController dialog) &#123;</div><div class="line">    if (mCustomTitleView != null) &#123;</div><div class="line">        dialog.setCustomTitle(mCustomTitleView);</div><div class="line">    &#125; else &#123;</div><div class="line">        if (mTitle != null) &#123;</div><div class="line">            dialog.setTitle(mTitle);</div><div class="line">        &#125;</div><div class="line">        if (mIcon != null) &#123;</div><div class="line">            dialog.setIcon(mIcon);</div><div class="line">        &#125;</div><div class="line">        if (mIconId != 0) &#123;</div><div class="line">            dialog.setIcon(mIconId);</div><div class="line">        &#125;</div><div class="line">        if (mIconAttrId != 0) &#123;</div><div class="line">            dialog.setIcon(dialog.getIconAttributeResId(mIconAttrId));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    if (mMessage != null) &#123;</div><div class="line">        dialog.setMessage(mMessage);</div><div class="line">    &#125;</div><div class="line">    if (mPositiveButtonText != null || mPositiveButtonIcon != null) &#123;</div><div class="line">        dialog.setButton(DialogInterface.BUTTON_POSITIVE, mPositiveButtonText,</div><div class="line">                mPositiveButtonListener, null, mPositiveButtonIcon);</div><div class="line">    &#125;</div><div class="line">    if (mNegativeButtonText != null || mNegativeButtonIcon != null) &#123;</div><div class="line">        dialog.setButton(DialogInterface.BUTTON_NEGATIVE, mNegativeButtonText,</div><div class="line">                mNegativeButtonListener, null, mNegativeButtonIcon);</div><div class="line">    &#125;</div><div class="line">    if (mNeutralButtonText != null || mNeutralButtonIcon != null) &#123;</div><div class="line">        dialog.setButton(DialogInterface.BUTTON_NEUTRAL, mNeutralButtonText,</div><div class="line">                mNeutralButtonListener, null, mNeutralButtonIcon);</div><div class="line">    &#125;</div><div class="line">    // For a list, the client can either supply an array of items or an</div><div class="line">    // adapter or a cursor</div><div class="line">    if ((mItems != null) || (mCursor != null) || (mAdapter != null)) &#123;</div><div class="line">        createListView(dialog);</div><div class="line">    &#125;</div><div class="line">    if (mView != null) &#123;</div><div class="line">        if (mViewSpacingSpecified) &#123;</div><div class="line">            dialog.setView(mView, mViewSpacingLeft, mViewSpacingTop, </div><div class="line">                    mViewSpacingRight, mViewSpacingBottom);</div><div class="line">        &#125; else &#123;</div><div class="line">            dialog.setView(mView);</div><div class="line">        &#125;</div><div class="line">    &#125; else if (mViewLayoutResId != 0) &#123;</div><div class="line">        dialog.setView(mViewLayoutResId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 apply 函数中，只是将 AlertParams 参数设置到 AlertController 中，例如，将标题设置到 Dialog 对应的标题视图中，将 Message 设置到内容视图中等。当我们获取到 AlertDialog 对象后，通过 show 函数就可以显示这个对话框。而 show 函数最终调用的是 Dialog 类的 show 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class Dialog implements DialogInterface, Window.Callback,</div><div class="line">        KeyEvent.Callback, OnCreateContextMenuListener, </div><div class="line">        Window.OnWindowDismissedCallback &#123;</div><div class="line">    </div><div class="line">    // 代码省略</div><div class="line">    </div><div class="line">    public void show() &#123;</div><div class="line">        // 已经是显示状态，则return</div><div class="line">        if (mShowing) &#123;</div><div class="line">            if (mDecor != null) &#123;</div><div class="line">                if (mWindow.hasFeature(Window.FEATURE_ACTION_BAR)) &#123;</div><div class="line">                    mWindow.invalidatePanelMenu(Window.FEATURE_ACTION_BAR);</div><div class="line">                &#125;</div><div class="line">                mDecor.setVisibility(View.VISIBLE);</div><div class="line">            &#125;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        mCanceled = false;</div><div class="line"></div><div class="line">        // 1、onCreate 调用</div><div class="line">        if (!mCreated) &#123;</div><div class="line">            dispatchOnCreate(null);</div><div class="line">        &#125;</div><div class="line">        // 2、onStart</div><div class="line">        onStart();</div><div class="line">        // 3、获取 DecorView</div><div class="line">        mDecor = mWindow.getDecorView();</div><div class="line"></div><div class="line">        // 代码省略</div><div class="line"></div><div class="line">        // 4、获取布局参数</div><div class="line">        WindowManager.LayoutParams l = mWindow.getAttributes();</div><div class="line"></div><div class="line">        // 5、将 mDecor 添加到 WindowManager 中</div><div class="line">        mWindowManager.addView(mDecor, l);</div><div class="line">        mShowing = true;</div><div class="line">        // 发送一个显示 Dialog 的消息</div><div class="line">        sendShowMessage();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 show 函数中主要做了如下几个事情：<br>1）通过 dispatchOnCreate 函数来调用 AlertDialog 的 onCreate 函数；<br>2）然后调用 AlertDialog 的 onStart 函数；<br>3）最后将 Dialog 的 DecorView 添加到 WindowManager 中。</p><blockquote><p>这里的 AlertDialog.Builder 同时扮演了上文中提到的 Builder、ConcreteBuilder、Director 的角色，简化了 Builder 模式的设计。当模块比较稳定，不存在一些变化时，可以在经典模式实现的基础上做出一些精简，而不是照搬 GOF 上的经典实现，更不要生搬硬套，使程序失去架构之美。</p></blockquote><hr><h3 id="Builder-模式实战"><a href="#Builder-模式实战" class="headerlink" title="Builder 模式实战"></a>Builder 模式实战</h3><hr><p>配置 ImageLoader 的参数：缓存、图片加载中显示的图片、加载失败后显示的图片、图片加载策略、线程数等。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    // 图片加载配置对象</div><div class="line">    private ImageLoaderConfig mConfig;</div><div class="line">    </div><div class="line">    // 省略单例模式代码</div><div class="line">    </div><div class="line">    // 初始化 ImageLoader</div><div class="line">    public void init(ImageLoaderConfig config) &#123;</div><div class="line">        mConfig = config;</div><div class="line">        // 检测配置的合法性，内部会根据配置做一些初始化操作</div><div class="line">        checkConfig();</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>把配置的代码基本上都封装到了 ImageLoaderConfig 和 Builder 对象中。其代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">public class ImageLoaderConfig &#123;</div><div class="line">    // 图片缓存配置</div><div class="line">    private BitmapCache bitmapCache = new MemoryCache();</div><div class="line">    // 加载图片时的 loading 和加载失败的图片配置对象</div><div class="line">    private DisplayConfig displayConfig = new DisplayConfig();</div><div class="line">    // 加载策略</div><div class="line">    private LoadPolicy loadPolicy = new SerialPolicy();</div><div class="line">    // 线程数量，默认为 CPU 数量 + 1</div><div class="line">    private int threadCount = Runtime.getRuntime().availableProcessors() + 1;</div><div class="line"></div><div class="line">    private ImageLoaderConfig() &#123;&#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 配置类的 Builder</div><div class="line">     */</div><div class="line">    public static class Builder &#123;</div><div class="line">        BitmapCache bitmapCache = new MemoryCache();</div><div class="line">        DisplayConfig displayConfig = new DisplayConfig();</div><div class="line">        LoadPolicy loadPolicy = new SerialPolicy();</div><div class="line">        int threadCount = Runtime.getRuntime().availableProcessors() + 1;</div><div class="line"></div><div class="line">        public Builder setThreadCount(int threadCount) &#123;</div><div class="line">            this.threadCount = threadCount;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setCache(BitmapCache bitmapCache) &#123;</div><div class="line">            this.bitmapCache = bitmapCache;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setLoadingPlaceholder(int resId) &#123;</div><div class="line">            displayConfig.loadingResId = resId;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        public Builder setNotFoundPlaceholder(int resId) &#123;</div><div class="line">            displayConfig.failedResId = resId;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public Builder setLoadPolicy(LoadPolicy loadPolicy) &#123;</div><div class="line">            if (loadPolicy != null) &#123;</div><div class="line">                loadPolicy = loadPolicy;</div><div class="line">            &#125;</div><div class="line">            return this;</div><div class="line">        &#125;</div><div class="line">        void applyConfig(ImageLoaderConfig config) &#123;</div><div class="line">            config.bitmapCache = this.bitmapCache;</div><div class="line">            config.displayConfig = this.displayConfig;</div><div class="line">            config.loadPolicy = this.loadPolicy;</div><div class="line">            config.threadCount = this.threadCount;</div><div class="line">        &#125;</div><div class="line">        // 根据已经设置好的属性创建配置对象</div><div class="line">        public ImageLoaderConfig create() &#123;</div><div class="line">            ImageLoaderConfig config = new ImageLoaderConfig();</div><div class="line">            applyConfig(config);</div><div class="line">            return config;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过将 ImageLoaderConfig 的构造函数、字段私有化，使得外部不能访问内部属性，用户唯一能够设置属性的地方就是通过 Builder 对象了，也就是说用户只能通过 Builder 对象构造 ImageLoaderConfig 对象，这就是构建和表示相分离。</p><p>用户的使用代码如下所示。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void initImageLoader() &#123;</div><div class="line">    ImageLoaderConfig config = new ImageLoaderConfig.Builder()</div><div class="line">            .setLoadingPlaceholder(R.drawable.loading)</div><div class="line">            .setNotFoundPlaceholder(R.drawable.not_found)</div><div class="line">            .setCache(new DoubleCache(this))</div><div class="line">            .setThreadCount(4)</div><div class="line">            .setLoadPolicy(new ReversePolicy()).create();</div><div class="line">    ImageLoader.getInstance().init(config);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 设计模式——单例模式</title>
      <link href="/2019/08/07/PATTERN/01%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/08/07/PATTERN/01%20%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><h3 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h3><hr><p>单例模式：<strong>确保某一个类只有一个实例，而且自行实例化并向整个系统提供这个实例</strong>。</p><p>确保某个类有且只有一个对象的场景，避免产生多个对象消耗过多的资源，或者某种类型的对象只应该有且只有一个。例如，创建一个对象需要消耗的资源过多，如要访问 IO 和数据库等资源，这是就要考虑使用单例模式。</p><p>实现单例模式主要有如下几个关键点：</p><ul><li>构造函数不对外开放，一般为 private；</li><li>通过一个静态方法或者枚举返回单例类对象；</li><li>确保单例类的对象有且只有一个，尤其是在多线程环境下；</li><li>确保单例类对象在反序列化时不会重新构建对象。</li></ul><blockquote><p>单例对象如果持有 Context，那么很容易引发内存泄漏，此时需要注意传递给单例对象的 Context 最好是 Application Context。</p></blockquote><hr><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><hr><h4 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h4><p>在一个应用中，应该只有一个 ImageLoader 实例，这个 ImageLoader 中又含有线程池、缓存系统、网络请求等，很消耗资源。因此，没有理由让它构造多个实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance = new ImageLoader();</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述写法又被称为<strong>饿汉式单例模式</strong>，在声明静态对象时就已经初始化，符合前面三条关键点，但在反序列化的情况下它们会重新创建对象。</p><h4 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h4><p>我们知道通过序列化可以将一个单例的实例对象写到磁盘，然后再读回来，从而有效地获得一个实例。即使构造函数是私有的，反序列化时依然可以通过特殊的途径去创建类的一个新的实例，相当于调用该类的构造函数。反序列化操作提供了一个很特别的钩子函数，类中具有一个私有的 readResolve() 函数，这个函数可以让开发人员控制对象的反序列化。例如，如果要杜绝上述示例中的单例对象在反序列化时重新生成对象，那么必须加入 readResolve 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 0L;</div><div class="line">    private static ImageLoader sInstance = new ImageLoader();</div><div class="line">    </div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line">    </div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object readResolve() throws ObjectStreamException &#123;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>也就是在 readResolve 方法中将单例对象返回，而不是重新生成一个新的对象。而对于枚举类，并不存在这个问题，因为即使反序列化它也不会重新生成新的实例。另外有两点需要注意：</p><ul><li>可序列化类中的字段类型不是 Java 的内置类型，那么该字段类型也需要实现 Serializable 接口；</li><li>如果调整了可序列化类的内部结构，例如新增、去除某个字段，但没有修改 serialVersionUID，那么会引发 java.io.InvalidClassException 异常或者导致某个属性为 0 或者 null。此时最好的方案是我们直接将 serialVersionUID 设置为 0L，这样即使修改了类的内部结构，我们反序列化不会抛出该异常，只是那些新修改的字段会为 0 或者 null。</li></ul><hr><h3 id="其他方式"><a href="#其他方式" class="headerlink" title="其他方式"></a>其他方式</h3><hr><h4 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h4><p>懒汉模式是声明一个静态变量，并且在用户第一次调用 getInstance 时进行初始化，而上述的恶汉模式是在声明静态对象时就已经初始化。实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line"></div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            sInstance = new ImageLoader();</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这种模式不能保证在多线程环境下确保单例类的对象有且只有一个，所以我们会添加 synchronized 关键字进行同步。但若是将 synchronized 添加到 getInstance 函数上，会出现每次调用该方法都进行同步的情况，造成不必要的同步开销。代码如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line"></div><div class="line">    public static synchronized ImageLoader getInstance() &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            sInstance = new ImageLoader();</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div></pre></td></tr></table></figure></p><p>上述方式不建议使用，但在它的基础上添加双重检查锁定机制（Double Check Lock，DCL）进行优化。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private static ImageLoader sInstance;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line"></div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        if (sInstance == null) &#123;</div><div class="line">            synchronized (ImageLoader.class) &#123;</div><div class="line">                if (sInstance == null) &#123;</div><div class="line">                    sInstance = new ImageLoader();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return sInstance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样一来，DCL 解决了资源消耗、多余同步、线程安全等问题，似乎很完美，但笔者也不推荐这种写法。它还是会在某种情况下出现失效的问题，这个问题被称为双重检查锁定失效，在《Java 并发编程实践》一书的最后谈到了这个问题，并指出这种“优化”是丑陋的，不赞成使用。</p><h4 id="静态内部类单例模式"><a href="#静态内部类单例模式" class="headerlink" title="静态内部类单例模式"></a>静态内部类单例模式</h4><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    private ImageLoader() &#123;&#125;</div><div class="line">    public static ImageLoader getInstance() &#123;</div><div class="line">        return ImageLoaderHolder.sInstance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 静态内部类</div><div class="line">    private static class ImageLoaderHolder &#123;</div><div class="line">        private static final ImageLoader sInstance = new ImageLoader();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当第一次加载 ImageLoader 类时并不会初始化 sInstance，只有在第一次调用 ImageLoader 的 getInstance 方法时才会导致 sInstance 被初始化。因此，第一次调用 getInstance 方法会导致虚拟机加载 ImageLoaderHolder 类，这种方式不仅能确保线程安全，也能够保证单例对象的唯一性，同时也延迟了单例的实例化，所以这是推荐使用的单例模式实现方式。如果有反序列化的情况下，要加入 readResolve 方法，具体代码参考饿汉式反序列章节。</p><h4 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h4><p>前面讲解的单例模式实现方式不是稍显麻烦就是会在某些情况下出现问题，还有没有更简单的实现方式呢？我们看看下面的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public enum SingletonEnum &#123;</div><div class="line">    INSTANCE;</div><div class="line">    public void doSomething() &#123;</div><div class="line">        System.out.println(&quot;do sth.&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>写法简单，而且保证线程安全、序列化与反序列化安全、反射安全。奈何 ANDROID 官网不建议使用 Enums，占用内存多（Enums often require more than twice as much memory as static constants.）。<a href="https://www.liaohuqiu.net/cn/posts/android-enum-memory-usage/" target="_blank" rel="external">关于 Enum 的使用博客</a>。</p><h4 id="使用容器实现单例模式"><a href="#使用容器实现单例模式" class="headerlink" title="使用容器实现单例模式"></a>使用容器实现单例模式</h4><p>具体代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class SingletonManager &#123;</div><div class="line">    private static Map&lt;String, Object&gt; objMap = new HashMap&lt;&gt;();</div><div class="line">    </div><div class="line">    private SingletonManager() &#123;&#125;</div><div class="line">    </div><div class="line">    public static void registerService(String key, Object instance) &#123;</div><div class="line">        if (!objMap.containsKey(key)) &#123;</div><div class="line">            objMap.put(key, instance);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static Object getService(String key) &#123;</div><div class="line">        return objMap.get(key);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在程序的初始，将多种单例类型注入到一个统一的管理类中，在使用时根据 key 获取对象对应类型的对象。这种方式使得我们可以管理多种类型的单例，并且在使用时可以通过统一的接口进行获取操作，降低了用户的使用成本，也对用户隐藏了具体实现，降低了耦合。</p><hr><h3 id="ANDROID-源码中的单例模式"><a href="#ANDROID-源码中的单例模式" class="headerlink" title="ANDROID 源码中的单例模式"></a>ANDROID 源码中的单例模式</h3><hr><p>在 ANDROID 系统中，我们经常会通过 Context 获取系统级别的服务，如 WindowsManagerService、ActivityManagerService 等，更常用的是一个 LayoutInflater 的类。这些服务会在合适的时候以单例的形式注册在系统中，在我们需要的时候就通过 Context 的 getSystemService(String name) 获取。我们以 LayoutInflater 为例来说明，平时我们使用 LayoutInflater 较为常见的地方是在 ListView 的 getView 方法中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void getView(int position, View convertView, ViewGroup parent) &#123;</div><div class="line">    View itemView = null;</div><div class="line">    if (convertView == null) &#123;</div><div class="line">        itemView = LayoutInflater.from(mContext).inflate(mLayoutId, null);</div><div class="line">        ...</div><div class="line">    &#125; else &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通常我们使用 LayoutInflater.from(Context) 来获取 LayoutInflater 服务，下面看看 LayoutInflater.from(Context) 的实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static LayoutInflater from(Context context) &#123;</div><div class="line">    LayoutInflater LayoutInflater = (LayoutInflater) context.getSystemService(</div><div class="line">            Context.LAYOUT_INFLATER_SERVICE);</div><div class="line">    if (LayoutInflater == null) &#123;</div><div class="line">        throw new AssertionError(&quot;LayoutInflater not found.&quot;);</div><div class="line">    &#125;</div><div class="line">    return LayoutInflater;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到 from(Context) 函数内部调用的是 Context 类的 getSystemService(String key) 方法，我们跟踪到 Context 类看到，该类是抽象类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public abstract class Context &#123;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>getView 中使用的 Context 对象的具体实现类是什么呢？其实在 Application、Activity、Service 中都会存在一个 Context 对象，即 Context 的总个数为 Activity 个数 + Service 个数 + 1。而 ListView 通常都是显示在 Activity 中，那么我们就以 Activity 中的 Context 来分析。</p><p>我们知道，一个 Activity 的入口是 ActivityThread 的 main 函数，在 main 函数中创建一个新的 ActivityThread 对象，并且启动消息循环（UI 线程），创建新的 Activity、新的 Context 对象，然后将该 Context 对象传递给 Activity。下面我们看看 ActivityThread 源代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public static void main(String[] args) &#123;</div><div class="line">    </div><div class="line">    // 代码省略</div><div class="line"></div><div class="line">    Process.setArgV0(&quot;&lt;pre-initialized&gt;&quot;);</div><div class="line">    // 主线程消息循环</div><div class="line">    Looper.prepareMainLooper();</div><div class="line">    // 创建 ActivityThread 对象</div><div class="line">    ActivityThread thread = new ActivityThread();</div><div class="line">    thread.attach(false, startSeq);</div><div class="line"></div><div class="line">    if (sMainThreadHandler == null) &#123;</div><div class="line">        sMainThreadHandler = thread.getHandler();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    Looper.loop();</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">private void attach(boolean system, long startSeq) &#123;</div><div class="line">    sCurrentActivityThread = this;</div><div class="line">    mSystemThread = system;</div><div class="line">    // 不是系统应用</div><div class="line">    if (!system) &#123;</div><div class="line">        ViewRootImpl.addFirstDrawHandler(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                ensureJitEnabled();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        android.ddm.DdmHandleAppName.setAppName(&quot;&lt;pre-initialized&gt;&quot;,</div><div class="line">                UserHandle.myUserId());</div><div class="line">        RuntimeInit.setApplicationObject(mAppThread.asBinder());</div><div class="line">        final IActivityManager mgr = ActivityManager.getService();</div><div class="line">        try &#123;</div><div class="line">            // 关联 mAppThread</div><div class="line">            mgr.attachApplication(mAppThread, startSeq);</div><div class="line">        &#125; catch (RemoteException ex) &#123;</div><div class="line">            throw ex.rethrowFromSystemServer();</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 main 方法中，我们创建一个 ActivityThread 对象后，调用了其 attach 函数，并且参数为 false，即非系统应用，会通过 Binder 机制与 ActivityManagerService 通信，并且最终调用 handleLaunchActivity 函数，该函数的实现如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">public Activity handleLaunchActivity(ActivityClientRecord r,</div><div class="line">            PendingTransactionActions pendingActions, Intent customIntent) &#123;</div><div class="line">    // 代码省略</div><div class="line">    final Activity a = performLaunchActivity(r, customIntent);</div><div class="line">    // 代码省略</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">private Activity performLaunchActivity(ActivityClientRecord r, Intent customIntent) &#123;</div><div class="line">    // 代码省略</div><div class="line">    // 1、获取 Context 对象</div><div class="line">    ContextImpl appContext = createBaseContextForActivity(r);</div><div class="line">    Activity activity = null;</div><div class="line">    try &#123;</div><div class="line">        java.lang.ClassLoader cl = appContext.getClassLoader();</div><div class="line">        // 2、创建 Activity</div><div class="line">        activity = mInstrumentation.newActivity(</div><div class="line">                cl, component.getClassName(), r.intent);</div><div class="line">        // 代码省略</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    try &#123;</div><div class="line">        // 创建 Application</div><div class="line">        Application app = r.packageInfo.makeApplication(false, mInstrumentation);</div><div class="line">        if (activity != null) &#123;</div><div class="line">            CharSequence title = r.activityInfo.loadLabel(appContext.getPackageManager());</div><div class="line">            Configuration config = new Configuration(mCompatConfiguration);</div><div class="line">            // 3、将 appContext 等对象 attach 到 activity 中</div><div class="line">            activity.attach(appContext, this, getInstrumentation(), r.token,</div><div class="line">                    r.ident, app, r.intent, r.activityInfo, title, r.parent,</div><div class="line">                    r.embeddedID, r.lastNonConfigurationInstances, config,</div><div class="line">                    r.referrer, r.voiceInteractor, window, r.configCallback);</div><div class="line">            // 代码省略</div><div class="line">            // 4、调用 Activity 的 onCreate 方法</div><div class="line">            if (r.isPersistable()) &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state, r.persistentState);</div><div class="line">            &#125; else &#123;</div><div class="line">                mInstrumentation.callActivityOnCreate(activity, r.state);</div><div class="line">            &#125;</div><div class="line">            // 代码省略</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125; catch (SuperNotCalledException e) &#123;</div><div class="line">        throw e;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    return activity;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">private ContextImpl createBaseContextForActivity(ActivityClientRecord r) &#123;</div><div class="line">    // 5、创建 Context 对象，实现类是 ContextImpl</div><div class="line">    ContextImpl appContext = ContextImpl.createActivityContext(</div><div class="line">            this, r.packageInfo, r.activityInfo, r.token, displayId, r.overrideConfig);</div><div class="line">    // 代码省略</div><div class="line">    return appContext;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过上面 1~5 注释处的代码分析可以知道，Context 的实现类为 ContextImpl。继续跟踪 ContextImpl 类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">class ContextImpl extends Context &#123;</div><div class="line">    // The system service cache for the system services that are cached per-ContextImpl.</div><div class="line">    final Object[] mServiceCache = SystemServiceRegistry.createServiceCache();</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public Object getSystemService(String name) &#123;</div><div class="line">        return SystemServiceRegistry.getSystemService(this, name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>继续跟踪 SystemServiceRegistry 类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">final class SystemServiceRegistry &#123;</div><div class="line">    // 1、Service 容器</div><div class="line">    private static final HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt; SYSTEM_SERVICE_FETCHERS =</div><div class="line">            new HashMap&lt;String, ServiceFetcher&lt;?&gt;&gt;();</div><div class="line"></div><div class="line">    // 2、注册服务器</div><div class="line">    private static &lt;T&gt; void registerService(String serviceName, Class&lt;T&gt; serviceClass,</div><div class="line">            ServiceFetcher&lt;T&gt; serviceFetcher) &#123;</div><div class="line">        SYSTEM_SERVICE_NAMES.put(serviceClass, serviceName);</div><div class="line">        SYSTEM_SERVICE_FETCHERS.put(serviceName, serviceFetcher);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 静态语句块，第一次加载该类时执行（只执行一次，保证实例的唯一性）</div><div class="line">    static &#123;</div><div class="line">        // 代码省略</div><div class="line">        // 注册 LayoutInflater Service</div><div class="line">        registerService(Context.LAYOUT_INFLATER_SERVICE, LayoutInflater.class,</div><div class="line">                new CachedServiceFetcher&lt;LayoutInflater&gt;() &#123;</div><div class="line">            @Override</div><div class="line">            public LayoutInflater createService(ContextImpl ctx) &#123;</div><div class="line">                return new PhoneLayoutInflater(ctx.getOuterContext());</div><div class="line">            &#125;&#125;);</div><div class="line">        // 代码省略</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 根据 key 获取对应的服务</div><div class="line">    public static Object getSystemService(ContextImpl ctx, String name) &#123;</div><div class="line">        ServiceFetcher&lt;?&gt; fetcher = SYSTEM_SERVICE_FETCHERS.get(name);</div><div class="line">        return fetcher != null ? fetcher.getService(ctx) : null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 代码省略</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从 SystemServiceRegistry 类的部分代码中可以看到，在虚拟机第一次加载该类时会注册各种 ServiceFetcher，其中就包含了 LayoutInflater Service。将这些服务以键值对的形式储存在一个 HashMap 中，用户使用时只需要根据 key 来获取到对应的 ServiceFetcher，然后通过 ServiceFetcher 对象的 getService 函数来获取具体的服务对象。当第一次获取时，会调用 ServiceFetcher 的 createService 函数创建服务对象，然后将该对象缓存到一个列表中，下次再取时直接从缓存中获取，避免重复创建对象，从而达到单例的效果。这种模式就是前文描述的通过容器实现单例模式。系统核心服务以单例形式存在，减少了资源消耗。</p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.6 ANDROID 面向对象的六大原则——迪米特原则</title>
      <link href="/2019/08/06/PATTERN/00.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/"/>
      <url>/2019/08/06/PATTERN/00.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="">第六篇：本文</a></p><hr><h3 id="迪米特原则"><a href="#迪米特原则" class="headerlink" title="迪米特原则"></a>迪米特原则</h3><hr><p>英文全称为 Law of Demeter，LOD，也称为最少知识原则，意思都是<strong>一个对象应该对其他对象有最少的了解</strong>。通俗的讲，一个类应该对自己需要耦合或调用的类知道得最少，类的内部如何实现与调用者或者依赖者没关系，调用者或者依赖者只需要知道它需要的方法即可，其他的可一概不用管。类与类之间的关系越密切，耦合越大，当一个类发生变化时，对另一个类的影响也越大。</p><p>迪米特原则还有一个英文解释是 Only talk to your immediate friends，翻译过来就是：<strong>只与直接的朋友通信。</strong>什么叫做直接的朋友？每个对象都必然会与其他对象有耦合关系，两个对象之间的耦合就成为了朋友关系，这种关系的类型有很多，如组合、聚合、依赖等。</p><p>下面我们就以租房为例来讲讲迪米特原则的应用。</p><hr><h3 id="举例：在北京租房"><a href="#举例：在北京租房" class="headerlink" title="举例：在北京租房"></a>举例：在北京租房</h3><hr><p>在北京租房绝大多数都是通过中介找房。我们设定的情况为：我只要求房间的面积和租金，其他的一概不管，中介将符合我们要求的房子提供给我就可以。下面我们看看这个示例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 房间</div><div class="line"> */</div><div class="line">public class Room &#123;</div><div class="line">    public float area;</div><div class="line">    public float price;</div><div class="line"></div><div class="line">    public Room(float area, float price) &#123;</div><div class="line">        this.area = area;</div><div class="line">        this.price = price;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String toString() &#123;</div><div class="line">        return &quot;Room&#123;&quot; + &quot;area=&quot; + area + &quot;, price=&quot; + price + &apos;&#125;&apos;;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 中介</div><div class="line"> */</div><div class="line">public class Mediator &#123;</div><div class="line">    List&lt;Room&gt; mRooms = new ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    public Mediator() &#123;</div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            mRooms.add(new Room(14 + i, (14 + i) * 150));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public List&lt;Room&gt; getAllRooms() &#123;</div><div class="line">        return mRooms;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 租户</div><div class="line"> */</div><div class="line">public class Tenant &#123;</div><div class="line">    public void rentRoom(float roomArea, float roomPrice, Mediator mediator) &#123;</div><div class="line">        List&lt;Room&gt; rooms = mediator.getAllRooms();</div><div class="line">        for (Room room : rooms) &#123;</div><div class="line">            if (isSuitable(roomArea, roomPrice, room)) &#123;</div><div class="line">                System.out.println(&quot;租到房间啦！&quot; + room);</div><div class="line">                break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private boolean isSuitable(float roomArea, float roomPrice, Room room) &#123;</div><div class="line">        return room.area &gt;= roomArea &amp;&amp; room.price &lt;= roomPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>从上面的代码可以看到，Tenant 不仅依赖了 Mediator 类，还需要频繁地与 Room 类打交道。租户类的要求只是通过中介找到一间适合自己的房间罢了，如果把这些检测条件都放在 Tenant 类中，那么中介类的功能就被弱化，而且导致了 Tenant 与 Room 的耦合较高，因为 Tenant 必须知道许多关于 Room 的细节。当 Room 变化时 Tenant 也必须跟着变化。Tenant 又与 Mediator 耦合，这就出现了纠缠不清的关系。这个时候就需要我们分清谁才是我们真正的“朋友”，在我们所设定的情况下，显然是 Mediator。上述代码的结构下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ef06a9294f269c90.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>既然是耦合太严重，那我们就只能解耦了。首先要明确的是，我们只和我们的朋友通信，这里就是指 Mediator 对象。必须将 Room 相关的操作从 Tenant 中移除，而这些操作案例应该属于 Mediator。我们进行如下重构。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 中介</div><div class="line"> */</div><div class="line">public class Mediator &#123;</div><div class="line">    List&lt;Room&gt; mRooms = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    public Mediator() &#123;</div><div class="line">        for (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            mRooms.add(new Room(14 + i, (14 + i) * 150));</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Room rentOut(float area, float price) &#123;</div><div class="line">        for (Room room : mRooms) &#123;</div><div class="line">            if (isSuitable(area, price, room)) &#123;</div><div class="line">                return room;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        return null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private boolean isSuitable(float roomArea, float roomPrice, Room room) &#123;</div><div class="line">        return room.area &gt;= roomArea &amp;&amp; room.price &lt;= roomPrice;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 租户</div><div class="line"> */</div><div class="line">public class Tenant &#123;</div><div class="line">    public void rentRoom(float roomArea, float roomPrice, Mediator mediator) &#123;</div><div class="line">        mediator.rentOut(roomArea, roomPrice);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>重构后的结构图如下所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7c0beb82a0d5073c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>只是将对于 Room 的判定操作移到了 Mediator 类中，这本应该是 Mediator 的职责，根据租户设定的条件查找符合要求的房子，并且将结果交给租户就可以了。租户并不需要知道太多关于 Room 的细节，比如与房东签合同，房东的房产证是不是真的，房内的设施坏了之后要找谁谁修等。当我们通过我们的“朋友”——中介租了房之后，所有的事情我们都通过与中介沟通就好了，房东、维修师傅等这些角色并不是我们直接的“朋友”。“只与直接的朋友通信”这简单的几个字就能够将我们从复杂的关系网中抽离出来，使程序耦合度更低、稳定性更好。</p><hr><h3 id="举例二：ImageCache"><a href="#举例二：ImageCache" class="headerlink" title="举例二：ImageCache"></a>举例二：ImageCache</h3><hr><p>前面博客中的图片加载器项目，ImageCache 就是用户的直接朋友，而 SD 卡缓存内部使用了 FileOutputStream，这个 FileOutputStream 就不属于用户的直接朋友了。因此，用户完全不知道它的存在，用户只需要与 ImageCache 对象打交的即可。将图片存到 SD 卡中的代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// SD 卡缓存 DiskCache 类</div><div class="line">public class DiskCache implements ImageCache &#123;</div><div class="line">    private static String CACHE_DIR =</div><div class="line">            Environment.getExternalStorageDirectory() + &quot;/&quot;;</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return BitmapFactory.decodeFile(CACHE_DIR</div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        FileOutputStream fileOutputStream = null;</div><div class="line">        try &#123;</div><div class="line">            fileOutputStream = new FileOutputStream(CACHE_DIR</div><div class="line">                    + ImageUtil.urlToMd5(url));</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            CloseUtils.closeQuietly(fileOutputStream);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>现在领导要求使用 jake wharton 的 DiskLruCache 来替换 FileOutputStream。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public void put(String url, Bitmap bitmap) &#123;</div><div class="line">    DiskLruCache.Editor editor = null;</div><div class="line">    try &#123;</div><div class="line">        editor = mDiskLruCache.edit(url);</div><div class="line">        if (null != editor) &#123;</div><div class="line">            OutputStream outputStream = editor.newOutputStream(0);</div><div class="line">            if (writeBitmapToDisk(bitmap, outputStream)) &#123;</div><div class="line">                // 写入 Disk 缓存</div><div class="line">                editor.commit();</div><div class="line">            &#125; else &#123;</div><div class="line">                editor.abort();</div><div class="line">            &#125;</div><div class="line">            CloseUtils.closeQuietly(outputStream);</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>SD 卡缓存的具体实现虽然被替换了，但用户根本不会感知到。因为用户根本不知道 FileOutputStream 和 DiskLruCache 的存在，他们没有与 FileOutputStream 或 DiskLruCache 进行通信，他们只认识直接“朋友”——ImageCache，ImageCache 将一切细节隐藏在直接“朋友”的外衣之下，使得系统具有更低的耦合性和更好的可扩展性。</p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.5 ANDROID 面向对象的六大原则——接口隔离原则</title>
      <link href="/2019/08/05/PATTERN/00.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/"/>
      <url>/2019/08/05/PATTERN/00.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="">第五篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><h3 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h3><hr><p>英文全称是 Interface Segregation Principles，ISP。其定义是：<strong>客户端不应该依赖它不需要的接口</strong>。另一种定义是：<strong>类间的依赖关系应该建立在最小的接口上</strong>。接口隔离原则将非常庞大、臃肿的接口拆分成更小的和更具体的接口，这样客户将会只需要知道他们感兴趣的方法。接口隔离原则的目的是系统解开耦合，从而容易重构、更改和重新部署。</p><p>说白了就是，让客户端依赖的接口尽可能地小。这样说可能还有点抽象，我们还是以一个示例来说明一下。在此之前我们来说一个场景，在 Java 6 及之前的 JDK 版本，有一个非常讨厌的问题，那就是在使用了 OutputStream 或者其他可关闭的对象之后，我们必须保证他们最终被关闭了，我们的 SD 卡缓存类中就有这样的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public void put(String url, Bitmap bitmap) &#123;</div><div class="line">    FileOutputStream fileOutputStream = null;</div><div class="line">    try &#123;</div><div class="line">        fileOutputStream = new FileOutputStream(CACHE_DIR</div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">    &#125; catch (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; finally &#123;</div><div class="line">        if (fileOutputStream != null) &#123;</div><div class="line">            try &#123;</div><div class="line">                fileOutputStream.close();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们看到的这段代码可读性非常差，各种 try…catch 嵌套都是些简单的代码，但是会严重影响代码的可读性，并且多层次的大括号很容易将代码写到错误的层级中。</p><p>在 Java 中有一个 Closeable 接口，该接口标识了一个可关闭的对象，它只有一个 close 方法。如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0f0d41101412f87c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们要讲的 FileOutputStream 类就实现了这个接口。我们从上图可以看到，还有 100 多个类实现了 Closeable 这个接口。这意味着，在关闭这 100 多个类型的对象时，都需要写出像 put 方法中 finally 代码段那样的代码。这还了得，反正我是不能忍。既然都是实现了 Closeable 接口，那只要一个方法统一来关闭这些对象不就可以了么？于是写来来如下的工具类。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line">import java.io.Closeable;</div><div class="line"></div><div class="line">public class CloseUtils &#123;</div><div class="line"></div><div class="line">    private CloseUtils() &#123;&#125;</div><div class="line"></div><div class="line">    public static void closeQuietly(Closeable closeable) &#123;</div><div class="line">        if (null != closeable) &#123;</div><div class="line">            try &#123;</div><div class="line">                closeable.close();</div><div class="line">            &#125; catch (Exception e) &#123;</div><div class="line">                e.printStackTrace();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们再看看把这段代码运用到上述的 put 方法中的效果如何。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public void put(String url, Bitmap bitmap) &#123;</div><div class="line">    FileOutputStream fileOutputStream = null;</div><div class="line">    try &#123;</div><div class="line">        fileOutputStream = new FileOutputStream(CACHE_DIR</div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">        bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">    &#125; catch (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; finally &#123;</div><div class="line">        CloseUtils.closeQuietly(fileOutputStream);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>代码简洁了很多！而且这个 closeQuietly 方法可以运用到各类可关闭的对象中，保证了代码的重用性。CloseUtils 的 closeQuietly 方法的基本原理就是依赖于 Closeable 抽象而不是具体实现，并且建立在最小化依赖原则的基础上，它只需要知道这个对象是可关闭的，其他的一概不关心，也就是这里的接口隔离原则。</p><p>试想一下，如果在只是需要关闭一个对象时，它却暴露了其他的接口函数，如 OutputStream 的 write 方法，这就使得更多的细节暴露在客户端代码面前，不仅没有很好地隐藏实现，还增加了接口的使用难度。而通过 Closeable 接口将可关闭的对象抽象起来，这样只需要客户端依赖于 Closeable 就可以对客户端隐藏其他的接口信息，客户端代码只需要知道这个对象可关闭（只可调用 close 方法）即可。</p><p>之前博客中设计的 ImageLoader 持有的 ImageCache 就是接口隔离原则的运用。ImageLoader 只需要知道该缓存对象有存、取缓存图片的接口即可，其他的一概不管，这就使得缓存功能的具体实现对 ImageLoader 隐藏。这就是用最小化接口隔离了实现类的细节，也促使我们将庞大的接口拆分到更细粒度的接口当中，这使得我们的系统具有更低的耦合性、更高的灵活性。</p><hr><h3 id="举例：拆分接口"><a href="#举例：拆分接口" class="headerlink" title="举例：拆分接口"></a>举例：拆分接口</h3><hr><p>依据接口隔离原则，将下图中臃肿的接口 I 拆分为独立的几个接口。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1cd2d3c76d59ad0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>类 A 依赖接口 I 中的方法1、方法2、方法3，类 PA 是对类 A 依赖的实现。类 B 依赖接口 I 中的方法1、方法4、方法5，类 PB 是对类 B 依赖的实现。对于类 PA 和类 PB 来说，虽然他们都存在着用不到的方法（也就是图中划红线的方法），但由于实现了接口 I，所以也必须要实现这些用不到的方法。用代码表示如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">interface I &#123;</div><div class="line">    void method1();</div><div class="line">    void method2();</div><div class="line">    void method3();</div><div class="line">    void method4();</div><div class="line">    void method5();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class A &#123;</div><div class="line">    public void depend1(I i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I i)&#123;</div><div class="line">        i.method2();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I i)&#123;</div><div class="line">        i.method3();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B &#123;</div><div class="line">    public void depend1(I i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I i)&#123;</div><div class="line">        i.method4();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I i)&#123;</div><div class="line">        i.method5();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PA implements I &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method2() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I 的方法2&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method3() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I 的方法3&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 对于类 PA 来说，method4 和 method5 不是必需的，但是由于接口 I 中有这两个方法</div><div class="line">    // 所以在实现过程中即使这两个方法的方法体为空，也要将这两个没有作用的方法进行实现</div><div class="line">    public void method4() &#123;&#125;</div><div class="line">    public void method5() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PB implements I &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 对于类 PB 来说，method2 和 method3 不是必需的，但是由于接口 I 中有这两个方法</div><div class="line">    // 所以在实现过程中即使这两个方法的方法体为空，也要将这两个没有作用的方法进行实现</div><div class="line">    public void method2() &#123;&#125;</div><div class="line">    public void method3() &#123;&#125;</div><div class="line"></div><div class="line">    public void method4() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I 的方法4&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method5() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I 的方法5&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        A a = new A();</div><div class="line">        a.depend1(new PA());</div><div class="line">        a.depend2(new PA());</div><div class="line">        a.depend3(new PA());</div><div class="line"></div><div class="line">        B b = new B();</div><div class="line">        b.depend1(new PB());</div><div class="line">        b.depend2(new PB());</div><div class="line">        b.depend3(new PB());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到，如果接口过于臃肿，只要接口中出现的方法，不管对依赖于它的类有没有用处，实现类中都必须去实现这些方法，这显然不是好的设计。如果将这个设计修改为符合接口隔离原则，就必须对接口 I 进行拆分。在这里我们将原有的接口 I 拆分为三个接口，拆分后的设计如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-83e0173046673597.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>代码更改如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">interface I1 &#123;</div><div class="line">    void method1();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface I2 &#123;</div><div class="line">    void method2();</div><div class="line">    void method3();</div><div class="line">&#125;</div><div class="line"></div><div class="line">interface I3 &#123;</div><div class="line">    void method4();</div><div class="line">    void method5();</div><div class="line">&#125;</div><div class="line"></div><div class="line">class A &#123;</div><div class="line">    public void depend1(I1 i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I2 i)&#123;</div><div class="line">        i.method2();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I2 i)&#123;</div><div class="line">        i.method3();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class B &#123;</div><div class="line">    public void depend1(I1 i)&#123;</div><div class="line">        i.method1();</div><div class="line">    &#125;</div><div class="line">    public void depend2(I3 i)&#123;</div><div class="line">        i.method4();</div><div class="line">    &#125;</div><div class="line">    public void depend3(I3 i)&#123;</div><div class="line">        i.method5();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PA implements I1, I2 &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I1 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method2() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I2 的方法2&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method3() &#123;</div><div class="line">        System.out.println(&quot;类 PA 实现接口 I2 的方法3&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class PB implements I1, I3 &#123;</div><div class="line">    public void method1() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I1 的方法1&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method4() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I2 的方法4&quot;);</div><div class="line">    &#125;</div><div class="line">    public void method5() &#123;</div><div class="line">        System.out.println(&quot;类 PB 实现接口 I2 的方法5&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接口隔离原则的含义是：建立单一接口，不要建立庞大臃肿的接口，尽量细化接口，接口中的方法尽量少。也就是说，我们要为各个类建立专用的接口，而不要试图去建立一个很庞大的接口供所有依赖它的类去调用。本文例子中，将一个庞大的接口变更为 3 个专用的接口所采用的就是接口隔离原则。在程序设计中，依赖几个专用的接口要比依赖一个综合的接口更灵活。接口是设计时对外部设定的“契约”，通过分散定义多个接口，可以预防外来变更的扩散，提高系统的灵活性和可维护性。</p><p>说到这里，很多人会觉的接口隔离原则跟之前的单一职责原则很相似，其实不然。其一，单一职责原则原注重的是职责；而接口隔离原则注重对接口依赖的隔离。其二，单一职责原则主要是约束类，其次才是接口和方法，它针对的是程序中的实现和细节；而接口隔离原则主要约束接口接口，主要针对抽象，针对程序整体框架的构建。</p><p>采用接口隔离原则对接口进行约束时，要注意以下几点：</p><ul><li>接口尽量小，但是要有限度。对接口进行细化可以提高程序设计灵活性是不挣的事实，但是如果过小，则会造成接口数量过多，使设计复杂化，所以一定要适度。</li><li>为依赖接口的类定制服务，只暴露给调用的类它需要的方法，它不需要的方法则隐藏起来。只有专注地为一个模块提供定制服务，才能建立最小的依赖关系。</li><li>提高内聚，减少对外交互。使接口用最少的方法去完成最多的事情。</li></ul><p>运用接口隔离原则，一定要适度，接口设计的过大或过小都不好。设计接口的时候，只有多花些时间去思考和筹划，才能准确地实践这一原则。</p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.4 ANDROID 面向对象的六大原则——依赖倒置原则</title>
      <link href="/2019/08/04/PATTERN/00.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/"/>
      <url>/2019/08/04/PATTERN/00.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="">第四篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><h3 id="依赖倒置原则"><a href="#依赖倒置原则" class="headerlink" title="依赖倒置原则"></a>依赖倒置原则</h3><p>英文全称是 Dependence Inversion Principle，缩写 DIP。它指代了一种特定的解耦形式，使得高层次的模块不依赖于低层次模块的实现细节，即依赖模块被颠倒了。它包含了以下几个含义：</p><ul><li>高层模块不应该依赖低层模块，两者都应该依赖其抽象；</li><li>抽象不应该依赖细节；</li><li>细节应该依赖抽象。</li></ul><p>在 Java 语言中，抽象就是指接口或抽象类，两者都是不能直接被实例化的；细节就是实现类，实现接口或继承抽象类而产生的类就是细节，可以被直接实例化 (new)。高层模块就是调用端，底层模块就是具体实现类。依赖倒置原则在 Java 语言中的表现就是：<strong>模块间的依赖通过抽象发生，实现类之间不发生直接的依赖关系，其依赖关系是通过接口或抽象类产生的。</strong>概括的说就是<strong>面向接口编程</strong>，或者说面向抽象编程，这里的抽象指的是接口或者抽象类。</p><p>如果类与类直接依赖于细节，那么它们直接就有直接的耦合，当具体实现变化时，意味着要同时修改依赖者的代码，这限制了系统的可扩展性。</p><p>在下面的代码中，ImageLoader 直接依赖于 MemoryCache，这个 MemoryCache 是一个具体实现，而不是一个抽象类或者接口。这导致了 ImageLoader 直接依赖了具体细节，当 MemoryCache 不能满足 ImageLoader 而需要被其他缓存实现替换时，此时就必须修改 ImageLoader 的代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line">    // 内存缓存（直接依赖于细节）</div><div class="line">    MemoryCache mMemoryCache = new MemoryCache();</div><div class="line">    </div><div class="line">    // 加载图片到 ImageView 中</div><div class="line">    public void displayImage(String url, ImageView imageView) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            downloadImage(url, imageView);</div><div class="line">        &#125; else &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void setImageCache(MemoryCache cache) &#123;</div><div class="line">        mMemoryCache = cache;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>随着产品的升级，用户发现 MemoryCache 已经不能满足需求，用户需要的 ImageLoader 可以将图片同时缓存到内存和 SD 卡中，或者可以让用户自定义实现缓存。修改原有代码也不符合开闭原则。</p><p>正确的做法是依照依赖倒置原则依赖抽象，而不依赖具体实现。如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public interface ImageCache &#123;</div><div class="line">    Bitmap get(String url);</div><div class="line">    void put(String url, Bitmap bitmap);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class ImageLoader &#123;</div><div class="line">    // 图片缓存类，依赖于抽象，并且有一个默认的实现</div><div class="line">    ImageCache mImageCache = new MemoryCache();</div><div class="line"></div><div class="line">    // 加载图片到 ImageView 中</div><div class="line">    public void displayImage(String url, ImageView imageView) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            downloadImage(url, imageView);</div><div class="line">        &#125; else &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 注入缓存实现</div><div class="line">    public void setImageCache(ImageCache cache) &#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在这里，我们建立了 ImageCache 抽象，并且让 ImageLoader 依赖于抽象而不是具体细节。当需求发生变化时，我们只需要实现 ImageCache 类或者继承其他已有的 ImageCache 子类完成相应的缓存功能，然后将具体的实现注入到 ImageLoader 即可实现缓存功能的替换，这就保证了缓存系统的可扩展性，有了拥抱变化的能力，这就是依赖倒置原则。</p><hr><h3 id="举例：涛哥开奔驰"><a href="#举例：涛哥开奔驰" class="headerlink" title="举例：涛哥开奔驰"></a>举例：涛哥开奔驰</h3><hr><p>先不考虑依赖倒置原则，看一下如下的设计：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2b425fd147530af4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从上面的类图中可以看出，司机类和奔驰车类都属于细节，并没有实现或继承抽象，它们是对象级别的耦合。通过类图可以看出司机有一个 drive() 方法，用来开车，奔驰车有一个 run() 方法，用来表示车辆运行，并且奔驰车类依赖于司机类，用户模块表示高层模块，负责调用司机类和奔驰车类。</p><p>可用以下代码表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class Driver &#123;</div><div class="line">    // 司机的主要职责就是驾驶汽车</div><div class="line">    public void drive(Benz benz)&#123;</div><div class="line">        benz.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Benz &#123;</div><div class="line">    // 汽车肯定会跑</div><div class="line">    public void run() &#123;</div><div class="line">        System.out.println(&quot;奔驰汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 高层模块</div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Driver taoGe = new Driver();</div><div class="line">        Benz benz = new Benz();</div><div class="line">        // 司机开奔驰车</div><div class="line">        taoGe.drive(benz);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这样的设计乍一看好像也没有问题，涛哥只管开着他的奔驰车就好。但是假如有一天他不想开奔驰了，想换一辆宝马车玩玩怎么办呢？我们当然可以新建一个宝马车类，也给它弄一个 run() 方法，但问题是，这辆车有是有了，但是涛哥却不能开啊，因为司机类里面并没有宝马车的依赖。要想解决问题，只能修改代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public class BMW &#123;</div><div class="line">    public void run()&#123;</div><div class="line">        System.out.println(&quot;宝马汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上面的设计没有使用依赖倒置原则，我们已经发现，模块与模块之间耦合度太高，生产力太低，只要需求一变就需要大面积重构，说明这样的设计是不合理。现在我们引入依赖倒置原则，重新设计的类图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-22580545a2617fb5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可用以下代码表示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">// 将司机模块抽象为一个接口</div><div class="line">public interface IDriver &#123;</div><div class="line">    void drive(ICar car);</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Driver implements IDriver &#123;</div><div class="line">    public void drive(ICar car)&#123;</div><div class="line">        car.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 将汽车模块抽象为一个接口：可以是奔驰汽车，也可以是宝马汽车</div><div class="line">public interface ICar &#123;</div><div class="line">    void run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Benz implements ICar &#123;</div><div class="line">    public void run()&#123;</div><div class="line">        System.out.println(&quot;奔驰汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class BMW implements ICar &#123;</div><div class="line">    public void run()&#123;</div><div class="line">        System.out.println(&quot;宝马汽车开始运行...&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 高层模块</div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        IDriver taoGe = new Driver();</div><div class="line">        ICar benz = new Benz();</div><div class="line">        // 涛哥开奔驰</div><div class="line">        taoGe.drive(benz);</div><div class="line">        // 涛哥开宝马</div><div class="line">        taoGe.drive(new BMW());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>如此设计，涛哥再也不怕有新车不能开的情况了。</p><hr><h3 id="依赖的三种方法"><a href="#依赖的三种方法" class="headerlink" title="依赖的三种方法"></a>依赖的三种方法</h3><hr><p><strong>接口声明依赖对象</strong>： 在接口的方法中声明依赖对象，就如上面的例子。<br><strong>构造函数传递依赖对象</strong>：在类中通过构造函数声明依赖对象，按照依赖注入的说法，这种方式叫做构造函数注入。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public interface IDriver &#123;</div><div class="line">    void drive();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Driver implements IDriver&#123;</div><div class="line">    private ICar car;</div><div class="line"></div><div class="line">    // 构造函数注入</div><div class="line">    public Driver(ICar car)&#123;</div><div class="line">        this.car = car;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void drive(ICar car)&#123;</div><div class="line">        this.car.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>Setter 方法传递依赖对象</strong>：在抽象中设置 Setter 方法声明依赖对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public interface IDriver&#123;</div><div class="line">    // 注入依赖</div><div class="line">    void setCar(ICar car);</div><div class="line">    void drive();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Driver implements IDriver &#123;</div><div class="line">    private ICar car;</div><div class="line"></div><div class="line">    public void setCar(ICar car)&#123;</div><div class="line">        this.car = car;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void drive()&#123;</div><div class="line">        this.car.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><hr><h3 id="深入理解"><a href="#深入理解" class="headerlink" title="深入理解"></a>深入理解</h3><hr><p>依赖倒置原则的本质就是通过抽象（抽象类或接口）使各个类或模块实现彼此独立，不互相影响，实现模块间的松耦合。在项目中使用这个规则需要以下原则：</p><ul><li><strong>每个类尽量都要有接口或抽象类，或者抽象类和接口都有。</strong></li><li><strong>变量的表面类型尽量是接口或者抽象类。</strong></li><li><strong>任何类都不应该从具体类派生。</strong></li><li><strong>尽量不要重写基类已经写好的方法</strong>（里式替换原则）。<br>如果基类是一个抽象类，而这个方法已经实现了，子类尽量不要覆写。类间依赖的是抽象，覆写了抽象方法，对依赖的稳定性会有一定的影响。</li><li><strong>结合里式替换原则来使用</strong>： 结合里式替换原则和依赖倒置原则我们可以得出一个通俗的规则，接口负责定义 public 属性和方法，并且声明与其他对象的依赖关系，抽象类负责公共构造部分的实现，实现类准确的实现业务逻辑，同时在适当的时候对父类进行细化。</li></ul><blockquote><p>总结：<strong>依赖倒置原则的核心就是面向抽象（抽象类或者接口）编程</strong>。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.3 ANDROID 面向对象的六大原则——里氏替换原则</title>
      <link href="/2019/08/03/PATTERN/00.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/"/>
      <url>/2019/08/03/PATTERN/00.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="">第三篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><p>前一篇博文中的图片加载器项目，MemoryCache、DiskCache、DoubleCache 都可以替换 ImageCache 的工作，并且能够保证行为的正确性。ImageCache 建立了获取缓存图片、保存缓存图片的接口规范，MemoryCache 等根据接口规范实现了相应的功能，用户只需要在使用时指定具体的缓存对象就可以动态地替换 ImageLoader 中的缓存策略。这就使得 ImageLoader 的缓存系统具有了无限的可能性，也就是保证了可扩展性。</p><p>想象一种情况，当 ImageLoader 中的 setImageCache(ImageCache cache) 中的 cache 对象不能被子类所替换，那么用户如何设置不同的缓存对象，以及用户如何定义自己的缓存实现，通过前文中的 useDiskCache 方法吗？显然不是的，里氏替换原则就为这类问题提供了指导原则，也就是建立抽象，通过抽象建立规范，具体的实现在运行时替换掉抽象，保证系统的扩展性、灵活性。</p><p>开闭原则和里氏替换原则往往是生死相依、不离不弃的，通过里氏替换来达到对扩展开放，对修改关闭的效果。然而，这两个原则都同时强调了一个 OOP 的重要特性——抽象。因此，在开发过程中运用抽象是走向代码优化的重要一步。</p><hr><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><hr><p>里氏替换原则（Liskov Substitution Principle，LSP）有两种定义：<br>● <strong>If for each object o1 of type S there is an object o2 of type T such that for all programs P defined in terms of T,the behavior of P is unchanged when o1 is substituted for o2 then S is a subtype of T.</strong>（如果对每一个类型为 S 的对象 o1，都有类型为 T 的对象 o2，使得以 T 定义的所有程序 P 在所有的对象 o1 都代换成 o2 时，程序 P 的行为没有发生变化，那么类型 S 是类型 T 的子类型。）</p><p>● <strong>Functions that use pointers or references to base classes must be able to use objects of derived classes without knowing it.</strong>（所有引用基类的地方必须能透明地使用其子类的对象。）</p><hr><h3 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h3><hr><p>里氏替换原则的核心原理是抽象，抽象又依赖于继承这个特性。继承包含这样一层含义：父类中凡是已经实现好的方法（相对于抽象方法而言），实际上是在设定一系列的规范和契约，虽然它不强制要求所有的子类必须遵从这些契约，但是如果子类对这些非抽象方法任意修改，就会对整个继承体系造成破坏。</p><p>继承作为面向对象三大特性之一，在给程序设计带来巨大便利的同时，也带来了弊端。比如使用继承会给程序带来侵入性，程序的可移植性降低，增加了对象间的耦合性，如果一个类被其他的类所继承，则当这个类需要修改时，必须考虑到所有的子类，并且父类修改后，所有涉及到子类的功能都有可能会产生故障。</p><p>问题描述：<strong>有一功能 P1，由类 A 完成。现需要将功能 P1 进行扩展，扩展后的功能为 P，其中 P 由原有功能 P1 与新功能 P2 组成。新功能 P 由类 A 的子类 B 来完成，则子类 B 在完成新功能 P2 的同时，有可能会导致原有功能 P1 发生故障。</strong></p><p>解决方案：<strong>当使用继承时，遵循里氏替换原则</strong>。类 B 继承类 A 时，除添加新的方法完成新增功能 P2 外，尽量不要重写父类 A 的方法，也尽量不要重载父类 A 的方法。</p><p>举例说明：我们需要完成一个两数相减的功能 P1，由类 A 来负责。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">class A &#123;</div><div class="line">    public int func1(int a, int b) &#123;</div><div class="line">        return a - b;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        A a = new A();</div><div class="line">        System.out.println(&quot;100-50=&quot; + a.func1(100, 50));</div><div class="line">        System.out.println(&quot;100-80=&quot; + a.func1(100, 80));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>运行结果：<br>100-50=50<br>100-80=20</p></blockquote><p>后来，我们需要增加一个新的功能 P2：完成两数相加，然后再与100求和，由类 B 来负责。即类 B 需要完成两个功能：</p><ul><li>P1：两数相减。</li><li>P2：两数相加，然后再加100。</li></ul><p>由于类 A 已经实现了第一个功能，所以类 B 继承类 A 后，只需要再完成第二个功能就可以了，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">class B extends A &#123;</div><div class="line">    public int func1(int a, int b) &#123;</div><div class="line">        return a + b;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int func2(int a, int b) &#123;</div><div class="line">        return func1(a, b) + 100;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Client &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        B b = new B();</div><div class="line">        System.out.println(&quot;100-50=&quot; + b.func1(100, 50));</div><div class="line">        System.out.println(&quot;100-80=&quot; + b.func1(100, 80));</div><div class="line">        System.out.println(&quot;100+20+100=&quot; + b.func2(100, 20));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>运行结果：<br>100-50=150<br>100-80=180<br>100+20+100=220</p></blockquote><p>我们发现原本运行正常的相减功能发生了错误。原因就是类 B 在给方法起名时无意中重写了父类的方法，造成所有运行相减功能的代码全部调用了类 B 重写后的方法，造成原本运行正常的功能出现了错误。</p><p>在本例中，引用基类 A 完成的功能，换成子类 B 之后，发生了异常。在实际编程中，我们常常会通过重写父类的方法来完成新的功能，这样写起来虽然简单，但是整个继承体系的可复用性会比较差，特别是运用多态比较频繁时，程序运行出错的几率非常大。如果非要重写父类的方法，比较通用的做法是：<strong>原来的父类和子类都继承一个更通俗的基类，原有的继承关系去掉，采用依赖、聚合，组合等关系代替。</strong></p><p>里氏替换原则通俗的来讲就是：<strong>子类可以扩展父类的功能，但不能改变父类原有的功能。</strong>它包含以下4层含义：</p><ul><li>子类可以实现父类的抽象方法，但不能覆盖父类的非抽象方法；</li><li>子类中可以增加自己特有的方法；</li><li>当子类的方法重载父类的方法时，方法的前置条件（即方法的形参）要比父类方法的输入参数更宽松；</li><li>当子类的方法实现父类的抽象方法时，方法的后置条件（即方法的返回值）要比父类更严格。</li></ul><hr><h3 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h3><hr><p>ANDROID 中的 Window 与 View 的关系，可以写成一个简单的示例，其 UML 图如下所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ae70d1d61a1d7785.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>具体的代码实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">// 窗口类</div><div class="line">public class Window &#123;</div><div class="line">    public void show(View child) &#123;</div><div class="line">        child.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 建立视图抽象，测量视图的宽高为公用代码，绘制实现交给具体的子类</div><div class="line">public abstract class view &#123;</div><div class="line">    public abstract void draw();</div><div class="line">    public void measure(int width, int height) &#123;</div><div class="line">        // 测量视图大小</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 文本控件类的具体实现</div><div class="line">public class TextView extends View &#123;</div><div class="line">    public void draw() &#123;</div><div class="line">        // 绘制文本</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// ImageView 的具体实现</div><div class="line">public class ImageView extends View &#123;</div><div class="line">    public void draw() &#123;</div><div class="line">        // 绘制图片</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述示例中，Window 依赖于 View，而 View 定义了一个视图抽象，measure 是各个子类共享的方法，子类通过覆写 View 的 draw 方法实现具有各自特色的功能。在这里，这个功能就是绘制自身的内容。任何继承自 View 的子类都可以传递给 show 函数，就是所说的里氏替换。通过里氏替换，就可以自定义各式各样、千变万化的 View，然后传递给 Window，Window 负责组织 View，并将 View 显示到屏幕上。</p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.2 ANDROID 面向对象的六大原则——开闭原则</title>
      <link href="/2019/08/02/PATTERN/00.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/"/>
      <url>/2019/08/02/PATTERN/00.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="https://xianxiaotao.github.io/2019/08/01/PATTERN/01.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第一篇：单一职责原则</a><br><a href="">第二篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><p><strong>请使用双缓存技术（内存、SD 卡）继续优化图片加载器？</strong></p><p>第一篇中已经实现了内存缓存类 ImageCache.java，我们还需要增加一个 SD 卡缓存类 DiskCache.java。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapFactory;</div><div class="line">import android.os.Environment;</div><div class="line">import android.text.TextUtils;</div><div class="line"></div><div class="line">import java.io.FileNotFoundException;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.UnsupportedEncodingException;</div><div class="line">import java.security.MessageDigest;</div><div class="line">import java.security.NoSuchAlgorithmException;</div><div class="line"></div><div class="line">public class DiskCache &#123;</div><div class="line"></div><div class="line">    // 图片缓存 SD 卡目录</div><div class="line">    private static String CACHE_DIR =</div><div class="line">            Environment.getExternalStorageDirectory() + &quot;/&quot;;</div><div class="line"></div><div class="line">    // 从 SD 卡缓存中获取图片</div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return BitmapFactory.decodeFile(CACHE_DIR + urlToMd5(url));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 将图片缓存到 SD 卡中</div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        FileOutputStream fileOutputStream = null;</div><div class="line">        try &#123;</div><div class="line">            fileOutputStream = new FileOutputStream(CACHE_DIR + urlToMd5(url));</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (fileOutputStream != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    fileOutputStream.close();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String urlToMd5(String url) &#123;</div><div class="line">        if (TextUtils.isEmpty(url)) &#123;</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">            byte[] bytes = md5.digest(url.getBytes(&quot;UTF-8&quot;));</div><div class="line">            StringBuilder hex = new StringBuilder();</div><div class="line">            for (byte b : bytes) &#123;</div><div class="line">                hex.append(Integer.toHexString(b &amp; 0xff));</div><div class="line">            &#125;</div><div class="line">            hex.append(&quot;.png&quot;);</div><div class="line">            return hex.toString();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;NoSuchAlgorithmException&quot;, e);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;UnsupportedEncodingException&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后修改 ImageLoader.java 源码进行测试，可使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    // private ImageCache mImageCache = new ImageCache();</div><div class="line">    private DiskCache mImageCache = new DiskCache();</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接下来要实现的是：<strong>首先使用内存缓存，如果内存缓存没有图片再使用 SD 卡缓存，如果 SD 卡中也没有图片，最后才从网络上获取。</strong></p><p>于是新建一个双缓存类 DoubleCache.java，源码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class DoubleCache &#123;</div><div class="line"></div><div class="line">    private ImageCache mMemoryCache = new ImageCache();</div><div class="line">    private DiskCache mDiskCache = new DiskCache();</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>虽然双缓存技术很优秀，但是我们最好提供 API，让使用者可以灵活选择缓存方式：只选内存缓存、只选 SD 卡缓存或者选择双缓存方式。而不合格的程序员则会提供如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    private ImageCache mImageCache = new ImageCache();</div><div class="line">    // SD 卡缓存</div><div class="line">    private DiskCache mDiskCache = new DiskCache();</div><div class="line">    // 双缓存</div><div class="line">    private DoubleCache mDoubleCache = new DoubleCache();</div><div class="line">    // true: 单独使用 SD 卡缓存; false: 单独使用内存缓存</div><div class="line">    private boolean isUseDiskCache = false;</div><div class="line">    // true: 使用双缓存</div><div class="line">    private boolean isUseDoubleCache = false;</div><div class="line"></div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        Bitmap bmp = null;</div><div class="line">        if (isUseDoubleCache) &#123;</div><div class="line">            bmp = mDoubleCache.get(url);</div><div class="line">        &#125; else if (isUseDiskCache) &#123;</div><div class="line">            bmp = mDiskCache.get(url);</div><div class="line">        &#125; else &#123;</div><div class="line">            bmp = mImageCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    public void useDiskCache(boolean useDiskCache) &#123;</div><div class="line">        isUseDiskCache = useDiskCache;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void useDoubleCache(boolean useDoubleCache) &#123;</div><div class="line">        isUseDoubleCache = useDoubleCache;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>上述代码中，要加入新的缓存实现时都需要修改 ImageLoader 类，然后通过一个布尔变量让用户选择使用哪种缓存。因此，就使得在 ImageLoader 中存在各种 if-else 判断语句，通过这些判断来确定使用哪种缓存。随着这些逻辑的引入，代码越来越复杂、脆弱。如果不小心写错了某个 if 条件，那就需要更多的时间来排除，整个 ImageLoader 类也会变得越来越臃肿。最重要的是，用户不能自己实现缓存注入到 ImageLoader 中，可扩展性差。</p><p><strong>软件中的对象（类、模块、函数等）应该对于扩展是开放的，但是对于修改是封闭的，这就是开放——关闭原则。</strong></p><p>也就是说，当软件需要变化时，我们应该尽量通过扩展的方式实现变化，而不是通过修改已有的代码来实现。根据这一个原则，我们可以画出如下所示的 UML 图。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-27a4841b8ee201ff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>按照上图进行以下重构：</p><p><strong>提取抽象接口</strong>，用来抽象图片缓存的功能。其声明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface ImageCache &#123;</div><div class="line">    Bitmap get(String url);</div><div class="line">    void put(String url, Bitmap bitmap);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ImageCache 接口简单定义了获取、缓存图片两个函数，缓存的 key 是图片的 url，值是图片本身。内存缓存、SD 卡缓存、双缓存都实现了该接口，我们看看这几个缓存实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">// 内存缓存 MemoryCache 类</div><div class="line">public class MemoryCache implements ImageCache &#123;</div><div class="line">    private LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line"></div><div class="line">    public MemoryCache() &#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initImageCache() &#123;</div><div class="line">        int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class="line">        final int cacheSize = maxMemory / 4;</div><div class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line">            @Override</div><div class="line">            protected int sizeOf(@NonNull String key, @NonNull Bitmap value) &#123;</div><div class="line">                return ImageUtil.getBitmapSize(value) / 1024;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(@NonNull String url, @NonNull Bitmap bitmap) &#123;</div><div class="line">        mImageCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Bitmap get(@NonNull String url) &#123;</div><div class="line">        return mImageCache.get(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// SD 卡缓存 DiskCache 类</div><div class="line">public class DiskCache implements ImageCache &#123;</div><div class="line">    private static String CACHE_DIR =</div><div class="line">            Environment.getExternalStorageDirectory() + &quot;/&quot;;</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return BitmapFactory.decodeFile(CACHE_DIR </div><div class="line">                + ImageUtil.urlToMd5(url));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        FileOutputStream fileOutputStream = null;</div><div class="line">        try &#123;</div><div class="line">            fileOutputStream = new FileOutputStream(CACHE_DIR </div><div class="line">                    + ImageUtil.urlToMd5(url));</div><div class="line">            bitmap.compress(Bitmap.CompressFormat.PNG, 100, fileOutputStream);</div><div class="line">        &#125; catch (FileNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125; finally &#123;</div><div class="line">            if (fileOutputStream != null) &#123;</div><div class="line">                try &#123;</div><div class="line">                    fileOutputStream.close();</div><div class="line">                &#125; catch (IOException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">// 双缓存 DoubleCache 类</div><div class="line">public class DoubleCache implements ImageCache &#123;</div><div class="line">    private MemoryCache mMemoryCache = new MemoryCache();</div><div class="line">    private DiskCache mDiskCache = new DiskCache();</div><div class="line"></div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        Bitmap bitmap = mMemoryCache.get(url);</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            bitmap = mDiskCache.get(url);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        mMemoryCache.put(url, bitmap);</div><div class="line">        mDiskCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后重构 ImageLoader，如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存，默认内存缓存</div><div class="line">    private ImageCache mImageCache = new MemoryCache();</div><div class="line"></div><div class="line">    // 线程池，线程数量为 CPU 的数量</div><div class="line">    private ExecutorService mExecutorService = Executors.newFixedThreadPool(</div><div class="line">            Runtime.getRuntime().availableProcessors());</div><div class="line"></div><div class="line">    // UI Handler</div><div class="line">    private Handler mUiHandler = new Handler(Looper.getMainLooper());</div><div class="line">    </div><div class="line">    // 注入缓存实现</div><div class="line">    public void setImageCache(ImageCache cache) &#123;</div><div class="line">        mImageCache = cache;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        Bitmap bitmap = mImageCache.get(url);</div><div class="line">        if (bitmap != null) &#123;</div><div class="line">            imageView.setImageBitmap(bitmap);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 内存中没有，去加载</div><div class="line">        submitLoadRequest(url, imageView);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void submitLoadRequest(final String url, </div><div class="line">                                   final ImageView imageView) &#123;</div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Bitmap bitmap = ImageUtil.downloadImage(url);</div><div class="line">                if (bitmap == null) return;</div><div class="line">                if (url.equals(imageView.getTag())) &#123;</div><div class="line">                    updateImageView(imageView, bitmap);</div><div class="line">                &#125;</div><div class="line">                mImageCache.put(url, bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 通知界面更新显示图片</div><div class="line">    private void updateImageView(final ImageView imageView,</div><div class="line">                                 final Bitmap bitmap) &#123;</div><div class="line">        mUiHandler.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>附工具类 ImageUtil.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">public class ImageUtil &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下载图片</div><div class="line">     * @param imageUrl 图片链接</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    public static Bitmap downloadImage(String imageUrl) &#123;</div><div class="line">        if (TextUtils.isEmpty(imageUrl)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(imageUrl);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</div><div class="line">            conn.disconnect();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 计算图片大小</div><div class="line">     * @param bitmap 图片</div><div class="line">     * @return int</div><div class="line">     */</div><div class="line">    public static int getBitmapSize(Bitmap bitmap) &#123;</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            return bitmap.getAllocationByteCount();</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">            return bitmap.getByteCount();</div><div class="line">        &#125;</div><div class="line">        return bitmap.getRowBytes() * bitmap.getHeight();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将图片 url 转换成字符串，用作文件名称</div><div class="line">     * @param url</div><div class="line">     * @return</div><div class="line">     */</div><div class="line">    public static String urlToMd5(String url) &#123;</div><div class="line">        if (TextUtils.isEmpty(url)) &#123;</div><div class="line">            return &quot;&quot;;</div><div class="line">        &#125;</div><div class="line">        try &#123;</div><div class="line">            MessageDigest md5 = MessageDigest.getInstance(&quot;MD5&quot;);</div><div class="line">            byte[] bytes = md5.digest(url.getBytes(&quot;UTF-8&quot;));</div><div class="line">            StringBuilder builder = new StringBuilder();</div><div class="line">            for (byte b : bytes) &#123;</div><div class="line">                builder.append(Integer.toHexString(b &amp; 0xff));</div><div class="line">            &#125;</div><div class="line">            builder.append(&quot;.png&quot;);</div><div class="line">            return builder.toString();</div><div class="line">        &#125; catch (NoSuchAlgorithmException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;NoSuchAlgorithmException&quot;, e);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;</div><div class="line">            throw new RuntimeException(&quot;UnsupportedEncodingException&quot;, e);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>经过此次重构，没有了那么多的 if-else 语句，没有了各种各样的缓存实现对象、布尔变量，代码确实清晰简洁。用户可以通过setImageCache(ImageCache cache) 函数设置缓存实现，也就是通常说的依赖注入。具体如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">ImageLoader imageLoader = new ImageLoader();</div><div class="line">// 使用内存缓存</div><div class="line">imageLoader.setImageCache(new MemoryCache());</div><div class="line">// 使用 SD 卡缓存</div><div class="line">imageLoader.setImageCache(new DiskCache());</div><div class="line">// 使用双缓存</div><div class="line">imageLoader.setImageCache(new DoubleCache());</div><div class="line">// 使用自定义的图片缓存实现</div><div class="line">imageLoader.setImageCache(new ImageCache() &#123;</div><div class="line">    @Override</div><div class="line">    public Bitmap get(String url) &#123;</div><div class="line">        return null; // 从缓存中获取图片</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void put(String url, Bitmap bitmap) &#123;</div><div class="line">        // 缓存图片</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>在上述代码中，通过 setImageCache(ImageCache cache) 方法注入不同的缓存实现，这样不仅能够使 ImageLoader 更简单、健壮，也使得 ImageLoader 的可扩展性、灵活性更高。MemoryCache、DiskCache、DoubleCache 缓存图片的具体实现完全不一样，但是，它们的一个特点是，都实现了 ImageCache 接口。当用户需要自定义实现缓存策略时，只需要新建一个实现 ImageCache 接口的类，然后构造该类的对象，并且通过 setImageCache 函数注入到 ImageLoader 中，这样 ImageLoader 就实现了千变万化的缓存策略，且扩展这些缓存策略并不会导致 ImageLoader 类的修改。</p><p>开闭原则指导我们，当软件需要变化时，应该尽量通过扩展的方式来实现变化，而不是通过修改已有的代码来实现。但是通过继承等方式添加新的实现，这会导致类型的膨胀以及历史遗留代码的冗余。在开发过程中需要自己结合具体情况进行考量。</p><hr><h3 id="开闭原则概述"><a href="#开闭原则概述" class="headerlink" title="开闭原则概述"></a>开闭原则概述</h3><hr><p><strong>软件实体应当对扩展开放，对修改关闭 (Software entities should be open for extension, but closed for modification)。</strong></p><p><strong>开闭原则</strong>是面向对象设计中“可复用设计”的基石，是设计模式最基本的法则。其他五大设计原则和 23 种设计模式都可以看做是开闭原则的实现方法和手段。</p><p>说的通俗一点就是，已经开发好的软件实体（如类、模块、函数），在升级迭代引入新功能时，不应该修改已有的代码，而是在已有代码的基础上，添加新代码来实现。</p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>00.1 ANDROID 面向对象的六大原则——单一职责原则</title>
      <link href="/2019/08/01/PATTERN/00.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/"/>
      <url>/2019/08/01/PATTERN/00.1%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%8D%95%E4%B8%80%E8%81%8C%E8%B4%A3%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><hr><p><a href="">第一篇：本文</a><br><a href="https://xianxiaotao.github.io/2019/08/02/PATTERN/01.2%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E5%BC%80%E9%97%AD%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第二篇：开闭原则</a><br><a href="https://xianxiaotao.github.io/2019/08/03/PATTERN/01.3%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E9%87%8C%E6%B0%8F%E6%9B%BF%E6%8D%A2%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第三篇：里氏替换原则</a><br><a href="https://xianxiaotao.github.io/2019/08/04/PATTERN/01.4%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E4%BE%9D%E8%B5%96%E5%80%92%E7%BD%AE%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第四篇：依赖倒置原则</a><br><a href="https://xianxiaotao.github.io/2019/08/05/PATTERN/01.5%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E6%8E%A5%E5%8F%A3%E9%9A%94%E7%A6%BB%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第五篇：接口隔离原则</a><br><a href="https://xianxiaotao.github.io/2019/08/06/PATTERN/01.6%20ANDROID%20%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%85%AD%E5%A4%A7%E5%8E%9F%E5%88%99%E2%80%94%E2%80%94%E8%BF%AA%E7%B1%B3%E7%89%B9%E5%8E%9F%E5%88%99/" target="_blank" rel="external">第六篇：迪米特原则</a></p><hr><p><strong>请实现一个简易的图片加载器（ImageLoader）？</strong></p><p>以下是一个新手实现的图片加载器源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapFactory;</div><div class="line">import android.os.Handler;</div><div class="line">import android.os.Looper;</div><div class="line">import android.text.TextUtils;</div><div class="line">import android.util.LruCache;</div><div class="line">import android.widget.ImageView;</div><div class="line"></div><div class="line">import java.net.HttpURLConnection;</div><div class="line">import java.net.URL;</div><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line"></div><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line">    // 线程池，线程数量为 CPU 的数量</div><div class="line">    ExecutorService mExecutorService = Executors.newFixedThreadPool(</div><div class="line">            Runtime.getRuntime().availableProcessors());</div><div class="line">    // UI Handler</div><div class="line">    Handler mUiHandler = new Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    public ImageLoader() &#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化内存缓存</div><div class="line">     */</div><div class="line">    private void initImageCache() &#123;</div><div class="line">        // 计算可用的最大内存</div><div class="line">        final int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class="line">        // 取四分之一的可用内存作为缓存</div><div class="line">        final int cacheSize = maxMemory / 4;</div><div class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line">            @Override</div><div class="line">            protected int sizeOf(String key, Bitmap bitmap) &#123;</div><div class="line">                return bitmap.getRowBytes() * bitmap.getHeight() / 1024;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加载指定 url 的图片并显示</div><div class="line">     */</div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        // 先从内存中找</div><div class="line">        Bitmap bmp = mImageCache.get(url);</div><div class="line">        if (bmp != null) &#123;</div><div class="line">            imageView.setImageBitmap(bmp);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 内存中没有，去加载</div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Bitmap bitmap = downloadImage(url);</div><div class="line">                if (bitmap == null) return;</div><div class="line">                if (url.equals(imageView.getTag())) &#123;</div><div class="line">                    updateImageView(imageView, bitmap);</div><div class="line">                &#125;</div><div class="line">                mImageCache.put(url, bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通知界面更新显示图片</div><div class="line">     * @param imageView ImageView</div><div class="line">     * @param bitmap 位图</div><div class="line">     */</div><div class="line">    private void updateImageView(final ImageView imageView, </div><div class="line">                                 final Bitmap bitmap) &#123;</div><div class="line">        mUiHandler.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下载指定 url 的图片</div><div class="line">     * @param imageUrl 图片链接</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    private Bitmap downloadImage(String imageUrl) &#123;</div><div class="line">        if (TextUtils.isEmpty(imageUrl)) return null;</div><div class="line"></div><div class="line">        Bitmap bitmap = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(imageUrl);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</div><div class="line">            conn.disconnect();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 动态申请权限</div><div class="line">requestRuntimePermission(new String[]&#123;&quot;android.permission.WRITE_EXTERNAL_STORAGE&quot;&#125;, null);</div><div class="line">String url = &quot;https://upload-images.jianshu.io/upload_images/14186083-9bb468395ee3d048.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240&quot;;</div><div class="line">ImageView imageView = findViewById(R.id.image);</div><div class="line">new ImageLoader().displayImage(url, imageView);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bc755e9afc10cbf3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="图片加载器"></p><blockquote><p>上述代码虽然满足功能需求，但是所有的功能代码都写在一个类中，这样随着功能的增多，ImageLoader 类会越来越大，代码也越来越负责，图片加载系统就越来越脆弱……</p></blockquote><p>我们可以参照<strong>单一职责原则</strong>，把 ImageLoader 拆分一下，让各个功能独立出来：</p><ul><li>ImageCache：用于处理图片缓存。</li><li>ImageUtil：图片工具类，如获取图片大小、下载图片等。</li></ul><p>改进后的源码：<br><strong>ImageLoader.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.os.Handler;</div><div class="line">import android.os.Looper;</div><div class="line">import android.widget.ImageView;</div><div class="line"></div><div class="line">import java.util.concurrent.ExecutorService;</div><div class="line">import java.util.concurrent.Executors;</div><div class="line"></div><div class="line">public class ImageLoader &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    private ImageCache mImageCache = new ImageCache();</div><div class="line">    // 线程池，线程数量为 CPU 的数量</div><div class="line">    private ExecutorService mExecutorService = Executors.newFixedThreadPool(</div><div class="line">            Runtime.getRuntime().availableProcessors());</div><div class="line">    // UI Handler</div><div class="line">    private Handler mUiHandler = new Handler(Looper.getMainLooper());</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 加载指定 url 的图片并显示</div><div class="line">     */</div><div class="line">    public void displayImage(final String url, final ImageView imageView) &#123;</div><div class="line">        // 先从内存中找</div><div class="line">        Bitmap bmp = mImageCache.get(url);</div><div class="line">        if (bmp != null) &#123;</div><div class="line">            imageView.setImageBitmap(bmp);</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 内存中没有，去加载</div><div class="line">        imageView.setTag(url);</div><div class="line">        mExecutorService.submit(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                Bitmap bitmap = ImageUtil.downloadImage(url);</div><div class="line">                if (bitmap == null) return;</div><div class="line">                if (url.equals(imageView.getTag())) &#123;</div><div class="line">                    updateImageView(imageView, bitmap);</div><div class="line">                &#125;</div><div class="line">                mImageCache.put(url, bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 通知界面更新显示图片</div><div class="line">     * @param imageView ImageView</div><div class="line">     * @param bitmap 位图</div><div class="line">     */</div><div class="line">    private void updateImageView(final ImageView imageView,</div><div class="line">                                 final Bitmap bitmap) &#123;</div><div class="line">        mUiHandler.post(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                imageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>ImageCache.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line"></div><div class="line">import androidx.annotation.NonNull;</div><div class="line">import androidx.collection.LruCache;</div><div class="line"></div><div class="line">public class ImageCache &#123;</div><div class="line"></div><div class="line">    // 图片缓存</div><div class="line">    private LruCache&lt;String, Bitmap&gt; mImageCache;</div><div class="line"></div><div class="line">    public ImageCache() &#123;</div><div class="line">        initImageCache();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initImageCache() &#123;</div><div class="line">        // 计算可使用的最大内存</div><div class="line">        int maxMemory = (int) (Runtime.getRuntime().maxMemory() / 1024);</div><div class="line">        // 取四分之一的可用内存作为缓存</div><div class="line">        final int cacheSize = maxMemory / 4;</div><div class="line">        mImageCache = new LruCache&lt;String, Bitmap&gt;(cacheSize) &#123;</div><div class="line">            @Override</div><div class="line">            protected int sizeOf(@NonNull String key, @NonNull Bitmap value) &#123;</div><div class="line">                return ImageUtil.getBitmapSize(value) / 1024;</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void put(@NonNull String url, @NonNull Bitmap bitmap) &#123;</div><div class="line">        mImageCache.put(url, bitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Bitmap get(@NonNull String url) &#123;</div><div class="line">        return mImageCache.get(url);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>ImageUtil.java</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.graphics.Bitmap;</div><div class="line">import android.graphics.BitmapFactory;</div><div class="line">import android.os.Build;</div><div class="line">import android.text.TextUtils;</div><div class="line"></div><div class="line">import java.net.HttpURLConnection;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">public class ImageUtil &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 下载图片</div><div class="line">     * @param imageUrl 图片链接</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    public static Bitmap downloadImage(String imageUrl) &#123;</div><div class="line">        if (TextUtils.isEmpty(imageUrl)) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        Bitmap bitmap = null;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(imageUrl);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            bitmap = BitmapFactory.decodeStream(conn.getInputStream());</div><div class="line">            conn.disconnect();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 计算图片大小</div><div class="line">     * @param bitmap 图片</div><div class="line">     * @return int</div><div class="line">     */</div><div class="line">    public static int getBitmapSize(Bitmap bitmap) &#123;</div><div class="line">        if (bitmap == null) &#123;</div><div class="line">            return 0;</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">            return bitmap.getAllocationByteCount();</div><div class="line">        &#125;</div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">            return bitmap.getByteCount();</div><div class="line">        &#125;</div><div class="line">        return bitmap.getRowBytes() * bitmap.getHeight();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="单一职责原则概述"><a href="#单一职责原则概述" class="headerlink" title="单一职责原则概述"></a>单一职责原则概述</h3><hr><p><strong>应该有且仅有一个原因引起类的变更 (There should never be more than one reason for a class to change)。</strong></p><p>单一职责原则为我们提供了一个编写程序的准则，要求我们在编写类，抽象类，接口时，要使其功能职责单一纯碎，将导致其变更的因素缩减到最少。</p><p>如果一个类承担的职责过多，就等于把这些职责耦合在一起。一个职责的变化可能会影响或损坏其他职责的功能。而且职责越多，这个类变化的几率就会越大，类的稳定性就会越低。</p><p>在软件开发中，经常会遇到一个功能类 T 负责两个不同的职责：职责 P1，职责 P2。现因需求变更需要更改职责 P1 来满足新的业务需求，当我们实现完成后，发现因更改职责 P1 竟导致原本能够正常运行的职责 P2 发生故障。而修复职责 P2 又不得不更改职责 P1 的逻辑，这便是因为功能类 T 的职责不够单一，职责 P1 与职责 P2 耦合在一起导致的。</p><h3 id="附：动态权限申请代码"><a href="#附：动态权限申请代码" class="headerlink" title="附：动态权限申请代码"></a>附：动态权限申请代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.pm.PackageManager;</div><div class="line"></div><div class="line">import androidx.annotation.NonNull;</div><div class="line">import androidx.appcompat.app.AppCompatActivity;</div><div class="line">import androidx.core.app.ActivityCompat;</div><div class="line">import androidx.core.content.ContextCompat;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class BaseActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private PermissionListener mListener;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 权限申请</div><div class="line">     * @param permissions 待申请的权限集合</div><div class="line">     * @param listener  申请结果监听事件</div><div class="line">     */</div><div class="line">    protected void requestRuntimePermission(String[] permissions,</div><div class="line">                                            PermissionListener listener)&#123;</div><div class="line">        this.mListener = listener;</div><div class="line"></div><div class="line">        // 用于存放为授权的权限</div><div class="line">        List&lt;String&gt; permissionList = new ArrayList&lt;&gt;();</div><div class="line">        // 遍历传递过来的权限集合</div><div class="line">        for (String permission : permissions) &#123;</div><div class="line">            // 判断是否已经授权</div><div class="line">            if (ContextCompat.checkSelfPermission(this,permission)</div><div class="line">                    != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">                // 未授权，则加入待授权的权限集合中</div><div class="line">                permissionList.add(permission);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 判断集合，如果集合不为空，则需要去授权</div><div class="line">        if (!permissionList.isEmpty()) &#123;</div><div class="line">            ActivityCompat.requestPermissions(this,</div><div class="line">                    permissionList.toArray(new String[permissionList.size()]),</div><div class="line">                    1);</div><div class="line">        &#125;</div><div class="line">        // 为空，则已经全部授权</div><div class="line">        else &#123;</div><div class="line">            if (listener != null) &#123;</div><div class="line">                listener.onGranted();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 权限申请结果</div><div class="line">     * @param requestCode  请求码</div><div class="line">     * @param permissions  所有的权限集合</div><div class="line">     * @param grantResults 授权结果集合</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onRequestPermissionsResult(int requestCode,</div><div class="line">                                           @NonNull String[] permissions,</div><div class="line">                                           @NonNull int[] grantResults) &#123;</div><div class="line">        super.onRequestPermissionsResult(requestCode, permissions, </div><div class="line">                grantResults);</div><div class="line">        if (requestCode == 1 &amp;&amp; grantResults.length &gt; 0) &#123;</div><div class="line">            // 被用户拒绝的权限集合</div><div class="line">            List&lt;String&gt; deniedPermissions = new ArrayList&lt;&gt;();</div><div class="line">            // 用户通过的权限集合</div><div class="line">            List&lt;String&gt; grantedPermissions = new ArrayList&lt;&gt;();</div><div class="line">            for (int i = 0; i &lt; grantResults.length; i++) &#123;</div><div class="line">                // 获取授权结果，这是一个int类型的值</div><div class="line">                int grantResult = grantResults[i];</div><div class="line"></div><div class="line">                // 用户拒绝授权的权限</div><div class="line">                if (grantResult != PackageManager.PERMISSION_GRANTED)&#123;</div><div class="line">                    String permission = permissions[i];</div><div class="line">                    deniedPermissions.add(permission);</div><div class="line">                &#125;</div><div class="line">                // 用户同意的权限</div><div class="line">                else &#123;</div><div class="line">                    String permission = permissions[i];</div><div class="line">                    grantedPermissions.add(permission);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 用户拒绝权限为空</div><div class="line">            if (deniedPermissions.isEmpty()) &#123;</div><div class="line">                if(mListener != null)&#123;</div><div class="line">                    mListener.onGranted();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 不为空</div><div class="line">            else &#123;</div><div class="line">                if(mListener != null)&#123;</div><div class="line">                    // 回调授权成功的接口</div><div class="line">                    mListener.onDenied(deniedPermissions);</div><div class="line">                    // 回调授权失败的接口</div><div class="line">                    mListener.onGranted(grantedPermissions);</div><div class="line">                    mListener.onDenied();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PermissionListener.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public interface PermissionListener &#123;</div><div class="line">    // 授权成功</div><div class="line">    void onGranted();</div><div class="line">    // 授权部分</div><div class="line">    void onGranted(List&lt;String&gt; grantedPermission);</div><div class="line">    // 拒绝授权</div><div class="line">    void onDenied(List&lt;String&gt; deniedPermission);</div><div class="line">    // 授权失败</div><div class="line">    void onDenied();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T007 自定义控件 图文弹跳加载中效果</title>
      <link href="/2019/07/20/Custom%20View/T007%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E5%9B%BE%E6%96%87%E5%BC%B9%E8%B7%B3%E5%8A%A0%E8%BD%BD%E4%B8%AD%E6%95%88%E6%9E%9C/"/>
      <url>/2019/07/20/Custom%20View/T007%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E5%9B%BE%E6%96%87%E5%BC%B9%E8%B7%B3%E5%8A%A0%E8%BD%BD%E4%B8%AD%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-03b7334fbf14edfb.gif?imageMogr2/auto-orient/strip" alt=""></p><p>要想实现上述效果，需要准备三张图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ca8cac0e6e5cd734.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loading_text_1.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b525f50422a24b09.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loading_text_2.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a452b33c2f107f50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="loading_text_3.png"></p><p>然后让控件派生自 ImageView 类，这样才能方便地更改它的源文件内容。</p><p>想让图片上下跳动，可以利用 ValueAnimator 实时产生一个 0~200 的数值，然后让当前图片的位置实时向上移动 ValueAnimator 的动态值的高度即可。要让图片的位置实时向上移动，就需要先拿到初始状态下图片的位置。重写 onLayout(boolean changed, int left, int top, int right, int bottom) 函数，就可以拿到控件的初始高度 mTop，之后在每次 ValueAnimator 的动态值到来时，计算出当前控件的 top 位置，并将控件移动到这个位置就可以了。</p><p>即：自定义一个控件 LoadingImageView， 派生自 ImageView，然后重写 onLayout() 函数，拿到控件的初始 top 值。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    // 初始 top</div><div class="line">    private int mTop;</div><div class="line">    // 当前动画图片索引</div><div class="line">    private int mCurImgIndex = 0;</div><div class="line">    // 动画图片总张数</div><div class="line">    private static int mImgCount = 3;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</div><div class="line">        super.onLayout(changed, left, top, right, bottom);</div><div class="line">        mTop = top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>由于我们需要在刚展示图片时就开始动画，所以将动画的操作全部写在 init() 函数中。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    ValueAnimator valueAnimator = ValueAnimator.ofInt(0, 200, 0);</div><div class="line">    valueAnimator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">    valueAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">    valueAnimator.setDuration(1000);</div><div class="line">    valueAnimator.setInterpolator(new AccelerateInterpolator());</div><div class="line">    valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            Integer dx = (Integer) animation.getAnimatedValue();</div><div class="line">            setTop(mTop - dx);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过 (mTop - dx) 得到当前控件相对初始坐标上移 dx 距离后的最新坐标点，然后调用 setTop(int top) 函数将控件移动到当前位置。</p><p>接下来需要监听动画的开始和重复。当动画开始时，图片应该设置为 loading_text_1.png；在重复时，每重复一次应该更换一张图片。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 当前动画图片索引</div><div class="line">private int mCurImgIndex = 0;</div><div class="line">// 动画图片总张数</div><div class="line">private static int mImgCount = 3;</div><div class="line"></div><div class="line">private void init() &#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    valueAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationStart(Animator animation) &#123;</div><div class="line">            setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">        @Override</div><div class="line">        public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">        @Override</div><div class="line">        public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">            mCurImgIndex++;</div><div class="line">            switch (mCurImgIndex % mImgCount) &#123;</div><div class="line">                case 0:</div><div class="line">                    setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">                    break;</div><div class="line">                case 1:</div><div class="line">                    setImageDrawable(getResources().getDrawable(R.drawable.loading_text_2));</div><div class="line">                    break;</div><div class="line">                case 2:</div><div class="line">                    setImageDrawable(getResources().getDrawable(R.drawable.loading_text_3));</div><div class="line">                    break;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line"></div><div class="line">    valueAnimator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在更改图片时，我们使用 mCurImgIndex 来累加当前重复的次数，通过与图片总张数 (mImgCount) 取余数，来决定这次重复使用的是哪张图片。</p><p>使用控件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.LoadingImageView</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:layout_margin=&quot;50dp&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>LoadingImageView 的完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.animation.Animator;</div><div class="line">import android.animation.ValueAnimator;</div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.animation.AccelerateInterpolator;</div><div class="line"></div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private int mTop;</div><div class="line">    // 当前动画图片索引</div><div class="line">    private int mCurImgIndex = 0;</div><div class="line">    // 动画图片总张数</div><div class="line">    private static int mImgCount = 3;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        ValueAnimator valueAnimator = ValueAnimator.ofInt(0, 200, 0);</div><div class="line">        valueAnimator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">        valueAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        valueAnimator.setDuration(1000);</div><div class="line">        valueAnimator.setInterpolator(new AccelerateInterpolator());</div><div class="line">        valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                Integer dx = (Integer) animation.getAnimatedValue();</div><div class="line">                setTop(mTop - dx);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        valueAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                mCurImgIndex++;</div><div class="line">                switch (mCurImgIndex % mImgCount) &#123;</div><div class="line">                    case 0:</div><div class="line">                        setImageDrawable(getResources().getDrawable(R.drawable.loading_text_1));</div><div class="line">                        break;</div><div class="line">                    case 1:</div><div class="line">                        setImageDrawable(getResources().getDrawable(R.drawable.loading_text_2));</div><div class="line">                        break;</div><div class="line">                    case 2:</div><div class="line">                        setImageDrawable(getResources().getDrawable(R.drawable.loading_text_3));</div><div class="line">                        break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        valueAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</div><div class="line">        super.onLayout(changed, left, top, right, bottom);</div><div class="line">        mTop = top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T006 自定义控件 扫描雷达动画</title>
      <link href="/2019/07/19/Custom%20View/T006%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E6%89%AB%E6%8F%8F%E9%9B%B7%E8%BE%BE%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/19/Custom%20View/T006%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E6%89%AB%E6%8F%8F%E9%9B%B7%E8%BE%BE%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d200aff4a7b219d9.gif?imageMogr2/auto-orient/strip" alt=""></p><h3 id="一、说明"><a href="#一、说明" class="headerlink" title="一、说明"></a>一、说明</h3><ul><li>表层是一张指针图，增加旋转动画，每旋转一周，增加一个波纹扩散动画效果。</li><li>波纹扩散动画效果是在底层的波纹图上实现缩放和透明度变化的组合动画。</li><li>使用容器来保存波纹扩散动画，便于复用。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c358aabf4dcd605b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="指针原图"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1478d5d2bd1083fd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="波纹原图"></p><h3 id="二、完整代码"><a href="#二、完整代码" class="headerlink" title="二、完整代码"></a>二、完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.animation.Animator;</div><div class="line">import android.animation.AnimatorSet;</div><div class="line">import android.animation.ObjectAnimator;</div><div class="line">import android.animation.ValueAnimator;</div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.Gravity;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.animation.LinearInterpolator;</div><div class="line">import android.widget.FrameLayout;</div><div class="line">import android.widget.ImageView;</div><div class="line">import android.widget.TextView;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">public class ScanningView extends FrameLayout &#123;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 指针</div><div class="line">     */</div><div class="line">    private ImageView ivNeedle;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 波纹</div><div class="line">     */</div><div class="line">    private ImageView ivRipple;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 中间文字</div><div class="line">     */</div><div class="line">    private TextView tvTitle;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 装波纹的容器</div><div class="line">     */</div><div class="line">    private FrameLayout fl_move_circle;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 匀速插值器</div><div class="line">     */</div><div class="line">    private LinearInterpolator interpolator = new LinearInterpolator();</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 准备动画</div><div class="line">     */</div><div class="line">    private AnimatorSet prepareAnim;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 指针旋转动画</div><div class="line">     */</div><div class="line">    private ObjectAnimator needleRotateAnim;</div><div class="line"></div><div class="line">    private List&lt;AnimatorSet&gt; animList = new ArrayList&lt;&gt;();</div><div class="line">    private int animCount = 3;</div><div class="line">    private int index = 0;</div><div class="line"></div><div class="line">    public ScanningView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public ScanningView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initView()&#123;</div><div class="line">        View v = LayoutInflater.from(getContext()).inflate(R.layout.rotate_view,null);</div><div class="line">        ivNeedle = v.findViewById(R.id.iv_btn);</div><div class="line">        ivRipple = v.findViewById(R.id.iv_out_circle);</div><div class="line">        tvTitle = v.findViewById(R.id.tv_title);</div><div class="line">        fl_move_circle = v.findViewById(R.id.fl_move_circle);</div><div class="line">        addView(v, LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line"></div><div class="line">        initAnim();</div><div class="line"></div><div class="line">        prepareAnim.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化动画</div><div class="line">     * 准备动画 prepareAnim</div><div class="line">     * 扫描动画 scanningAnim</div><div class="line">     */</div><div class="line">    private void initAnim() &#123;</div><div class="line">        initPrepareAnim();</div><div class="line">        initScanningAnim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initPrepareAnim() &#123;</div><div class="line">        // 开始循环的放大缩小波纹</div><div class="line">        ObjectAnimator outCircleAlpha = ObjectAnimator.ofFloat(ivRipple, &quot;alpha&quot;, 0.2f, 0.6f);</div><div class="line">        outCircleAlpha.setDuration(1000);</div><div class="line">        ObjectAnimator outCircleAnimX = ObjectAnimator.ofFloat(ivRipple, &quot;scaleX&quot;, 1f, 1.18f, 1f);</div><div class="line">        outCircleAnimX.setDuration(2000);</div><div class="line">        outCircleAnimX.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        outCircleAnimX.setInterpolator(interpolator);</div><div class="line">        ObjectAnimator outCircleAnimY = ObjectAnimator.ofFloat(ivRipple, &quot;scaleY&quot;, 1f, 1.18f, 1f);</div><div class="line">        outCircleAnimY.setDuration(2000);</div><div class="line">        outCircleAnimY.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        outCircleAnimY.setInterpolator(interpolator);</div><div class="line">        prepareAnim = new AnimatorSet();</div><div class="line">        prepareAnim.playTogether(outCircleAnimX, outCircleAnimY, outCircleAlpha);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initScanningAnim() &#123;</div><div class="line">        // 指针转动动画</div><div class="line">        needleRotateAnim = ObjectAnimator.ofFloat(ivNeedle, &quot;rotation&quot;, 0f, 360f);</div><div class="line">        needleRotateAnim.setDuration(1800);</div><div class="line">        needleRotateAnim.setInterpolator(interpolator);</div><div class="line">        needleRotateAnim.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        needleRotateAnim.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                playRippleAnim();</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                playRippleAnim();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initRippleAnim() &#123;</div><div class="line">        final ImageView imageView = new ImageView(getContext());</div><div class="line">        LayoutParams lp = new LayoutParams(dip2px(getContext(), 110), dip2px(getContext(), 110));</div><div class="line">        lp.gravity = Gravity.CENTER;</div><div class="line">        imageView.setLayoutParams(lp);</div><div class="line">        imageView.setImageResource(R.drawable.ripple);</div><div class="line">        fl_move_circle.addView(imageView);</div><div class="line">        ObjectAnimator outCircleAnimX = ObjectAnimator.ofFloat(imageView, &quot;scaleX&quot;, 1f, 5f);</div><div class="line">        ObjectAnimator outCircleAnimY = ObjectAnimator.ofFloat(imageView, &quot;scaleY&quot;, 1f, 5f);</div><div class="line">        ObjectAnimator alphaAnim = ObjectAnimator.ofFloat(imageView, &quot;alpha&quot;, 0.6f, 0);</div><div class="line">        outCircleAnimX.setDuration(5000);</div><div class="line">        outCircleAnimY.setDuration(5000);</div><div class="line">        alphaAnim.setDuration(5000);</div><div class="line">        final AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.playTogether(outCircleAnimX, outCircleAnimY, alphaAnim);</div><div class="line"></div><div class="line">        animList.add(animatorSet);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void playRippleAnim() &#123;</div><div class="line">        if (animList.size() &lt; animCount) &#123;</div><div class="line">            initRippleAnim();</div><div class="line">        &#125;</div><div class="line">        animList.get(index).start();</div><div class="line">        index++;</div><div class="line">        if (index == animCount) index = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 模拟开始</div><div class="line">     */</div><div class="line">    public void onceClick()&#123;</div><div class="line">        // 取消掉循环的波纹</div><div class="line">        prepareAnim.cancel();</div><div class="line">        ivRipple.setVisibility(GONE);</div><div class="line"></div><div class="line">        needleRotateAnim.start();</div><div class="line">        tvTitle.setText(&quot;扫描中&quot;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据手机的分辨率从 dip 的单位 转成为 px(像素)</div><div class="line">     */</div><div class="line">    public static int dip2px(Context context, float dpValue) &#123;</div><div class="line">        final float scale = context.getResources().getDisplayMetrics().density;</div><div class="line">        return (int) (dpValue * scale + 0.5f);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其布局文件 res/layout/scanning_view.xml 如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;#69C8FA&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line"></div><div class="line">    &lt;FrameLayout</div><div class="line">        android:id=&quot;@+id/fl_move_circle&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_out_circle&quot;</div><div class="line">        android:layout_width=&quot;110dp&quot;</div><div class="line">        android:layout_height=&quot;110dp&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:alpha=&quot;0.6&quot;</div><div class="line">        android:src=&quot;@drawable/ripple&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv_btn&quot;</div><div class="line">        android:layout_width=&quot;110dp&quot;</div><div class="line">        android:layout_height=&quot;110dp&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:src=&quot;@drawable/needle&quot; /&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv_title&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:textColor=&quot;#ffffff&quot;</div><div class="line">        android:layout_gravity=&quot;center&quot;</div><div class="line">        android:text=&quot;点击扫描&quot;</div><div class="line">        android:textSize=&quot;10sp&quot;</div><div class="line">        android:layout_marginTop=&quot;13dp&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line"></div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure></p><h3 id="三、使用"><a href="#三、使用" class="headerlink" title="三、使用"></a>三、使用</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class DemoActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_demo);</div><div class="line"></div><div class="line">        final ScanningView view = findViewById(R.id.scanning);</div><div class="line">        view.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                view.onceClick();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.ScanningView</div><div class="line">        android:id=&quot;@+id/scanning&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T005 自定义控件 可配置加载 ImageView</title>
      <link href="/2019/07/18/Custom%20View/T005%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%20ImageView/"/>
      <url>/2019/07/18/Custom%20View/T005%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E5%8F%AF%E9%85%8D%E7%BD%AE%E5%8A%A0%E8%BD%BD%20ImageView/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dd9b1010d91ba48c.gif?imageMogr2/auto-orient/strip" alt=""></p><p>原理很简单，使一张图围绕自己的中心点匀速旋转。完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.animation.Animation;</div><div class="line">import android.view.animation.LinearInterpolator;</div><div class="line">import android.view.animation.RotateAnimation;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        RotateAnimation rotateAnim = new RotateAnimation(0, 360,</div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f,</div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">        rotateAnim.setRepeatCount(Animation.INFINITE);</div><div class="line">        rotateAnim.setDuration(1000);</div><div class="line">        rotateAnim.setInterpolator(new LinearInterpolator());</div><div class="line">        this.startAnimation(rotateAnim);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用方式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.LoadingImageView</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:layout_margin=&quot;50dp&quot;</div><div class="line">        android:src=&quot;@drawable/taiji&quot;/&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T004 自定义控件 由远及近 ImageView</title>
      <link href="/2019/07/17/Custom%20View/T004%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%94%B1%E8%BF%9C%E5%8F%8A%E8%BF%91%20ImageView/"/>
      <url>/2019/07/17/Custom%20View/T004%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E7%94%B1%E8%BF%9C%E5%8F%8A%E8%BF%91%20ImageView/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-817072fe0e22d8fd.gif?imageMogr2/auto-orient/strip" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/#jump2" target="_blank" rel="external">ScaleAnimation</a>、<a href="https://xianxiaotao.github.io/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/#jump5" target="_blank" rel="external">BounceInterpolator</a></p><p>借助 ScaleAnimation 实现由远及近效果，首先需要让动画从控件某点（触屏点）为中心开始缩放；其次需要在动画结束后，将控件固定在放大后的状态；并使用回弹插值器。</p><p>上述效果图完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.MotionEvent;</div><div class="line">import android.view.animation.Animation;</div><div class="line">import android.view.animation.BounceInterpolator;</div><div class="line">import android.view.animation.ScaleAnimation;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line">import androidx.appcompat.widget.AppCompatImageView;</div><div class="line"></div><div class="line">public class TouchImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private boolean isPlay = false;</div><div class="line"></div><div class="line">    public TouchImageView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TouchImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TouchImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        if (!isPlay) &#123;</div><div class="line">            isPlay = true;</div><div class="line"></div><div class="line">            float pivotXValue = (event.getX() - getLeft()) / getWidth();</div><div class="line">            float pivotYValue = (event.getY() - getTop()) / getHeight();</div><div class="line"></div><div class="line">            ScaleAnimation scaleAnim = new ScaleAnimation(1.0f, 3f, 1.0f, 3f,</div><div class="line">                    Animation.RELATIVE_TO_SELF, pivotXValue,</div><div class="line">                    Animation.RELATIVE_TO_SELF, pivotYValue);</div><div class="line">            scaleAnim.setDuration(3000);</div><div class="line">            scaleAnim.setFillAfter(true);</div><div class="line">            scaleAnim.setInterpolator(new BounceInterpolator());</div><div class="line">            this.startAnimation(scaleAnim);</div><div class="line">        &#125; else &#123;</div><div class="line">            this.clearAnimation();</div><div class="line">            isPlay = false;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>之所以继承 ImageView，是为了复用其完善的图片显示功能。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T003 自定义控件 裁剪动画</title>
      <link href="/2019/07/16/Custom%20View/T003%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%A3%81%E5%89%AA%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/16/Custom%20View/T003%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%A3%81%E5%89%AA%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2cc64f1f2b5f86f5.gif?imageMogr2/auto-orient/strip" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas" target="_blank" rel="external">01.5 精通自定义 View 之绘图基础——Canvas</a></p><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><p>这个动画的原理很简单，就是每次将裁剪区域变大，在裁剪区域内的图像就会显示出来，而裁剪区域之外的图像不会显示。而关键问题在于如何计算裁剪区域。</p><p>再来看一下动画截图，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1c8c6731e193d120.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从图示中可以看出，有两个裁剪区域。</p><p>裁剪区域一：从左向右，逐渐变大。假设宽度是 clipWidth，高度是 CLIP_HEIGHT，那么裁剪区域一所对应的 Rect 对象如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rect(0, 0, clipWidth, CLIP_HEIGHT);</div></pre></td></tr></table></figure></p><p>裁剪区域二：从右向左，同样逐渐变大，它的宽度、高度都与裁剪区域一相同。但它是从右向左变化的，假设图片的宽度是 width，那么裁剪区域二所对应的 Rect 对象如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rect(width - clipWidth, CLIP_HEIGHT, width, 2* CLIP_HEIGHT);</div></pre></td></tr></table></figure></p><h3 id="二、示例代码"><a href="#二、示例代码" class="headerlink" title="二、示例代码"></a>二、示例代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">public class ClipRegionView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private int clipWidth = 0;</div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line">    private static final int CLIP_HEIGHT = 50;</div><div class="line">    private Path mPath;</div><div class="line">    private RectF mRect;</div><div class="line"></div><div class="line">    public ClipRegionView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        width = mBitmap.getWidth();</div><div class="line">        height = mBitmap.getHeight();</div><div class="line">        mPath = new Path();</div><div class="line">        mRect = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldW, int oldH) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldW, oldH);</div><div class="line"></div><div class="line">        // 原图宽高超过控件自身宽高，进行缩放</div><div class="line">        if (width &gt; w || height &gt; h) &#123;</div><div class="line">            float scaleW = w * 1f / width;</div><div class="line">            float scaleH = h * 1f / height;</div><div class="line">            float scale = Math.min(scaleW, scaleH);</div><div class="line">            // 按比例重置参数</div><div class="line">            mBitmap = scaleBitmap(mBitmap, scale);</div><div class="line">            width = (int) (width * scale);</div><div class="line">            height = (int) (height * scale);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        int i = 0;</div><div class="line">        while (i * CLIP_HEIGHT &lt;= height) &#123;</div><div class="line">            if (i % 2 == 0) &#123;</div><div class="line">                mRect.set(0, i * CLIP_HEIGHT, clipWidth, (i+1) * CLIP_HEIGHT);</div><div class="line">            &#125; else &#123;</div><div class="line">                mRect.set(width - clipWidth, i * CLIP_HEIGHT, width, (i+1) * CLIP_HEIGHT);</div><div class="line">            &#125;</div><div class="line">            // 替换 Region.union 方法</div><div class="line">            mPath.addRect(mRect, Path.Direction.CCW);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line">        // 因 canvas.clipRegion 方法过时，所以替换成 Path 相关 Api</div><div class="line">        canvas.clipPath(mPath);</div><div class="line">        canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">        if (clipWidth &gt; width) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        clipWidth += 5;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 按比例缩放图片</div><div class="line">     *</div><div class="line">     * @param origin 原图</div><div class="line">     * @param ratio  比例</div><div class="line">     * @return 新的bitmap</div><div class="line">     */</div><div class="line">    private Bitmap scaleBitmap(Bitmap origin, float ratio) &#123;</div><div class="line">        if (origin == null) &#123;</div><div class="line">            return null;</div><div class="line">        &#125;</div><div class="line">        int width = origin.getWidth();</div><div class="line">        int height = origin.getHeight();</div><div class="line">        Matrix matrix = new Matrix();</div><div class="line">        matrix.preScale(ratio, ratio);</div><div class="line">        Bitmap newBM = Bitmap.createBitmap(origin, 0, 0, width, height, matrix, false);</div><div class="line">        if (newBM.equals(origin)) &#123;</div><div class="line">            return newBM;</div><div class="line">        &#125;</div><div class="line">        origin.recycle();</div><div class="line">        return newBM;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>通过调用 invalidate() 函数的方式来重复触发 onDraw() 函数，然后在 onDraw() 函数中计算需要裁剪的画布。</p><p>在上述代码中，首先，由于 mPath 对象是每次都复用的，所以，在每次计算裁剪区域前, 都需要调用 mPath.reset() 函数将区域置空。</p><p>其次，根据计算裁剪区域的原理循环计算图片中每条间隔的裁剪区域并添加到 mPath 对象中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">while (i * CLIP_HEIGHT &lt;= height) &#123;</div><div class="line">    if (i % 2 == 0) &#123;</div><div class="line">        mRect.set(0, i * CLIP_HEIGHT, clipWidth, (i+1) * CLIP_HEIGHT);</div><div class="line">    &#125; else &#123;</div><div class="line">        mRect.set(width - clipWidth, i * CLIP_HEIGHT, width, (i+1) * CLIP_HEIGHT);</div><div class="line">    &#125;</div><div class="line">    // 替换 Region.union 方法</div><div class="line">    mPath.addRect(mRect, Path.Direction.CCW);</div><div class="line">    i++;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最后，将图片绘制在裁剪过的画布上，并渐变增大裁剪区域。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canvas.clipPath(mPath);</div><div class="line">canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">clipWidth += 5;</div></pre></td></tr></table></figure></p><p>需要注意的是，当裁剪区域超过图像大小时，表示当前图像已经完全被绘制出来，可以暂停当前的绘制，以免浪费 CPU 资源。</p><p>当图片宽高超过控件自身大小时，裁剪动画效果很差，因此对原图进行缩放并重置参数。其效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-64334c040329d581.gif?imageMogr2/auto-orient/strip" alt="有瑕疵的裁剪动画"></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T002 自定义控件 裁剪圆形和圆角头像</title>
      <link href="/2019/07/15/Custom%20View/T002%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%A3%81%E5%89%AA%E5%9C%86%E5%BD%A2%E5%92%8C%E5%9C%86%E8%A7%92%E5%A4%B4%E5%83%8F/"/>
      <url>/2019/07/15/Custom%20View/T002%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%A3%81%E5%89%AA%E5%9C%86%E5%BD%A2%E5%92%8C%E5%9C%86%E8%A7%92%E5%A4%B4%E5%83%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e55de3cecdfd0cbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas" target="_blank" rel="external">01.5 精通自定义 View 之绘图基础——Canvas</a></p><h3 id="一、原理"><a href="#一、原理" class="headerlink" title="一、原理"></a>一、原理</h3><p>利用 clip 系列函数，通过与 Rect、Path、Region 取交、并、差等集合运算来获得最新的画布形状。此处只需要裁处圆形和圆角矩形，使用 Path 类构建即可，并用 clipPath 裁剪画布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">Path path = new Path();</div><div class="line">RectF rect = new RectF(50, 50, 240, 200);</div><div class="line">path.addRoundRect(rect, 10, 10, Path.Direction.CCW);</div><div class="line">// float[] radii = &#123;10,15,20,25,30,35,40,45&#125;;</div><div class="line">// path.addRoundRect(rect, radii, Path.Direction.CW);</div><div class="line"></div><div class="line">canvas.clipPath(path);</div></pre></td></tr></table></figure></p><h3 id="二、步骤"><a href="#二、步骤" class="headerlink" title="二、步骤"></a>二、步骤</h3><h4 id="1-初始化"><a href="#1-初始化" class="headerlink" title="1. 初始化"></a>1. 初始化</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class RoundImageView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private Bitmap mBmp;</div><div class="line"></div><div class="line">    public RoundImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        // 禁用硬件加速</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPath = new Path();</div><div class="line">        mBmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        int x = mBmp.getWidth() / 2;</div><div class="line">        int y = mBmp.getHeight() / 2;</div><div class="line">        int r = Math.min(x, y);</div><div class="line">        mPath.addCircle(x, y, r, Path.Direction.CCW);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在使用 clip 系列函数时，要禁用硬件加速功能。然后利用 BitmapFactory.decodeResource() 函数从本地 res 文件夹中提取一个 Bitmap 文件。接着根据位图文件的大小，构造一条与图像大小相同的圆形路径。</p><h4 id="2-绘制圆形图像"><a href="#2-绘制圆形图像" class="headerlink" title="2. 绘制圆形图像"></a>2. 绘制圆形图像</h4><p>在绘图时，先将画布裁剪成圆形，再将位图画上去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line"></div><div class="line">    canvas.save();</div><div class="line">    canvas.clipPath(mPath);</div><div class="line">    canvas.drawBitmap(mBmp, 0, 0, mPaint);</div><div class="line">    canvas.restore();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4c70e591d12eea7b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><h4 id="4-绘制圆角图像"><a href="#4-绘制圆角图像" class="headerlink" title="4. 绘制圆角图像"></a>4. 绘制圆角图像</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class RoundImageView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private Bitmap mBmp;</div><div class="line">    private boolean isCircle = false;   // true：圆形图像；false：圆角矩形</div><div class="line"></div><div class="line">    public RoundImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        // 禁用硬件加速</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPath = new Path();</div><div class="line">        mBmp = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">        if (isCircle) &#123;</div><div class="line">            int x = mBmp.getWidth() / 2;</div><div class="line">            int y = mBmp.getHeight() / 2;</div><div class="line">            int r = Math.min(x, y);</div><div class="line">            mPath.addCircle(x, y, r, Path.Direction.CCW);</div><div class="line">        &#125; else &#123;</div><div class="line">            RectF rectF = new RectF();</div><div class="line">            rectF.set(0, 0, mBmp.getWidth(), mBmp.getHeight());</div><div class="line">            mPath.addRoundRect(rectF, 20, 20, Path.Direction.CW);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.save();</div><div class="line">        canvas.clipPath(mPath);</div><div class="line">        canvas.drawBitmap(mBmp, 0, 0, mPaint);</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14186083-51064ec4951773ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆角图像"></p><h3 id="三、优化"><a href="#三、优化" class="headerlink" title="三、优化"></a>三、优化</h3><p>对上述代码可以进行以下几个方面优化：</p><ul><li>参数可配置：圆形与圆角矩形切换、圆角大小、图片资源等。</li><li>图片缩放至控件大小。</li></ul><p>由于 Android 提供的 ImageView 已经处理好了各种缩放问题，我们可以在它的基础上添加一个显示圆角圆形的功能。<a href="https://xianxiaotao.github.io/2019/07/16/Custom%20View/X001%20%E5%9C%86%E8%A7%92%E5%9C%86%E5%BD%A2%20ImageView/" target="_blank" rel="external">详见博客：圆角圆形ImageView。</a></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>T001 自定义控件 蜘蛛网状图</title>
      <link href="/2019/07/14/Custom%20View/T001%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%9C%98%E8%9B%9B%E7%BD%91%E7%8A%B6%E5%9B%BE/"/>
      <url>/2019/07/14/Custom%20View/T001%20%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8E%A7%E4%BB%B6%20%E8%9C%98%E8%9B%9B%E7%BD%91%E7%8A%B6%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-69b3cadcd1005e2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>参考知识点：<a href="https://xianxiaotao.github.io/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/" target="_blank" rel="external">01.2 精通自定义 View 之绘图基础——路径</a></p><p>从效果图中可以看出，我们要先画出一个网格，默认网格数和边角数都是 6。在代码中，为了简化逻辑，我们会将所有可变的内容，比如画笔颜色、网格数、边角数设为固定值。其实这些值都应该在初始化的时候通过对应的 set 函数设置到自定义控件内部，大家可以自行补充。</p><h3 id="一、初始化"><a href="#一、初始化" class="headerlink" title="一、初始化"></a>一、初始化</h3><p>不要在 onDraw() 函数中创建变量，所以必然会有一个初始化函数，用于在创建控件的时候初始化画笔等参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class SpiderView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mRadarPaint;                  // 蜘蛛网</div><div class="line">    private Paint mRadarLinePaint;              // 蜘蛛网辐射的六根线</div><div class="line">    private Paint mValuePaint;                  // 数据</div><div class="line"></div><div class="line">    private int mRadarPaintColor = 0xFF0099CC;  // 网格默认颜色</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    public SpiderView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * init view</div><div class="line">     * Paint、Path</div><div class="line">     */</div><div class="line">    private void init() &#123;</div><div class="line">        mRadarPaint = generatePaint(mRadarPaintColor, Paint.Style.FILL);</div><div class="line">        mRadarLinePaint = generatePaint(Color.WHITE, Paint.Style.STROKE);</div><div class="line">        mValuePaint = generatePaint(0xAFFF0000, Paint.Style.FILL);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化画笔</div><div class="line">     * @param color 画笔颜色</div><div class="line">     * @param style 画笔样式</div><div class="line">     * @return Paint</div><div class="line">     */</div><div class="line">    private Paint generatePaint(int color, Paint.Style style) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里初始化了三个画笔，其中 mRadarPaint 是用来绘制蜘蛛网格的，类型设置为填充 (也可以设置为描边)；mRadarLinePaint 是用来绘制蜘蛛网格辐射的六根线，白色描边；而 mValuePaint 是用来绘制结果图的，所以设置成带透明的红色画笔，样式为填充。</p><h3 id="二、获得布局中心"><a href="#二、获得布局中心" class="headerlink" title="二、获得布局中心"></a>二、获得布局中心</h3><p>在 onSizeChanged(int w, int h, int oldW, int oldH) 函数中，根据 View 的长、宽，获取整个布局的中心坐标，因为整个雷达都是从这个中心坐标开始绘制的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private float radius;                       // 网格最大半径</div><div class="line">private int centerX;                        // 中心 X</div><div class="line">private int centerY;                        // 中心 Y</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onSizeChanged(int w, int h, int oldW, int oldH) &#123;</div><div class="line">    // 获得布局中心</div><div class="line">    centerX = w / 2;</div><div class="line">    centerY = h / 2;</div><div class="line">    radius = Math.min(w, h) / 2f * 0.8f;</div><div class="line">    postInvalidate();</div><div class="line">    super.onSizeChanged(w, h, oldW, oldH);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们知道，在控件大小发生变化时，都会通过 onSizeChanged() 函数通知我们当前控件的大小。所以，我们只需要重写 onSizeChanged() 函数，即可得知当前控件的最新大小。</p><p>为了不顶边，将蜘蛛网的半径设置为 Math.min(w, h) / 2f * 0.8f 。</p><p>然后依据绘图中心，分别绘制蜘蛛网格、网格中线、数据图，即可完成整个效果图的绘制。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    // 绘制蜘蛛网格</div><div class="line">    drawPolygon(canvas);</div><div class="line">    // 绘制中线</div><div class="line">    drawLines(canvas);</div><div class="line">    // 画数据图</div><div class="line">    drawRegion(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="三、绘制蜘蛛网格"><a href="#三、绘制蜘蛛网格" class="headerlink" title="三、绘制蜘蛛网格"></a>三、绘制蜘蛛网格</h3><p>下面我们就要绘制蜘蛛网格了，效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c1605cd5fc5aca77.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><p>很显然，蜘蛛网格是利用 Path 的 moveTo() 和 lineTo() 函数一圈圈画出来的，我们需要计算出每个转折点的位置。比如，计算下图中所标记点的 x, y 坐标。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1ccb35d364a464c5.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>很明显，标记点在半径的 3/4 位置，而标记点与中心点的连线与 X 轴的夹角为 a，所以由图可得:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">x = centX + 3/4 * radius * sina;</div><div class="line">y = centY + 3/4 * radius * cosa;</div></pre></td></tr></table></figure></p><p>因为我们共画了 6 个角，所以每个角的度数应该是 360°/6 = 60°。<br>依据上面的原理，列出画蜘蛛网格的代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private int count = 6;                      // 多边形，默认值为 6</div><div class="line">private double angle = 2 * Math.PI / count; // 角度，值为 2π / count，默认</div><div class="line">private int maxValue = 4;                   // 最大值</div><div class="line"></div><div class="line">private void drawPolygon(Canvas canvas) &#123;</div><div class="line">    float r = radius / maxValue;            // r是蜘蛛丝之间的间距</div><div class="line">    for (int i = 1; i &lt;= maxValue; i++) &#123;   // 中心点不用绘制</div><div class="line">        float curR = r * i;                 // 当前半径</div><div class="line">        mPath.reset();</div><div class="line">        for (int j = 0; j &lt; count; j++) &#123;</div><div class="line">            if (j == 0) &#123;</div><div class="line">                mPath.moveTo(centerX + curR, centerY);</div><div class="line">            &#125; else &#123;</div><div class="line">                // 根据半径，计算出蜘蛛丝上每个点的坐标</div><div class="line">                float x = (float) (centerX + curR * Math.cos(angle * j));</div><div class="line">                float y = (float) (centerY + curR * Math.sin(angle * j));</div><div class="line">                mPath.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        mPath.close();                      // 闭合路径</div><div class="line">        mRadarPaint.setAlpha(getRadarPaintColor(i));</div><div class="line">        canvas.drawPath(mPath, mRadarPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="四、画网格中线"><a href="#四、画网格中线" class="headerlink" title="四、画网格中线"></a>四、画网格中线</h3><p>在画完蜘蛛网格以后，我们需要画从网格中心到末端的直线，代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">private void drawLines(Canvas canvas) &#123;</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        mPath.moveTo(centerX, centerY);</div><div class="line">        float x = (float) (centerX + radius * Math.cos(angle * i));</div><div class="line">        float y = (float) (centerY + radius * Math.sin(angle * i));</div><div class="line">        mPath.lineTo(x, y);</div><div class="line">        canvas.drawPath(mPath, mRadarLinePaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1b4ac177fa2e347f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网格中线效果图"></p><p>绘制原理与绘制蜘蛛网格是一样的，先找到各个末端点的坐标，然后画一条从中心点到末端点的连线即可。</p><h3 id="五、画数据图"><a href="#五、画数据图" class="headerlink" title="五、画数据图"></a>五、画数据图</h3><p>绘制数据区域其实也很简单，首先要确定每个数据点的位置。当然，网格线中的每一层网格都应该对应一个数值，在这里为了方便起见，将网格的最大值设为 4，即每一层数值是按 1,2,3,4 分布的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private int maxValue = 4;                   // 最大值</div><div class="line">private double[] data = &#123;2,3,1,3,4,3&#125;;      // 数据</div><div class="line"></div><div class="line">private void drawRegion(Canvas canvas) &#123;</div><div class="line">    mPath.reset();</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        double percent = data[i] / maxValue;</div><div class="line">        float x = (float) (centerX + radius * Math.cos(angle * i) * percent);</div><div class="line">        float y = (float) (centerY + radius * Math.sin(angle * i) * percent);</div><div class="line">        if (i == 0) &#123;</div><div class="line">            mPath.moveTo(x, centerY);</div><div class="line">        &#125; else &#123;</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    canvas.drawPath(mPath, mValuePaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1b41b211cf4a3646.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><h3 id="六、完整代码"><a href="#六、完整代码" class="headerlink" title="六、完整代码"></a>六、完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.Path;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line"></div><div class="line">public class SpiderView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mRadarPaint;                  // 蜘蛛网</div><div class="line">    private Paint mRadarLinePaint;              // 蜘蛛网辐射的六根线</div><div class="line">    private Paint mValuePaint;                  // 数据</div><div class="line"></div><div class="line">    private int mRadarPaintColor = 0xFF0099CC;  // 网格默认颜色</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    private float radius;                       // 网格最大半径</div><div class="line">    private int centerX;                        // 中心 X</div><div class="line">    private int centerY;                        // 中心 Y</div><div class="line"></div><div class="line">    private int count = 6;                      // 多边形，默认值为 6</div><div class="line">    private double angle = 2 * Math.PI / count; // 角度，值为 2π / count，默认</div><div class="line">    private int maxValue = 4;                   // 最大值</div><div class="line">    private double[] data = &#123;2,3,1,3,4,3&#125;;      // 数据</div><div class="line"></div><div class="line">    public SpiderView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * init view</div><div class="line">     * Paint、Path</div><div class="line">     */</div><div class="line">    private void init() &#123;</div><div class="line">        mRadarPaint = generatePaint(mRadarPaintColor, Paint.Style.FILL);</div><div class="line">        mRadarLinePaint = generatePaint(Color.WHITE, Paint.Style.STROKE);</div><div class="line">        mValuePaint = generatePaint(0xAFFF0000, Paint.Style.FILL);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldW, int oldH) &#123;</div><div class="line">        // 获得布局中心</div><div class="line">        centerX = w / 2;</div><div class="line">        centerY = h / 2;</div><div class="line">        radius = Math.min(w, h) / 2f * 0.8f;</div><div class="line">        postInvalidate();</div><div class="line">        super.onSizeChanged(w, h, oldW, oldH);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 绘制蜘蛛网格</div><div class="line">        drawPolygon(canvas);</div><div class="line">        // 绘制中线</div><div class="line">        drawLines(canvas);</div><div class="line">        // 画数据图</div><div class="line">        drawRegion(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawPolygon(Canvas canvas) &#123;</div><div class="line">        float r = radius / maxValue;            // r是蜘蛛丝之间的间距</div><div class="line">        for (int i = 1; i &lt;= maxValue; i++) &#123;   // 中心点不用绘制</div><div class="line">            float curR = r * i;                 // 当前半径</div><div class="line">            mPath.reset();</div><div class="line">            for (int j = 0; j &lt; count; j++) &#123;</div><div class="line">                if (j == 0) &#123;</div><div class="line">                    mPath.moveTo(centerX + curR, centerY);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // 根据半径，计算出蜘蛛丝上每个点的坐标</div><div class="line">                    float x = (float) (centerX + curR * Math.cos(angle * j));</div><div class="line">                    float y = (float) (centerY + curR * Math.sin(angle * j));</div><div class="line">                    mPath.lineTo(x, y);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mPath.close();                      // 闭合路径</div><div class="line">            mRadarPaint.setAlpha(getRadarPaintColor(i));</div><div class="line">            canvas.drawPath(mPath, mRadarPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawLines(Canvas canvas) &#123;</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            mPath.reset();</div><div class="line">            mPath.moveTo(centerX, centerY);</div><div class="line">            float x = (float) (centerX + radius * Math.cos(angle * i));</div><div class="line">            float y = (float) (centerY + radius * Math.sin(angle * i));</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">            canvas.drawPath(mPath, mRadarLinePaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawRegion(Canvas canvas) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            double percent = data[i] / maxValue;</div><div class="line">            float x = (float) (centerX + radius * Math.cos(angle * i) * percent);</div><div class="line">            float y = (float) (centerY + radius * Math.sin(angle * i) * percent);</div><div class="line">            if (i == 0) &#123;</div><div class="line">                mPath.moveTo(x, centerY);</div><div class="line">            &#125; else &#123;</div><div class="line">                mPath.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        canvas.drawPath(mPath, mValuePaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 初始化画笔</div><div class="line">     * @param color 画笔颜色</div><div class="line">     * @param style 画笔样式</div><div class="line">     * @return Paint</div><div class="line">     */</div><div class="line">    private Paint generatePaint(int color, Paint.Style style) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 由内到外，增加透明度</div><div class="line">     * @param i 第几个网格，从中心点算起</div><div class="line">     * @return int alpha 值</div><div class="line">     */</div><div class="line">    private int getRadarPaintColor(int i) &#123;</div><div class="line">        if (i &gt; count || i &lt; 1) &#123;</div><div class="line">            return 0xFF;</div><div class="line">        &#125;</div><div class="line">        int alpha = Color.alpha(mRadarPaintColor);</div><div class="line">        int colorStep = alpha / (maxValue - 1) - 10;</div><div class="line">        alpha = alpha - colorStep * (i - 1);</div><div class="line">        return alpha;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.2 精通自定义 View 之控件高级属性——Window 与 WindowManager</title>
      <link href="/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/"/>
      <url>/2019/07/13/Custom%20View/13.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94Window%20%E4%B8%8E%20WindowManager/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>Window 表示窗口，在某些特殊的时候，比如需要在桌面或者锁屏上显示一些类似悬浮窗的效果，就需要用到 Window。Android 中所有的视图都是通过 Window 来呈现的，不管是 Activity、Dialog 还是 Toast，它们的视图实际上都是附加在 Window 上的。而 WindowManager 则提供了对这些 Window 的统一管理功能。</p><p><div id="jump1"></div></p><h3 id="13-2-1-Window-与-WindowManager-的联系"><a href="#13-2-1-Window-与-WindowManager-的联系" class="headerlink" title="13.2.1 Window 与 WindowManager 的联系"></a>13.2.1 Window 与 WindowManager 的联系</h3><p>为了分析 Window 的工作机制，我们需要了解如何使用 WindowManager 来添加一个 Window。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">WindowManager manager = (WindowManager) getSystemService(Context.WINDOW_SERVICE);</div><div class="line">WindowManager.LayoutParams layoutParams = new WindowManager.LayoutParams(width, height, type, flags, format);</div><div class="line">manager.addView(btn, layoutParams);</div></pre></td></tr></table></figure></p><p>上面的伪代码看起来非常简单，在构建 WindowManager.LayoutParams 时，其中的 type 和 flags 参数比较重要。</p><p>flags 参数有很多选项，用来控制 Window 的显示特性。我们来看几个常用的选项。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int FLAG_NOT_FOCUSABLE = 0x00000008;</div></pre></td></tr></table></figure></p><p>表示此 Window 不需要获取焦点，不接收各种输入时间，此标记会同时启用 FLAG_NOT_TOUCH_MODEL，最终事件会直接传递给下层具有焦点的 Window。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int FLAG_NOT_TOUCH_MODEL = 0x00000020;</div></pre></td></tr></table></figure></p><p>自己 Window 区域内的事件自己处理；自己 Window 区域外的事件传递给底层 Window 处理。一般这个选项会默认开启，否则其他 Window 无法接收事件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static final int FLAG_SHOW_WHEN_LOCKED = 0x00080000;</div></pre></td></tr></table></figure></p><p>可以让此 Window 显示在锁屏上。</p><p>type 参数是 int 类型的，表示 Window 的类型。Window 有三种类型：应用 Window、子 Window 和系统 Window。应用 Window 对应着一个 Activity。子 Window 不能独立存在，它需要附属在特定的父 Window 中，比如 Dialog 就是一个子 Window。系统 Window 是需要声明权限才能创建的，比如 Toast 和系统状态栏都是系统 Window。</p><p>Window 是分层的，层级大的 Window 会覆盖在层级小的 Window 上面。</p><ul><li>应用 Window 的层级范围：1 ~ 99。</li><li>子 Window 的层级范围：1000 ~ 1999。</li><li>系统 Window 的层级范围：2000 ~ 2999。</li></ul><p>type 参数就对应这些数字。如果想让 Window 置于顶层，则采用较大的层级即可；如果是系统类型的 Window，则需要在 AndroidMenifest.xml 中配置如下权限声明，否则会报权限不足的错误。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=&quot;android.permission.SYSTEM_ALERT_WINDOW&quot; /&gt;</div></pre></td></tr></table></figure></p><p>WindowManager 提供的功能很简单，常用的只有三个方法，即添加 View、更新 View 和删除 View。这三个方法定义在 ViewManager 中，而 WindowManager 继承自 ViewManager。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@SystemService(Context.WINDOW_SERVICE)</div><div class="line">public interface WindowManager extends ViewManager &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface ViewManager &#123;</div><div class="line">    public void addView(View view, ViewGroup.LayoutParams params);</div><div class="line">    public void updateViewLayout(View view, ViewGroup.LayoutParams params);</div><div class="line">    public void removeView(View view);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="13-2-2-示例：悬浮窗"><a href="#13-2-2-示例：悬浮窗" class="headerlink" title="13.2.2 示例：悬浮窗"></a>13.2.2 示例：悬浮窗</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4cd1f019e2f0d37f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener, View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private ImageView mImageView;</div><div class="line">    private WindowManager.LayoutParams mLayoutParams;</div><div class="line">    private WindowManager mWindowManager;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.M) &#123;</div><div class="line">            Intent intent = new Intent(Settings.ACTION_MANAGE_OVERLAY_PERMISSION);</div><div class="line">            startActivityForResult(intent, 100);</div><div class="line">        &#125;</div><div class="line">        initView();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void initView() &#123;</div><div class="line">        findViewById(R.id.add_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.rmv_btn).setOnClickListener(this);</div><div class="line">        mWindowManager = (WindowManager) getApplicationContext().getSystemService(Context.WINDOW_SERVICE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        if (v.getId() == R.id.add_btn) &#123;</div><div class="line">            mImageView = new ImageView(this);</div><div class="line">            mImageView.setBackgroundResource(R.mipmap.ic_launcher_round);</div><div class="line">            mLayoutParams = new WindowManager.LayoutParams(</div><div class="line">                    WindowManager.LayoutParams.WRAP_CONTENT,</div><div class="line">                    WindowManager.LayoutParams.WRAP_CONTENT,</div><div class="line">                    2099,</div><div class="line">                    WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL</div><div class="line">                    | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE</div><div class="line">                    | WindowManager.LayoutParams.FLAG_SHOW_WHEN_LOCKED,</div><div class="line">                    PixelFormat.TRANSPARENT );</div><div class="line">            mLayoutParams.type = WindowManager.LayoutParams.TYPE_SYSTEM_ERROR;</div><div class="line">            mLayoutParams.gravity = Gravity.TOP | Gravity.LEFT;</div><div class="line">            mLayoutParams.x = 0;</div><div class="line">            mLayoutParams.y = 300;</div><div class="line">            mImageView.setOnTouchListener(this);</div><div class="line">            mWindowManager.addView(mImageView, mLayoutParams);</div><div class="line">        &#125; else if (v.getId() == R.id.rmv_btn) &#123;</div><div class="line">            if (mWindowManager != null &amp;&amp; mImageView != null) &#123;</div><div class="line">                mWindowManager.removeViewImmediate(mImageView);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        int rawX = (int) event.getRawX();</div><div class="line">        int rawY = (int) event.getRawY();</div><div class="line"></div><div class="line">        if (event.getAction() == MotionEvent.ACTION_MOVE) &#123;</div><div class="line">            mLayoutParams.x = rawX;</div><div class="line">            mLayoutParams.y = rawY;</div><div class="line">            mWindowManager.updateViewLayout(mImageView, mLayoutParams);</div><div class="line">        &#125;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onActivityResult(int requestCode, int resultCode, @Nullable Intent data) &#123;</div><div class="line">        super.onActivityResult(requestCode, resultCode, data);</div><div class="line">        if (requestCode == 100) &#123;</div><div class="line">            initView();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.1 精通自定义 View 之控件高级属性——GestureDetector 手势检测</title>
      <link href="/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/"/>
      <url>/2019/07/13/Custom%20View/13.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E6%8E%A7%E4%BB%B6%E9%AB%98%E7%BA%A7%E5%B1%9E%E6%80%A7%E2%80%94%E2%80%94GestureDetector%20%E6%89%8B%E5%8A%BF%E6%A3%80%E6%B5%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="13-1-1-概述"><a href="#13-1-1-概述" class="headerlink" title="13.1.1 概述"></a>13.1.1 概述</h3><p>GestureDetector，手势检测类，通过这个类可以识别很多手势。在识别出手势之后，具体的事物处理则交由程序员自己来实现。</p><p>此类提供了两个接口（OnGestureListener、OnDoubleTapListener）和一个外部类（SimpleOnGestureListener）。这个外部类其实是两个接口中所有函数的集成，它包含了这两个接口里所有必须实现的函数，而且都已经被重写，但所有函数体都是空的。该类是一个静态类，程序员可以在外部继承这个类，重写里面的手势处理函数。</p><p><div id="jump2"></div></p><h3 id="13-1-2-GestureDetector-OnGestureListener-接口"><a href="#13-1-2-GestureDetector-OnGestureListener-接口" class="headerlink" title="13.1.2 GestureDetector.OnGestureListener 接口"></a>13.1.2 GestureDetector.OnGestureListener 接口</h3><h4 id="1-基本讲解"><a href="#1-基本讲解" class="headerlink" title="1. 基本讲解"></a>1. 基本讲解</h4><p>如果我们写一个类并继承自 OnGestureListener，则会提示有几个必须重写的函数。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onDown(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onShowPress(MotionEvent e) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onLongPress(MotionEvent e) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这些函数在什么情况下才会被触发呢？</p><ul><li>onDown(MotionEvent e)：用户按下屏幕就会触发该函数。</li><li>onShowPress(MotionEvent e)：如果按下的时间超过瞬间，而且在按下的时候没有松开或者是拖动的，该函数就会被触发。</li><li>onLongPress(MotionEvent e)：长按触摸屏，超过一定时长，就会触发这个函数。</li></ul><p>触发顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onShowPress —&gt; onLongPress</div></pre></td></tr></table></figure></p><ul><li>onSingleTapUp(MotionEvent e)：一次单独的轻击抬起操作，也就是轻击一下屏幕，立刻抬起来，才会触发这个函数。当然，如果除 down 以外还有其他操作，就不再算是单独操作了，也就不会触发这个函数。</li></ul><p>单击一下非常快的（不滑动）Touchup，触发顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onSingleTapUp —&gt; onSingleTapConfirmed</div></pre></td></tr></table></figure></p><p>单击一下稍微慢一点的（不滑动）Touchup，触发顺序：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onShowPress —&gt; onSingleTapUp —&gt; onSingleTapConfirmed</div></pre></td></tr></table></figure></p><ul><li>onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)：滑屏，用户按下触摸屏、快速移动后松开，由一个 MotionEvent ACTION_DOWN、多个 ACTION_MOVE、一个 ACTION_UP 触发。</li><li>onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY)：在屏幕上拖动事件。无论是用手拖动 View，还是以抛的动作滚动，都会多次触发这个函数，在 ACTION_MOVE 动作发生时就会触发该函数。</li></ul><p>滑屏，即手指出动屏幕后，稍微滑动后立即松开，触发顺序为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onScroll —&gt; onScroll —&gt; onScroll —&gt; ... —&gt; onFling</div></pre></td></tr></table></figure></p><p>拖动，触发顺序为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">onDown —&gt; onScroll —&gt; onScroll —&gt; onFling</div></pre></td></tr></table></figure></p><p>可见，无论是滑屏还是拖动，影响的只是中间 onScroll 被触发的数量而已，最终都会触发 onFling 事件。</p><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><p>要使用 GestureDetector，有四步要走。<br>1）创建 OnGestureListener() 监听函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 可以构造实例</div><div class="line">GestureDetector.OnGestureListener listener = new GestureDetector.OnGestureListener() &#123;&#125;;</div><div class="line"></div><div class="line">// 也可以构造类</div><div class="line">private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2）创建 GestureDetector 实例 mGestureDetector。<br>构造函数有以下几个，根据需要选择即可。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">GestureDetector(OnGestureListener listener)</div><div class="line">GestureDetector(Context context, OnGestureListener listener)</div><div class="line">GestureDetector(Context context, OnGestureListener listener, Handler handler)</div><div class="line">GestureDetector(Context context, OnGestureListener listener, Handler handler, boolean unused)</div></pre></td></tr></table></figure></p><p>3）在 onTouch(View v, MotionEvent event) 中进行拦截。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">    return mGestureDetector.onTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4）绑定控件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView tv = findViewById(R.id.tv);</div><div class="line">tv.setOnTouchListener(this);</div></pre></td></tr></table></figure></p><p>完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener &#123;</div><div class="line"></div><div class="line">    private GestureDetector mGestureDetector;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mGestureDetector = new GestureDetector(new GestureListener());</div><div class="line"></div><div class="line">        TextView tv = findViewById(R.id.tv);</div><div class="line">        tv.setOnTouchListener(this);</div><div class="line">        tv.setFocusable(true);</div><div class="line">        tv.setClickable(true);</div><div class="line">        tv.setLongClickable(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        return mGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDown(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDown&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onShowPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onShowPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onSingleTapUp&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onScroll&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onLongPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onLongPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onFling&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="13-1-3-GestureDetector-OnDoubleTapListener-接口"><a href="#13-1-3-GestureDetector-OnDoubleTapListener-接口" class="headerlink" title="13.1.3 GestureDetector.OnDoubleTapListener 接口"></a>13.1.3 GestureDetector.OnDoubleTapListener 接口</h3><h4 id="1-构建"><a href="#1-构建" class="headerlink" title="1. 构建"></a>1. 构建</h4><p>有两种方式设置双击监听。<br>方法一：新建一个类，同时派生自 OnGestureListener 和 OnDoubleTapListener。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">private class GestureListener implements GestureDetector.OnGestureListener,  </div><div class="line">        GestureDetector.OnDoubleTapListener &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>方法二：<br>使用 GestureDetector.setOnDoubleTapListener() 函数设置双击监听。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 构建 GestureDetector 实例</div><div class="line">mGestureDetector = new GestureDetector(new GestureListener());</div><div class="line"></div><div class="line">private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 设置双击监听</div><div class="line">mGestureDetector.setOnDoubleTapListener(new DoubleTapListener());</div><div class="line">private class DoubleTapListener implements GestureDetector.OnDoubleTapListener &#123;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>无论方法一还是方法二，都需要派生自 GestureDetector.OnGestureListener。</p><h4 id="2-函数讲解"><a href="#2-函数讲解" class="headerlink" title="2. 函数讲解"></a>2. 函数讲解</h4><p>先来看下 OnDoubleTapListener 接口必须重写的三个函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private class DoubleTapListener implements GestureDetector.OnDoubleTapListener &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onSingleTapConfirmed(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onDoubleTap(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onDoubleTapEvent(MotionEvent e) &#123;</div><div class="line">        return false;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><ul><li>onSingleTapConfirmed(MotionEvent e)：单击事件，用来判定该次单击是 SingleTap，而不是 DoubleTap。如果连续单击两次，就是 DoubleTap 手势；如果只单击一次，系统等待一段时间后没有收到第二次单击，则判定该次单击为 SingleTap，而不是 DoubleTap，然后触发 SingleTapConfirm 事件。触发顺序是：onDown —&gt; onSingleTapUp —&gt; onSingleTapConfirmed。有这样一个函数 onSingleTapUp()，它和 onSingleTapConfirmed() 函数容易混淆。二者的区别是：对于 onSingleTapUp() 函数来说，只要手抬起就会被触发；而对于 onSingleTapConfirmed() 函数来说，如果双击，则该函数就不会被触发。</li><li>onDoubleTap(MotionEvent e)：双击事件。</li><li>onDoubleTapEvent(MotionEvent e)：双击间隔中发生的动作。指在触发 onDoubleTap 以后，在双击之间发生的其他动作，包含 down、up 和 move 事件。</li></ul><p>在 13.1.2 节例子的基础上，添加双击监听，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener &#123;</div><div class="line"></div><div class="line">    private GestureDetector mGestureDetector;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mGestureDetector = new GestureDetector(new GestureListener());</div><div class="line">        mGestureDetector.setOnDoubleTapListener(new DoubleTapListener());</div><div class="line"></div><div class="line">        TextView tv = findViewById(R.id.tv);</div><div class="line">        tv.setOnTouchListener(this);</div><div class="line">        tv.setFocusable(true);</div><div class="line">        tv.setClickable(true);</div><div class="line">        tv.setLongClickable(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        return mGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class GestureListener implements GestureDetector.OnGestureListener &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDown(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDown&quot;);</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onShowPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onShowPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onSingleTapUp&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onScroll&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onLongPress(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onLongPress&quot;);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onFling&quot;);</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class DoubleTapListener implements GestureDetector.OnDoubleTapListener &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onSingleTapConfirmed(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onSingleTapConfirmed&quot;);</div><div class="line">            Toast.makeText(MainActivity.this, &quot;onSingleTapConfirmed&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDoubleTap(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDoubleTap&quot;);</div><div class="line">            Toast.makeText(MainActivity.this, &quot;onDoubleTap&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public boolean onDoubleTapEvent(MotionEvent e) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;onDoubleTapEvent:&quot; + e.getAction());</div><div class="line">            Toast.makeText(MainActivity.this, &quot;onDoubleTapEvent&quot;, Toast.LENGTH_LONG).show();</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>双击所对应的事件触发顺序如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d8ed3d75951e7a32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>第二次单击时，先触发 onDoubleTap，再触发 onDown。</li><li>在触发 onDoubleTap 以后，就开始触发 onDoubleTapEvent。onDoubleTapEvent 后面的数字代表当前的事件，0 代表 ACTION_DOWN，1 代表 ACTION_UP，2 代表 ACTION_MOVE。</li></ul><p>轻轻单击一下，对应的事件触发顺序如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6662fcd81e5a2fa5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump4"></div></p><h3 id="13-1-4-GestureDetector-SimpleOnGestureListener-类"><a href="#13-1-4-GestureDetector-SimpleOnGestureListener-类" class="headerlink" title="13.1.4 GestureDetector.SimpleOnGestureListener 类"></a>13.1.4 GestureDetector.SimpleOnGestureListener 类</h3><p>SimpleOnGestureListener 类与 OnGestureListener 和 OnDoubleTapListener 接口的不同之处在于：<br>1）这是一个类，在它的基础上新建类，要用 extends 派生，而不能用 implements 继承。<br>2）OnGestureListener 和 OnDoubleTapListener 接口里的函数都是被强制重写的，即使用不到也要重写出来一个空函数；而在 SimpleOnGestureListener 类的实例或派生类中不必如此，可以根据情况，用到哪个函数就重写哪个函数，因为 SimpleOnGestureListener 类本身已经实现了这两个接口中的所有函数，只是里面全是空的而已。</p><p>下面利用 SimpleOnGestureListener 类来重新实现前面的几个效果，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnTouchListener &#123;</div><div class="line"></div><div class="line">    private GestureDetector mGestureDetector;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mGestureDetector = new GestureDetector(new XSimpleGestureListener());</div><div class="line"></div><div class="line">        TextView tv = findViewById(R.id.tv);</div><div class="line">        tv.setOnTouchListener(this);</div><div class="line">        tv.setFocusable(true);</div><div class="line">        tv.setClickable(true);</div><div class="line">        tv.setLongClickable(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouch(View v, MotionEvent event) &#123;</div><div class="line">        return mGestureDetector.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class XSimpleGestureListener extends GestureDetector.SimpleOnGestureListener &#123;</div><div class="line"></div><div class="line">        /***** OnGestureListener 的函数 *****/</div><div class="line">        public boolean onDown(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onShowPress(MotionEvent e) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onSingleTapUp(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public void onLongPress(MotionEvent e) &#123;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onScroll(MotionEvent e1, MotionEvent e2, float distanceX, float distanceY) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        /***** OnDoubleTapListener 的函数 *****/</div><div class="line">        public boolean onDoubleTap(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onDoubleTapEvent(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        public boolean onSingleTapConfirmed(MotionEvent e) &#123;</div><div class="line">            return false;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump5"></div></p><h3 id="13-1-5-onFling-函数的应用"><a href="#13-1-5-onFling-函数的应用" class="headerlink" title="13.1.5 onFling() 函数的应用"></a>13.1.5 onFling() 函数的应用</h3><p>可以利用 onFling() 函数来识别当前用户是在左滑还是在右滑。先来看一下 onFling() 函数的参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY)</div></pre></td></tr></table></figure></p><p>参数：</p><ul><li>e1：第一个 ACTION_DOWN MotionEvent。</li><li>e2：最后一个 ACTION_DOWN MotionEvent。</li><li>velocityX：X 轴上的移动速度，单位为像素/秒。</li><li>velocityY：Y 轴上的移动速度，单位为像素/秒。</li></ul><p>实现的功能：当用户向左滑动距离超过 100 像素，且滑动速度超过 100 像素/秒时，即判断为向左滑动；向右同理。核心代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">private class XSimpleGestureListener extends GestureDetector.SimpleOnGestureListener &#123;</div><div class="line"></div><div class="line">    final int FLING_MIN_DISTANCE = 100;</div><div class="line">    final int FLING_MIN_VELOCITY = 100;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    public boolean onFling(MotionEvent e1, MotionEvent e2, float velocityX, float velocityY) &#123;</div><div class="line">        // 向左滑</div><div class="line">        if (e1.getX() - e2.getX() &gt; FLING_MIN_DISTANCE</div><div class="line">                &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;Fling left&quot;);</div><div class="line">        &#125;</div><div class="line">        // 向右滑</div><div class="line">        else if (e2.getX() - e1.getX() &gt; FLING_MIN_DISTANCE</div><div class="line">                &amp;&amp; Math.abs(velocityX) &gt; FLING_MIN_VELOCITY) &#123;</div><div class="line">            Log.i(&quot;MyGesture&quot;, &quot;Fling right&quot;);</div><div class="line">        &#125;</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.3 精通自定义 View 之封装控件——实现 FlowLayout 容器</title>
      <link href="/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/"/>
      <url>/2019/07/12/Custom%20View/12.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E5%AE%9E%E7%8E%B0%20FlowLayout%20%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3322140af46dbd6a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="FlowLayout 容器效果图"></p><p><div id="jump1"></div></p><h3 id="12-3-1-XML-布局"><a href="#12-3-1-XML-布局" class="headerlink" title="12.3.1 XML 布局"></a>12.3.1 XML 布局</h3><p>先定义一个 style 标签，这是为 FlowLayout 中的 TextView 定义的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    ...</div><div class="line">    &lt;style name=&quot;text_flag&quot;&gt;</div><div class="line">        &lt;item name=&quot;android:layout_width&quot;&gt;wrap_content&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_height&quot;&gt;wrap_content&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_margin&quot;&gt;4dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:background&quot;&gt;@drawable/flag&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:textColor&quot;&gt;#FFFFFF&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>/res/drawable/flag.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;rectangle&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">    &lt;padding</div><div class="line">        android:top=&quot;5dp&quot;</div><div class="line">        android:bottom=&quot;5dp&quot;</div><div class="line">        android:left=&quot;10dp&quot;</div><div class="line">        android:right=&quot;10dp&quot;/&gt;</div><div class="line">    &lt;corners android:radius=&quot;30dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p>act_main.xml 的布局代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.FlowLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;Welcome&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;IT 工程师&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;我真是可以的&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;你觉得呢&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;不要只知道挣钱&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;努力 ing&quot;/&gt;</div><div class="line">        &lt;TextView</div><div class="line">            style=&quot;@style/text_flag&quot;</div><div class="line">            android:text=&quot;I thick i can&quot;/&gt;</div><div class="line">    &lt;/com.xxt.xtest.FlowLayout&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="12-3-2-提取-margin-值与重写-onMeasure-函数"><a href="#12-3-2-提取-margin-值与重写-onMeasure-函数" class="headerlink" title="12.3.2 提取 margin 值与重写 onMeasure() 函数"></a>12.3.2 提取 margin 值与重写 onMeasure() 函数</h3><h4 id="1-提取-margin-值"><a href="#1-提取-margin-值" class="headerlink" title="1. 提取 margin 值"></a>1. 提取 margin 值</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class FlowLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateLayoutParams(LayoutParams p) &#123;</div><div class="line">        return new MarginLayoutParams(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutParams generateLayoutParams(AttributeSet attrs) &#123;</div><div class="line">        return new MarginLayoutParams(getContext(), attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateDefaultLayoutParams() &#123;</div><div class="line">        return new MarginLayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-重写-onMeasure-函数"><a href="#2-重写-onMeasure-函数" class="headerlink" title="2. 重写 onMeasure() 函数"></a>2. 重写 onMeasure() 函数</h4><p>要实现 FlowLayout，必然涉及下面几个问题。<br><strong>1）何时换行</strong><br>从效果图中可以看到，FlowLayout 的布局是一行行的，如果当期已经放不下一个控件了，就把这个控件移到下一行显示。所以需要一个变量来计算当前行已经占据的宽度，以判断剩下的空间是否还能容得下下一个控件。<br><strong>2）如何得到 FlowLayout 的宽度</strong><br>FlowLayout 的宽度是所有行宽度的最大值，所以我们要记录每一行所占据的宽度值，进而找到所有值中的最大值。<br><strong>3）如何得到 FlowLayout 的高度</strong><br>FlowLayout 的高度是每一行高度的总和，而每一行的高度则取该行中所有控件高度的最大值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">    int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">    int lineWidth = 0;      // 记录每一行的宽度</div><div class="line">    int lineHeight = 0;     // 记录每一行的高度</div><div class="line">    int width = 0;          // 记录整个 FlowLayout 的宽度</div><div class="line">    int height = 0;         // 记录整个 FlowLayout 的高度</div><div class="line"></div><div class="line">    int count = getChildCount();</div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        // 计算控件的宽高时，要加上上下左右的 margin 值</div><div class="line">        MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">        int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">        int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line"></div><div class="line">        if (lineWidth + childWidth &gt; measureWidth) &#123;</div><div class="line">            // 需要换行</div><div class="line">            width = Math.max(lineWidth, childWidth);</div><div class="line">            height += lineHeight;</div><div class="line">            // 当前行放不下当前控件，而将此控件调到下一行</div><div class="line">            // 所以将此控件的高度和宽度初始化给 lineWidth、lineHeight</div><div class="line">            lineWidth = childWidth;</div><div class="line">            lineHeight = childHeight;</div><div class="line">        &#125; else &#123;</div><div class="line">            // 否则累加值 lineWidth，lineHeight 并取最大高度</div><div class="line">            lineWidth += childWidth;</div><div class="line">            lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 因为最后一行是不会超出 width 范围的，所以需要单独处理</div><div class="line">        if (i == count - 1) &#123;</div><div class="line">            width = Math.max(width, lineWidth);</div><div class="line">            height += lineHeight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">            (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-重写-onLayout-函数——布局所有子控件"><a href="#3-重写-onLayout-函数——布局所有子控件" class="headerlink" title="3. 重写 onLayout() 函数——布局所有子控件"></a>3. 重写 onLayout() 函数——布局所有子控件</h4><p>在 onLayout() 函数中需要一个个布局子控件。由于控件要后移和换行，所以我们要标记当前控件的 top 坐标和 left 坐标。然后计算每个控件的 top 坐标和 left 坐标，再调用 layout(int left, int top, int right, int bottom)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    int count = getChildCount();</div><div class="line">    int lineWidth = 0;      // 累加当前行的行宽</div><div class="line">    int lineHeight = 0;     // 当前行的行高</div><div class="line">    int top = 0, left = 0;  // 当前控件的 top 坐标和 left 坐标</div><div class="line"></div><div class="line">    for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">        int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">        int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line">        if (childWidth + lineWidth &gt; getMeasuredWidth()) &#123;</div><div class="line">            // 如果换行，则当前控件将放到下一行，从最左边开始，所以 left 就是 0；</div><div class="line">            // 而 top 则需要加上上一行的行高，才是这个控件的 top 坐标</div><div class="line">            top += lineHeight;</div><div class="line">            left = 0;</div><div class="line">            lineHeight = childHeight;</div><div class="line">            lineWidth = childWidth;</div><div class="line">        &#125; else &#123;</div><div class="line">            lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">            lineWidth += childWidth;</div><div class="line">        &#125;</div><div class="line">        // 计算 childView 的 left、top、right、bottom</div><div class="line">        int lc = left + lp.leftMargin;</div><div class="line">        int tc = top + lp.topMargin;</div><div class="line">        int rc = lc + child.getMeasuredWidth();</div><div class="line">        int bc = tc + child.getMeasuredHeight();</div><div class="line">        child.layout(lc, tc, rc, bc);</div><div class="line">        // 将 left 置为下一个子控件的起始点</div><div class="line">        left += childWidth;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="12-3-3-完整代码"><a href="#12-3-3-完整代码" class="headerlink" title="12.3.3 完整代码"></a>12.3.3 完整代码</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div></pre></td><td class="code"><pre><div class="line">public class FlowLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    public FlowLayout(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">        int lineWidth = 0;      // 记录每一行的宽度</div><div class="line">        int lineHeight = 0;     // 记录每一行的高度</div><div class="line">        int width = 0;          // 记录整个 FlowLayout 的宽度</div><div class="line">        int height = 0;         // 记录整个 FlowLayout 的高度</div><div class="line"></div><div class="line">        int count = getChildCount();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">            // 计算控件的宽高时，要加上上下左右的 margin 值</div><div class="line">            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line"></div><div class="line">            if (lineWidth + childWidth &gt; measureWidth) &#123;</div><div class="line">                // 需要换行</div><div class="line">                width = Math.max(lineWidth, childWidth);</div><div class="line">                height += lineHeight;</div><div class="line">                // 当前行放不下当前控件，而将此控件调到下一行</div><div class="line">                // 所以将此控件的高度和宽度初始化给 lineWidth、lineHeight</div><div class="line">                lineWidth = childWidth;</div><div class="line">                lineHeight = childHeight;</div><div class="line">            &#125; else &#123;</div><div class="line">                // 否则累加值 lineWidth，lineHeight 并取最大高度</div><div class="line">                lineWidth += childWidth;</div><div class="line">                lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // 因为最后一行是不会超出 width 范围的，所以需要单独处理</div><div class="line">            if (i == count - 1) &#123;</div><div class="line">                width = Math.max(width, lineWidth);</div><div class="line">                height += lineHeight;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">                (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int count = getChildCount();</div><div class="line">        int lineWidth = 0;      // 累加当前行的行宽</div><div class="line">        int lineHeight = 0;     // 当前行的行高</div><div class="line">        int top = 0, left = 0;  // 当前控件的 top 坐标和 left 坐标</div><div class="line"></div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line">            if (childWidth + lineWidth &gt; getMeasuredWidth()) &#123;</div><div class="line">                // 如果换行，则当前控件将放到下一行，从最左边开始，所以 left 就是 0；</div><div class="line">                // 而 top 则需要加上上一行的行高，才是这个控件的 top 坐标</div><div class="line">                top += lineHeight;</div><div class="line">                left = 0;</div><div class="line">                lineHeight = childHeight;</div><div class="line">                lineWidth = childWidth;</div><div class="line">            &#125; else &#123;</div><div class="line">                lineHeight = Math.max(lineHeight, childHeight);</div><div class="line">                lineWidth += childWidth;</div><div class="line">            &#125;</div><div class="line">            // 计算 childView 的 left、top、right、bottom</div><div class="line">            int lc = left + lp.leftMargin;</div><div class="line">            int tc = top + lp.topMargin;</div><div class="line">            int rc = lc + child.getMeasuredWidth();</div><div class="line">            int bc = tc + child.getMeasuredHeight();</div><div class="line">            child.layout(lc, tc, rc, bc);</div><div class="line">            // 将 left 置为下一个子控件的起始点</div><div class="line">            left += childWidth;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateLayoutParams(LayoutParams p) &#123;</div><div class="line">        return new MarginLayoutParams(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutParams generateLayoutParams(AttributeSet attrs) &#123;</div><div class="line">        return new MarginLayoutParams(getContext(), attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateDefaultLayoutParams() &#123;</div><div class="line">        return new MarginLayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.2 精通自定义 View 之封装控件——测量和布局</title>
      <link href="/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/"/>
      <url>/2019/07/12/Custom%20View/12.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E6%B5%8B%E9%87%8F%E5%92%8C%E5%B8%83%E5%B1%80/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="12-2-1-ViewGroup-绘制流程"><a href="#12-2-1-ViewGroup-绘制流程" class="headerlink" title="12.2.1 ViewGroup 绘制流程"></a>12.2.1 ViewGroup 绘制流程</h3><p>View 和 ViewGroup 的绘制流程基本相同，只是在 ViewGroup 中不仅要绘制自己，还要绘制其中的子控件，而 View 只需要绘制自己就可以了。</p><p>绘制流程分为三步：测量、布局、绘制，分别对应 onMeasure()、onLayout()、onDraw() 函数。</p><ul><li>onMeasure()：测量当前控件的大小，为正式布局提供建议（注意：只是建议，至于用不用，要看 onLayout() 函数）。</li><li>onLayout()：使用 layout() 函数对所有字控件进行布局。</li><li>onDraw()：根据布局的位置绘图。</li></ul><p><div id="jump2"></div></p><h3 id="12-2-2-onMeasure-函数与-MeasureSpec"><a href="#12-2-2-onMeasure-函数与-MeasureSpec" class="headerlink" title="12.2.2 onMeasure() 函数与 MeasureSpec"></a>12.2.2 onMeasure() 函数与 MeasureSpec</h3><p>布局绘画涉及两个过程：测量过程和布局过程。测量过程通过 measure() 函数来实现，是 View 树自顶向下的遍历，每个 View 在循环过程中将尺寸细节往下传递，当测量过程完成以后，所有的 View 都存储了自己的尺寸。布局过程则通过 layout() 函数来实现，也是自顶向下的，在这个过程中，每个父 View 负责通过计算好的尺寸放置它的子 View。</p><p>onMeasure() 函数是用来测量当前控件大小的，给 onLayout() 函数提供数值参考。需要特别注意的是，测量完成以后，要通过 setMeasuredDimension(int, int) 函数设置给系统。</p><h4 id="1-onMeasure-函数"><a href="#1-onMeasure-函数" class="headerlink" title="1. onMeasure() 函数"></a>1. onMeasure() 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec)</div></pre></td></tr></table></figure><p>参数 widthMeasureSpec 和 heightMeasureSpec 是父类传递给当前 View 的一个建议值，即想把当前 View 的尺寸设置为宽 widthMeasureSpec、高 heightMeasureSpec。</p><h4 id="2-MeasureSpec-的组成"><a href="#2-MeasureSpec-的组成" class="headerlink" title="2. MeasureSpec 的组成"></a>2. MeasureSpec 的组成</h4><p>widthMeasureSpec 和 heightMeasureSpec 转换为二进制数字表示，它们都是 32 位的，前 2 位代表模式（mode），后面 30 位代表数值（size）。</p><h5 id="1）模式分类"><a href="#1）模式分类" class="headerlink" title="1）模式分类"></a>1）模式分类</h5><table><thead><tr><th style="text-align:center">模式</th><th style="text-align:center">二进制值</th><th style="text-align:left">含义</th><th style="text-align:left">对应 XML</th></tr></thead><tbody><tr><td style="text-align:center">UNSPECIFIED</td><td style="text-align:center">00000000…00000000</td><td style="text-align:left">父元素不对子元素的确切大小，子元素可以得到任意想要的大小</td><td style="text-align:left">不常用</td></tr><tr><td style="text-align:center">EXACTLY</td><td style="text-align:center">01000000…00000000</td><td style="text-align:left">父元素决定子元素的确切大小，子元素将被限定在给定的边界里而忽略它本身的大小</td><td style="text-align:left">match_parent、具体数值</td></tr><tr><td style="text-align:center">AT_MOST</td><td style="text-align:center">10000000…00000000</td><td style="text-align:left">子元素至多达到指定大小的值</td><td style="text-align:left">wrap_content</td></tr></tbody></table><h5 id="2）模式提取"><a href="#2）模式提取" class="headerlink" title="2）模式提取"></a>2）模式提取</h5><p>使用 &amp; 位运算。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">private static final int MODE_SHIFT = 30;</div><div class="line">// 对应：11000000 00000000 00000000 00000000</div><div class="line">private static final int MODE_MASK  = 0x3 &lt;&lt; MODE_SHIFT;</div><div class="line"></div><div class="line">// 提取模式</div><div class="line">public static int getMode(int measureSpec) &#123;</div><div class="line">    return (measureSpec &amp; MODE_MASK);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 提取数值</div><div class="line">public static int getSize(int measureSpec) &#123;</div><div class="line">    return (measureSpec &amp; ~MODE_MASK);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h5 id="3）MeasureSpec"><a href="#3）MeasureSpec" class="headerlink" title="3）MeasureSpec"></a>3）MeasureSpec</h5><p>Android 已经为我们提供了 MeasureSpec 类来实现模式和数值的提取。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MeasureSpec.getMode(int spec)  // 获取模式</div><div class="line">MeasureSpec.getSize(int spec)  // 获取数值</div></pre></td></tr></table></figure></p><p>另外，模式的取值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MeasureSpec.UNSPECIFIED</div><div class="line">MeasureSpec.EXACTLY</div><div class="line">MeasureSpec.AT_MOST</div></pre></td></tr></table></figure></p><p>实际运用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">    int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">    int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">    int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">    // 计算过程</div><div class="line">    ...</div><div class="line"></div><div class="line">    setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">            (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="12-2-3-onLayout-函数"><a href="#12-2-3-onLayout-函数" class="headerlink" title="12.2.3 onLayout() 函数"></a>12.2.3 onLayout() 函数</h3><p>onLayout() 是实现所有子控件布局的函数。那关于它自己的布局怎么办呢？是在父控件中由它的父控件完成的。就这样一层一层地向上由各自的父控件完成对自己的布局，直到所有控件的顶层节点。在所有的控件的顶部有一个 ViewRoot，它才是所有控件的祖先节点。</p><p>ViewRoot 使用 setFrame(l, t, r, b) 函数中设置自己的位置，设置结束以后才会调用 onLayout(changed, l, t, r, b) 函数来设置内部所有子控件的位置。</p><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-20a27ee32d8e2121.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div></pre></td><td class="code"><pre><div class="line">public class MyLinLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    public MyLinLayout(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">        int height = 0;</div><div class="line">        int width = 0;</div><div class="line">        int count = getChildCount();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            // 测量子控件</div><div class="line">            View child = getChildAt(i);</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">            // 获得子控件的宽高</div><div class="line">            int childWidth = child.getMeasuredWidth();</div><div class="line">            int childHeight = child.getMeasuredHeight();</div><div class="line">            // 得到最大宽度，并且累加高度</div><div class="line">            height += childHeight;</div><div class="line">            width = Math.max(childWidth, width);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">                (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int top = 0;</div><div class="line">        int count = getChildCount();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            int childWidth = child.getMeasuredWidth();</div><div class="line">            int childHeight = child.getMeasuredHeight();</div><div class="line"></div><div class="line">            child.layout(0, top, childWidth, top + childHeight);</div><div class="line">            top += childHeight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>res/layout/act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;com.xxt.xtest.MyLinLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:background=&quot;#FF00FF&quot;&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;first view&quot;</div><div class="line">        android:background=&quot;#FF0000&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;second view&quot;</div><div class="line">        android:background=&quot;#00FF00&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;third view&quot;</div><div class="line">        android:background=&quot;#0000FF&quot;/&gt;</div><div class="line">&lt;/com.xxt.xtest.MyLinLayout&gt;</div></pre></td></tr></table></figure></p><blockquote><p>注意：getMeasuredWidth() 与 getWidth() 获得的值大部分时候是相同的，但含义却是根本不一样的。前者是在 measure() 过程结束后就可以获取到宽度值，而后者是要在 layout() 过程结束后才能获取到宽度值；前者的值是通过 setMeasuredDimension() 函数来进行设置的，而后者的值是通过 layout(left, top, right, bottom) 函数来进行设置的。</p></blockquote><p><div id="jump4"></div></p><h3 id="12-2-4-获取子控件-margin-值的方法"><a href="#12-2-4-获取子控件-margin-值的方法" class="headerlink" title="12.2.4 获取子控件 margin 值的方法"></a>12.2.4 获取子控件 margin 值的方法</h3><h4 id="1-获取方法及示例"><a href="#1-获取方法及示例" class="headerlink" title="1. 获取方法及示例"></a>1. 获取方法及示例</h4><p>在上面 MyLinLayout 例子的基础上，添加 layout_margin 参数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;com.xxt.xtest.MyLinLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:background=&quot;#FF00FF&quot;&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;</div><div class="line">        android:text=&quot;first view&quot;</div><div class="line">        android:background=&quot;#FF0000&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginTop=&quot;20dp&quot;</div><div class="line">        android:text=&quot;second view&quot;</div><div class="line">        android:background=&quot;#00FF00&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginTop=&quot;30dp&quot;</div><div class="line">        android:text=&quot;third view&quot;</div><div class="line">        android:background=&quot;#0000FF&quot;/&gt;</div><div class="line">&lt;/com.xxt.xtest.MyLinLayout&gt;</div></pre></td></tr></table></figure></p><p>重写 generateLayoutParams() 和 generateDefaultLayoutParams()，返回对应的 MarginLayoutParams() 函数的实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected LayoutParams generateLayoutParams(LayoutParams p) &#123;</div><div class="line">    return new MarginLayoutParams(p);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public LayoutParams generateLayoutParams(AttributeSet attrs) &#123;</div><div class="line">    return new MarginLayoutParams(getContext(), attrs);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected LayoutParams generateDefaultLayoutParams() &#123;</div><div class="line">    return new MarginLayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>重写 onMeasure() 和 onLayout() 函数，修正获取子控件的宽高逻辑。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">    View child = getChildAt(i);</div><div class="line">    // 获得子控件的宽高</div><div class="line">    MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">    int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">    int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>最终效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4a0a7e96f37e4116.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>完整代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">public class MyLinLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    public MyLinLayout(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">        int height = 0;</div><div class="line">        int width = 0;</div><div class="line">        int count = getChildCount();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            // 测量子控件</div><div class="line">            View child = getChildAt(i);</div><div class="line">            measureChild(child, widthMeasureSpec, heightMeasureSpec);</div><div class="line">            // 获得子控件的宽高</div><div class="line">            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line">            // 得到最大宽度，并且累加高度</div><div class="line">            height += childHeight;</div><div class="line">            width = Math.max(childWidth, width);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        setMeasuredDimension((measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth : width,</div><div class="line">                (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight : height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">        int top = 0;</div><div class="line">        int count = getChildCount();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            View child = getChildAt(i);</div><div class="line">            // 获得子控件的宽高</div><div class="line">            MarginLayoutParams lp = (MarginLayoutParams) child.getLayoutParams();</div><div class="line">            int childWidth = child.getMeasuredWidth() + lp.leftMargin + lp.rightMargin;</div><div class="line">            int childHeight = child.getMeasuredHeight() + lp.topMargin + lp.bottomMargin;</div><div class="line"></div><div class="line">            child.layout(0, top, childWidth, top + childHeight);</div><div class="line">            top += childHeight;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateLayoutParams(LayoutParams p) &#123;</div><div class="line">        return new MarginLayoutParams(p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public LayoutParams generateLayoutParams(AttributeSet attrs) &#123;</div><div class="line">        return new MarginLayoutParams(getContext(), attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected LayoutParams generateDefaultLayoutParams() &#123;</div><div class="line">        return new MarginLayoutParams(LayoutParams.MATCH_PARENT, LayoutParams.MATCH_PARENT);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h4><p>在 container 中初始化子控件时，会调用 LayoutParams generateLayoutParams(LayoutParams p) 函数来为子控件生成对应的布局属性，但默认只生成 layout_width 和 layout_height 所对应的布局参数，即在正常情况下调用 generateLayoutParams() 函数生成的 LayoutParams 实例是不能获取到 margin 值的。所以，如我我们还需要与 margin 相关的参数，就只能重写 generateLayoutParams() 函数，返回派生自 LayoutParams 的子类 MarginLayoutParams，根据类的多态性，可以直接将其强转成 MarginLayoutParams 实例。为了安全起见，也可以利用 instanceof 来进行判断。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12.1 精通自定义 View 之封装控件——自定义属性与自定义 Style</title>
      <link href="/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/"/>
      <url>/2019/07/12/Custom%20View/12.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B0%81%E8%A3%85%E6%8E%A7%E4%BB%B6%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E5%B1%9E%E6%80%A7%E4%B8%8E%E8%87%AA%E5%AE%9A%E4%B9%89%20Style/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="12-1-1-示例"><a href="#12-1-1-示例" class="headerlink" title="12.1.1 示例"></a>12.1.1 示例</h3><h4 id="1-自定义-Style-和属性"><a href="#1-自定义-Style-和属性" class="headerlink" title="1. 自定义 Style 和属性"></a>1. 自定义 Style 和属性</h4><p>1）自定义一个类 MyTextView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class MyTextView extends AppCompatTextView &#123;</div><div class="line">    public MyTextView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyTextView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyTextView(Context context, AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2）新建 res/values/attrs.xml 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot; ?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;MyTextView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;header&quot; format=&quot;reference&quot;/&gt;</div><div class="line">        &lt;attr name=&quot;headerHeight&quot; format=&quot;dimension&quot;/&gt;</div><div class="line">        &lt;attr name=&quot;headerVisibleHeight&quot; format=&quot;dimension&quot;/&gt;</div><div class="line">        &lt;attr name=&quot;age&quot;&gt;</div><div class="line">            &lt;flag name=&quot;child&quot; value=&quot;10&quot;/&gt;</div><div class="line">            &lt;flag name=&quot;young&quot; value=&quot;18&quot;/&gt;</div><div class="line">            &lt;flag name=&quot;old&quot; value=&quot;60&quot;/&gt;</div><div class="line">        &lt;/attr&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><ul><li>reference 指的是从 string.xml、drawable.xml、color.xml 等文件中引用过来的值。</li><li>flag 是自己定义的，类似于 android:gravity=”top”。</li><li>dimension 指的是从 dimensions.xml 文件中引用过来的值。注意，这里如果是 dp，就会进行像素转换。</li></ul><blockquote><p>注意：declare-styleable 的 name 值对应所定义的类名。自定义属性值可以组合使用。比如 <attr name="border_color" format="color | reference"> 表示既可以自定义 color 值 (比如 #ff00ff)，也可以利用 @color/xxx 来引用 colors.xml 中已有的值。</attr></p></blockquote><p><div id="jump2"></div></p><h3 id="12-1-2-在-XML-中使用自定义的属性"><a href="#12-1-2-在-XML-中使用自定义的属性" class="headerlink" title="12.1.2 在 XML 中使用自定义的属性"></a>12.1.2 在 XML 中使用自定义的属性</h3><p>res/layout/act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:attrstest=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.MyTextView</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        attrstest:header=&quot;@drawable/head&quot;</div><div class="line">        attrstest:headerHeight=&quot;300dp&quot;</div><div class="line">        attrstest:headerVisibleHeight=&quot;100dp&quot;</div><div class="line">        attrstest:age=&quot;young&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>下面代码是导入自定义的属性集，使 XML 能识别我们自定义的属性。attrstest 是自定义的，可随意定义为 xxx，对应的访问自定义控件的方式就是 xxx:headerHeight=”300dp”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">xmlns:attrstest=&quot;http://schemas.android.com/apk/res-auto&quot;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="12-1-3-在代码中获取自定义属性的值"><a href="#12-1-3-在代码中获取自定义属性的值" class="headerlink" title="12.1.3 在代码中获取自定义属性的值"></a>12.1.3 在代码中获取自定义属性的值</h3><p>使用代码获取用户所定义的某个属性的值，主要使用 TypedArray 类，这个类提供了获取某个属性值的所有方法，如下所示。需要注意的是，在使用完以后必须调用 TypedArray 类的 recycle() 函数来释放资源。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">typedArray.getInt(int index, float defValue)</div><div class="line">typedArray.getDimension(int index, float defValue)</div><div class="line">typedArray.getBoolean(int index, float defValue)</div><div class="line">typedArray.getColor(int index, float defValue)</div><div class="line">typedArray.getString(int index)</div><div class="line">typedArray.getDrawable(int index)</div><div class="line">typedArray.getResources()</div><div class="line"></div><div class="line">typedArray.recycle()</div></pre></td></tr></table></figure></p><p>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class MyTextView extends AppCompatTextView &#123;</div><div class="line"></div><div class="line">    public MyTextView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs, R.styleable.MyTextView);</div><div class="line">        float headerHeight = typedArray.getDimension(R.styleable.MyTextView_headerHeight, -1);</div><div class="line">        int age = typedArray.getInt(R.styleable.MyTextView_age, -1);</div><div class="line">        Drawable drawable = typedArray.getDrawable(R.styleable.MyTextView_header);</div><div class="line">        typedArray.recycle();</div><div class="line">        String text = &quot;headerHeight:&quot; + headerHeight + &quot; age:&quot; + age;</div><div class="line">        this.setText(text);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0460193d30e7a4eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump4"></div></p><h3 id="12-1-4-declare-styleable-标签其他属性的用法"><a href="#12-1-4-declare-styleable-标签其他属性的用法" class="headerlink" title="12.1.4 declare-styleable 标签其他属性的用法"></a>12.1.4 declare-styleable 标签其他属性的用法</h3><h4 id="1-reference：参考某一资源-ID"><a href="#1-reference：参考某一资源-ID" class="headerlink" title="1. reference：参考某一资源 ID"></a>1. reference：参考某一资源 ID</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;background&quot; format=&quot;reference&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">    android:layout_width=&quot;42dip&quot;</div><div class="line">    android:layout_height=&quot;42dip&quot;</div><div class="line">    android:background=&quot;@drawable/图片 ID&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="2-color：颜色值"><a href="#2-color：颜色值" class="headerlink" title="2. color：颜色值"></a>2. color：颜色值</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;textColor&quot; format=&quot;color&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:layout_width=&quot;42dip&quot;</div><div class="line">    android:layout_height=&quot;42dip&quot;</div><div class="line">    android:textColor=&quot;#00FF00&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="3-boolean：布尔值"><a href="#3-boolean：布尔值" class="headerlink" title="3. boolean：布尔值"></a>3. boolean：布尔值</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;focusable&quot; format=&quot;boolean&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    android:layout_width=&quot;42dip&quot;</div><div class="line">    android:layout_height=&quot;42dip&quot;</div><div class="line">    android:focusable=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="4-dimension：尺寸值"><a href="#4-dimension：尺寸值" class="headerlink" title="4. dimension：尺寸值"></a>4. dimension：尺寸值</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;layout_width&quot; format=&quot;dimension&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Button</div><div class="line">    android:layout_width=&quot;42dip&quot;</div><div class="line">    android:layout_height=&quot;42dip&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="5-float：浮点值"><a href="#5-float：浮点值" class="headerlink" title="5. float：浮点值"></a>5. float：浮点值</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;AlphaAnimation&quot;&gt;</div><div class="line">    &lt;attr name=&quot;fromAlpha&quot; format=&quot;float&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;toAlpha&quot; format=&quot;float&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;Alpha</div><div class="line">    android:fromAlpha=&quot;1.0&quot;</div><div class="line">    android:toAlpha=&quot;0.7&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="6-integer：整型值"><a href="#6-integer：整型值" class="headerlink" title="6. integer：整型值"></a>6. integer：整型值</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;AnimatedRotateDrawable&quot;&gt;</div><div class="line">    &lt;attr name=&quot;visible&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;frameDuration&quot; format=&quot;integer&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;framesCount&quot; format=&quot;integer&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;pivotX&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;pivotY&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;drawable&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;animated-rotate</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:drawable=&quot;@drawable/图片 ID&quot;</div><div class="line">    android:pivotX=&quot;50%&quot;</div><div class="line">    android:pivotY=&quot;50%&quot;</div><div class="line">    android:framesCount=&quot;12&quot;</div><div class="line">    android:frameDuration=&quot;100&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="7-string：字符串"><a href="#7-string：字符串" class="headerlink" title="7. string：字符串"></a>7. string：字符串</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;MapView&quot;&gt;</div><div class="line">    &lt;attr name=&quot;apiKey&quot; format=&quot;string&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;com.google.android.maps.MapView</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:apiKey=&quot;FJA802hFS01jhFDA9oAFAoFJAFDA9oAFAo&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="8-fraction：百分数"><a href="#8-fraction：百分数" class="headerlink" title="8. fraction：百分数"></a>8. fraction：百分数</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;RotateDrawable&quot;&gt;</div><div class="line">    &lt;attr name=&quot;visible&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;fromDegrees&quot; format=&quot;float&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;toDegrees&quot; format=&quot;float&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;pivotX&quot; format=&quot;fraction&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;pivotY&quot; format=&quot;fraction&quot;/&gt;</div><div class="line">    &lt;attr name=&quot;drawable&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;rotate</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:interpolator=&quot;@anim/动画 ID&quot;</div><div class="line">    android:fromDegrees=&quot;0&quot;</div><div class="line">    android:toDegrees=&quot;360&quot;</div><div class="line">    android:pivotX=&quot;200%&quot;</div><div class="line">    android:pivotY=&quot;300%&quot;</div><div class="line">    android:duration=&quot;5000&quot;</div><div class="line">    android:repeatMode=&quot;restart&quot;</div><div class="line">    android:repeatCount=&quot;infinite&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="9-enum：枚举值"><a href="#9-enum：枚举值" class="headerlink" title="9. enum：枚举值"></a>9. enum：枚举值</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;orientation&quot;&gt;</div><div class="line">        &lt;enum name=&quot;horizontal&quot; value=&quot;0&quot;/&gt;</div><div class="line">        &lt;enum name=&quot;vertical&quot; value=&quot;1&quot;/&gt;</div><div class="line">    &lt;/attr&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><h4 id="10-flag：位或运算"><a href="#10-flag：位或运算" class="headerlink" title="10. flag：位或运算"></a>10. flag：位或运算</h4><p>属性定义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;windowSoftInputMode&quot;&gt;</div><div class="line">        &lt;flag name=&quot;stateUnspecified&quot; value=&quot;0&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;stateUnchanged&quot; value=&quot;1&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;stateHidden&quot; value=&quot;2&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;stateAlwaysHidden&quot; value=&quot;3&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;stateVisible&quot; value=&quot;4&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;stateAlwaysVisible&quot; value=&quot;5&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;adjustUnspecified&quot; value=&quot;0x00&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;adjustResize&quot; value=&quot;0x10&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;adjustPan&quot; value=&quot;0x20&quot;/&gt;</div><div class="line">        &lt;flag name=&quot;adjustNothing&quot; value=&quot;0x30&quot;/&gt;</div><div class="line">    &lt;/attr&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure></p><p>属性使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;Activity</div><div class="line">    android:name=&quot;.StyleAndThemeActivity&quot;</div><div class="line">    android:label=&quot;@string/app_name&quot;</div><div class="line">    android:windowSoftInputMode=&quot;stateUnspecified | stateUnchanged | stateHidden&quot;&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=&quot;android.intent.action.MAIN&quot;/&gt;</div><div class="line">        &lt;category android:name=&quot;android.intent.category.LAUNCHER&quot;/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><blockquote><p>特别注意：属性在定义时可以指定多种类型的值。</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;declare-styleable name=&quot;名称&quot;&gt;</div><div class="line">    &lt;attr name=&quot;background&quot; format=&quot;reference|color&quot;/&gt;</div><div class="line">&lt;/declare-styleable&gt;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.2 精通自定义 View 之 Matrix 与坐标变换——ColorMatrix 色彩变换</title>
      <link href="/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/"/>
      <url>/2019/07/11/Custom%20View/11.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94ColorMatrix%20%E8%89%B2%E5%BD%A9%E5%8F%98%E6%8D%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="11-2-1-色彩变换矩阵"><a href="#11-2-1-色彩变换矩阵" class="headerlink" title="11.2.1 色彩变换矩阵"></a>11.2.1 色彩变换矩阵</h3><p>对于色彩的存储，Bitmap 类使用一个 32 位的数值来保存，红、绿、蓝及透明度各占 8 位，每个色彩分量的取值范围是 0~255。透明度为 0 表示完全透明，为 255 时色彩完全可见。</p><h4 id="1-色彩信息的矩阵表示"><a href="#1-色彩信息的矩阵表示" class="headerlink" title="1. 色彩信息的矩阵表示"></a>1. 色彩信息的矩阵表示</h4><p>由于一个色彩信息包含 R、G、B、Alpha 信息,所以,我们必然要使用一个四阶色彩变 换矩阵来修改色彩的每一个分量值。<br>$$ \left[ \begin{matrix} Red &amp; 0 &amp; 0 &amp; 0 \ 0 &amp; Green &amp; 0 &amp; 0 \ 0 &amp; 0 &amp; Blue &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; Alpha \end{matrix} \right]$$</p><blockquote><p>注意:对于色彩变换矩阵，这里的色彩顺序是 R、G、B、A，而不是 A、R、G、B。</p></blockquote><p>如果想将色彩 (0,255,0,255) 更改为半透明，则可以使用下面的矩阵运算来表示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-65968173a9ff1c69.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>上面使用四阶矩阵完全可以改变图片的 RGBA 值，但考虑一种情况：如果我们只想在原有的 R 色上增加一些分量呢?</p><p>这时，我们就得再多加一阶来表示平移变换。所，一个既包含线性变换又包含平移变换的组合变换称为仿射变换。使用四阶色彩变换矩阵来修改色彩，只能对色彩的每个分量值进行乘(除)运算。如果要对这些分量值进行加减法运算(平移变换)，则只能通过五阶矩阵来完成。</p><p>考虑下面这个变换：<br>1）红色分量值更改为原来的 2 倍。<br>2）绿色分量值增加 100。</p><p>这个变换使用四阶矩阵的乘法无法实现。所以，应该在四阶色彩变换矩阵上增加一个“哑元坐标”，来实现所列的矩阵运算。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-53ad1961066a0714.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在这个矩阵中，分量值用的是 100。</p><h4 id="2-Android-中的色彩变换矩阵"><a href="#2-Android-中的色彩变换矩阵" class="headerlink" title="2. Android 中的色彩变换矩阵"></a>2. Android 中的色彩变换矩阵</h4><p>在 Android 中，色彩变换矩阵的表示形式也是五阶的。所以，在默认情况下，色彩变换矩阵的形式如下:<br>$$ \left[ \begin{matrix} 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0 \ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0 \ 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0\end{matrix} \right]$$</p><p>Android 中的色彩变换矩阵是用 ColorMatrix 类来表示的。使用 ColorMatrix 类的方法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">       1, 0, 0, 0, 0,</div><div class="line">       0, 1, 0, 0, 0,</div><div class="line">       0, 0, 1, 0, 0,</div><div class="line">       0, 0, 0, 0.5, 0,</div><div class="line">&#125;);</div><div class="line">mPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));</div></pre></td></tr></table></figure></p><p>有关 setColorFilter() 函数的其他用法，将在本节末尾详细讲解。</p><h4 id="3-示例：彩色图片的蓝色通道输出"><a href="#3-示例：彩色图片的蓝色通道输出" class="headerlink" title="3. 示例：彩色图片的蓝色通道输出"></a>3. 示例：彩色图片的蓝色通道输出</h4><p>下面以为 Bitmap 应用 ColorMatrix 类为例,代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line">    private Paint mPaint = new Paint();</div><div class="line">    private Bitmap bitmap;  // 位图</div><div class="line">    private Rect rect;</div><div class="line">    private ColorMatrixColorFilter colorMatrixColorFilter;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        // 获取位图</div><div class="line">        bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.dog);</div><div class="line">        rect = new Rect();</div><div class="line">        // 生成色彩变换矩阵</div><div class="line">        ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">                0, 0, 0, 0, 0,</div><div class="line">                0, 0, 0, 0, 0,</div><div class="line">                0, 0, 1, 0, 0,</div><div class="line">                0, 0, 0, 1, 0,</div><div class="line">        &#125;);</div><div class="line">        colorMatrixColorFilter = new ColorMatrixColorFilter(colorMatrix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        rect.set(0, 0, 500, 500 * bitmap.getHeight() / bitmap.getWidth());</div><div class="line">        // 绘制原始位图</div><div class="line">        canvas.drawBitmap(bitmap, null, rect, mPaint);</div><div class="line">        canvas.translate(510, 0);</div><div class="line"></div><div class="line">        mPaint.setColorFilter(colorMatrixColorFilter);</div><div class="line">        canvas.drawBitmap(bitmap, null, rect, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里分两次绘制了一个 Bitmap，先绘制了一个原始图像,然后利用 ColorMatrix 类生成了 一个仅包含蓝色的图像。用过 Photoshop 的读者应该很清楚,这跟 Photoshop 中蓝色通道的效 果是一致的。效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-40bfc3d34d47dc8a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump2"></div></p><h3 id="11-2-2-色彩的几种运算方式"><a href="#11-2-2-色彩的几种运算方式" class="headerlink" title="11.2.2 色彩的几种运算方式"></a>11.2.2 色彩的几种运算方式</h3><h4 id="1-色彩的平移运算"><a href="#1-色彩的平移运算" class="headerlink" title="1. 色彩的平移运算"></a>1. 色彩的平移运算</h4><p>1）增加色彩饱和度<br>色彩的平移运算实际上就是色彩的加法运算，其实就是在色彩变换矩阵的最后一列加上某个值，这样可以增加特定色彩的饱和度。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-32174d42e4b29379.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>比如，同样是上面的图片，我们给它应用下面的色彩值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">       1, 0, 0, 0, 0,</div><div class="line">       0, 1, 0, 0, 50,</div><div class="line">       0, 0, 1, 0, 0,</div><div class="line">       0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>在绿色值上添加增量 50，即增大绿色的饱和度。效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0be65968c5d44c47.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>同样，左侧是原图，右侧是增大绿色饱和度后的效果。大家要特别注意的是，由于图片是由一个个像素组成的，所以用每个像素所对应的色彩数组来乘以色彩变换矩阵，结果就是变换后的当前点的颜色值。在应用 ColorMatrix 类后，图片中每个像素的绿色值都增加了 50, 从小狗的脸上也可以看出来。</p><p>2）色彩反转/反相功能<br>色彩平移除增加指定色彩的饱和度以外，另一个应用就是色彩反转，也就是 Photoshop 中的反相功能。色彩反转就是求出每个色彩的补值来作为目标图像的对应颜色值。示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">        -1, 0, 0, 0, 255,</div><div class="line">        0, -1, 0, 0, 255,</div><div class="line">        0, 0, -1, 0, 255,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-45b981d952839f0e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-色彩的缩放运算"><a href="#2-色彩的缩放运算" class="headerlink" title="2. 色彩的缩放运算"></a>2. 色彩的缩放运算</h4><p>1）调节亮度<br>色彩的缩放运算其实就是色彩的乘法运算。将色彩变换矩阵对角线上分别代表 R、G、B、 A 的几个值分别乘以指定的值，就是所谓的缩放运算，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bd12812a0945e1a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们可以针对某个颜色值进行放大/缩小运算。但是当对 R、G、B、A 同时进行放大/缩小运算时，就是对亮度进行调节。</p><p>看下面将亮度增大 1.2 倍的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">        1.2f, 0, 0, 0, 0,</div><div class="line">        0, 1.2f, 0, 0, 0,</div><div class="line">        0, 0, 1.2f, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-89be53a5c44e1d14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>2）通道输出<br>由于在色彩变换矩阵中对角线上的数的取值范围为 0~1，所以，当取 0 时，这个色彩就完全不显示；当 R、G 都取 0，而独有 B 取 1 时,就只显示蓝色，所形成的图像也就是我们通常所说的蓝色通道。看一下几个通道输出的效果图，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b3ba32645756773a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// 红色通道矩阵</div><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">        1, 0, 0, 0, 0,</div><div class="line">        0, 0, 0, 0, 0,</div><div class="line">        0, 0, 0, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div><div class="line">// 绿色通道矩阵</div><div class="line">ColorMatrix colorMatrix2 = new ColorMatrix(new float[]&#123;</div><div class="line">        0, 0, 0, 0, 0,</div><div class="line">        0, 1, 0, 0, 0,</div><div class="line">        0, 0, 0, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div><div class="line">// 蓝色通道矩阵</div><div class="line">ColorMatrix colorMatrix3 = new ColorMatrix(new float[]&#123;</div><div class="line">        0, 0, 0, 0, 0,</div><div class="line">        0, 0, 0, 0, 0,</div><div class="line">        0, 0, 1, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure><h4 id="3-色彩的旋转运算"><a href="#3-色彩的旋转运算" class="headerlink" title="3. 色彩的旋转运算"></a>3. 色彩的旋转运算</h4><p>RGB 色是如何旋转的呢？首先用 R、G、B 三色建立立体坐标系，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-48b458e1e54db702.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>所以，我们可以把一个色彩值看成三维空间里的一个点，色彩值的三个分量可以看成该点的坐标(三维坐标)。我们先不考虑在三个维度综合情况下是怎么旋转的，来看看将某个轴作为 Z 轴，在另外两个轴形成的平面上旋转的情况。下图分析了将蓝色轴作为 Z 轴，仅在红 — 绿平面上旋转 a 度的情况。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d71bec3124ade35c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到，在旋转后，原 R 在 R 轴上的分量变为原 Rxcosa，原 G 在 R 轴上也有了分量，但分量落在了负轴上，所以要减去这部分分量，最终的结果是最终的 R=原 R×cosa-原 G×sina。 下面来看一下几种旋转计算及结果矩阵(注意：这几张图只标记了原 X 轴色彩分量的旋转，没有把 Y 轴色彩分量的旋转标记出来)。</p><p>1）绕蓝色轴旋转 θ 度</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-16150536456eb83f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>对应的色彩变换矩阵如下：<br>$$ \left[ \begin{matrix} cosθ &amp; sinθ &amp; 0 &amp; 0 &amp; 0\ -sinθ &amp; cosθ &amp; 0 &amp; 0 &amp; 0\ 0 &amp; 0 &amp; 1 &amp; 0 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1\end{matrix} \right]$$</p><p>2）绕红色轴旋转 θ 度</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ff2dadf5ca618b87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>对应的色彩变换矩阵如下：<br>$$ \left[ \begin{matrix} 1 &amp; 0 &amp; 0 &amp; 0 &amp; 0\ 0 &amp; cosθ &amp; sinθ &amp; 0 &amp; 0\ 0 &amp; -sinθ &amp; cosθ &amp; 0 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1\end{matrix} \right]$$</p><p>3）绕绿色轴旋转 θ 度</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7dc283195247047d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>对应的色彩变换矩阵如下：<br>$$ \left[ \begin{matrix} cosθ &amp; 0 &amp; -sinθ &amp; 0 &amp; 0 \ 0 &amp; 1 &amp; 0 &amp; 0 &amp; 0\ sinθ &amp; 0 &amp; cosθ &amp; 0 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 1 &amp; 0 \ 0 &amp; 0 &amp; 0 &amp; 0 &amp; 1\end{matrix} \right]$$</p><p>当围绕红色轴进行色彩旋转时，由于当前红色轴的色彩是不变的,而仅利用三角函数来动态变更绿色和蓝色的颜色值，这种改变就叫作色相调节。当围绕红色轴旋转时，是对图片进行红色色相的调节；当围绕蓝色轴旋转时，是对图片进行蓝色色相的调节；当围绕绿色轴旋转时，是对图片进行绿色色相的调节。</p><p>下面我们会再次讲到 ColorMatrix 的色彩旋转函数，这里先理解原理，代码和效果后面会给出。</p><h4 id="4-色彩的投射运算"><a href="#4-色彩的投射运算" class="headerlink" title="4. 色彩的投射运算"></a>4. 色彩的投射运算</h4><p>我们再回过头来看看色彩变换矩阵运算的公式，如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-06dc50244970cb7f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在上式中，把红色运算单独标记出来。在运算中，它们就是利用 G、B、A 的颜色值的分量来增加红色值的。</p><p>来看具体的运算：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-9c329370c6741f14.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>注意：最终结果的 220=0.2×100+1×200，可见绿色分量在原有绿色分量的基础上增加了红色分量值的 0.2 倍。利用其他色彩分量的倍数来更改自己色彩分量的值，这种运算就叫作投射运算。</p></blockquote><p>在对下图中阴影部分的值进行修改时，所使用的增加值来自其他色彩分量的信息。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2ab0e18e38b1a69d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>应用一：黑白图片</strong><br>色彩投射的一个最简单的应用就是将彩色图片变为黑白图片。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">        0.213f, 0.715f, 0.072f, 0, 0,</div><div class="line">        0.213f, 0.715f, 0.072f, 0, 0,</div><div class="line">        0.213f, 0.715f, 0.072f, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4432b05b5b2d8427.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>首先了解一下去色原理：只要把 R、G、B 三通道的色彩信息设置成一样，即 R=G=B，图像就变成了灰色。并且，为了保证图像亮度不变，同一个通道中的 R+G+B=1，如 0.213+0.715+0.072=1。</p><p>下面谈一下 0.213、0.715、0.072 这三个数字的由来。</p><p>按理说应该把 R、G、B 平分，都是 0.3333333。三个数字应该是根据色彩光波频率及色彩心理学计算出来的。</p><p>在作用于人眼的光线中，彩色光要明显强于无色光。如果对一张图像按 RGB 平分理论给图像去色，人眼就会明显感觉到图像变暗了(当然可能有心理上的原因，也有光波的科学依据)。另外，在彩色图像中能够识别的一些细节也可能会丢失。</p><p>所以 Google 最终给出的颜色值就是上面的三个数字：0.213、0.715、0.072。我们在给图像去色时保留了大量的 G 通道信息，使得图像不至于变暗或者绿色信息不至于丢失。</p><p><strong>应用二：色彩反色</strong><br>利用色彩变换矩阵将两个颜色反转，这种操作就叫作色彩反色。比如，将红色和绿色反色(红绿反色)，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">        0, 1, 0, 0, 0,</div><div class="line">        1, 0, 0, 0, 0,</div><div class="line">        0, 0, 1, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-56ec63b6df2ee7eb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>左侧为原图，右侧为红绿反色以后的效果图。</p><p>从色彩变换矩阵中可以看出，红绿反色的关键在于，第一行用绿色来代替红色，第二行用红色来代替绿色。类似的可以有红蓝反色、绿蓝反色等，对应矩阵难度不大，就不再细讲了。</p><p><strong>应用三：照片变旧</strong><br>投射运算的另一个应用是照片变旧，其对应的矩阵如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ColorMatrix colorMatrix = new ColorMatrix(new float[]&#123;</div><div class="line">        1/2f, 1/2f, 1/2f, 0, 0,</div><div class="line">        1/3f, 1/3f, 1/3f, 0, 0,</div><div class="line">        1/4f, 1/4f, 1/4f, 0, 0,</div><div class="line">        0, 0, 0, 1, 0,</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-554ef9bc51e003f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="11-2-3-ColorMatrix-函数"><a href="#11-2-3-ColorMatrix-函数" class="headerlink" title="11.2.3 ColorMatrix 函数"></a>11.2.3 ColorMatrix 函数</h3><p>上一小节讲述了利用色彩变换矩阵来进行的一些运算，但这些都是需要特定的色彩设计基础的。在 Android 中，ColorMatrix 自带一些函数，用来帮助我们完成调整饱和度、色彩旋转等操作。</p><h4 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h4><p>ColorMatrix 共有三个构造函数，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ColorMatrix()</div><div class="line">ColorMatrix(float[] src)</div><div class="line">ColorMatrix(ColorMatrix src)</div></pre></td></tr></table></figure></p><p>在这三个构造函数中，我们已经使用过第二个构造函数；至于第三个构造函数，就是利用另一个 ColorMatrix 实例来复制一个一样的 ColorMatrix 对象。</p><h4 id="2-设置和重置函数"><a href="#2-设置和重置函数" class="headerlink" title="2. 设置和重置函数"></a>2. 设置和重置函数</h4><p>第一个构造函数 ColorMatrix() 需要与其他函数共用才行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public void set(ColorMatrix src)</div><div class="line">public void set(float[] src)</div><div class="line">public void reset()</div></pre></td></tr></table></figure></p><p>上面的函数是设置和重置函数，重置后，对应的数组如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Set this colormatrix to identity: </div><div class="line"> * [ 1 0 0 0 0   -redvector</div><div class="line"> *   0 1 0 0 0   -greenvector</div><div class="line"> *   0 0 1 0 0   -bluevector</div><div class="line"> *   0 0 0 1 0 ] -alphavector</div><div class="line"> */</div></pre></td></tr></table></figure></p><h4 id="3-setSaturation-函数——设置饱和度"><a href="#3-setSaturation-函数——设置饱和度" class="headerlink" title="3. setSaturation() 函数——设置饱和度"></a>3. setSaturation() 函数——设置饱和度</h4><p>我们可以通过色彩的平移运算单独增强 R、G、B 其中一个分量的饱和度，但当我们需要整体增强色彩饱和度时，需要如何来做呢？ ColorMatrix 提供了一个函数来整体增强色彩饱和度，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 整体增强色彩饱和度，即同时增强 R、G、B 的色彩饱和度 </div><div class="line">public void setSaturation(float sat)</div></pre></td></tr></table></figure></p><p>其中，参数 float sat 表示把当前色彩饱和度放大的倍数。当取值为 0 时，表示完全无色彩，即灰度图像(黑白图像)；当取值为 1 时，表示色彩不变动；;当取值大于 1 时，显示色彩过度饱和。</p><p>举个例子：滑块默认在 1 倍的位置，向左到底是 0，向右到底是 20(饱和度放大 20 倍)。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c05e54e35dba0905.gif?imageMogr2/auto-orient/strip" alt=""></p><p>布局非常简单，下面是一张图片，上面是一个 SeekBar，核心处理代码如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private SeekBar mSeekBar;</div><div class="line">    private ImageView mImageView;</div><div class="line">    private Bitmap mOriginBmp, mTempBmp;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mImageView = findViewById(R.id.img);</div><div class="line">        mSeekBar = findViewById(R.id.seek_bar);</div><div class="line">        mOriginBmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        mTempBmp = Bitmap.createBitmap(mOriginBmp.getWidth(), mOriginBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        mSeekBar.setMax(20);</div><div class="line">        mSeekBar.setProgress(1);</div><div class="line">        mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) &#123;</div><div class="line">                Bitmap bitmap = handleColorMatrixBmp(progress);</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onStartTrackingTouch(SeekBar seekBar) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onStopTrackingTouch(SeekBar seekBar) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Bitmap handleColorMatrixBmp(int progress)&#123;</div><div class="line">        // 创建一个相同尺寸的可变的位图区，用于绘制调色后的图片</div><div class="line">        Canvas canvas = new Canvas(mTempBmp);</div><div class="line">        // 得到画笔对象</div><div class="line">        Paint paint = new Paint();</div><div class="line">        ColorMatrix mSaturationMatrix = new ColorMatrix();</div><div class="line">        mSaturationMatrix.setSaturation(progress);</div><div class="line">        // 设置色彩变换效果</div><div class="line">        paint.setColorFilter(new ColorMatrixColorFilter(mSaturationMatrix));</div><div class="line">        // 将色彩变换后的图片输出到新创建的位图区</div><div class="line">        canvas.drawBitmap(mOriginBmp, 0, 0, paint);</div><div class="line">        // 返回新的位图,即调色处理后的图片</div><div class="line">        return mTempBmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>布局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:background=&quot;#EEE&quot;&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;40dp&quot;</div><div class="line">        android:gravity=&quot;center_vertical&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;TextView</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;饱和度&quot;/&gt;</div><div class="line">        &lt;SeekBar</div><div class="line">            android:id=&quot;@+id/seek_bar&quot;</div><div class="line">            android:layout_width=&quot;match_parent&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/img&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:src=&quot;@drawable/meinv&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><h4 id="4-setScale-函数——色彩缩放"><a href="#4-setScale-函数——色彩缩放" class="headerlink" title="4. setScale() 函数——色彩缩放"></a>4. setScale() 函数——色彩缩放</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setScale(float rScale, float gScale, float bScale,float aScale)</div></pre></td></tr></table></figure><p>这个函数共有 4 个参数，分别对应 R、G、B、A 颜色值的缩放倍数。比如，在小狗图片中,绿色占大部分，所以我们仅将绿色放大 1.3 倍。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-94625175286b6f21.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line">    private Paint mPaint = new Paint();</div><div class="line">    private Bitmap bitmap;  // 位图</div><div class="line">    private Rect rect;</div><div class="line">    private ColorMatrixColorFilter colorMatrixColorFilter;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        // 获取位图</div><div class="line">        bitmap = BitmapFactory.decodeResource(context.getResources(), R.drawable.dog);</div><div class="line">        rect = new Rect();</div><div class="line">        // 生成色彩变换矩阵</div><div class="line">        ColorMatrix colorMatrix = new ColorMatrix();</div><div class="line">        colorMatrix.setScale(1,1.3f,1,1);</div><div class="line">        colorMatrixColorFilter = new ColorMatrixColorFilter(colorMatrix);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        rect.set(0, 0, 500, 500 * bitmap.getHeight() / bitmap.getWidth());</div><div class="line">        // 绘制原始位图</div><div class="line">        canvas.drawBitmap(bitmap, null, rect, mPaint);</div><div class="line">        canvas.translate(510, 0);</div><div class="line">        mPaint.setColorFilter(colorMatrixColorFilter);</div><div class="line">        canvas.drawBitmap(bitmap, null, rect, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5-setRotate-函数——色彩旋转"><a href="#5-setRotate-函数——色彩旋转" class="headerlink" title="5. setRotate() 函数——色彩旋转"></a>5. setRotate() 函数——色彩旋转</h4><p>上面在讲解色彩旋转运算时，列出了在色彩旋转时的效果和原理。由于涉及正、余弦函数的计算，而且这些公式推导起来具有一定的难度，所以 Android 已经封装好了色彩旋转的函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 将旋转围绕某一个颜色轴进行</div><div class="line"> * axis=0 围绕红色轴旋转</div><div class="line"> * axis=1 围绕绿色轴旋转</div><div class="line"> * axis=2 围绕蓝色轴旋转</div><div class="line"> */</div><div class="line">public void setRotate(int axis, float degrees);</div></pre></td></tr></table></figure></p><ul><li>int axis：表示围绕哪个轴旋转，取值为0、1、2。当取值为 0 时，表示围绕红色轴旋转；当取值为 1 时，表示围绕绿色轴旋转；当取值为 2 时，表示围绕蓝色轴旋转。</li><li>float degrees：表示旋转的度数。</li></ul><p>同样利用上面色彩旋转的图像和滑动条的框架，来看一下当围绕某一个颜色轴旋转时色相变化的效果。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-8c23292396f0f991.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private SeekBar mSeekBar;</div><div class="line">    private ImageView mImageView;</div><div class="line">    private Bitmap mOriginBmp, mTempBmp;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mImageView = findViewById(R.id.img);</div><div class="line">        mSeekBar = findViewById(R.id.seek_bar);</div><div class="line">        mOriginBmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        mTempBmp = Bitmap.createBitmap(mOriginBmp.getWidth(), mOriginBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        mSeekBar.setMax(360);</div><div class="line">        mSeekBar.setProgress(180);</div><div class="line">        mSeekBar.setOnSeekBarChangeListener(new SeekBar.OnSeekBarChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onProgressChanged(SeekBar seekBar, int progress, boolean fromUser) &#123;</div><div class="line">                Bitmap bitmap = handleColorMatrixBmp(progress);</div><div class="line">                mImageView.setImageBitmap(bitmap);</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onStartTrackingTouch(SeekBar seekBar) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onStopTrackingTouch(SeekBar seekBar) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Bitmap handleColorMatrixBmp(int progress) &#123;</div><div class="line">        Canvas canvas = new Canvas(mTempBmp);</div><div class="line">        Paint paint = new Paint();</div><div class="line">        ColorMatrix colorMatrix = new ColorMatrix();</div><div class="line">        colorMatrix.setRotate(0,progress - 180);</div><div class="line">        paint.setColorFilter(new ColorMatrixColorFilter(colorMatrix));</div><div class="line">        canvas.drawBitmap(mOriginBmp, 0, 0, paint);</div><div class="line">        return mTempBmp;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>将当前 progress 位置减去 180，即中间位置的数字。所以，中间位置的色彩旋转度数为 0，整个旋转度数的范围是 -180°~180°；360° 正好是正/余弦函数的一个最小正周期。</p><p>上面的效果针对的是红色色相。同理，可以得到围绕绿色轴旋转的效果图。</p><p><div id="jump4"></div></p><h3 id="11-2-4-ColorMatrix-相乘"><a href="#11-2-4-ColorMatrix-相乘" class="headerlink" title="11.2.4 ColorMatrix 相乘"></a>11.2.4 ColorMatrix 相乘</h3><p>矩阵相乘涉及三个函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setConcat(ColorMatrix matA, ColorMatrix matB)</div></pre></td></tr></table></figure></p><p>这个函数接收两个 ColorMatrix 矩阵 matA 和 matB，乘法规则为 matA×matB，然后将结果作为当前 ColorMatrix 的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void preConcat(ColorMatrix preMatrix)</div></pre></td></tr></table></figure></p><p>假设当前矩阵为 A，那么 preConcat() 函数的含义就是将当前的矩阵 A 乘以 preMatrix。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void postConcat(ColorMatrix postMatrix)</div></pre></td></tr></table></figure></p><p>postConcat() 函数的含义就是 postMatrix 乘以当前矩阵 A。</p><p>由于这部分内容基本用不到，有关这几个函数的具体应用这里就不再详细讲述，有兴趣的读者可以参考 <a href="http://blog.csdn.net/harvic880925/article/details/51187277" target="_blank" rel="external">Paint 之 ColorMatrix 与滤镜效果</a>。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11.1 精通自定义 View 之 Matrix 与坐标变换——矩阵运算</title>
      <link href="/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/"/>
      <url>/2019/07/11/Custom%20View/11.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Matrix%20%E4%B8%8E%E5%9D%90%E6%A0%87%E5%8F%98%E6%8D%A2%E2%80%94%E2%80%94%E7%9F%A9%E9%98%B5%E8%BF%90%E7%AE%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="11-1-1-矩阵的加法和减法"><a href="#11-1-1-矩阵的加法和减法" class="headerlink" title="11.1.1 矩阵的加法和减法"></a>11.1.1 矩阵的加法和减法</h3><h4 id="1-运算规则"><a href="#1-运算规则" class="headerlink" title="1. 运算规则"></a>1. 运算规则</h4><p>$$设矩阵 A=\left[ \begin{matrix} a~11~ &amp; a~12~ &amp; \cdots &amp; a~1n~ \ a~21~ &amp; a~22~ &amp; \cdots &amp; a~2n~ \ \vdots &amp; \vdots &amp; &amp; \vdots \ a~n1~ &amp; a~n2~ &amp; \cdots &amp; a~nn~ \end{matrix} \right]$$</p><p>$$设矩阵 B=\left[ \begin{matrix} b~11~ &amp; b~12~ &amp; \cdots &amp; b~1n~ \ b~21~ &amp; b~22~ &amp; \cdots &amp; b~2n~ \ \vdots &amp; \vdots &amp; &amp; \vdots \ b~n1~ &amp; b~n2~ &amp; \cdots &amp; b~nn~ \end{matrix} \right]$$</p><p>$$则 A±B=\left[ \begin{matrix} a~11~ ± b~11~ &amp; a~12~ ± b~12~ &amp; \cdots &amp; a~1n ± ~b~1n~ \ a~21~ ± b~21~ &amp; a~22~ ± b~22~ &amp; \cdots &amp; a~2n ± ~b~2n~ \ \vdots &amp; \vdots &amp; &amp; \vdots \ a~n1~ ± b~n1~ &amp; a~n2~ ± b~n2~ &amp; \cdots &amp; a~nn ± ~b~nn~ \end{matrix} \right]$$</p><p>简而言之，两个矩阵相加减，即它们相同位置的元素相加减。</p><blockquote><p>注意：只有对于两个行数、列数分别相等的矩阵(同型矩阵)，加减法运算才有意义,即 加减法运算是可行的。</p></blockquote><h4 id="2-运算性质"><a href="#2-运算性质" class="headerlink" title="2. 运算性质"></a>2. 运算性质</h4><p>满足交换律和结合律。<br>交换律：A+B=B+A。<br>结合律：(A+B)+C= A+(B+C)。</p><p><div id="jump2"></div></p><h3 id="11-1-2-矩阵与数的乘法"><a href="#11-1-2-矩阵与数的乘法" class="headerlink" title="11.1.2 矩阵与数的乘法"></a>11.1.2 矩阵与数的乘法</h3><h4 id="1-运算规则-1"><a href="#1-运算规则-1" class="headerlink" title="1. 运算规则"></a>1. 运算规则</h4><p>数 λ 乘以矩阵 A，就是将数 λ 乘以矩阵 A 中的每一个元素，记为 λA 或 Aλ。<br>特别地，称-A 为 A=(a~ij~)~m×s~ 的负矩阵。</p><h4 id="2-运算性质-1"><a href="#2-运算性质-1" class="headerlink" title="2. 运算性质"></a>2. 运算性质</h4><p>满足结合律和分配律。<br>结合律：(λμ)A=λ(μA)；(λ+μ)A =λA+μA。<br>分配律：λ (A+B)=λA+λB。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-72a55598f7926e58.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="11-1-3-矩阵与矩阵的乘法"><a href="#11-1-3-矩阵与矩阵的乘法" class="headerlink" title="11.1.3 矩阵与矩阵的乘法"></a>11.1.3 矩阵与矩阵的乘法</h3><h4 id="1-运算规则-2"><a href="#1-运算规则-2" class="headerlink" title="1. 运算规则"></a>1. 运算规则</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-9a3e7c8dee62bf16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>矩阵乘法其实并不难，它的意思就是将第一个矩阵 A 的第一行与第二个矩阵 B 的第一列的数字分别相乘，得到的结果相加，最终的值作为结果矩阵的第(1,1)位置的值(第一行第一列)。</p><p>同样，A 矩阵的第一行与 B 矩阵的第二列的数字分别相乘，然后相加，最终的值作为结果矩阵第(1,2)位置的值(第一行第二列)。</p><p>再如，A 矩阵的第二行与 B 矩阵的第一列的数字分别相乘，然后相加，最终的值作为结果矩阵的第(2,1)位置的值(第二行第一列)。</p><p>这里主要说明两个问题：</p><ul><li>A 矩阵的列数必须与 B 矩阵的行数相同，才能相乘。因为我们需要把 A 矩阵一行中的各个数字与 B 矩阵一列中的各个数字分别相乘，所以 A 矩阵的列数与 B 矩阵的行数必须相同。</li><li>矩阵 A 乘以矩阵 B 和矩阵 B 乘以矩阵 A 的结果必然是不一样的。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14186083-01b6708b87550939.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-运算性质-2"><a href="#2-运算性质-2" class="headerlink" title="2. 运算性质"></a>2. 运算性质</h4><p>1）结合律：(AB)C=A(BC)。<br>2）分配律：A(B±C)=AB±AC(左分配律)；(B±C)A=BA±CA(右分配律)。<br>3）(λA)B=λ(AB)=A(λB)。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.3 精通自定义 View 之 Android 画布——SurfaceView</title>
      <link href="/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/"/>
      <url>/2019/07/10/Custom%20View/10.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94SurfaceView/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="10-3-1-概述"><a href="#10-3-1-概述" class="headerlink" title="10.3.1 概述"></a>10.3.1 概述</h3><p>Android 屏幕刷新的时间间隔是 16ms，如果 View 能够在 16ms 内完成所需执行的绘图操作，那么在视觉上，界面就是流畅的；否则就会出现卡顿。很多时候，在自定义 View 的日志中，经常会看到如下警告：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Skipped 60 frames! The application may be doing too much work on its main thread</div></pre></td></tr></table></figure></p><p>之所以会出现这些警告，大部分是因为我们在绘制过程中不单单执行了绘图操作，也夹杂了很多逻辑处理，导致在指定的 16ms 内并没有完成绘制，出现界面卡顿和警告。为了解决这个问题，Android 引入了 SurfaceView。它在两个方面改进了 View 的绘图操作：</p><ul><li>使用双缓冲技术。</li><li>自带画布，支持在子线程中更新画布内容。</li></ul><p>所谓双缓冲技术，简单来讲，就是多加一块缓冲画布，当需要执行绘图操作时，现在缓冲画布上绘制，绘制好后直接将缓冲画布上的内容更新到主画布上。这样，在屏幕更新时，只需把换缓冲画布上的内容照样画过来就可以了，就不会存在逻辑处理时间的问题，也就解决了超时绘制的问题。具体详见 10.3.3。</p><p>虽然 SurfaceView 在处理耗时操作时很有用，但正是因为在新的线程中更新画面，所以不会阻塞主线程。但这也带来了另一个问题，就是事件同步。比如，你触摸了屏幕，SurfaceView 就会调用线程来处理，当线程过多时，一般就需要一个线程队列来保存触摸事件，这会稍稍复杂一点，因为涉及线程同步。</p><p>总之，View 和 SurfaceView 都有各自的应用场景：</p><ul><li>当界面需要被动更新时，用 View 较好。比如，与手势交互的场景，因为画面的更新是依赖 onTouch 来完成的，所以可以直接使用 invalidate() 函数。在这种情况下，这一次 Touch 和下一次 Touch 间隔的时间比较长，不会产生影响。</li><li>当界面需要主动更新，用 SurfaceView 较好。比如一个人在一直跑动，这就需要一个单独的线程不停地重绘人的状态，避免阻塞主线程。显然 View 不合适，需要 SurfaceView 来控制。</li><li>当界面绘制需要频繁刷新，或者刷新是数据处理量比较大时，就应该用 SurfaceView 来实现，比如视频播放及 Camera。</li></ul><p><div id="jump2"></div></p><h3 id="10-3-2-SurfaceView-的基本用法"><a href="#10-3-2-SurfaceView-的基本用法" class="headerlink" title="10.3.2 SurfaceView 的基本用法"></a>10.3.2 SurfaceView 的基本用法</h3><h4 id="1-实现-View-功能"><a href="#1-实现-View-功能" class="headerlink" title="1. 实现 View 功能"></a>1. 实现 View 功能</h4><p>SurfaceView 派生自 View，所以 SurfaceView 能使用 View 中的所有方法，但要注意，View 中的所有方法都是在主线程中执行。下面使用 SurfaceView 来实现捕捉用户手势轨迹的自定义控件。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public class TestView extends SurfaceView &#123;</div><div class="line"></div><div class="line">    private Path mPath;</div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        // setWillNotDraw(false);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(5);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        int x = (int) event.getX();</div><div class="line">        int y = (int) event.getY();</div><div class="line">        if (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            mPath.moveTo(x, y);</div><div class="line">            Log.d(&quot;xian&quot;, &quot;ACTION_DOWN&quot;);</div><div class="line">            return true;</div><div class="line">        &#125; else if (event.getAction() == MotionEvent.ACTION_MOVE) &#123;</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">        &#125;</div><div class="line">        postInvalidate();</div><div class="line">        Log.d(&quot;xian&quot;, &quot;invalidate&quot;);</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        Log.d(&quot;xian&quot;, &quot;onDraw&quot;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然而，效果却是不显示手势轨迹，而一直显示黑屏。查看日志，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-da5c709d3abc8755.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从日志中可以看出，上述代码只调用了 postInavidate() 函数，而没有调用 onDraw() 函数。这是为什么呢？当你把 init() 函数中注释掉的一行代码打开以后，就会发现可以看到手势轨迹了。</p><p><strong>setWillNotDraw(boolean willNotDraw)</strong> 这个函数存在于 View 类中，它主要用在 View 派生子类的初始化中，如果参数 willNotDraw 取 true，则表示当前控件没有绘制内容，当屏幕重绘的时候，这个控件不需要绘制，所以在重绘的时候也就不会调用这个类的 onDraw() 函数。相反，如果参数 willNotDraw 取 false，则表示当前控件在每次重绘时，都需要绘制该控件。可见，setWillNotDraw 其实是一种优化策略，它让控件显示地告诉系统，在重绘屏幕时，哪个控件需要重绘，哪个控件不需要重绘，这样就可以大大提高重绘效率。</p><p>一般而言，想 LinearLayout、RelativeLayout 等布局控件，它们的主要功能是布局其中的控件，它们本身是没有东西需要绘制的，所以它们在构造的时候都会显示设置 setWillNotDraw(true)</p><p>总结：</p><ul><li>原本能够通过派生自 View 实现的控件，依然可以通过 SurfaceView 来实现，因为 SurfaceView 派生自 View。</li><li>当 SurfaceView 需要使用 View 的 onDraw() 函数来重绘控件时，需要在初始化的时候调用 setWillNotDraw(false)，否则 onDraw() 函数不会被调用。</li><li>View 中的所有方法都是在主线程中执行的，所以并不建议使用 SurfaceView 重写 View 的 onDraw() 函数来实现自定义控件，而要使用 SurfaceView 特有的双缓冲机制绘图。</li></ul><h4 id="2-使用缓冲-Canvas-绘图"><a href="#2-使用缓冲-Canvas-绘图" class="headerlink" title="2. 使用缓冲 Canvas 绘图"></a>2. 使用缓冲 Canvas 绘图</h4><p>通过以下方式来获取 SurfaceView 自带的画布。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">SurfaceHolder surfaceHolder = getHolder();</div><div class="line">Canvas canvas = surfaceHolder.lockCanvas();</div><div class="line">// TODO 绘图操作</div><div class="line">surfaceHolder.unlockCanvasAndPost(canvas);</div></pre></td></tr></table></figure></p><p>前面说过线程同步问题，所以需要给获取的缓冲画布进行加锁，防止被其他线程更改；当绘图操作完成以后，将缓冲画布释放，并将所画内容更新到主线程的画布上，显示在屏幕上。使用缓冲画布来改造上面的示例代码。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public class TestView extends SurfaceView &#123;</div><div class="line"></div><div class="line">    private Path mPath;</div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(5);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        int x = (int) event.getX();</div><div class="line">        int y = (int) event.getY();</div><div class="line">        if (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            mPath.moveTo(x, y);</div><div class="line">            return true;</div><div class="line">        &#125; else if (event.getAction() == MotionEvent.ACTION_MOVE) &#123;</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">        &#125;</div><div class="line">        drawCanvas();</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawCanvas() &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                SurfaceHolder surfaceHolder = getHolder();</div><div class="line">                Canvas canvas = surfaceHolder.lockCanvas();</div><div class="line">                if (canvas != null) &#123;</div><div class="line">                    canvas.drawPath(mPath, mPaint);</div><div class="line">                &#125;</div><div class="line">                surfaceHolder.unlockCanvasAndPost(canvas);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意，onTouchEvent() 函数是在主线程执行的，所以我们需要开启子线程更新画布。效果图如下。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-14619c98984a1666.gif?imageMogr2/auto-orient/strip" alt=""></p><h4 id="3-监听-Surface-生命周期"><a href="#3-监听-Surface-生命周期" class="headerlink" title="3. 监听 Surface 生命周期"></a>3. 监听 Surface 生命周期</h4><p>与 SurfaceView 相关的有三个概念：Surface、SurfaceView、SurfaceHolder。这三个概念是典型的 MVC 模式 (Model-View-Controller)。Surface 是 Model，保存着缓冲画布和绘图内容相关的各种信息；SurfaceView 是 View，负责将 Surface 中存储的数据展示在 View 上；SurfaceHolder 是 Controller，使用它才能操作 Surface 中的数据。</p><p>生命周期监听函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">SurfaceHolder surfaceHolder = getHolder();</div><div class="line">surfaceHolder.addCallback(new SurfaceHolder.Callback() &#123;</div><div class="line">    @Override</div><div class="line">    public void surfaceCreated(SurfaceHolder holder) &#123;</div><div class="line">        // 当 Surface 对象被创建后，该函数就会被立即调用</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) &#123;</div><div class="line">        // 当 Surface 发生任何结构性的变化时（格式或者大小），该函数就会被立即调用</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void surfaceDestroyed(SurfaceHolder holder) &#123;</div><div class="line">        // 当 Surface 对象将要被销毁时，该函数就会被立即调用</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>示例：动态背景效果</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bdaa5b67454c3d29.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div></pre></td><td class="code"><pre><div class="line">public class TestView extends SurfaceView &#123;</div><div class="line"></div><div class="line">    private SurfaceHolder mHolder;</div><div class="line">    private boolean flag = false;                   // 线程标示</div><div class="line">    private Bitmap mBgBitmap;                       // 背景图</div><div class="line"></div><div class="line">    private float mSurfaceWidth, mSurfaceHeight;    // 屏幕宽高</div><div class="line">    private int mBitPosX;                           // 开始绘制的图片的 x 坐标</div><div class="line">    private Canvas mCanvas;</div><div class="line">    private Thread mThread;</div><div class="line"></div><div class="line">    // 背景移动状态</div><div class="line">    private enum State &#123;</div><div class="line">        LEFT, RIGHT</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 默认向左</div><div class="line">    private State state = State.LEFT;</div><div class="line">    private final int BITMAP_STEP = 5;              // 背景画布移动步伐</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mHolder = getHolder();</div><div class="line">        mHolder.addCallback(new SurfaceHolder.Callback() &#123;</div><div class="line">            @Override</div><div class="line">            public void surfaceCreated(SurfaceHolder holder) &#123;</div><div class="line">                flag = true;</div><div class="line">                startAnimation();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) &#123;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void surfaceDestroyed(SurfaceHolder holder) &#123;</div><div class="line">                flag = false;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void startAnimation() &#123;</div><div class="line">        mSurfaceWidth = getWidth();</div><div class="line">        mSurfaceHeight = getHeight();</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            // 按比例缩放图片，是高度充满屏幕</div><div class="line">            Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.qingmingshanghetu);</div><div class="line">            float width = mSurfaceHeight / bitmap.getHeight() * bitmap.getWidth();</div><div class="line">            mBgBitmap = Bitmap.createScaledBitmap(bitmap, (int)width, (int)mSurfaceHeight, true);</div><div class="line">        &#125; catch (OutOfMemoryError error) &#123;</div><div class="line">            error.printStackTrace();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (mBgBitmap == null) return;</div><div class="line"></div><div class="line">        // 开始绘图</div><div class="line">        mThread = new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                while (flag) &#123;</div><div class="line">                    mCanvas = mHolder.lockCanvas();</div><div class="line">                    drawView();</div><div class="line">                    mHolder.unlockCanvasAndPost(mCanvas);</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(16);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mThread.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void drawView() &#123;</div><div class="line">        if (mCanvas == null) return;</div><div class="line"></div><div class="line">        // 清空屏幕</div><div class="line">        mCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);</div><div class="line">        // 从 mBitPosX 开始绘制屏幕背景</div><div class="line">        mCanvas.drawBitmap(mBgBitmap, mBitPosX, 0, null);</div><div class="line"></div><div class="line">        // 图片滚动效果</div><div class="line">        switch (state) &#123;</div><div class="line">            case LEFT:</div><div class="line">                mBitPosX -= BITMAP_STEP;    // 画布左移</div><div class="line">                break;</div><div class="line">            case RIGHT:</div><div class="line">                mBitPosX += BITMAP_STEP;    // 画布右移</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        if (mBitPosX &lt;= -mSurfaceWidth / 2) &#123;</div><div class="line">            state = State.RIGHT;</div><div class="line">        &#125;</div><div class="line">        if (mBitPosX &gt;= 0) &#123;</div><div class="line">            state = State.LEFT;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump3"></div></p><h3 id="10-3-3-SurfaceView-双缓冲技术"><a href="#10-3-3-SurfaceView-双缓冲技术" class="headerlink" title="10.3.3 SurfaceView 双缓冲技术"></a>10.3.3 SurfaceView 双缓冲技术</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>双缓冲技术需要两个图形缓冲区：前端缓冲区和后端缓冲区。前端缓冲区对应当前屏幕正在显示的内容，而后端缓冲区是接下来要渲染的图形缓冲区。通过 surfaceHolder.lockCanvas() 函数获得的缓冲区是后端缓冲区。当绘图完成以后，调用 surfaceHolder.unlockCanvasAndPost(mCanvas) 函数将后端缓冲区与前端缓冲区交换，后端缓冲区变成前端缓冲区，将内容显示在屏幕上；而原来的前端缓冲区则变成后端缓冲区，等待下一次的 surfaceHolder.lockCanvas() 函数调用返回给用户使用，如此反复。</p><p>正是由于两块画布交替用来绘图，在绘图完成以后相互交换位置，而且在绘图完成以后直接更新到屏幕上，所以才使得绘图效率大大提高。而这样做却造成了一个问题：两块画布上的内容肯定会存在不一致的情况，尤其是在多线程的情况下。比如，我们利用一个线程操作 A、B 两款画布，目前 A 画布是屏幕画布，所以，当线程要绘图是，获得的缓冲画布是 B。在更新以后，B 画布更新到屏幕上，A 画布与 B 画布交换位置。而这时，如果线程再次申请画布，则将获取到 A 画布。如果 A 画布与 B 画布上的内容不一样，那么，在 A 画布上继续作画肯定会与预想的不一样。</p><p>示例：每获取一次画布写一个数字，循环 10 次。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class TestView extends SurfaceView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setTextSize(30);</div><div class="line"></div><div class="line">        getHolder().addCallback(new SurfaceHolder.Callback() &#123;</div><div class="line">            @Override</div><div class="line">            public void surfaceCreated(SurfaceHolder holder) &#123;</div><div class="line">                drawText(holder);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void surfaceDestroyed(SurfaceHolder holder) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawText(SurfaceHolder holder) &#123;</div><div class="line">        for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">            Canvas canvas = holder.lockCanvas();</div><div class="line">            if (canvas != null) &#123;</div><div class="line">                canvas.drawText(i + &quot;&quot;, i * 30, 50, mPaint);</div><div class="line">            &#125;</div><div class="line">            holder.unlockCanvasAndPost(canvas);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fbeb48f18a692e38.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>按照我们的逻辑，如果有两块缓冲画布，那么结果应该是 1 3 5 7 9。因为最后一个更新的数字必然是 9，而往前推，每次间隔使用画布，跟 9 在同一块画布上的必然是 1 3 5 7，其他数字都在另一块画布上。但结果为什么是 0 3 6 9 呢？这是因为这里有三块缓冲画布。</p><p>如果我们在绘图时使用单独的线程，而且每次绘图完成以后，让线程休眠一段时间，就可以明显地看到每次所绘制的数字了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">private void drawText(final SurfaceHolder holder) &#123;</div><div class="line">    new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">                Canvas canvas = holder.lockCanvas();</div><div class="line">                if (canvas != null) &#123;</div><div class="line">                    canvas.drawText(i + &quot;&quot;, i * 100, 150, mPaint);</div><div class="line">                &#125;</div><div class="line">                holder.unlockCanvasAndPost(canvas);</div><div class="line"></div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(600);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c701c355e280c4a5.gif?imageMogr2/auto-orient/strip" alt=""></p><p>从效果图中可以看出每次获取到的画布上所绘制的内容，很明显，0、1、2 这三个数字是分别在三块空白的画布上绘制的，之后的每个数字都是依次在这三块画布上绘制的。</p><p>有关 Surface 中缓冲画布的数量，<a href="https//source.android.com/devices/graphics/arch-sh.html">Google 给出的解释</a> 是：Surface 中缓冲画布的数量是根据需求动态分配的。如果用户获取画布的频率较慢，那么将会分配两块缓冲画布；否则，将分配 3 的倍数缓冲画布，具体分配多少块，视情况而定。</p><h4 id="2-双缓冲技术局部更新原理"><a href="#2-双缓冲技术局部更新原理" class="headerlink" title="2. 双缓冲技术局部更新原理"></a>2. 双缓冲技术局部更新原理</h4><p>SurfaceView 支持局部更新，可以通过 Canvas lockCanvas(Rect dirty) 函数指定获取画布的区域和大小。画布以外的地方会将现在屏幕上的内容复制过来，以保持与屏幕一致；而画布以内的区域则保持原画布内容。</p><ul><li>lockCanvas()：用于获取整屏画布，屏幕内容不会被更新到画布上，画布保持原画布内容。</li><li>lockCanvas(Rect dirty)：用于获取指定区域的画布，画布以外的区域会保持与屏幕内容一致，画布以内的区域依然保持原画布内容。</li></ul><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-eb901bc2d0c506ff.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">public class TestView extends SurfaceView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.argb(0x1F, 0xFF, 0xFF, 0xFF));</div><div class="line">        mPaint.setTextSize(60);</div><div class="line"></div><div class="line">        getHolder().addCallback(new SurfaceHolder.Callback() &#123;</div><div class="line">            @Override</div><div class="line">            public void surfaceCreated(SurfaceHolder holder) &#123;</div><div class="line">                drawText(holder);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void surfaceDestroyed(SurfaceHolder holder) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawText(final SurfaceHolder holder) &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                // 先进行清屏操作</div><div class="line">                while (true) &#123;</div><div class="line">                    Rect dirtyRect = new Rect(0, 0, 1, 1);</div><div class="line">                    Canvas canvas = holder.lockCanvas(dirtyRect);</div><div class="line">                    Rect canvasRect = canvas.getClipBounds();</div><div class="line">                    if (getWidth() == canvasRect.width() &amp;&amp; getHeight() == canvasRect.height()) &#123;</div><div class="line">                        canvas.drawColor(Color.BLACK);</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                    &#125; else &#123;</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                        break;</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">                // 画图</div><div class="line">                for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">                    // 画大方</div><div class="line">                    if (i == 0) &#123;</div><div class="line">                        Canvas canvas = holder.lockCanvas(new Rect(10, 10, 600, 600));</div><div class="line">                        canvas.drawColor(Color.RED);</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                    &#125;</div><div class="line">                    // 画中方</div><div class="line">                    if (i == 1) &#123;</div><div class="line">                        Canvas canvas = holder.lockCanvas(new Rect(30, 30, 570, 570));</div><div class="line">                        canvas.drawColor(Color.GREEN);</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                    &#125;</div><div class="line">                    // 画小方</div><div class="line">                    if (i == 2) &#123;</div><div class="line">                        Canvas canvas = holder.lockCanvas(new Rect(60, 60, 540, 540));</div><div class="line">                        canvas.drawColor(Color.BLUE);</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                    &#125;</div><div class="line">                    // 画圆形</div><div class="line">                    if (i == 3) &#123;</div><div class="line">                        Canvas canvas = holder.lockCanvas(new Rect(200, 200, 400, 400));</div><div class="line">                        mPaint.setColor(Color.argb(0x3F, 0xFF, 0xFF, 0xFF));</div><div class="line">                        canvas.drawCircle(300, 300, 100, mPaint);</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                    &#125;</div><div class="line">                    // 写数字</div><div class="line">                    if (i == 4) &#123;</div><div class="line">                        Canvas canvas = holder.lockCanvas(new Rect(250, 250, 350, 350));</div><div class="line">                        mPaint.setColor(Color.RED);</div><div class="line">                        canvas.drawText(i + &quot;&quot;, 300, 300, mPaint);</div><div class="line">                        holder.unlockCanvasAndPost(canvas);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(800);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>分析过程略，得出以下几个结论：</p><ul><li>缓冲画布的存取遵循 LRU（先进先出）策略。</li><li>画布以内的区域仍在原缓冲画布上叠加作画，画布以外的区域是从屏幕上直接复制过来的。</li><li>为了防止画布以内的缓冲画布本身的图像与所画内容产生冲突，在对画布以内的区域作画时，建议先清空画布。</li></ul><h4 id="3-局部更新为何要先清屏"><a href="#3-局部更新为何要先清屏" class="headerlink" title="3. 局部更新为何要先清屏"></a>3. 局部更新为何要先清屏</h4><p>因为这里有三块缓冲画布，有一块画布初始化地被显示在屏幕上，已经被默认填充为黑色，而另外两块画布都还没有被画过。虽然我们指定了获取画布的区域范围，但是系统认为，整块画布都是脏区域，都应该被画上，所以会返回屏幕大小的画布。只有将每块画布都划过以后，才会按照我们指定的区域来返回画布大小。</p><h4 id="4-双缓冲技术解决方案"><a href="#4-双缓冲技术解决方案" class="headerlink" title="4. 双缓冲技术解决方案"></a>4. 双缓冲技术解决方案</h4><p><strong>方案一：保存所有要绘制的内容，全屏重绘</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public class TestView extends SurfaceView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setTextSize(100);</div><div class="line"></div><div class="line">        getHolder().addCallback(new SurfaceHolder.Callback() &#123;</div><div class="line">            @Override</div><div class="line">            public void surfaceCreated(SurfaceHolder holder) &#123;</div><div class="line">                drawText(holder);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            @Override</div><div class="line">            public void surfaceChanged(SurfaceHolder holder, int format, int width, int height) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void surfaceDestroyed(SurfaceHolder holder) &#123;&#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private List&lt;Integer&gt; mInts = new ArrayList&lt;&gt;();</div><div class="line">    private void drawText(final SurfaceHolder holder) &#123;</div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">                    Canvas canvas = holder.lockCanvas();</div><div class="line">                    mInts.add(i);</div><div class="line">                    if (canvas != null) &#123;</div><div class="line">                        for (int num : mInts) &#123;</div><div class="line">                            canvas.drawText(num + &quot;&quot;, num * 100, 150, mPaint);</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                    try &#123;</div><div class="line">                        Thread.sleep(600);</div><div class="line">                    &#125; catch (InterruptedException e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    holder.unlockCanvasAndPost(canvas);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-61a0cdaa7a0e2c86.gif?imageMogr2/auto-orient/strip" alt=""></p><p><strong>方案二：在内容不交叉时，可以采用增量绘制</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7e353a9c3a6ce7e6.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">private void drawText(final SurfaceHolder holder) &#123;</div><div class="line">    new Thread(new Runnable() &#123;</div><div class="line">        @Override</div><div class="line">        public void run() &#123;</div><div class="line">            // 先进行清屏操作</div><div class="line">            while (true) &#123;</div><div class="line">                Rect dirtyRect = new Rect(0, 0, 1, 1);</div><div class="line">                Canvas canvas = holder.lockCanvas(dirtyRect);</div><div class="line">                Rect canvasRect = canvas.getClipBounds();</div><div class="line">                if (getWidth() == canvasRect.width() &amp;&amp; getHeight() == canvasRect.height()) &#123;</div><div class="line">                    canvas.drawColor(Color.BLACK);</div><div class="line">                    holder.unlockCanvasAndPost(canvas);</div><div class="line">                &#125; else &#123;</div><div class="line">                    holder.unlockCanvasAndPost(canvas);</div><div class="line">                    break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            // 画图</div><div class="line">            for (int i = 0; i &lt; 10; i++) &#123;</div><div class="line">                int itemWidth = 100;</div><div class="line">                int itemHeight = 100;</div><div class="line">                Rect rect = new Rect(i*itemWidth, 0, (i+1)*itemWidth-10, itemHeight);</div><div class="line">                Canvas canvas = holder.lockCanvas(rect);</div><div class="line">                if (canvas != null) &#123;</div><div class="line">                    canvas.drawColor(Color.GREEN);</div><div class="line">                    canvas.drawText(i + &quot;&quot;, i*itemWidth+10, itemHeight/2f, mPaint);</div><div class="line">                &#125;</div><div class="line">                holder.unlockCanvasAndPost(canvas);</div><div class="line"></div><div class="line">                try &#123;</div><div class="line">                    Thread.sleep(600);</div><div class="line">                &#125; catch (InterruptedException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>局部更新清屏代码，在每次开始运行程序时，在获取第二缓冲画布时，依然是全屏画布。但是同样的代码，从任务列表恢复程序时，又运行正常。百思不得其解！！！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.2 精通自定义 View 之 Android 画布——Bitmap</title>
      <link href="/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/"/>
      <url>/2019/07/10/Custom%20View/10.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94Bitmap/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="10-2-1-概述"><a href="#10-2-1-概述" class="headerlink" title="10.2.1 概述"></a>10.2.1 概述</h3><h4 id="1-Bitmap-在绘图中的使用"><a href="#1-Bitmap-在绘图中的使用" class="headerlink" title="1. Bitmap 在绘图中的使用"></a>1. Bitmap 在绘图中的使用</h4><p>Bitmap 在绘图中相关的使用主要有两种：转换为 BitmapDrawable 对象使用；当做画布使用。</p><h5 id="1）转换为-BitmapDrawable-对象使用"><a href="#1）转换为-BitmapDrawable-对象使用" class="headerlink" title="1）转换为 BitmapDrawable 对象使用"></a>1）转换为 BitmapDrawable 对象使用</h5><p>就是直接将 Bitmap 转换为 BitmapDrawable 对象，然后转换为 Drawable 使用。如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">BitmapDrawable bitmapDrawable = new BitmapDrawable(bitmap);</div><div class="line">ImageView imageView = findViewById(R.id.image_view);</div><div class="line">imageView.setImageDrawable(bitmapDrawable);</div></pre></td></tr></table></figure></p><h5 id="2）当做画布使用"><a href="#2）当做画布使用" class="headerlink" title="2）当做画布使用"></a>2）当做画布使用</h5><p>在前面的章节中，已经不止一次地将 Bitmap 转换为画布。这里有两种使用方式。<br><strong>方式一：使用默认画布</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class TestView extends View &#123;</div><div class="line">    ...</div><div class="line">    public void onDraw(Canvas canvas) &#123;</div><div class="line">        ...</div><div class="line">        RectF rect = new RectF(120, 10, 210, 100);</div><div class="line">        canvas.drawRect(rect, paint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此处的 Canvas 里保存的就是一个 Bitmap，我们调用 Canvas 的各种绘图函数，最终都是画在这个 Bitmap 上的，而这个 Bitmap 就是默认画布。</p><p><strong>方式二：自建画布</strong><br>有时候我们需要在特定的 Bitmap 上作画，比如给照片加水印；或者我们只需要一块空白画布。在这些情况下，我们就需要自己来创建 Canvas 对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = Bitmap.createBitmap(200, 100, Bitmap.Config.ARGB_8888);</div><div class="line">Canvas canvas = new Canvas(bitmap);</div><div class="line">canvas.drawColor(Color.BLACK);</div></pre></td></tr></table></figure></p><p>在上面的代码中，我们先创建一个空白的 Bitmap，然后再利用这个 Bitmap 创建一个 Canvas 对象，那么，调用 Canvas 的任何绘图函数最终都将画在这个 Bitmap 上。最后，我们可以将这个 Bitmap 保存到本地，也可以画到 View 上。</p><h4 id="2-Bitmap-格式"><a href="#2-Bitmap-格式" class="headerlink" title="2. Bitmap 格式"></a>2. Bitmap 格式</h4><p>我们都知道 Bitmap 是位图，也就是由一个个像素点组成的。所以，它肯定涉及两个问题：第一，如何存储每个像素点；第二，相关的像素点之间是否能够压缩，这也就涉及压缩算法的问题。</p><h5 id="1）如何存储每个像素点"><a href="#1）如何存储每个像素点" class="headerlink" title="1）如何存储每个像素点"></a>1）如何存储每个像素点</h5><p>一张位图所占用的内存 = 图片长度(px) x 图片宽度(px) x 一个像素点占用的字节数。在 Android 中，存储一个像素点所使用的字节数是用枚举类型 Bitmap.Config 中的各个参数来表示的，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1a2a0c3b1c53c9b3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>其中，A 代表透明度；R 代表红色；G 代表绿色；B 代表蓝色。</p><ul><li>ALPHA_8：表示 8 位 Alpha 位图，即 A = 8，表示只存储 Alpha 位，不存储颜色值。一个像素点占用 1 字节。它没有颜色，只有透明度。</li><li>ARGB_4444：表示 16 位 ARGB 位图，即 A、R、G、B 各占 4 位，一个像素点占 4 + 4 + 4 + 4 = 16 位，2 字节。</li><li>ARGB_8888：表示 32 位 ARGB 位图，即 A、R、G、B 各占 8 位，一个像素点占 8 + 8 + 8 + 8 = 32 位，4 字节。</li><li>RGBA_F16：表示 32 位 RGBA 位图，8 字节。</li><li>RGB_565：表示 16 位 RGB 位图，即 R 占 5 位，G 占 6 位，B 占 5 位，它没有透明度，一个像素点占 5 + 6 + 5 = 16 位，2 字节。</li></ul><p>大家应该都知道，每个色值所占得位数越大，颜色越艳丽。为什么呢？</p><p>假设表示透明度的 A 占 4 位，我们来算一下，4 位的透明度有多少种取值？很明显，每位要么是 0，要么是 1，所以共有 2^4^，也就是 16 种取值。假设透明度占 8 位呢？那么这个透明度就有 2^8^，也就是 256 种取值。表示颜色值的 R、G、B 所占位数与颜色取值数的计算方式是一样的。很明显，取值数越多，所能表示的颜色就越多，颜色就越艳丽。</p><p>以上 5 种格式各自表示了以何种状态存储 Bitmap。ALPHA_8 格式只存储透明度，而不存储颜色值，由于所表示的内容太过简单，所以我们一般不用；RGB_565 格式只存储颜色值，而不存储透明度，透明度全部是 FF，假如对图片没有透明度要求，相比 ARGB_8888 格式将节省一半的内存开销；其他三种格式都是既存储透明度又存储颜色值，但 ARGB_4444 格式的画质惨不忍睹，在 API 13 中已经被弃用了。RGBA_F16 格式是最占内存的，同时也是画质最高的。如果对画质没那么高的要求，一般用 ARGB_8888 格式。</p><p>下面我们来看一下如何计算 Bitmap 所占的内存大小。</p><p>在讲解 Bitmap 所占内存大小之前，我们先明确一个概念：内存中存储的 Bitmap 对象与文件中存储的 Bitmap 图片不是一个概念。文件中存储的 Bitmap 图片是经过我们在后面降到的压缩算法压缩过得；而内存中存储的 Bitmap 对象是通过 BitmapFactory 或者 Bitmap 的 Create 方法创建的，它保存在内存中，而且具有明确的宽和高。所以，很明显，内存中存储的一个 Bitmap 对象，它所占的内存大小 = Bitmap 的宽 x Bitmap 的高 x 每个像素所占内存大小。</p><p>很多读者一旦需要画布，就会创建一个全屏幕大小的 Bitmap 作为画布。我们现在就来算一下在一个分辨率是 1024 像素 x 768 像素的屏幕上，创建一个与屏幕同样大小的 Bitmap，到底需要多少内存？也就是说，这个屏幕长度上有 1024 个像素，宽度上有 768 个像素。我们假设每个像素使用 ARGB_8888 格式来存储，也就是一个像素占 32 位，那么要全屏显示这张图片所占的内存大小 = 1024 x 768 x 32B = 25 165 824B = 24MB。全屏显示一张图片要用 24MB。而且更恐怖的是，有些人还会循环创建。这也是在有些人自定义的控件中经常出现 OOM 的原因。所以，我们在创建画布时，应尽量根据需要的大小来创建。</p><h5 id="2）Bitmap-压缩格式"><a href="#2）Bitmap-压缩格式" class="headerlink" title="2）Bitmap 压缩格式"></a>2）Bitmap 压缩格式</h5><p>在 Android 中，压缩格式使用枚举类 Bitmap.CompressFormat 中的成员变量表示，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-840395c947ec0be4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>其实这个参数很简单，就是指定 Bitmap 是以 JPEG、PNG 还是 WEBP 格式来压缩的，每种格式对应一种压缩算法。有关各种压缩算法的具体效果，我们会在 10.2.5 节中具体讲解。</p><p><div id="jump2"></div></p><h3 id="10-2-2-创建-Bitmap-方法之一：BitmapFactory"><a href="#10-2-2-创建-Bitmap-方法之一：BitmapFactory" class="headerlink" title="10.2.2 创建 Bitmap 方法之一：BitmapFactory"></a>10.2.2 创建 Bitmap 方法之一：BitmapFactory</h3><p>BitmapFactory 用于从各种资源、文件、数据流和字节数组中创建 Bitmap（位图）对象。BitmapFactory 类是一个工具类，提供了大量的函数，这些函数可用于从不同的数据源中解析、创建 Bitmap（位图）对象。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public static Bitmap decodeResource(Resources res, int id)</div><div class="line">public static Bitmap decodeResource(Resources res, int id, Options opts)</div><div class="line"></div><div class="line">public static Bitmap decodeFile(String pathName)</div><div class="line">public static Bitmap decodeFile(String pathName, Options opts)</div><div class="line"></div><div class="line">public static Bitmap decodeByteArray(byte[] data, int offset, int length)</div><div class="line">public static Bitmap decodeByteArray(byte[] data, int offset, int length, Options opts)</div><div class="line"></div><div class="line">public static Bitmap decodeFileDescriptor(FileDescriptor fd)</div><div class="line">public static Bitmap decodeFileDescriptor(FileDescriptor fd, Rect outPadding, Options opts)</div><div class="line"></div><div class="line">public static Bitmap decodeStream(InputStream is)</div><div class="line">public static Bitmap decodeStream(InputStream is, Rect outPadding, Options opts)</div><div class="line"></div><div class="line">public static Bitmap decodeResourceStream(Resources res, TypedValue value, InputStream is, Rect pad, Options opts)</div></pre></td></tr></table></figure></p><p>单从这些函数中就可以看出，BitmapFactory 的功能很强大，可以针对资源、文件、字节数组、FileDescriptor 和 InputStream 数据流解析出对应的 Bitmap 对象，如果解析不出来，则返回 null。而且每个函数都有两个实现，两个实现之间只差一个 Options opts 参数（详见 10.2.3 节中讲述）。</p><h4 id="1-decodeResource-Resources-res-int-id"><a href="#1-decodeResource-Resources-res-int-id" class="headerlink" title="1. decodeResource(Resources res, int id)"></a>1. decodeResource(Resources res, int id)</h4><p>这个函数表示从资源中解码一张位图，主要以 R.drawable.xxx 形式从本地资源中加载。</p><ul><li>Resources res：包含图像数据的资源对象，一般通过 Context.getResource() 函数获得。</li><li>int id：包含图像数据的资源 id。</li></ul><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), </div><div class="line">        R.drawable.head_icon);</div><div class="line">ImageView iv = findViewById(R.id.img);</div><div class="line">iv.setImageBitmap(bitmap);</div></pre></td></tr></table></figure></p><h4 id="2-decodeFile-String-pathName"><a href="#2-decodeFile-String-pathName" class="headerlink" title="2. decodeFile(String pathName)"></a>2. decodeFile(String pathName)</h4><p>这个函数的主要作用是通过文件路径来加载图片。在实际中，一般在从相册中加载图片或者拍照使用，首先通过 intent 打开相册或摄像头，然后通过 onActivityResult() 函数获取图片 URI，再根据 URI 获取图片路径，最后根据路径解析出图片。其过程详见 <a href="https://blog.csdn.net/harvic880925/article/details/43163175" target="_blank" rel="external">拍照、相册及裁剪的终极实现系列</a>。</p><ul><li>String pathName：解码文件的全路径名。必须是全路径名。</li></ul><p>使用示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String fileName = &quot;/data/data/demo.jpg&quot;;</div><div class="line">Bitmap bmp = BitmapFactory.decodeFile(fileName);</div><div class="line">if (bmp == null) &#123;</div><div class="line">    // TODO 文件不存在</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-decodeByteArray-byte-data-int-offset-int-length"><a href="#3-decodeByteArray-byte-data-int-offset-int-length" class="headerlink" title="3. decodeByteArray(byte[] data, int offset, int length)"></a>3. decodeByteArray(byte[] data, int offset, int length)</h4><p>根据 Byte 数组来解析出 Bitmap。</p><ul><li>byte[] data：压缩图像数据的字节数组。</li><li>int offset：图像数据偏移量，用于解码器定位从哪里开始解析。</li><li>int length：字节数，从偏移量开始，指定取多少字节进行解析。</li></ul><p>伪代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">final ImageView iv = findViewById(R.id.img);</div><div class="line">// 1. 开启异步线程去获取网络图片</div><div class="line">new Thread(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            // 2. 将网络返回的 InputStream 转换成 byte[]</div><div class="line">            byte[] data = getImage(path);</div><div class="line">            int length = data.length;</div><div class="line">            // 3. 解析</div><div class="line">            final Bitmap bitmap = BitmapFactory.decodeByteArray(data, 0, length);</div><div class="line">            iv.post(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    iv.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line">public static byte[] getImage(String path) throws Exception &#123;</div><div class="line">    URL url = new URL(path);</div><div class="line">    HttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class="line">    connection.setRequestMethod(&quot;GET&quot;);</div><div class="line">    connection.setReadTimeout(6 * 1000);</div><div class="line">    InputStream in = null;</div><div class="line">    if (connection.getResponseCode() == 200) &#123;</div><div class="line">        in = connection.getInputStream();</div><div class="line">        byte[] result = readStream(in);</div><div class="line">        in.close();</div><div class="line">        return  result;</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public static byte[] readStream(InputStream in) throws Exception &#123;</div><div class="line">    ByteArrayOutputStream outputStream = new ByteArrayOutputStream();</div><div class="line">    byte[] buffer = new byte[1024];</div><div class="line">    int len = -1;</div><div class="line">    while ((len = in.read(buffer)) != -1) &#123;</div><div class="line">        outputStream.write(buffer, 0, len);</div><div class="line">    &#125;</div><div class="line">    outputStream.close();</div><div class="line">    in.close();</div><div class="line">    return outputStream.toByteArray();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>因为 BitmapFactory.decodeByteArray() 函数所需的 data 字节数组并不是想象中的数组，而是把输入流转换成字节内存输出流的字节数组格式。如果不经过 OutputStream 转换，直接返回从 InputStream 中读取到的 byte 数组，那么 decodeByteArray() 函数将一直返回 null。</p><h4 id="4-decodeFileDescriptor"><a href="#4-decodeFileDescriptor" class="headerlink" title="4. decodeFileDescriptor"></a>4. decodeFileDescriptor</h4><p>有两个构造函数，其参数：</p><ul><li>FileDescriptor fd：包含解码位图数据的文件路径</li><li>Rect outPadding：用于返回矩形的内边距。如果 Bitmap 没有被解析成功，则返回 (-1, -1, -1, -1)；如果不需要，则可以传入 null。这个参数一般不使用。</li></ul><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">String path = &quot;/data/data/demo.jpg&quot;;</div><div class="line">FileInputStream is = new FileInputStream(path);</div><div class="line">bmp = BitmapFactory.decodeFileDescriptor(is.getFD());</div><div class="line">if (bmp == null) &#123;</div><div class="line">    // TODO 文件不存在</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 Android 老版本中，BitmapFactory.decodeFileDescriptor() 解析方法比使用 BitmapFactory.decodeFile(path) 更节省内存。对比源码发现，前者是直接调用 nativeDecodeFileDescriptor() 函数，它是 Android Native 里的函数，被封装在 SO 里；而追踪 decodeFile() 函数发现，在最终调用 nativeDecodeStream() 函数之前，最多可能会申请两次空间。在 API 28 中源码没有发现多处申请内存空间的问题。</p><h4 id="5-decodeStream"><a href="#5-decodeStream" class="headerlink" title="5. decodeStream"></a>5. decodeStream</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static Bitmap decodeStream(InputStream is)</div><div class="line">public static Bitmap decodeStream(InputStream is, Rect outPadding, Options opts)</div></pre></td></tr></table></figure><ul><li>InputStream is：用于解码位图的原始输入流。</li><li>Rect outPadding：用于返回矩形的内边距。如果 Bitmap 没有被解析成功，则返回 (-1, -1, -1, -1)；如果不需要，则可以传入 null。这个参数一般不使用。</li></ul><p>对前面 decodeByteArray 示例代码进行改造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">new Thread(new Runnable() &#123;</div><div class="line">    @Override</div><div class="line">    public void run() &#123;</div><div class="line">        try &#123;</div><div class="line">            InputStream inputStream = getImage(path);</div><div class="line">            final Bitmap bitmap = BitmapFactory.decodeStream(inputStream);</div><div class="line">            iv.post(new Runnable() &#123;</div><div class="line">                @Override</div><div class="line">                public void run() &#123;</div><div class="line">                    iv.setImageBitmap(bitmap);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;).start();</div><div class="line"></div><div class="line">public static InputStream getImage(String path) throws Exception &#123;</div><div class="line">    URL url = new URL(path);</div><div class="line">    HttpURLConnection connection = (HttpURLConnection) url.openConnection();</div><div class="line">    connection.setRequestMethod(&quot;GET&quot;);</div><div class="line">    connection.setReadTimeout(6 * 1000);</div><div class="line">    InputStream in = null;</div><div class="line">    if (connection.getResponseCode() == 200) &#123;</div><div class="line">        return connection.getInputStream();</div><div class="line">    &#125;</div><div class="line">    return null;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="10-2-3-BitmapFactory-Options"><a href="#10-2-3-BitmapFactory-Options" class="headerlink" title="10.2.3 BitmapFactory.Options"></a>10.2.3 BitmapFactory.Options</h3><p>这个参数的作用非常大，它可以设置 Bitmap 的采样率，通过改变图片的宽度、高度、缩放比例等，以减少图片的像素的目的。总的来说，通过设置这个值，可以更好地控制、显示、使用 Bitmap。在实际开发中可以灵活使用该值，以降低 OOM 的发生概率。</p><p>下面列出常用的部分成员变量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public boolean inJustDecodeBounds;</div><div class="line">public int inSampleSize;</div><div class="line">public int inDensity;</div><div class="line">public int inTargetDensity;</div><div class="line">public int inScreenDensity;</div><div class="line">public Bitmap.Config inPreferredConfig;</div><div class="line"></div><div class="line">public int outWidth;</div><div class="line">public int outHeight;</div><div class="line">public String outMimeType;</div></pre></td></tr></table></figure></p><p>以 in 开头的代表的就是设置某某参数；以 out 开头的代表的就是获取某某参数。比如，inSampleSize 就是设置 Bitmap 的缩放比例，outWidth 就是获取 Bitmap 的高度。</p><h4 id="1-inJustDecodeBounds-获取图片信息"><a href="#1-inJustDecodeBounds-获取图片信息" class="headerlink" title="1. inJustDecodeBounds 获取图片信息"></a>1. inJustDecodeBounds 获取图片信息</h4><p>将这个字段设置为 true，则表示只解析图片信息，不获取图片，不分配内存。能获取的信息有图片的宽度、高度和图片的 MIME 类型。图片的宽度、高度通过 options.outWidth (图片的原始宽度) 和 options.outHeight (图片的原始高度) 返回；图片的 MIME 类型通过 options.outMimeType 返回。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">options.inJustDecodeBounds = true;</div><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head, options);</div><div class="line">Log.d(&quot;xian&quot;, &quot;bitmap: &quot; + bitmap);</div><div class="line">Log.d(&quot;xian&quot;, &quot;realWidth: &quot; + options.outWidth + </div><div class="line">        &quot;, realHeight: &quot; + options.outHeight + </div><div class="line">        &quot;, mimeType: &quot; + options.outMimeType);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-395cffe4b6499d7c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从结果中看可以看出，返回的 Bitmap 是 null，而获取到的 width 和 height 都是有值的。这就证明了我们的结论：inJustDecodeBounds 只会解析 Bitmap 的宽/高参数，而不会解析 Bitmap，整个过程是不占内存的。</p><h4 id="2-inSampleSize-压缩图片"><a href="#2-inSampleSize-压缩图片" class="headerlink" title="2. inSampleSize 压缩图片"></a>2. inSampleSize 压缩图片</h4><p>这个字段表示采样频率，简称采样率，是指每隔多少个样本采样一次作为结果。比如，将这个字段设置为 4，意思就是从原本图片的 4 个像素中取一个像素作为结果返回，其余的都丢弃，这样，结果图片的宽和高都为原来的 1/4。同样，如果将这个字段设置为 16，意思就是从每 16 个像素中取一个像素返回，同样，宽和高都为原来的 1/16。很明显，采样率越大，图片越小，同时图片越失真。</p><p>针对 inSampleSize 的值，官方建议取 2 的冥数，比如 1、2、4、8、16 等，否则会被系统向下取整并找到一个最接近的值。不能去小于 1 的值，否则系统将一直使用 1 来作为采样率。</p><p>所以，这个参数主要用来对图像进行压缩。那如何确定一张图片的采样率呢？那就是使得缩放后的图片尺寸尽量大于等于相应的 ImageView 大小。一般计算 inSampleSize 的步骤如下。</p><p>第一步，获取图片的原始宽高。通过将 Options 对象的 inJustDecodeBounds 属性设置为 true 后调用 decodeResource() 函数，可以实现不真正加载图片而只获取图片的尺寸信息。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">options.inJustDecodeBounds = true;</div><div class="line">BitmapFactory.decodeResource(getResources(), resId, options);</div><div class="line">// 现在原始宽高存储在 Options 对象的 outWidth 和 outHeight 实例域中</div></pre></td></tr></table></figure></p><p>第二步，根据原始宽高和目标宽高计算出 inSampleSize。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// dstWidth 和 dstHeight 分为被目标 ImageView 的宽和高</div><div class="line">public static int calSampleSize(BitmapFactory.Options options, int dstWidht, int dstHeight) &#123;</div><div class="line">    int rawWidth = options.outWidth;</div><div class="line">    int rawHeight = options.outHeight;</div><div class="line">    int inSampleSize = 1;</div><div class="line">    if (rawWidth &gt; dstWidth || rawHeight &gt; dstHeight) &#123;</div><div class="line">        float ratioWidth = (float) rawWidth / dstWidth;</div><div class="line">        float ratioHeight = (float) rawHeight / dstHeight;</div><div class="line">        inSampleSize = (int) Math.min(ratioWidth, ratioHeight);</div><div class="line">    &#125;</div><div class="line">    return inSampleSize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>第三步，根据采样率解析出压缩后的 Bitmap。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">BitmapFactory.Options options2 = new BitmapFactory.Options();</div><div class="line">options2.inSampleSize = sampleSize;</div><div class="line">try &#123;</div><div class="line">    Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.scenery, options2);</div><div class="line">    iv.setImageBitmap(bmp);</div><div class="line">&#125; catch (OutOfMemoryError err) &#123;</div><div class="line">    // TODO OOM</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-加载一个-Bitmap-文件究竟要占多少空间"><a href="#3-加载一个-Bitmap-文件究竟要占多少空间" class="headerlink" title="3. 加载一个 Bitmap 文件究竟要占多少空间"></a>3. 加载一个 Bitmap 文件究竟要占多少空间</h4><p>为了适配不同的屏幕，Android 系统预先准备了几个资源文件夹。</p><table><thead><tr><th style="text-align:left">文件夹</th><th style="text-align:left">drawable-ldpi</th><th style="text-align:left">drawable-mdpi</th><th style="text-align:left">drawable-hdpi</th><th style="text-align:left">drawable-xhdpi</th><th style="text-align:left">drawable-xxhdpi</th><th style="text-align:left">drawable-xxxhdpi</th></tr></thead><tbody><tr><td style="text-align:left">density</td><td style="text-align:left">1</td><td style="text-align:left">1.5</td><td style="text-align:left">2</td><td style="text-align:left">3</td><td style="text-align:left">3.5</td><td style="text-align:left">4</td></tr><tr><td style="text-align:left">densityDpi</td><td style="text-align:left">160</td><td style="text-align:left">240</td><td style="text-align:left">320</td><td style="text-align:left">480</td><td style="text-align:left">560</td><td style="text-align:left">640</td></tr></tbody></table><ul><li>density：表示 dpi 与 px 的换算比例。</li><li>densityDpi：表示在对应的分辨率下每英寸有多少个 dpi。</li></ul><p>即：屏幕上 1 英寸长所对应的 px 数 = density × densityDpi。Android 系统在加载图片时会根据需要动态缩放图片所占的像素数，也就是会动态缩放图片的尺寸。</p><p>比如，有一张 640px × 800px 的图片存放在 xhdpi 文件夹下，这个文件夹所对应的屏幕分辨率是 480dpi，而当真实的屏幕分辨率是 720dpi 的时候，就需要放大此图，以适配这个屏幕，放大倍数就是 720 / 480 = 1.5。加载到内存时，Bitmap 对象的尺寸是 960px × 1200px。因为 Bitmap 默认使用 ARGB_8888格式来存储，也就是每个像素占 4 个字节，所以实际所占得内存字节数为 640px × 1.5 × 800px × 1.5 × 4 = 4608000。但是从 SD 卡加载同样的图片，就不会进行缩放，所占的内存为 640px × 800px × 4 = 2048000。</p><ul><li>不同名称的资源文件夹是为了适配不同的屏幕分辨率的，当屏幕分辨率与文件所在资源文件夹对应的分辨率相同时，直接使用图片，不会对图片进行缩放。</li><li>当屏幕分辨率与图片所在文件夹所对应的分辨率不同时，会进行缩放，缩放比例是：屏幕分辨率 / 文件夹所对应的分辨率。</li><li>当从本地文件夹中加载图片时，不会对图片进行缩放。</li></ul><h4 id="4-inScaled、inDensity、inTargetDensity、inScreenDensity"><a href="#4-inScaled、inDensity、inTargetDensity、inScreenDensity" class="headerlink" title="4. inScaled、inDensity、inTargetDensity、inScreenDensity"></a>4. inScaled、inDensity、inTargetDensity、inScreenDensity</h4><ul><li>inScaled：在需要缩放时，是否对当前文件进行缩放。值为 false 表示不缩放；值为 true 或者不设置，则会根据文件夹分辨率和屏幕分辨率动态缩放。默认为 true。</li><li>inDensity：用于设置文件所在资源文件夹的屏幕分辨率。</li><li>inTargetDensity：表示真实显示的屏幕分辨率。</li><li>inScreenDensity：在源码中没有用到此参数，不表。</li></ul><p>一张图片的缩放比例是通过屏幕真实的分辨率 / 所在资源文件夹所对应的分辨率得出来的，在这里，也就是缩放比例 scale = inTargetDensity / inDensity。这俩个参数的作用就是：可以通过手动设置文件所在资源文件夹的分辨率和真实显示的屏幕分辨率来指定图片的缩放比例。</p><h4 id="5-inPreferredConfig"><a href="#5-inPreferredConfig" class="headerlink" title="5. inPreferredConfig"></a>5. inPreferredConfig</h4><p>这个参数用来设置像素的存储格式的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">options.inPreferredConfig = Bitmap.Config.RGB_565;</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="10-2-4-创建-Bitmap-方法之二：Bitmap-静态方法"><a href="#10-2-4-创建-Bitmap-方法之二：Bitmap-静态方法" class="headerlink" title="10.2.4 创建 Bitmap 方法之二：Bitmap 静态方法"></a>10.2.4 创建 Bitmap 方法之二：Bitmap 静态方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">static Bitmap createBitmap(int width, int height, Bitmap.Config config)</div><div class="line">static Bitmap createBitmap(int[] colors, int width, int height, Bitmap.Config config)</div><div class="line">static Bitmap createBitmap(int[] colors, int offset, int stride, int width, int height, Bitmap.Config config)</div><div class="line">static Bitmap createBitmap(Bitmap src)</div><div class="line">static Bitmap createBitmap(Bitmap src, int dstWidth, int dstHeight, boolean filter)</div><div class="line">static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height)</div><div class="line">static Bitmap createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)</div><div class="line"></div><div class="line">// 在 API 17 中添加</div><div class="line">static Bitmap createBitmap(DisplayMetrics display, int width, int height, Bitmap.Config config)</div><div class="line">static Bitmap createBitmap(DisplayMetrics display, int[] colors, int width, int height, Bitmap.Config config)</div><div class="line">static Bitmap createBitmap(DisplayMetrics display, int[] colors, int offset, int stride, int width, int height, Bitmap.Config config)</div></pre></td></tr></table></figure><h4 id="1-static-Bitmap-createBitmap-int-width-int-height-Bitmap-Config-config"><a href="#1-static-Bitmap-createBitmap-int-width-int-height-Bitmap-Config-config" class="headerlink" title="1. static Bitmap createBitmap(int width, int height, Bitmap.Config config)"></a>1. static Bitmap createBitmap(int width, int height, Bitmap.Config config)</h4><p>这个函数可以创建一幅指定大小的空白图像。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-039ff3d2e96d4d67.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Bitmap mDestBmp;</div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        int width = 500;</div><div class="line">        int height = 300;</div><div class="line">        mDestBmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</div><div class="line"></div><div class="line">        Canvas canvas = new Canvas(mDestBmp);</div><div class="line">        Paint paint = new Paint();</div><div class="line">        LinearGradient linearGradient = new LinearGradient(width / 2f, 0, width / 2f,</div><div class="line">                height, 0xffffffff, 0x00ffffff, Shader.TileMode.CLAMP);</div><div class="line">        paint.setShader(linearGradient);</div><div class="line">        canvas.drawRect(0, 0, width, height, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.drawBitmap(mDestBmp, 0, 0, mPaint);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(5);</div><div class="line">        canvas.drawRect(0, 0, mDestBmp.getWidth(), mDestBmp.getHeight(), mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-createBitmap-Bitmap-source-int-x-int-y-int-width-int-height"><a href="#2-createBitmap-Bitmap-source-int-x-int-y-int-width-int-height" class="headerlink" title="2. createBitmap(Bitmap source, int x, int y, int width, int height)"></a>2. createBitmap(Bitmap source, int x, int y, int width, int height)</h4><p>这个函数主要用于裁剪图像，各参数的含义如下。</p><ul><li>Bitmap source：用于裁剪的源图像。</li><li>int x, y：开始裁剪的位置点坐标。</li><li>int width, height：裁剪的宽度和高度。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bitmap src = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">Bitmap cuteBmp = Bitmap.createBitmap(src, src.getWidth() / 3, src.getHeight() / 3, src.getWidth() / 3, src.getHeight() / 3)</div></pre></td></tr></table></figure><p>这里只是将图像裁剪成矩形。若想把图像裁剪成圆形或者椭圆形，不是使用 Bitmap 的自带方法，而需要用到 Xfermode 图像混合的知识，详见 8.3.2 节。</p><h4 id="3-createBitmap-Bitmap-source-int-x-int-y-int-width-int-height-Matrix-m-boolean-filter"><a href="#3-createBitmap-Bitmap-source-int-x-int-y-int-width-int-height-Matrix-m-boolean-filter" class="headerlink" title="3. createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)"></a>3. createBitmap(Bitmap source, int x, int y, int width, int height, Matrix m, boolean filter)</h4><p>这个函数相比上面的裁剪函数多了两个参数：Matrix m 和 boolean filter。它的作用也很明显，就是不仅能实现裁剪，还能给裁剪后的图像添加矩阵。</p><ul><li>Matrix m：给裁剪后的图像添加矩阵。</li><li>boolean filter：对应 paint.setFilterBitmap(filter)，即是否给图像添加滤波效果。如果设置为 true，则能够减少图像中由于噪声引起的突兀的孤立像素点或像素块。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Matrix matrix = new Matrix();</div><div class="line">matrix.setScale(2, 1);</div><div class="line">Bitmap src = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">Bitmap cuteBmp = Bitmap.createBitmap(src, src.getWidth() / 3, src.getHeight() / 3, src.getWidth() / 3, src.getHeight() / 3, matrix, true)</div></pre></td></tr></table></figure><p>将裁剪后的小狗宽度方向放大两倍。</p><h4 id="4-createBitmap-Bitmap-src-int-dstWidth-int-dstHeight-boolean-filter"><a href="#4-createBitmap-Bitmap-src-int-dstWidth-int-dstHeight-boolean-filter" class="headerlink" title="4. createBitmap(Bitmap src, int dstWidth, int dstHeight, boolean filter)"></a>4. createBitmap(Bitmap src, int dstWidth, int dstHeight, boolean filter)</h4><p>该函数用于缩放 Bitmap。各参数的含义如下。</p><ul><li>Bitmap src：需要缩放的源图像。</li><li>int dstWidth, dstHeight：缩放后的目标宽高。</li><li>boolean filter：是否给图像添加滤波效果，对应 paint.setFilterBitmap(filter)</li></ul><h4 id="5-建议"><a href="#5-建议" class="headerlink" title="5. 建议"></a>5. 建议</h4><p>在加载或创建 Bitmap 时，必须如下面代码所示，通过 try…catch 语句捕捉 OutOfMemoryError，以防出现 OOM 问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">try &#123;</div><div class="line">    Bitmap src = BitmapFactory.decodeResource(getResources(), R.drawable.scenery);</div><div class="line">    Bitmap bitmap = Bitmap.createScaledBitmap(src, 300, 200, true);</div><div class="line">&#125; catch (OutOfMemoryError error) &#123;</div><div class="line">    error.printStackTrace();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump5"></div></p><h3 id="10-2-5-常用函数"><a href="#10-2-5-常用函数" class="headerlink" title="10.2.5 常用函数"></a>10.2.5 常用函数</h3><h4 id="1-copy-Config-config-boolean-isMutable"><a href="#1-copy-Config-config-boolean-isMutable" class="headerlink" title="1. copy(Config config, boolean isMutable)"></a>1. copy(Config config, boolean isMutable)</h4><p>根据源图像创建一个副本，可以指定副本的像素存储格式。</p><ul><li>Config config：像素在内存中的存储格式。取值为 ARGB_8888等。</li><li>boolean isMutable：新创建的 Bitmap 是否可以更改其中的像素。</li></ul><p>我们可以使用下面的方法来判断当前的 Bitmap 是不是像素可更改的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean isMutable();</div></pre></td></tr></table></figure></p><p>返回 true 表示像素可以更改的。如果像素是不可更改的，但仍要使用 setPixel() 等函数设置 Bitmap 中的像素值时，就会报错。通过 BitmapFactory 加载的 Bitmap 都是像素不可更改的，只有通过 Bitmap 中的几个函数创建的 Bitmap 才是像素可更改的。这些函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">copy(Bitmap.Config config, boolean isMutable)</div><div class="line">createBitmap(int width, int height, Bitmap.Config config)</div><div class="line">// 当指定的目标缩放宽高与源图像宽高一样时，就会返回源图像，如果源图像是像素不可更改的，那么返回的图像依然是不可更改的</div><div class="line">// 进行缩放过才会生成新的图像，而新生成的图像是像素可更改的。</div><div class="line">createScaledBitmap(Bitmap src, int dstWidth, int dstHeight, boolean filter)</div><div class="line">createBitmap(DisplayMetrics display, int width, int height, Bitmap.Config config)</div></pre></td></tr></table></figure></p><p>对于像素不可更改的图像，是不能作为画布的，比如下面的代码就会报错：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Bitmap srcBmp = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">Canvas canvas = new Canvas(srcBmp);</div><div class="line">canvas.drawColor(Color.RED);</div></pre></td></tr></table></figure></p><p>显然，srcBmp 是像素不可更改的，然而，当其作为 Canvas 以后，如果要向其中填充颜色，则必然会改变它的像素值，肯定为报错。</p><h4 id="2-extractAlpha"><a href="#2-extractAlpha" class="headerlink" title="2. extractAlpha()"></a>2. extractAlpha()</h4><p>这个函数的主要作用是从 Bitmap 中抽取出 Alpha 值，生成一幅只含有 Alpha 值的图像，像素存储格式是 ALPHA_8。它有两个构造函数。</p><h5 id="1）Bitmap-extractAlpha"><a href="#1）Bitmap-extractAlpha" class="headerlink" title="1）Bitmap extractAlpha()"></a>1）Bitmap extractAlpha()</h5><p>示例：将图像的透明通道抽取出来，并染成天蓝色。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f95ee2e6f3ac9d44.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Bitmap srcBmp = BitmapFactory.decodeResource(getResources(), R.drawable.cat_dog);</div><div class="line">Bitmap bitmap = Bitmap.createBitmap(srcBmp.getWidth(), srcBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">Canvas canvas = new Canvas(bitmap);</div><div class="line">Paint paint = new Paint();</div><div class="line">paint.setColor(Color.CYAN);</div><div class="line">canvas.drawBitmap(srcBmp.extractAlpha(), 0, 0, paint);</div><div class="line"></div><div class="line">ImageView iv = findViewById(R.id.img);</div><div class="line">iv.setImageBitmap(bitmap);</div><div class="line"></div><div class="line">srcBmp.recycle();</div></pre></td></tr></table></figure><h5 id="2）Bitmap-extractAlpha-Paint-paint-int-offsetXY"><a href="#2）Bitmap-extractAlpha-Paint-paint-int-offsetXY" class="headerlink" title="2）Bitmap extractAlpha(Paint paint, int[] offsetXY)"></a>2）Bitmap extractAlpha(Paint paint, int[] offsetXY)</h5><ul><li>Paint paint：具有 MaskFilter 效果的 Paint 对象，一般使用 BlurMaskFilter 模糊效果。</li><li>int[] offsetXY：返回在添加 BlurMaskFilter 效果以后原点的偏移量。比如，我们使用一个半径为 6 的 BlurMaskFilter 效果，那么在源图像被模糊以后，图像的上下左右 4 条边都会多出 6px 的模糊效果。所以，要想完全显示这幅图像，就不应该从源图像左上角 (0, 0) 点开始绘制，而应从 (-6, -6) 点开始绘制，而 offsetXY 就是相对源图像的建议绘制起始位置，所以此时 offsetXY 的值就是 [-6, -6]。注意，offsetXY 只是建议的绘制起始位置，其取值并不一定与 BlurMaskFilter 的模糊半径一致。</li></ul><p>利用这个模糊效果，可以实现发光效果，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ce03ecdfb64dff04.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        try &#123;</div><div class="line">            Bitmap srcBmp = BitmapFactory.decodeResource(getResources(), R.drawable.cat_dog);</div><div class="line">            // 获取 Alpha Bitmap</div><div class="line">            Paint alphaPaint = new Paint();</div><div class="line">            BlurMaskFilter blurMaskFilter = new BlurMaskFilter(20, BlurMaskFilter.Blur.NORMAL);</div><div class="line">            alphaPaint.setMaskFilter(blurMaskFilter);</div><div class="line">            int[] offsetXY = new int[2];</div><div class="line">            Bitmap alphaBmp = srcBmp.extractAlpha(alphaPaint, offsetXY);</div><div class="line"></div><div class="line">            // 创建 Bitmap</div><div class="line">            Bitmap bitmap = Bitmap.createBitmap(alphaBmp.getWidth(), alphaBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">            Canvas canvas = new Canvas(bitmap);</div><div class="line">            Paint paint = new Paint();</div><div class="line">            paint.setColor(Color.CYAN);</div><div class="line">            canvas.drawBitmap(alphaBmp, 0, 0, paint);</div><div class="line"></div><div class="line">            // 绘制源图像</div><div class="line">            canvas.drawBitmap(srcBmp, -offsetXY[0], -offsetXY[1], null);</div><div class="line"></div><div class="line">            // 设置图像并回收没用的资源</div><div class="line">            ImageView iv = findViewById(R.id.img);</div><div class="line">            iv.setImageBitmap(bitmap);</div><div class="line">            srcBmp.recycle();</div><div class="line">        &#125; catch (OutOfMemoryError error) &#123;</div><div class="line">            error.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="3）示例：单击描边效果"><a href="#3）示例：单击描边效果" class="headerlink" title="3）示例：单击描边效果"></a>3）示例：单击描边效果</h5><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5053ab04c41b42b4.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class TestView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onFinishInflate() &#123;</div><div class="line">        super.onFinishInflate();</div><div class="line">        Paint p = new Paint();</div><div class="line">        p.setColor(Color.CYAN);</div><div class="line">        setStateDrawable(this, p);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void setStateDrawable(ImageView view, Paint paint) &#123;</div><div class="line">        // 拿到源图像</div><div class="line">        BitmapDrawable bd = (BitmapDrawable) view.getDrawable();</div><div class="line">        Bitmap srcBmp = bd.getBitmap();</div><div class="line"></div><div class="line">        // 制作纯色背景</div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(srcBmp.getWidth(), srcBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bitmap);</div><div class="line">        canvas.drawBitmap(srcBmp.extractAlpha(), 0, 0, paint);</div><div class="line"></div><div class="line">        // 添加动态</div><div class="line">        StateListDrawable sld = new StateListDrawable();</div><div class="line">        sld.addState(new int[]&#123;android.R.attr.state_pressed&#125;, new BitmapDrawable(bitmap));</div><div class="line"></div><div class="line">        // setBackgroundDrawable() 函数会移除原有的 padding 值。</div><div class="line">        // 如果需要 padding，则需要调用 setPadding() 函数。</div><div class="line">        view.setBackgroundDrawable(sld);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-分配空间获取"><a href="#3-分配空间获取" class="headerlink" title="3. 分配空间获取"></a>3. 分配空间获取</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// API 19，获取 Bitmap 所分配的内存</div><div class="line">int getAllocationByteCount()</div><div class="line"></div><div class="line">// API 12，获取 Bitmap 所分配的内存</div><div class="line">int getByteCount()</div><div class="line"></div><div class="line">// API 1，获取每行所分配的内存大小。Bitmap 所占内存 = getRowBytes() × bitmap.getHeight()。</div><div class="line">int getRowBytes()</div></pre></td></tr></table></figure><p>所以，一般计算 Bitmap 内存占用的函数会写成如下这样：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public int getBitmapSize(Bitmap bitmap) &#123;</div><div class="line">    if (bitmap == null) &#123;</div><div class="line">        return 0;</div><div class="line">    &#125;</div><div class="line">    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.KITKAT) &#123;</div><div class="line">        return bitmap.getAllocationByteCount();</div><div class="line">    &#125;</div><div class="line">    if (Build.VERSION.SDK_INT &gt;= Build.VERSION_CODES.HONEYCOMB_MR1) &#123;</div><div class="line">        return bitmap.getByteCount();</div><div class="line">    &#125;</div><div class="line">    return bitmap.getRowBytes() * bitmap.getHeight();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="4-recycle-、isRecycled"><a href="#4-recycle-、isRecycled" class="headerlink" title="4. recycle()、isRecycled()"></a>4. recycle()、isRecycled()</h4><p>这是两个与图片回收有关的函数，其声明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 强制回收 Bitmap 所占的内存</div><div class="line">public void recycle()</div><div class="line"></div><div class="line">// 判断当前 Bitmap 的内存是否被回收</div><div class="line">public final boolean isRecycled()</div></pre></td></tr></table></figure></p><p>所以，如果要回收内存，则代码一般这样写：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">if (bitmap != null &amp;&amp; !bitmap.isRecycled()) &#123;</div><div class="line">    bitmap.recycle();</div><div class="line">    bitmap = null;</div><div class="line">    System.gc();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>注意：使用内存已经被回收的 Bitmap 引起 Crash；在 API 10 及以前的版本中，必须强制调用 recycle() 函数来释放内存；从 API 11 开始，不再强制调用 recycle() 函数来释放内存。</p></blockquote><h4 id="5-setDensity-、getDensity"><a href="#5-setDensity-、getDensity" class="headerlink" title="5. setDensity()、getDensity()"></a>5. setDensity()、getDensity()</h4><p>在 BitmapFactory 中，我们讲过几个 Density 值，如 inDensity、inTargetDensity，而这里 Bitmap 的 setDensity()、getDensity() 函数所对应的就是 inDensity。inDensity 用于表示该 Bitmap 适合的屏幕 dpi，当目标屏幕的 dpi (inTargetDensity) 不等于它时，将会缩放图像以适应目标机器。</p><h4 id="6-setPixel-、getPixel"><a href="#6-setPixel-、getPixel" class="headerlink" title="6. setPixel()、getPixel()"></a>6. setPixel()、getPixel()</h4><p>这两个函数用于针对 Bitmap 中某个位置的像素进行设置和获取。举个例子：将图片中的绿色通道增大 30，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b314a49805454d1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        Bitmap srcBmp = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">        ImageView iv1 = findViewById(R.id.img1);</div><div class="line">        iv1.setImageBitmap(srcBmp);</div><div class="line"></div><div class="line">        Bitmap desBmp = srcBmp.copy(Bitmap.Config.ARGB_8888, true);</div><div class="line">        for (int h = 0; h &lt; srcBmp.getHeight(); h++) &#123;</div><div class="line">            for (int w = 0; w &lt; srcBmp.getWidth(); w++) &#123;</div><div class="line">                int originColor = srcBmp.getPixel(w, h);</div><div class="line"></div><div class="line">                int alpha = Color.alpha(originColor);</div><div class="line">                int red = Color.red(originColor);</div><div class="line">                int green = Color.green(originColor);</div><div class="line">                int blue = Color.blue(originColor);</div><div class="line"></div><div class="line">                if (green &lt; 225) &#123;</div><div class="line">                    green += 30;</div><div class="line">                &#125;</div><div class="line"></div><div class="line">                desBmp.setPixel(w, h, Color.argb(alpha, red, green, blue));</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        ImageView iv2 = findViewById(R.id.img2);</div><div class="line">        iv2.setImageBitmap(desBmp);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="7-compress"><a href="#7-compress" class="headerlink" title="7. compress()"></a>7. compress()</h4><h5 id="1）概述"><a href="#1）概述" class="headerlink" title="1）概述"></a>1）概述</h5><p>用于压缩图像，它会将压缩过得 Bitmap 写入指定的输出流中。函数声明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public boolean compress(CompressFormat format, int quality, OutputStream stream)</div></pre></td></tr></table></figure></p><ul><li>CompressFormat format：压缩格式，取值有：CompressFormat.JPEG、CompressFormat.PNG、CompressFormat.WEBP (API 14)。</li><li>int quality：表示压缩后图像的画质，取值是 0~100。0 表示 以最低画质压缩，100 表示以最高画质压缩。对于 PNG 等无损格式的图片，会忽略此项设置。</li><li>OutputStream stream：这是输出值，Bitmap 在被压缩后，会以 OutputStream 的形式在这里输出。</li><li>返回值 boolean：当压缩成功后，返回 true；失败则返回 false。</li></ul><h5 id="2）压缩格式"><a href="#2）压缩格式" class="headerlink" title="2）压缩格式"></a>2）压缩格式</h5><ul><li>CompressFormat.JPEG： 采用 JPEG 压缩算法，是一种有损压缩方式，即在压缩过程中会改变图像的原本质量。compress() 函数中的 quality 参数值越小，画质越差，对图片的原有质量损伤越大，但是得到的图片文件比较小。而且，JPEG 不支持 Alpha 透明度，当遇到透明度像素时，会以黑色背景填充。</li><li>CompressFormat.PNG：采用 PNG 压缩算法，是一种支持透明度的无损压缩格式。</li><li>CompressFormat.WEBP：WEBP 是一种同时提供了有损压缩与无损压缩的图片文件格式，派生自视频编码格式 VP8；从 Android 4.0（API 14）开始支持 WEBP，从 Android 4.2.1+（API 18）开始支持无损 WEBP 和带 Alpha 通道的 WEBP。从整体来讲，WEBP 格式是通过牺牲压缩时间来减小产出文件大小的。</li></ul><h5 id="3）压缩图像"><a href="#3）压缩图像" class="headerlink" title="3）压缩图像"></a>3）压缩图像</h5><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cbfa801ec2535f01.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        ImageView iv1 = findViewById(R.id.img1);</div><div class="line">        final ImageView iv2 = findViewById(R.id.img2);</div><div class="line">        final Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">        iv1.setImageBitmap(bmp);</div><div class="line"></div><div class="line">        new Thread(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">                // 压缩图像后，显示</div><div class="line">                ByteArrayOutputStream bos = new ByteArrayOutputStream();</div><div class="line">                bmp.compress(Bitmap.CompressFormat.JPEG, 1, bos);</div><div class="line">                byte[] bytes = bos.toByteArray();</div><div class="line">                final Bitmap bmp1 = BitmapFactory.decodeByteArray(bytes, 0, bytes.length);</div><div class="line">                iv2.post(new Runnable() &#123;</div><div class="line">                    @Override</div><div class="line">                    public void run() &#123;</div><div class="line">                        iv2.setImageBitmap(bmp1);</div><div class="line">                    &#125;</div><div class="line">                &#125;);</div><div class="line">            &#125;</div><div class="line">        &#125;).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="4）示例：保存压缩后的图像"><a href="#4）示例：保存压缩后的图像" class="headerlink" title="4）示例：保存压缩后的图像"></a>4）示例：保存压缩后的图像</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">private void saveBitmap(Bitmap bitmap) &#123;</div><div class="line">    File fileDir = Environment.getExternalStorageDirectory();</div><div class="line">    String path = fileDir.getAbsolutePath() + &quot;/xian.jpeg&quot;;</div><div class="line">    </div><div class="line">    File file = new File(path);</div><div class="line">    if (file.exists()) &#123;</div><div class="line">        file.delete();</div><div class="line">    &#125;</div><div class="line">    try &#123;</div><div class="line">        FileOutputStream outputStream = new FileOutputStream(file);</div><div class="line">        bitmap.compress(Bitmap.CompressFormat.JPEG, 10, outputStream);</div><div class="line">        outputStream.flush();</div><div class="line">        outputStream.close();</div><div class="line">    &#125; catch (FileNotFoundException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump6"></div></p><h3 id="10-2-6-常见问题"><a href="#10-2-6-常见问题" class="headerlink" title="10.2.6 常见问题"></a>10.2.6 常见问题</h3><h4 id="1-对-Bitmap-的画笔设置-ANTI-ALIAS-FLAG-属性，为什么无效"><a href="#1-对-Bitmap-的画笔设置-ANTI-ALIAS-FLAG-属性，为什么无效" class="headerlink" title="1. 对 Bitmap 的画笔设置 ANTI_ALIAS_FLAG 属性，为什么无效"></a>1. 对 Bitmap 的画笔设置 ANTI_ALIAS_FLAG 属性，为什么无效</h4><p>简单来说，ANTI_ALIAS_FLAG 属性通过混合前景色与背景色来产生平滑的边缘。比如背景色是透明的，而前景色是红色的，ANTI_ALIAS_FLAG 属性通过将边缘处的像素由纯色逐步转换为透明来让边缘看起来是平滑的。</p><p>而当我们在 Bitmap 上重绘时，像素的颜色会越来越纯粹，从而导致边缘越来越粗糙。所以，可以有两种选择即可避免设置 ANTI_ALIAS_FLAG 属性无效的问题：</p><ul><li>避免重绘。</li><li>在重绘前清空 Bitmap。</li></ul><p>避免重绘的方法很简单，只需要保证让 Bitmap 只被绘制一次即可，比如将 Bitmap 绘制操作放在初始化的时候，而不要放在可能被多次调用的 onDraw()、onMeasure()、onLayout() 等函数中。</p><p>清空 Bitmap 可以参考如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">private Bitmap mBitmap;</div><div class="line">private Canvas mCanvas;</div><div class="line"></div><div class="line">private void init() &#123;</div><div class="line">    mBitmap = Bitmap.createBitmap(200, 200, Bitmap.Config.ARGB_8888);</div><div class="line">    mCanvas = new Canvas(mBitmap);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    // 清空 Bitmap</div><div class="line">    mCanvas.drawColor(Color.TRANSPARENT, PorterDuff.Mode.CLEAR);</div><div class="line">    // ...</div><div class="line">    mCanvas.drawXXX();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-如何生成水印"><a href="#2-如何生成水印" class="headerlink" title="2. 如何生成水印"></a>2. 如何生成水印</h4><p>其实原理很简单，新生成一个 Bitmap，先后将源 Bitmap 和水印 Bitmap 画上去即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f8f0abbcefbe4426.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>```<br>public class MainActivity extends AppCompatActivity {</p><pre><code>@Overridepublic void onCreate(Bundle savedInstanceState) {    super.onCreate(savedInstanceState);    setContentView(R.layout.act_main);    Bitmap srcBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);    Bitmap waterBitmap = getWaterBitmap();    Bitmap bitmap = createWaterBitmap(srcBitmap, waterBitmap);    ImageView imageView = findViewById(R.id.img);    imageView.setImageBitmap(bitmap);}/** * 添加水印 * @param srcBitmap 源图 * @param waterBitmap 水印图 * @return 添加水印的图像 */private Bitmap createWaterBitmap(Bitmap srcBitmap, Bitmap waterBitmap) {    if (srcBitmap == null) {        return null;    }    if (waterBitmap == null) {        return srcBitmap;    }    int w = srcBitmap.getWidth();    int h = srcBitmap.getHeight();    int ww = waterBitmap.getWidth();    int wh = waterBitmap.getHeight();    // 创建空白图像，宽高等同 srcBitmap    Bitmap newBitmap = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);    Canvas canvas = new Canvas(newBitmap);    // 画原图，从 (0, 0) 坐标开始    canvas.drawBitmap(srcBitmap, 0, 0, null);    // 在原图的右下角画入水印    canvas.drawBitmap(waterBitmap, w - ww + 10, h - wh + 10, null);    return newBitmap;}/** * 水印 * @return Bitmap */private Bitmap getWaterBitmap() {    return makeTextBitmap(&quot;先小涛&quot;, 200, Color.GRAY);}/** * 将字符串转化成 bitmap * @return Bitmap */private Bitmap makeTextBitmap(String text, int size, int color) {    Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);    paint.setTextSize(size);    paint.setColor(color);    paint.setTextAlign(Paint.Align.LEFT);    Paint.FontMetricsInt fm = paint.getFontMetricsInt();    int width = (int) paint.measureText(text);    int height = fm.descent - fm.ascent;    Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);    Canvas canvas = new Canvas(bitmap);    canvas.drawText(text, 0, fm.leading - fm.ascent, paint);    canvas.save();    return bitmap;}</code></pre><p>}</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10.1 精通自定义 View 之 Android 画布——ShapeDrawable</title>
      <link href="/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/"/>
      <url>/2019/07/10/Custom%20View/10.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Android%20%E7%94%BB%E5%B8%83%E2%80%94%E2%80%94ShapeDrawable/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>前面，我们提到了获取画布的几种方法。除了重写系统的 onDraw()、dispatchDraw() 函数，还可以通过以下方法获得画布：</p><ul><li>通过 Bitmap 创建。</li><li>通过 SurfaceView 的 SurfaceHolder.lockCanvas() 函数获取。</li></ul><p>另外，我们也提到过通过创建 Drawable 对象，然后将画好的 Drawable 对象画在画布上，也是创建 Bitmap 的一种方式。</p><p>Drawable 类有很多的派生类，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c37778dc3d2d9332.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这些派生类都可以通过 Drawable 的 draw(Canvas canvas) 函数将其画到画布上。这里以最常用的 ShapeDrawable 为例来进行讲解。</p><p>shape 标签可以实现的效果与 ShapeDrawable 类似，但是 shape 标签所对应的 Java 类是 GradientDrawable，而不是 ShapeDrawable。使用如下代码会发生强转异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ShapeDrawable shapeDrawable = (ShapeDrawable) textView.getBackground();</div></pre></td></tr></table></figure></p><p><div id="jump1"></div></p><h3 id="10-1-1-shape-标签与-GradientDrawable"><a href="#10-1-1-shape-标签与-GradientDrawable" class="headerlink" title="10.1.1 shape 标签与 GradientDrawable"></a>10.1.1 shape 标签与 GradientDrawable</h3><h4 id="1-是-ShapeDrawable-还是-GradientDrawable"><a href="#1-是-ShapeDrawable-还是-GradientDrawable" class="headerlink" title="1. 是 ShapeDrawable 还是 GradientDrawable"></a>1. 是 ShapeDrawable 还是 GradientDrawable</h4><p>前面讲过，shape 标签所对应的类是 GradientDrawable 而不是 ShapeDrawable，但是 GradientDrawable 并不能完成 shape 标签的所有功能，因为 GradientDrawable 的构造函数如下如所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c902165bab4db480.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从构造函数中可以明显看出，GradientDrawable 所对应的是 gradient 标签的功能，并不能完成 shape 标签所能完成的构造矩形、椭圆等功能；而神奇的是，通过 ShapeDrawable 却可以完成 shape 标签的所有功能！至于造成这种问题的原因，此处不再深究，只需知道在代码中得到 shape 标签实例的时候要强转 GradientDrawable 就可以了。</p><h4 id="2-获取-shape-标签的实例"><a href="#2-获取-shape-标签的实例" class="headerlink" title="2. 获取 shape 标签的实例"></a>2. 获取 shape 标签的实例</h4><p>实现这样一个功能：在单击按钮的时候，给原有的 shape 标签添加圆角。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cc96668581f19c89.gif?imageMogr2/auto-orient/strip" alt=""></p><p>新建 shape 文件：res/drawable/shape_solid.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;#FF0000&quot;/&gt;</div><div class="line">    &lt;stroke android:width=&quot;2dp&quot; android:color=&quot;#00FF00&quot;</div><div class="line">        android:dashGap=&quot;5dp&quot; android:dashWidth=&quot;5dp&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p>在布局中使用：res/layout/act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/add_shape_corner&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;添加圆角&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/shape_tv&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;shape 标签实例&quot;</div><div class="line">        android:padding=&quot;10dp&quot;</div><div class="line">        android:layout_margin=&quot;20dp&quot;</div><div class="line">        android:background=&quot;@drawable/shape_solid&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>动作代码：src/…/MainActivity.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        final TextView tv = findViewById(R.id.shape_tv);</div><div class="line">        findViewById(R.id.add_shape_corner).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                GradientDrawable drawable = (GradientDrawable) tv.getBackground();</div><div class="line">                drawable.setCornerRadius(20);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="10-1-2-ShapeDrawable-的构造函数"><a href="#10-1-2-ShapeDrawable-的构造函数" class="headerlink" title="10.1.2 ShapeDrawable 的构造函数"></a>10.1.2 ShapeDrawable 的构造函数</h3><p>ShapeDrawable 有两个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 一：无参构造函数，需配合 setShape()</div><div class="line">ShapeDrawable()</div><div class="line">setShape(Shape shape)</div><div class="line"></div><div class="line">// 二：常用</div><div class="line">ShapeDrawable(Shape shape)</div></pre></td></tr></table></figure></p><p>Shape 是个抽象基类，实际应用中需要 Shape 的派生类。Shape 类的派生类如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-757285c544048cb7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>每个派生类的具体含义如下。</p><ul><li>RectShape：构造一个矩形 Shape。</li><li>ArcShape：构造一个扇形 Shape。</li><li>OvalShape：构造一个椭圆 Shape。</li><li>RoundRectShape：构造一个圆角矩形 Shape，可带有镂空矩形效果。</li><li>PathShape：构造一个可根据路径绘制的 Shape。</li></ul><h4 id="1-RectShape"><a href="#1-RectShape" class="headerlink" title="1. RectShape"></a>1. RectShape</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private ShapeDrawable mDrawable;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mDrawable = new ShapeDrawable(new RectShape());</div><div class="line">        mDrawable.setBounds(new Rect(50, 50, 200, 100));</div><div class="line">        mDrawable.getPaint().setColor(Color.RED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用定义好的自定义控件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:background=&quot;#EEE&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;100dp&quot;</div><div class="line">        android:layout_height=&quot;80dp&quot;</div><div class="line">        android:layout_margin=&quot;50dp&quot;</div><div class="line">        android:background=&quot;#FFFFFF&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>效果图如下所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b8704b44fe51fd1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>为了方便显示，将整个控件设置为白色。而且为了确认 mDrawable.setBounds(new Rect(50, 50, 200, 100)); 中矩形位置是在当前控件中的位置，我们给 TestView 控件添加了 margin 值。</p><p>从效果图中可以看出：</p><ul><li>ShapeDrawable.setBounds() 函数所设置的矩形位置是指所在控件中的位置，而不是以屏幕左上角点为坐标的。</li><li>通过 mDrawable.getPaint() 函数得到 ShapeDrawable 自带的画笔，并对其进行操作，效果将直接显示在 ShapeDrawable 中。</li></ul><h4 id="2-OvalShape"><a href="#2-OvalShape" class="headerlink" title="2. OvalShape"></a>2. OvalShape</h4><p>OvalShape 是指根据 ShapeDrawable.setBounds() 函数所定义的位置矩形生成一个椭圆形状的 Shape。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">    mDrawable = new ShapeDrawable(new OvalShape());</div><div class="line">    mDrawable.setBounds(new Rect(50, 50, 200, 100));</div><div class="line">    mDrawable.getPaint().setColor(Color.RED);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这里的矩形位置和大小与 RectShape 中的矩形位置和大小一样，只是把 RectShape 改成了 OvalShape，效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aaad3c55757f1a88.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="3-ArcShape"><a href="#3-ArcShape" class="headerlink" title="3. ArcShape"></a>3. ArcShape</h4><p>ArcShape 是在 OvalShape 所形成的椭圆的基础上，将其进行角度切割所形成的扇形。其中扇形开始的 0° 在椭圆的 X 轴正方向上。其只有一个构造函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public ArcShape(float startAngle, float sweepAngle)</div></pre></td></tr></table></figure></p><ul><li>startAngle：指开始角度，扇形开始的 0° 在椭圆的 X 轴正方向上，即右中间位置。</li><li>sweepAngle：指扇形所扫过的角度。</li></ul><p>同举一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">    mDrawable = new ShapeDrawable(new ArcShape(0, 300));</div><div class="line">    mDrawable.setBounds(new Rect(50, 50, 200, 100));</div><div class="line">    mDrawable.getPaint().setColor(Color.RED);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-714362acbe1e3f1d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-RoundRectShape"><a href="#4-RoundRectShape" class="headerlink" title="4. RoundRectShape"></a>4. RoundRectShape</h4><p>RoundRectShape 在字面意思上是指圆角矩形。其实，它不仅能实现圆角矩形，它的本意是实现镂空的圆角矩形。它所能实现的效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-031438edefdc46b0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>左图带有圆角的矩形，右图为中间带有镂空矩形的圆角矩形，而且中间的镂空矩形也可以带有圆角。</p><p>其构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public RoundRectShape(float[] outerRadii, RectF inset, float[] innerRadii)</div></pre></td></tr></table></figure></p><ul><li>float[] outerRadii：外围矩形的各个角的角度大小，需要填充 8 个数字，每两个数字一组，分别对应（左上角、右上角、右下角、左下角）4 个角的角度。每两个一组的数字构成一个椭圆，第一个数字代表椭圆的 X 轴半径，第二个数字代表椭圆的 Y 轴半径。如果不需要制定外围矩形的各个角的角度，则可以传入 null。</li><li>RectF inset：表示内部矩形与外部矩形各边的边距。RectF 的 4 个值分别对应 left、top、right、bottom 4 条边的边距。如果不需要内部矩形的镂空效果，则可以传入 null。</li><li>float[] innerRadii：表示内部矩形的各个角的角度大小，同样需要填充 8 个数字，其含义与 outerRadii 一样。如果不需要制定内部矩形的各个角的角度，则可以传入 null。</li></ul><p>同样举一个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">    float[] outerR = new float[] &#123; 12, 12, 12, 12, 0, 0, 0, 0 &#125;;</div><div class="line">    RectF inset = new RectF(6, 6, 6, 6);</div><div class="line">    float[] innerR = new float[] &#123; 50, 12, 0, 0, 12, 50, 0, 0 &#125;;</div><div class="line">    mDrawable = new ShapeDrawable(new RoundRectShape(outerR, inset, innerR));</div><div class="line">    mDrawable.setBounds(new Rect(50, 50, 200, 100));</div><div class="line">    mDrawable.getPaint().setColor(Color.RED);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ee6bb3c97565e75a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="5-PathShape"><a href="#5-PathShape" class="headerlink" title="5. PathShape"></a>5. PathShape</h4><p>PathShape 的含义是构造一个可根据路径绘制的 Shape。其构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public PathShape(Path path, float stdWidth, float stdHeight)</div></pre></td></tr></table></figure></p><ul><li>path：表示所要画的路径。</li><li>stdWidth：表示标准宽度，即将整个 ShapeDrawable 的宽度分成多少份。Path 中的 moveTo(x, y)、lineTo(x2, y2) 这些函数中的数值在这里其实都是以每一份的位置来计算的。当 ShapeDrawable 动态变大、变小时，每一份都会变大变小，而根据这些份的数值画出来的 Path 图形就会动态缩放。</li><li>stdHight：表示标准高度，即将 ShapeDrawable 的高度分成多少份。</li></ul><p>举例说明：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">    Path path = new Path();</div><div class="line">    path.moveTo(0, 0);</div><div class="line">    path.lineTo(100, 0);</div><div class="line">    path.lineTo(100, 100);</div><div class="line">    path.lineTo(0, 100);</div><div class="line">    path.close();</div><div class="line">    mDrawable = new ShapeDrawable(new PathShape(path, 100, 100));</div><div class="line">    mDrawable.setBounds(new Rect(0, 0, 250, 150));</div><div class="line">    mDrawable.getPaint().setColor(Color.RED);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4c4e9a73aa085f11.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>为了验证 PathShape 份的概念，将 ShapeDrawable 的高度和宽度都分成了100 份。现在把高度的份数改成 200，那么，同样的路径代码，画出来的效果应该是高度的一半。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">private void init() &#123;</div><div class="line">    setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">    Path path = new Path();</div><div class="line">    path.moveTo(0, 0);</div><div class="line">    path.lineTo(100, 0);</div><div class="line">    path.lineTo(100, 100);</div><div class="line">    path.lineTo(0, 100);</div><div class="line">    path.close();</div><div class="line">    mDrawable = new ShapeDrawable(new PathShape(path, 100, 200));</div><div class="line">    mDrawable.setBounds(new Rect(0, 0, 250, 150));</div><div class="line">    mDrawable.getPaint().setColor(Color.RED);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-808ceb0149400e85.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>与 100 份的效果图对比，果然只占了一半。</p><h4 id="6-自定义-Shape"><a href="#6-自定义-Shape" class="headerlink" title="6. 自定义 Shape"></a>6. 自定义 Shape</h4><p>各个 Shape 派生类只不过实现了 Shape 中的 draw 函数。现在自定义实现一个构造区域的 Shape，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class RegionShape extends Shape &#123;</div><div class="line">    private Region mRegion;</div><div class="line"></div><div class="line">    public RegionShape(Region region) &#123;</div><div class="line">        assert(region != null);</div><div class="line">        mRegion = region;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void draw(Canvas canvas, Paint paint) &#123;</div><div class="line">        RegionIterator iterator = new RegionIterator(mRegion);</div><div class="line">        Rect rect = new Rect();</div><div class="line">        while (iterator.next(rect)) &#123;</div><div class="line">            canvas.drawRect(rect, paint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 src/…/TestView.java 中使用 RegionShape：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private ShapeDrawable mDrawable;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        Rect rect1 = new Rect(50, 0, 90, 150);</div><div class="line">        Rect rect2 = new Rect(0, 50, 250, 100);</div><div class="line">        Region region1 = new Region(rect1);</div><div class="line">        Region region2 = new Region(rect2);</div><div class="line">        region1.op(region2, Region.Op.XOR);</div><div class="line"></div><div class="line">        mDrawable = new ShapeDrawable(new RegionShape(region1));</div><div class="line">        mDrawable.setBounds(new Rect(0, 0, 250, 150));</div><div class="line">        mDrawable.getPaint().setColor(Color.RED);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 res/layout/act_main.xml 中使用 TestView：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:background=&quot;#EEE&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;250px&quot;</div><div class="line">        android:layout_height=&quot;150px&quot;</div><div class="line">        android:layout_margin=&quot;50dp&quot;</div><div class="line">        android:background=&quot;#FFFFFF&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-8b8f9453ce1de7ab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>由于自定义 Shape 太过麻烦，一般不这么做。当我们需要使用 ShapeDrawable 无法完成的功能时，一般会通过自定义 Drawable 来实现。见 10.1.4 节。</p><p><div id="jump3"></div></p><h3 id="10-1-3-常用函数"><a href="#10-1-3-常用函数" class="headerlink" title="10.1.3 常用函数"></a>10.1.3 常用函数</h3><h4 id="1-setBounds"><a href="#1-setBounds" class="headerlink" title="1. setBounds()"></a>1. setBounds()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">setBounds(int left, int top, int right, int bottom)</div><div class="line">setBounds(Rect bounds)</div></pre></td></tr></table></figure><p>它用来指定当前 ShapeDrawable 在当前控件中的显示位置。</p><h4 id="2-getPaint"><a href="#2-getPaint" class="headerlink" title="2. getPaint()"></a>2. getPaint()</h4><h5 id="1）概述"><a href="#1）概述" class="headerlink" title="1）概述"></a>1）概述</h5><p>通过 ShapeDrawable.getPaint() 函数得到 ShapeDrawable 的 Paint 对象，并对其进行操作，效果就会立刻显示在 ShapeDrawable 上。这也意味着可以调用 Paint 中的所有函数；在自定义 Shape 时，可以调用 Canvas 的所有绘图方法。所以，ShapeDrawable 可以调用 Paint 和 Canvas 的所有方法，实现绘图的所有功能。</p><p>需要注意的地方：当 ShapeDrawable 的 Paint 调用 Shader 时，Shader 是从 ShapeDrawable 所在区域的左上角开始绘制的。</p><h5 id="2）Paint-setShader"><a href="#2）Paint-setShader" class="headerlink" title="2）Paint.setShader()"></a>2）Paint.setShader()</h5><p>下面举一个例子来证明我们的观点：Shader 是从 ShapeDrawable 所在区域的左上角开始绘制的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private ShapeDrawable mDrawable;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mDrawable = new ShapeDrawable(new RectShape());</div><div class="line">        mDrawable.setBounds(new Rect(100, 100, 500, 500));</div><div class="line">        BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">        options.inSampleSize = 2;</div><div class="line">        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head, options);</div><div class="line">        BitmapShader bitmapShader = new BitmapShader(bitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        mDrawable.getPaint().setShader(bitmapShader);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ef1d22e2930e7bee.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以看出，头像是在 TestView 控件的 Rect(100, 100, 500, 500) 位置绘制的，并不是从 TestView 的左上角开始绘制的，也不是从屏幕左上角开始绘制的。</p><h4 id="3-其他函数"><a href="#3-其他函数" class="headerlink" title="3. 其他函数"></a>3. 其他函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 设置透明度</div><div class="line">setAlpha(int alpha)</div><div class="line"></div><div class="line">// 设置 ColorFilter，是 ShapeDrawable 自带的函数</div><div class="line">setColorFilter(ColorFilter colorFilter)</div><div class="line"></div><div class="line">// 设置默认高度。当 Drawable 以 setBackgroundDrawable 及 setImageDrawable </div><div class="line">// 方式使用时，会使用默认宽度和高度来计算当前 Drawable 的大小和位置。</div><div class="line">// 如果不设置，则默认的宽高都是 -1px。详情请参考 10.1.4 节。</div><div class="line">setIntrinsicHeight(int height)</div><div class="line">// 设置默认宽度</div><div class="line">setIntrinsicWidth(int width)</div><div class="line"></div><div class="line">// 设置边距</div><div class="line">setPadding(Rect padding)</div></pre></td></tr></table></figure><h4 id="4-放大镜效果"><a href="#4-放大镜效果" class="headerlink" title="4. 放大镜效果"></a>4. 放大镜效果</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dd9f0e3494d2c3f8.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private static final int RADIUS = 200;      // 放大镜的半径</div><div class="line">    private static final int FACTOR = 3;        // 放大倍数</div><div class="line"></div><div class="line">    private ShapeDrawable mDrawable;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private final Matrix mMatrix = new Matrix();</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        final int x = (int) event.getX();</div><div class="line">        final int y = (int) event.getY();</div><div class="line">        // 这个位置表示的是绘制 Shader 的起始位置</div><div class="line">        mMatrix.setTranslate(RADIUS - x * FACTOR, RADIUS - y * FACTOR);</div><div class="line">        mDrawable.getPaint().getShader().setLocalMatrix(mMatrix);</div><div class="line"></div><div class="line">        mDrawable.setBounds(x - RADIUS, y - RADIUS, x + RADIUS, y + RADIUS);</div><div class="line">        invalidate();</div><div class="line">        return true;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        if (mBitmap == null) &#123;</div><div class="line">            Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">            mBitmap = Bitmap.createScaledBitmap(bmp, getWidth(), getHeight(), false);</div><div class="line">            Bitmap tempBmp = Bitmap.createScaledBitmap(mBitmap, mBitmap.getWidth() * FACTOR,</div><div class="line">                    mBitmap.getHeight() * FACTOR, true);</div><div class="line">            BitmapShader shader = new BitmapShader(tempBmp, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">            mDrawable = new ShapeDrawable(new OvalShape());</div><div class="line">            mDrawable.getPaint().setShader(shader);</div><div class="line">            mDrawable.setBounds(0, 0, RADIUS * 2, RADIUS * 2);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        canvas.drawBitmap(mBitmap, 0, 0, null);</div><div class="line">        mDrawable.draw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>说明：</p><h5 id="1）onDraw-函数部分"><a href="#1）onDraw-函数部分" class="headerlink" title="1）onDraw() 函数部分"></a>1）onDraw() 函数部分</h5><p>之所以将初始化代码放在 onDraw() 函数中，是因为我们需要把图片缩放到控件大小。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">mBitmap = Bitmap.createScaledBitmap(bmp, getWidth(), getHeight(), false);</div></pre></td></tr></table></figure></p><p>Bitmap.createScaledBitmap() 函数根据源图像生成一个指定宽度和高度的 Bitmap，这里就是指根据 bmp 创建一幅与当前控件同宽同高的图像，也就是将源图像缩放到当前控件的大小。</p><p>而 getWidth()、getHeight() 函数只有在调用 onLayout() 函数以后，这两个函数才能取到值的。</p><p>接下来创建 ShapeDrawable。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mDrawable = new ShapeDrawable(new OvalShape());</div><div class="line">mDrawable.setBounds(0, 0, RADIUS * 2, RADIUS * 2);</div></pre></td></tr></table></figure></p><p>这里创建一个椭圆形的 ShapeDrawable，而形成椭圆的矩形的宽高都是 RADIUS * 2，所以所形成的图形必然是一个圆形，且半径为 RADIUS。</p><p>最后是设置 BitmapShader 的过程。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Bitmap tempBmp = Bitmap.createScaledBitmap(mBitmap, </div><div class="line">        mBitmap.getWidth() * FACTOR, mBitmap.getHeight() * FACTOR, true);</div><div class="line">BitmapShader shader = new BitmapShader(tempBmp, Shader.TileMode.CLAMP, </div><div class="line">        Shader.TileMode.CLAMP);</div><div class="line">mDrawable.getPaint().setShader(shader);</div></pre></td></tr></table></figure></p><p>同样使用 Bitmap.createScaledBitmap() 函数创建一张放大 3 倍的图片。</p><h5 id="2）onTouchEvent-函数部分"><a href="#2）onTouchEvent-函数部分" class="headerlink" title="2）onTouchEvent() 函数部分"></a>2）onTouchEvent() 函数部分</h5><p>当手指有动作的时候，我们应当改变当前 ShapeDrawable 的显示位置。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mDrawable.setBounds(x - RADIUS, y - RADIUS, x + RADIUS, y + RADIUS);</div></pre></td></tr></table></figure></p><p>即以当前手指位置为中心，画一个圆。</p><p>最关键的是 Shader 如何移动到我们要显示的位置。我们讲过，Shader 的开始显示位置在 ShapeDrawable 的左上角。所以，如果我们不移动 Shape，那么显示出来的永远是图片的左上角部分。那如何将 Shader 移动到图片的对应点呢？</p><p>我们需要先找到当前手指位置放大 3 倍的图片上的对应点，然后以这个对应点为中心显示出半径为 RADIUS 的圆中的图形。</p><p>当前手指的位置是 (x, y)，那么放大 3 倍的图片上的对应点就是 (3x, 3y)。为了显示以放大 3 倍后的手指位置为中心的圆形区域，BitmapShader 需要向左和向上各移动多少呢？</p><p>首先，Shader 是从 ShapeDrawable 的左上角开始平铺的。也就是说，在初始状态下，ShapeDrawable 区域左上角一直显示的是 BitmapShader 的左上角(0, 0) 位置。我们在这里需要把 BitmapShader 向左上移动一段距离，以使 BitmapShader 中原来的 (3x, 3y) 点在 ShapeDrawable 区域中心。</p><p>第一步：我们可以将整个 BitmapShader 向左上移动 3x, 3y 的距离。由于在移动时，向右和向下是正值，所以左上移动的距离是 (-3x, -3y)，而移动后的 BitmapShader 左上角显示的是 (3x, 3y) 处的图像。</p><p>第二步：我们需要将左上角点显示的 (3x, 3y) 处的图像显示在 ShapeDrawable 区域中心，所以需要将原本在左上角 (3x, 3y) 点在向右下移动一个半径的距离。所以总移动的距离为 (-3x+RADIUS, -3y + RADIUS)。</p><p>即：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mMatrix.setTranslate(RADIUS - x * FACTOR, RADIUS - y * FACTOR);</div><div class="line">mDrawable.getPaint().getShader().setLocalMatrix(mMatrix);</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="10-1-4-自定义-Drawable"><a href="#10-1-4-自定义-Drawable" class="headerlink" title="10.1.4 自定义 Drawable"></a>10.1.4 自定义 Drawable</h3><p>在 Drawable 的子类无法通过已有的函数完成指定的绘图功能时，一般会选择自定义 Drawable 来实现。本节将通过自定义 Drawable 来实现圆角功能。</p><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>我们写一个类，继承自 Drawable，代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class TestDrawable extends Drawable &#123;</div><div class="line">    @Override</div><div class="line">    public void draw(@NonNull Canvas canvas) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setAlpha(int alpha) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setColorFilter(@Nullable ColorFilter colorFilter) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getOpacity() &#123;</div><div class="line">        return PixelFormat.TRANSLUCENT;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这 4 个函数时 Drawable 类里的虚函数，是必须实现的。</p><ul><li>draw() 函数是我们将会用到的，与 View 类似，传入的参数是一个 Canvas 对象，我们只需要调用 Canvas 的一些地方，效果就会直接显示在 Drawable 上。</li><li>setAlpha() 和 setColorFilter() 函数是非常容易实现的。当外层调用 TestDrawable 的这两个函数时，我们只需将对应的参数传给 TestDrawable 的 Paint 即可。</li><li>getOpacity()：当外部需要知道我们自定义的 TestDrawable 的显示模式时会调用这个函数。它有 4 个取值：PixelFormat.UNKNOWN，TRANSLUCENT，TRANSPARENT，OPAQUE。其中，PixelFormat.TRANSLUCENT 表示当前 TestDrawable 的绘图是具有 Alpha 通道的，即使用 TestDrawable 后，其底部的图像仍有可能看到；PixelFormat.TRANSPARENT 表示当前 TestDrawable 是完全透明的，其中什么都没画，如果使用 TestDrawable，则将完全显示其底部图像；PixelFormat.OPAQUE 表示当前的 TestDrawable 是完全没有 Alpha 通道的，使用 TestDrawable 后，其底部的图像将被完全覆盖，而只显示 TestDrawable 本身的图像；PixelFormat.UNKNOWN 表示未知。一般而言，如果我们不知道该如何返回，则直接返回 PixelFormat.TRANSLUCENT 是最靠谱的做法。</li></ul><h4 id="2-实现圆角-Drawable"><a href="#2-实现圆角-Drawable" class="headerlink" title="2. 实现圆角 Drawable"></a>2. 实现圆角 Drawable</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">public class TestDrawable extends Drawable &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private BitmapShader mBitmapShader;</div><div class="line">    private RectF mBound;</div><div class="line"></div><div class="line">    public TestDrawable(Bitmap bitmap) &#123;</div><div class="line">        mBitmap = bitmap;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void draw(@NonNull Canvas canvas) &#123;</div><div class="line">        canvas.drawRoundRect(mBound, 20, 20, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setAlpha(int alpha) &#123;</div><div class="line">        mPaint.setAlpha(alpha);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void setColorFilter(@Nullable ColorFilter colorFilter) &#123;</div><div class="line">        mPaint.setColorFilter(colorFilter);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int getOpacity() &#123;</div><div class="line">        // 是否具有透明度是由传入的 Bitmap 所决定的。</div><div class="line">        return PixelFormat.TRANSLUCENT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 根据边界创建一个与 Drawable 相同大小的 Bitmap 作为 Drawable 的 Shader</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void setBounds(int left, int top, int right, int bottom) &#123;</div><div class="line">        super.setBounds(left, top, right, bottom);</div><div class="line"></div><div class="line">        mBitmapShader = new BitmapShader(</div><div class="line">                Bitmap.createScaledBitmap(mBitmap, right - left, bottom - top, true),</div><div class="line">                Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line">        mBound = new RectF(left, top, right, bottom);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置 TestDrawable 的默认宽度</div><div class="line">     * @return int</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getIntrinsicWidth() &#123;</div><div class="line">        return mBitmap.getWidth();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 设置 TestDrawable 的默认高度</div><div class="line">     * @return int</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public int getIntrinsicHeight() &#123;</div><div class="line">        return mBitmap.getHeight();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-Drawable-的使用方法"><a href="#3-Drawable-的使用方法" class="headerlink" title="3. Drawable 的使用方法"></a>3. Drawable 的使用方法</h4><p>一般有两种使用方法：一种是通过 ImageView 的 setImageDrawable(drawable) 函数将其设置为 ImageView 的源图片；另一种是通过 View 的 setBackgroundDrawable(drawable) 函数将其设置为背景。</p><h5 id="1）setImageDrawable-drawable-函数"><a href="#1）setImageDrawable-drawable-函数" class="headerlink" title="1）setImageDrawable(drawable) 函数"></a>1）setImageDrawable(drawable) 函数</h5><p>先在布局中定义一个 ImageView 标签<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">    android:id=&quot;@+id/img&quot;</div><div class="line">    android:layout_width=&quot;100dp&quot;</div><div class="line">    android:layout_height=&quot;50dp&quot;</div><div class="line">    android:layout_margin=&quot;10dp&quot;</div><div class="line">    android:background=&quot;#FFFFFF&quot;</div><div class="line">    android:scaleType=&quot;center&quot;/&gt;</div></pre></td></tr></table></figure></p><p>在代码中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">        ImageView imageView = findViewById(R.id.img);</div><div class="line">        TestDrawable drawable = new TestDrawable(bitmap);</div><div class="line">        imageView.setImageDrawable(drawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2f8eb2e0056cb6b2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到，我们虽然在 TestDrawable 的 setBounds() 函数中将 Bitmap 缩放为整个边界大小，但是并没有覆盖整个 Bitmap，这是为什么呢？</p><p>在这里，我们使用 setImageDrawable(drawable) 函数来设置数据源，而源图片的显示大小是与 ImageView 的 scaleType 相关的。因为这里设置 scaleType=”center”，所以 ImageView 必然会居中缩放图片，然后将图片的显示位置通过 setBounds() 函数设置给 TestDrawable。下图展示了当前 Drawable 在不同的 scaleType 模式下的效果图。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-59955a6e7c542f66.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>布局如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:background=&quot;#EEE&quot;&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/img&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:background=&quot;#FFFFFF&quot;</div><div class="line">            android:scaleType=&quot;fitStart&quot;/&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/img2&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:background=&quot;#FFFFFF&quot;</div><div class="line">            android:scaleType=&quot;fitCenter&quot;/&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/img3&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:background=&quot;#FFFFFF&quot;</div><div class="line">            android:scaleType=&quot;fitEnd&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/img4&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:background=&quot;#FFFFFF&quot;</div><div class="line">            android:scaleType=&quot;centerInside&quot;/&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/img5&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:background=&quot;#FFFFFF&quot;</div><div class="line">            android:scaleType=&quot;centerCrop&quot;/&gt;</div><div class="line">        &lt;ImageView</div><div class="line">            android:id=&quot;@+id/img6&quot;</div><div class="line">            android:layout_width=&quot;100dp&quot;</div><div class="line">            android:layout_height=&quot;50dp&quot;</div><div class="line">            android:layout_margin=&quot;10dp&quot;</div><div class="line">            android:background=&quot;#FFFFFF&quot;</div><div class="line">            android:scaleType=&quot;center&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/img7&quot;</div><div class="line">        android:layout_width=&quot;100dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:layout_margin=&quot;10dp&quot;</div><div class="line">        android:background=&quot;#FFFFFF&quot;</div><div class="line">        android:scaleType=&quot;fitXY&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><h5 id="2）setBackgroundDrawable-drawable-函数"><a href="#2）setBackgroundDrawable-drawable-函数" class="headerlink" title="2）setBackgroundDrawable(drawable) 函数"></a>2）setBackgroundDrawable(drawable) 函数</h5><p>布局：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    android:id=&quot;@+id/tv&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:layout_margin=&quot;10dp&quot;</div><div class="line">    android:text=&quot;欢迎光临先先生的 blog&quot;</div><div class="line">    android:textColor=&quot;#FF0000&quot;/&gt;</div></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Bitmap bitmap = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">TestDrawable drawable = new TestDrawable(bitmap);</div><div class="line">TextView tv = findViewById(R.id.tv);</div><div class="line">tv.setBackgroundDrawable(drawable);</div></pre></td></tr></table></figure></p><p>效果：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-27b56dc51d2daac6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以看出，宽度使用的是 TextView 的宽度，而高度则使用的是 TestDrawable 的默认高度。之所以会出现这样的效果，是因为在使用 setBackgroundDrawable() 函数设置自定义 Drawable 时，自定义 Drawable 的宽度和高度计算是将 View 的宽、高和自定义 Drawable 的宽、高进行对比，哪个值大就用哪个值作为控件的宽、高的。而这个最终值就会通过 setBounds() 函数传递给自定义 Drawable。</p><h4 id="4-自定义-Drawable-与自定义-View-的区别"><a href="#4-自定义-Drawable-与自定义-View-的区别" class="headerlink" title="4. 自定义 Drawable 与自定义 View 的区别"></a>4. 自定义 Drawable 与自定义 View 的区别</h4><p>自定义 Drawable 的使用场景很明确，要么使用在可以设置 Drawable 的函数中（比如 setImageDrawable() 等），要么替代 Bitmap 用于 View 中（比如放大镜效果）。</p><p>而自定义 View 的功能十分强大，自定义 Drawable 和 Bitmap 无法完成的功能可以使用自定义 View 来完成。</p><p><div id="jump5"></div></p><h3 id="10-1-5-Drawable-与-Bitmap-的对比"><a href="#10-1-5-Drawable-与-Bitmap-的对比" class="headerlink" title="10.1.5 Drawable 与 Bitmap 的对比"></a>10.1.5 Drawable 与 Bitmap 的对比</h3><h4 id="1-定义对比"><a href="#1-定义对比" class="headerlink" title="1. 定义对比"></a>1. 定义对比</h4><p>Bitmap 称作位图，一般位图的文件格式扩展名为 .bmp，当然编码器也有很多，如 RGB565、RGB8888。作为一种逐像素的显示对象，其执行效率高；但存储效率低。</p><p>Drawable 作为 Android 下通用的图形对象，它可以装载常用格式的图像，比如 GIF、PNG、JPG 和 BMP，还提供了一些高级的可视化对象，比如渐变、图形等。</p><p>也就是说，Bitmap 是 Drawable，而 Drawable 不一定是 Bitmap。</p><h4 id="2-指标对比"><a href="#2-指标对比" class="headerlink" title="2. 指标对比"></a>2. 指标对比</h4><table><thead><tr><th style="text-align:left">对比项</th><th style="text-align:left">显示清晰度</th><th style="text-align:left">占用内存</th><th style="text-align:left">支持缩放</th><th style="text-align:left">支持色相色差调整</th><th style="text-align:left">支持旋转</th><th style="text-align:left">支持透明色</th><th style="text-align:left">绘制速度</th><th style="text-align:left">支持像素操作</th></tr></thead><tbody><tr><td style="text-align:left">Bitmap</td><td style="text-align:left">相同</td><td style="text-align:left">大</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:left">慢</td><td style="text-align:left">是</td></tr><tr><td style="text-align:left">Drawable</td><td style="text-align:left">相同</td><td style="text-align:left">小</td><td style="text-align:left">是</td><td style="text-align:left">否</td><td style="text-align:left">是</td><td style="text-align:left">是</td><td style="text-align:left">快</td><td style="text-align:left">否</td></tr></tbody></table><h4 id="3-绘图便利性对比"><a href="#3-绘图便利性对比" class="headerlink" title="3. 绘图便利性对比"></a>3. 绘图便利性对比</h4><p>Drawable 有很多派生类，通过这些派生类可以很容易地生成渐变、层叠等效果。单从这一方面而言，Drawable 比 Bitmap 有优势。</p><p>但如果仅仅用作空白画布来绘图，那么 Drawable 构造和使用起来则不如 Bitmap 方便。</p><h4 id="4-使用简易性对比"><a href="#4-使用简易性对比" class="headerlink" title="4. 使用简易性对比"></a>4. 使用简易性对比</h4><p>Drawable 子类是自带画笔，调用 Paint 的函数很方便。但使用 Canvas 的函数并不方便，所以 Drawable 的子类一般只用来完成它固有的功能。如果想要使用 Drawable 绘图，则建议自定义 Drawable。</p><p>而如果想在 Bitmap 上作画，则一般使用类似如下的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Canvas canvas = new Canvas(bitmap);</div><div class="line">Paint paint = new Paint();</div><div class="line">paint.setColor(Color.RED);</div><div class="line">canvas.drawCircle(0, 0, 100, paint);</div></pre></td></tr></table></figure></p><p>从代码中可以看到，如果 Bitmap 想要作为画布，则需要通过 Canvas canvas = new Canvas(bitmap); 来创建 Canvas 对象，而通过生成的 Canvas 对象，所绘制的内容是直接画在 Bitmap 上的。而且画笔也是可以随意定义的。</p><p>所以，就使用简易性而言，Bitmap 确实要比 Drawable 易用。</p><h4 id="5-使用方式对比"><a href="#5-使用方式对比" class="headerlink" title="5. 使用方式对比"></a>5. 使用方式对比</h4><p>Bitmap 主要靠在 View 中通过 Canvas.drawBitmap() 函数画出来；而 Drawable 不仅能在 View 中通过 Drawable.draw(Canvas canvas) 函数画出来，也可以通过 setImageBackground()、setBackgroundDrawable() 等设置 Drawable 资源的函数来设置。</p><p>总结：</p><ul><li>Bitmap 在占用内存和绘制速度上不如 Drawable 有优势。</li><li>Bitmap 绘图方便。</li><li>Drawable 有一些子类，可以方便地完成一些绘图功能。</li></ul><p>那么，Drawable、Bitmap、自定义 View 在哪些情况下使用呢？</p><ul><li>Bitmap 只在一种情况下使用，即在 View 中需要自己生成图像时，才会使用 Bitmap 绘图。绘图后的结果保存在这个 Bitmap 中，供自己定义 View 使用。比如根据源 Bitmap 生成它的倒影，在使用 Xfermode 来融合倒转的图片原图与渐变的图片时，就需要根据图片大小生成一张同样大小的渐变图片，这时必须使用 Bitmap。</li><li>当使用 Drawable 的子类完成一些固有功能时，优先选用 Drawable。</li><li>当需要使用 setImageDrawable()、setBackgroundDrawable() 等可以直接设置 Drawable 资源的函数时，只能选用 Drawable。</li><li>在自定义 View 中指定位置显示图形功能时，既可以使用 Drawable，也可以使用 Bitmap。</li><li>除 Drawable 和 Bitmap 以外的地方，都可以使用自定义 View 来实现。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.4 精通自定义 View 之 Canvas 与图层——恢复画布</title>
      <link href="/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/"/>
      <url>/2019/07/09/Custom%20View/09.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E6%81%A2%E5%A4%8D%E7%94%BB%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>恢复画布有两个函数：restore() 和 restoreToCount(int count)。<br>其中，restore() 函数的作用就是把回退栈中的最上层画布状态出栈，恢复画布状态。在 1.5.2 节中已经详细地说明了 restore() 函数的用法，这里就不再赘述了。</p><p><div id="jump1"></div></p><h3 id="9-4-1-restoreToCount-int-count"><a href="#9-4-1-restoreToCount-int-count" class="headerlink" title="9.4.1 restoreToCount(int count)"></a>9.4.1 restoreToCount(int count)</h3><p>在 save()、saveLayer()、saveLayerAlpha() 函数保存画布后，都会返回一个 ID 值，这个 ID 值表示当前保存的画布信息的栈层索引（从 0 开始）。比如，保存在第三层，则返回 2。</p><p>而 restoreToCount() 函数的声明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void restoreToCount(int saveCount);</div></pre></td></tr></table></figure></p><p>它表示一直退栈，一直把指定索引的画布信息退出来，之后的栈最上层的画布信息将作为最新的画布。比如，我们开始的栈已经有两层，然后调用如下代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">int id = canvas.saveLayer(0, 0, etWidth(), getHeight(), mPaint, </div><div class="line">                          Canvas.ALL_SAVE_FLAG);</div><div class="line">canvas.restoreToCount(id);</div></pre></td></tr></table></figure></p><p>调用 canvas.saveLayer() 函数后，新保存的画布放在了第三层，返回的 ID 的值是对应的索引，即 2。而 canvas.restoreToCount(id); 则表示一直退栈，直到把索引为 2 的栈层给退出去，留下来的栈顶层信息将作为最新的画布。</p><p>下面我们举个例子来看下。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private String TAG = &quot;XIAN&quot;;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int id1 = canvas.save();</div><div class="line">        canvas.clipRect(0, 0, 800, 800);</div><div class="line">        canvas.drawColor(Color.RED);</div><div class="line">        Log.d(TAG, &quot;count:&quot; + canvas.getSaveCount() + &quot; id1:&quot; + id1);</div><div class="line"></div><div class="line">        int id2 = canvas.saveLayer(0, 0, getWidth(), getHeight(), mPaint, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.clipRect(100, 100, 700, 700);</div><div class="line">        canvas.drawColor(Color.GREEN);</div><div class="line">        Log.d(TAG, &quot;count:&quot; + canvas.getSaveCount() + &quot; id2:&quot; + id2);</div><div class="line"></div><div class="line">        int id3 = canvas.saveLayerAlpha(0, 0, getWidth(), getHeight(), 0xF0, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.clipRect(200, 200, 600, 600);</div><div class="line">        canvas.drawColor(Color.YELLOW);</div><div class="line">        Log.d(TAG, &quot;count:&quot; + canvas.getSaveCount() + &quot; id3:&quot; + id3);</div><div class="line"></div><div class="line">        int id4 = canvas.save();</div><div class="line">        canvas.clipRect(300, 300, 500, 500);</div><div class="line">        canvas.drawColor(Color.BLUE);</div><div class="line">        Log.d(TAG, &quot;count:&quot; + canvas.getSaveCount() + &quot; id4:&quot; + id4);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 onDraw() 函数中，连续对 Canvas 进行裁剪，并且在裁剪后在当前画布上涂一层不同的颜色，然后把当前栈的层数和最高层的索引打印出来。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f5f4fed3a09cabcd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-93bbe705a86d91d1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志"></p><p>在整段代码的最后添加 canvas.restoreToCount(id3);，然后把整块画布涂成灰色。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line"></div><div class="line">    ...</div><div class="line">    </div><div class="line">    canvas.restoreToCount(id3);</div><div class="line">    canvas.drawColor(Color.GRAY);</div><div class="line">    Log.d(TAG, &quot;count:&quot; + canvas.getSaveCount());</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4d6ecaa4ee57352e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b94b23b3f3123f89.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志"></p><p>从代码中可以看出，在调用 canvas.restoreToCount(id3) 函数后，将恢复到生成 id3 之前的画布状态，即是 (100, 100, 700, 700)。</p><p><div id="jump2"></div></p><h3 id="9-4-2-restore-和-restoreToCount-int-count-的关系"><a href="#9-4-2-restore-和-restoreToCount-int-count-的关系" class="headerlink" title="9.4.2 restore() 和 restoreToCount(int count) 的关系"></a>9.4.2 restore() 和 restoreToCount(int count) 的关系</h3><p>这两个函数针对的是同一个栈，所以完全可以通用。不同的是，restore() 函数默认将栈顶内容退出还原画布；而 restoreToCount(int count) 函数则是一直退栈，直到把指定索引的画布信息退出来，之后的栈最上层的画布信息将作为最新的画布。</p><p>结论：</p><ul><li>restore() 的含义是把回退栈中的最上层画布状态出栈，恢复画布状态。restoreToCount(int count) 的含义是一直退栈，直到把指定索引的画布信息退出来，将此之前的所有动作都恢复。</li><li>无论哪种 save 函数、哪个 FLAG，保存画布时使用的都是同一个栈。</li><li>restore() 与 restoreToCount(int count) 针对的都是同一个栈，所以完全可以通用。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.3 精通自定义 View 之 Canvas 与图层——Flag 的具体含义</title>
      <link href="/2019/07/09/Custom%20View/09.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94Flag%20%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/"/>
      <url>/2019/07/09/Custom%20View/09.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94Flag%20%E7%9A%84%E5%85%B7%E4%BD%93%E5%90%AB%E4%B9%89/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>在 Canvas 中有如下几个 save 系列函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public int save()</div><div class="line">public int save(int saveFlags)</div><div class="line">public int saveLayer(RectF bounds, Paint paint, int saveFlags)</div><div class="line">public int saveLayer(float left, float top, float right, float bottom,Paint paint, int saveFlags)</div><div class="line">public int saveLayerAlpha(RectF bounds, int alpha, int saveFlags)</div><div class="line">public int saveLayerAlpha(float left, float top, float right, float bottom,int alpha, int saveFlags)</div></pre></td></tr></table></figure></p><p>可以看到，flag 参数在诸多函数中都有使用，这里我们先关注 save 的两个构造函数和 saveLayer 的两个构造函数。我们知道，二者的不同之处在于，saveLayer() 函数会新建一块画布，而 save() 函数则不会新建画布。它们都具有 Flag（标识），这些 Flag（标识）的含义和适用范围如下表所示。</p><table><thead><tr><th style="text-align:left">Flag</th><th style="text-align:left">含义</th><th style="text-align:left">适用范围</th></tr></thead><tbody><tr><td style="text-align:left">ALL_SAVE_FLAG</td><td style="text-align:left">保存所有的标识</td><td style="text-align:left">save()、saveLayer()</td></tr><tr><td style="text-align:left">MATRIX_SAVE_FLAG</td><td style="text-align:left">仅保存 Canvas 的 matrix 数组</td><td style="text-align:left">save()、saveLayer()</td></tr><tr><td style="text-align:left">CLIP_SAVE_FLAG</td><td style="text-align:left">仅保存 Canvas 的当前大小</td><td style="text-align:left">save()、saveLayer()</td></tr><tr><td style="text-align:left">HAS_ALPHA_LAYER_SAVE_FLAG</td><td style="text-align:left">标识新建的 bmp 具有透明度，在与上层画布结合时，透明位置显示上图图像,与 FULL_COLOR_LAYER_SAVE_FLAG 冲突，若同时指定，则以 HAS_ALPHA_LAYER_SAVE_FLAG 为主</td><td style="text-align:left">saveLayer()</td></tr><tr><td style="text-align:left">FULL_COLOR_LAYER_SAVE_FLAG</td><td style="text-align:left">标识新建的 bmp 颜色完全独立，在与上层画布结合时，先清空上层画布再覆盖上去</td><td style="text-align:left">saveLayer()</td></tr><tr><td style="text-align:left">CLIP_TO_LAYER_SAVE_FLAG</td><td style="text-align:left">在保存图层前先把当前画布根据 bounds 裁剪，与 CLIP_SAVE_FLAG 冲突，若同时指定，则以 CLIP_SAVE_FLAG为主</td><td style="text-align:left">saveLayer()</td></tr></tbody></table><p>从上面的表格中可以看到，ALL_SAVE_FLAG、MATRIX_SAVE_FLAG、CLIP_SAVE_FLAG 是 save()、saveLayer() 函数共用的。而另外三个 Flag 是 saveLayer() 函数专用的。</p><p>我们逐个解析下它们的不同之处。在讲解之前，先考虑一下：如果让我们保存一块画布的状态，以便恢复，则需要保存哪些内容呢？</p><p>第一个是位置信息，第二个是大小信息，好像除此之外也没什么了。位置信息对应的是 MATRIX_SAVE_FLAG，大小信息对应的是 CLIP_SAVE_FLAG，这是 save() 和 saveLayer() 函数所共用的标识。而 saveLayer() 函数专用的三个标识用于指定 saveLayer() 函数新建的画布具有哪种特性，而不是保存画布的范畴。</p><h4 id="注意：以上内容已过时，这些标志已在-API-28-中删除。带有-Flag-的构造函数在-API-26-被标为已过时，不建议使用。且新的不带-Flag-参数的构造函数默认指定标识为-ALL-SAVE-FLAG。详情请参见此处。"><a href="#注意：以上内容已过时，这些标志已在-API-28-中删除。带有-Flag-的构造函数在-API-26-被标为已过时，不建议使用。且新的不带-Flag-参数的构造函数默认指定标识为-ALL-SAVE-FLAG。详情请参见此处。" class="headerlink" title="注意：以上内容已过时，这些标志已在 API 28 中删除。带有 Flag 的构造函数在 API 26 被标为已过时，不建议使用。且新的不带 Flag 参数的构造函数默认指定标识为 ALL_SAVE_FLAG。详情请参见此处。"></a>注意：以上内容已过时，这些标志已在 API 28 中删除。带有 Flag 的构造函数在 API 26 被标为已过时，不建议使用。且新的不带 Flag 参数的构造函数默认指定标识为 ALL_SAVE_FLAG。<a href="https://developer.android.google.cn/reference/android/graphics/Canvas" target="_blank" rel="external">详情请参见此处。</a></h4>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.2 精通自定义 View 之 Canvas 与图层——图层与画布</title>
      <link href="/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/"/>
      <url>/2019/07/09/Custom%20View/09.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E5%9B%BE%E5%B1%82%E4%B8%8E%E7%94%BB%E5%B8%83/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>前面讲过 Canvas 的 save() 和 restore() 函数，除这两个函数以外，还有其他一些函数来保存和恢复画布状态。</p><p><div id="jump1"></div></p><h3 id="9-2-1-saveLayer-函数"><a href="#9-2-1-saveLayer-函数" class="headerlink" title="9.2.1 saveLayer() 函数"></a>9.2.1 saveLayer() 函数</h3><p>saveLayer 有两个构造函数，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 保存指定矩形区域的canvas内容</div><div class="line"> */</div><div class="line">public int saveLayer(RectF bounds, Paint paint, int saveFlags)</div><div class="line">public int saveLayer(float left, float top, float right, float bottom,</div><div class="line">                     Paint paint, int saveFlags)</div></pre></td></tr></table></figure></p><p>参数：</p><ul><li>RectF bounds：要保存的区域所对应的矩形对象。</li><li>int saveFlags：取值有 ALL_SAVE_FLAG、MATRIX_SAVE_FLAG、CLIP_SAVE_FLAG、HAS_ALPHA_LAYER_SAVE_FLAG、FULL_COLOR_LAYER_SAVE_FLAG、 和<br>CLIP_TO_LAYER_SAVE_FLAG，其中 ALL_SAVE_FLAG 表示保存全部内容，这些标识的具体意义我们后面会具体讲。</li></ul><p>第二个构造函数实际与第一个是一样的，只不过它是根据 4 个点来构造一个矩形。下面以 Xfermode 为例，来看看 saveLayer() 函数都做了什么。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap dstBmp;</div><div class="line">    private Bitmap srcBmp;</div><div class="line">    private int width = 400;</div><div class="line">    private int height = 400;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        dstBmp = makeBitmap(width, height, 0xFFFFCC44, &quot;oval&quot;);</div><div class="line">        srcBmp = makeBitmap(width, height, 0xFF66AAFF, &quot;rect&quot;);</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Bitmap makeBitmap(int w, int h, int color, String type) &#123;</div><div class="line">        Bitmap bmp = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bmp);</div><div class="line">        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        paint.setColor(color);</div><div class="line">        if (&quot;oval&quot;.equals(type)) &#123;</div><div class="line">            canvas.drawOval(new RectF(0, 0, w, h), paint);</div><div class="line">        &#125; else &#123;</div><div class="line">            canvas.drawRect(0, 0, w, h, paint);</div><div class="line">        &#125;</div><div class="line">        return bmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawColor(Color.GREEN);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, width * 2, height * 2,</div><div class="line">                null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.drawBitmap(dstBmp, 0, 0, mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(srcBmp, width / 2f, height / 2f, mPaint);</div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>这段代码我们应该很熟悉，这是在讲解 setXfermode() 函数时的示例代码，但在调用 saveLayer() 函数前把整个屏幕画成了绿色，效果图如下。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7c8c4acbacc0ce72.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>那么问题来了，如果我们把 saveLayer() 函数去掉，则会怎样？代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.drawColor(Color.GREEN);</div><div class="line">    canvas.drawBitmap(dstBmp, 0, 0, mPaint);</div><div class="line">    mPaint.setXfermode(mMode);</div><div class="line">    canvas.drawBitmap(srcBmp, width / 2f, height / 2f, mPaint);</div><div class="line">    mPaint.setXfermode(null);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2d5f53498b9e95ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到，效果居然不一样。先来回顾下 Mode.SRC_IN 模式的效果：在处理源图像时，以显示源图像为主，在相交时利用目标图像的透明度来改变源图像的透明度和饱和度；当目标图像透明度为 0 时，源图像就完全不显示。</p><p>再回过来看结果，第一个结果是对的，因为除与圆相交以外的区域透明度都是 0，而第二个结果怎么变成了这样，源图像为什么全部都显示出来了？</p><h4 id="1-调用-saveLayer-函数时的绘图流程"><a href="#1-调用-saveLayer-函数时的绘图流程" class="headerlink" title="1. 调用 saveLayer() 函数时的绘图流程"></a>1. 调用 saveLayer() 函数时的绘图流程</h4><p>在调用 saveLayer() 函数时，会生成一个全新的画布（Bitmap），这块画布的大小就是我们指定的所要保存区域的大小。新生成的画布是全透明的，在调用 saveLayer() 函数后所有的绘图操作都是在这个画布上进行的。</p><p>我们讲过，在利用 Xfermode 画源图像时，会把之前画布上所有的内容都做为目标图像，而在调用 saveLayer() 函数新生成的画布上，只有 dstBmp 对应的圆形。所以，除与圆形相交之外的位置都是空白像素。</p><p>对于 Xfermode 而言，在绘图完成之后，会把调用 saveLayer() 函数所生成的透明画布覆盖在原来的画布上面，以形成最终的显示结果。</p><p>此时的 Xfermode 的合成过程如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-89741e0db7478124?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>中间的透明画布就是调用 saveLayer() 函数自动生成的，最上方的透明图层是调用 drawBitmap() 函数生成的。我们知道，每次调用 canvas.drawXXX 系列函数，都会生成一个透明层来专门绘制这个图形，而每次生成的图层都会叠加到最近的画布上。因为我们在这里对源图像应用了 Xfermode 算法，所以在叠加到就近的调用 saveLayer() 函数生成的画布上时，会进行计算。在新建的画布上绘制完成以后，整体覆盖在原始画布上显示出来。</p><p>正是因为在使用 Xfermode 计算时，目标图像是绘制在新建的透明画布上的，所以除圆形以外的区域全部是透明像素，最终的显示结果是正确的。</p><h4 id="2-没有-saveLayer-函数时的绘图流程"><a href="#2-没有-saveLayer-函数时的绘图流程" class="headerlink" title="2. 没有 saveLayer() 函数时的绘图流程"></a>2. 没有 saveLayer() 函数时的绘图流程</h4><p>在第二个示例中，唯一不同的就是把 saveLayer() 函数去掉了。</p><p>在去掉 saveLayer() 函数后，就不会新建画布了。当然，所有的绘图操作都会在原始画布上进行。</p><p>由于先把整块画布染成了绿色，再画上一个圆形，所有在应用 Xfermode 来画源图像的时候，在目标画布上是没有透明像素的。这也就不难解释结果为什么是这样的。</p><p>此时的 Xfermode 合成过程如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-44689d53676ffb76?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>由于没有调用 saveLayer() 函数，所以圆形是直接画在原始画布上的，而当矩形与其相交时，就是直接与原始画布上的所有图像做计算的。</p><blockquote><p>结论：调用 saveLayer() 函数会创建一个全新的透明画布，大小与指定保存的区域大小一致，其后的绘图操作都放在这块画布上进行。在绘制结束后，会直接盖在原始画布上显示。</p></blockquote><p><div id="jump2"></div></p><h3 id="9-2-2-画布与图层"><a href="#9-2-2-画布与图层" class="headerlink" title="9.2.2 画布与图层"></a>9.2.2 画布与图层</h3><p>上面讲到了画布（Bitmap）、图层（Layer）和 Canvas 的概念，下面具体讲解下它们之间的关系。</p><ul><li>图层（Layer）：每一次调用 canvas.drawXXX 系列函数时，都会生成一个透明图层来专门来绘制这个图形，比如前面在绘制矩形时的透明图层就是这个概念。</li><li>画布（Bitmap）：每块画布都是一个 Bitmap，所有的图像都是画在 Bitmap上的。我们知道，每次调用 canvas.drawXXX 函数时，都会生成一个专用的透明图层来绘制这个图形，绘制完成以后，就覆盖在画布上。所以，如果我们连续调用 5 个 draw 函数，就会生成 5 个透明图层，画完之后依次覆盖在画布上显示。画布有两种：第一种是 View 的原始画布，是通过 onDraw(Canvas canvas) 函数传入的，参数中的 canvas 就对应的是 View 的原始画布，控件的背景就是画在这块画布上的；另一种是人造画布，通过 saveLayer()、new Canvas(bitmap) 等函数来人为地新建一块画布。尤其是saveLayer() 函数，一旦调用 saveLayer() 函数新建一块画布，以后的所有 draw 函数所画的图像都是画在这块画布上的，只有在调用 restore()、resoreToCount() 函数以后，才会返回到原始画布上进行绘制。</li><li>Canvas：Canvas 是画布的表现形式，我们所要绘制的任何东西都是利用 Canvas 来实现的。在代码中，Canvas 的生成方式只有一种——new Canvas(bitmap)，即只能通过 Bitmap 生成，无论是原始画布还是人造画布，所有的画布最后都是通过 Canvas 画到 Bitmap 上的。可以把 Canvas 理解成绘图工具，利用它所封装的绘图函数来绘图，而所要绘制的内容最后是画在 Bitmap 上的。所以，如果我们利用 Canvas.clipXXX 系列函数将画布进行裁剪，其实就是把它对应的 Bitmap 进行裁剪，与之对应的结果就是再利用 Canvas 绘图的区域会减小。</li></ul><p><div id="jump3"></div></p><h3 id="9-2-3-saveLayer-和-saveLayerAlpha-函数的用法"><a href="#9-2-3-saveLayer-和-saveLayerAlpha-函数的用法" class="headerlink" title="9.2.3 saveLayer() 和 saveLayerAlpha() 函数的用法"></a>9.2.3 saveLayer() 和 saveLayerAlpha() 函数的用法</h3><h4 id="1-saveLayer-函数的用法"><a href="#1-saveLayer-函数的用法" class="headerlink" title="1. saveLayer() 函数的用法"></a>1. saveLayer() 函数的用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public int saveLayer(RectF bounds, Paint paint, int saveFlags)</div><div class="line">public int saveLayer(float left, float top, float right, float bottom, </div><div class="line">                     Paint paint, int saveFlags)</div></pre></td></tr></table></figure><p>参数：</p><ul><li>RectF bounds：新建画布的尺寸。</li><li>Paint paint：画笔实例。</li><li>int saveFlags：新建画布的标识（详见 9.3 节）。</li></ul><p>saveLayer() 函数会新建一块画布（Bitmap），后续的所有操作都是在这块画布上进行的。下面我们来看一下 saveLayer() 函数使用中的注意事项。</p><h5 id="1）saveLayer-函数后的所有动作都只对新建画布有小。"><a href="#1）saveLayer-函数后的所有动作都只对新建画布有小。" class="headerlink" title="1）saveLayer() 函数后的所有动作都只对新建画布有小。"></a>1）saveLayer() 函数后的所有动作都只对新建画布有小。</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), mPaint, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.skew(1.732f, 0);</div><div class="line">        canvas.drawRect(0, 0, 100, 100, mPaint);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3c785d4027271de4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 onDraw() 函数中，我们先在 View 的原始画布上画上了小狗的图像，然后利用 saveLayer() 函数新建了一个图层，然后利用 canvas.skew() 函数将新建的图层水平斜切 45°，所以之后画的矩形(0,0,100,100) 就是斜切的。</p><p>而正是由于在新建画布后的各种操作都是针对新建画布进行的，所以不会对以前的画布产生影响。从效果图中也可以明显看出，将画布水平斜切 45° 也只影响了 saveLayer() 函数的新建画布，并没有对之前的原始画布产生影响。</p><h5 id="2）通过-Rect-指定的矩形大小就是新建的画布大小。"><a href="#2）通过-Rect-指定的矩形大小就是新建的画布大小。" class="headerlink" title="2）通过 Rect 指定的矩形大小就是新建的画布大小。"></a>2）通过 Rect 指定的矩形大小就是新建的画布大小。</h5><p>在 saveLayer() 函数的参数中，可以通过指定 Rect 对象或者指定 4 个点来指定一个矩形，这个矩形的大小就是新建画布的大小。我们举例来看一下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line"></div><div class="line">    int layerId = canvas.saveLayer(0, 0, 200, 200, mPaint, </div><div class="line">                                   Canvas.ALL_SAVE_FLAG);</div><div class="line">    canvas.drawColor(Color.GRAY);</div><div class="line">    canvas.restoreToCount(layerId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d2d2bbfed7459587.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在绘图时，我们先把小狗图片绘制在原始画布上的，然后新建一个大小为 (0,0,200,200) 的透明画布，并将画布填充为灰色。由于画布大小只有 (0,0,200,200)，所以从效果图中可以看出，也只有这一小部分区域被填充为灰色。</p><p>有些读者可能会想，为了避免画布太小而出现问题，每次都新建一块屏幕大小的画布多好。这样虽然是不会出现问题，但屏幕大小的画布需要多少存储空间呢？按一个像素需要 8bit 存储空间算，分辨率为 1024 像素 x 768 像素的机器，所占用的存储空间就是1024 <em> 768 </em> 8=6.2MB。所以我们在使用 saveLayer() 函数新建画布时，一定要选择适当的大小，否则你的 APP 很可能 OOM。</p><blockquote><p>注意：在前面示例中都是直接新建全屏画布的，这只是为了方便展示，在现实使用中一定要创建适当的画布大小。</p></blockquote><h4 id="2-saveLayerAlpha-函数的用法"><a href="#2-saveLayerAlpha-函数的用法" class="headerlink" title="2. saveLayerAlpha() 函数的用法"></a>2. saveLayerAlpha() 函数的用法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public int saveLayerAlpha(RectF bounds, int alpha, int saveFlags)</div><div class="line">public int saveLayerAlpha(float left, float top, float right, float bottom,</div><div class="line">                          int alpha, int saveFlags)</div></pre></td></tr></table></figure><p>相比 saveLayer() 函数，多了一个 alpha 参数，用于指定新建画布的透明度，取值范围为 0~255，可以用十六进制的 0xAA 表示，取 0 时表示全透明。</p><p>这个函数的意义也是在调用的时候会新建一块画布，以后的各种绘图操作都作用在这个画布上，但这个画布是有透明度的，透明度就是通过 alpha 参数指定的。</p><p>将上述示例中的 saveLayer() 函数改为 saveLayerAlpha() 函数来重新作图。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line"></div><div class="line">    int layerId = canvas.saveLayerAlpha(0, 0, 200, 200, 100, </div><div class="line">                                        Canvas.ALL_SAVE_FLAG);</div><div class="line">    canvas.drawColor(Color.WHITE);</div><div class="line">    canvas.restoreToCount(layerId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dd481599deaa6cdd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在调用 saveLayerAlpha() 函数时，将新建画布的透明度设置为 100%，然后将画布同样填充为白色。从效果图中可以看出，在新建图像与上层画布合成以后，是具有透明度的。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09.1 精通自定义 View 之 Canvas 与图层——获取 Canvas 对象的方法</title>
      <link href="/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/"/>
      <url>/2019/07/09/Custom%20View/09.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Canvas%20%E4%B8%8E%E5%9B%BE%E5%B1%82%E2%80%94%E2%80%94%E8%8E%B7%E5%8F%96%20Canvas%20%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="9-1-1-方法一：重写-onDraw-、dispatchDraw-函数"><a href="#9-1-1-方法一：重写-onDraw-、dispatchDraw-函数" class="headerlink" title="9.1.1 方法一：重写 onDraw()、dispatchDraw() 函数"></a>9.1.1 方法一：重写 onDraw()、dispatchDraw() 函数</h3><p>一般在自定义 View 时，我们都会重写 onDraw()、dispatchDraw() 函数。先来看一下 onDraw()、dispatchDraw() 函数的定义，如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">&#125;</div><div class="line"> </div><div class="line">protected void dispatchDraw(Canvas canvas) &#123;</div><div class="line">    super.dispatchDraw(canvas);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>可以看到，onDraw()、dispatchDraw() 函数在传入的参数中都有一个 Canvas 对象。这个 Canvas 对象是 View 中的 Canvas 对象，利用这个 Canvas 对象绘图，效果会直接反映在 View 中。</p><p>onDraw()、dispatchDraw() 函数的区别如下：</p><ul><li>onDraw() 函数用于绘制视图自身。</li><li>dispatchDraw() 函数用于绘制子视图。</li></ul><p>无论是 View 还是 ViewGroup 对这连个函数的调用顺序都是 onDraw() —&gt; dispatchDraw()。</p><p>但在 ViewGroup 中，当它有背景的时候就会调用 onDraw() 函数，否则就会跳过 onDraw() 函数，直接调用 dispatchDraw() 函数。所以，如果要在 ViewGroup 中绘图，往往会重写 dispatchDraw() 函数。</p><p>在 View 中，onDraw() 和 dispatchDraw() 函数都会被调用的，所以我们无论把绘图代码放在 onDraw() 函数或者 dispatchDraw() 函数中都是可以得到效果的。但是，由于 dispatchDraw() 函数用于绘制子控件，所以，原则来上讲，在绘制 View 控件时，我们会重写 onDraw() 函数。</p><blockquote><p>总结：在绘制 View 控件时，需要重写 onDraw() 函数；在绘制 ViewGroup 时，需要重写 dispatchDraw() 函数。</p></blockquote><p><div id="jump2"></div></p><h3 id="9-1-2-方法二：使用-Bitmap-创建"><a href="#9-1-2-方法二：使用-Bitmap-创建" class="headerlink" title="9.1.2 方法二：使用 Bitmap 创建"></a>9.1.2 方法二：使用 Bitmap 创建</h3><h4 id="1-构建方法"><a href="#1-构建方法" class="headerlink" title="1. 构建方法"></a>1. 构建方法</h4><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Canvas c = new Canvas(bitmap);</div></pre></td></tr></table></figure></p><p>或<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Canvas c = new Canvas();</div><div class="line">c.setBitmap(bitmap);</div></pre></td></tr></table></figure></p><p>其中，bitmap 可以从图片中加载，也可以自行创建。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 方法一：新建一个空白 bitmap</div><div class="line">Bitmap bmp = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</div><div class="line">// 方法二：从图片中加载</div><div class="line">Bitmap bmp = BitmapFactory.decodeResource(getResources(), R.drawable.img, null);</div></pre></td></tr></table></figure></p><p>除这两种方法以外，还有其他几种方法（比如构造一个具有 Matrix 的图像副本），这里不再涉及，大家可以去查看 Bitmap 的构造函数。</p><h4 id="2-在-onDraw-函数中使用"><a href="#2-在-onDraw-函数中使用" class="headerlink" title="2. 在 onDraw() 函数中使用"></a>2. 在 onDraw() 函数中使用</h4><p>需要注意的是，如果我们用 Bitmap 构造了一个 Canvas，那这个 Canvas 上绘制的图像也都会保存在这个 Bitmap 上，而不是画在 View 上。如果想画在 View 上就必须使用 OnDraw(Canvas canvas) 函数中传入的 Canvas 画一遍 Bitmap。</p><p>下面举个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private Canvas mBitmapCanvas;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setTextSize(50);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mBitmap = Bitmap.createBitmap(500, 500, Bitmap.Config.ARGB_8888);</div><div class="line">        mBitmapCanvas = new Canvas(mBitmap);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        mBitmapCanvas.drawText(&quot;先小涛&quot;, 100, 100, mPaint);</div><div class="line">        // canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行上述代码后会发现，结果是一片空白，我们写的字去哪儿了？在 onDraw() 函数中，我们只是将文字画在了 mBitmapCanvas 上，也就是我们新建 mBitmap 图片上，而最终没有将图片画在画布上。因为文字被写在了图片上，而画布上却没有任何内容，所以结果是一片空白。如果将注释掉的最后一句打开，即可将图片画在画布上，在视图上就会显示文字了，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f1dd4d89fab911cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="9-1-3-方法三：调动-SurfaceHolder-lockCanvas-函数"><a href="#9-1-3-方法三：调动-SurfaceHolder-lockCanvas-函数" class="headerlink" title="9.1.3 方法三：调动 SurfaceHolder.lockCanvas() 函数"></a>9.1.3 方法三：调动 SurfaceHolder.lockCanvas() 函数</h3><p>在使用 SurfaceView 时，当调用 SurfaceHolder.lockCanvas() 函数时，也会创建 Canvas 对象，有关 SurfaceView 的知识可以参考第 10 章。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.4 精通自定义 View 之 混合模式——目标图像模式与其他模式</title>
      <link href="/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/08/Custom%20View/08.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94%E7%9B%AE%E6%A0%87%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F%E4%B8%8E%E5%85%B6%E4%BB%96%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="8-4-1-目标图像模式"><a href="#8-4-1-目标图像模式" class="headerlink" title="8.4.1 目标图像模式"></a>8.4.1 目标图像模式</h3><p>我们知道，在与 SRC 相关的模式中，在处理相交区域时，优先以源图像显示为主；而在与 DST 相关的模式中，在处理相交区域时，优先以目标图像显示为主。这部分所涉及的模式有 Mode.DST、Mode.DST_IN、Mode.DST_OUT、Mode.DST_OVER、Mode.DST_ATOP。</p><h4 id="1-Mode-DST"><a href="#1-Mode-DST" class="headerlink" title="1. Mode.DST"></a>1. Mode.DST</h4><p>计算公式：[Da, Dc]。<br>从公式中也可以看出，在处理源图像所在区域的相交问题时，正好与 Mode.SRC 模式相反，全部以目标图像显示。示例图像如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cb7d1f1fba1cb963.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-Mode-DST-IN"><a href="#2-Mode-DST-IN" class="headerlink" title="2. Mode.DST_IN"></a>2. Mode.DST_IN</h4><h5 id="1）概述"><a href="#1）概述" class="headerlink" title="1）概述"></a>1）概述</h5><p>计算公式为：[Da <em> Sa,Dc </em> Sa]。</p><p>将这个公式与 Mode.SRC_IN 的公式（[Sa <em> Da, Sc </em> Da]）对比一下，发现正好与 SRC_IN 相反，Mode.DST_IN 是在相交时利用源图像的透明度来改变目标图像的透明度和饱和度。当源图像透明度为 0时，目标图像就完全不显示。</p><p>示例图像为：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4526322efb995406.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>利用 SRC 模式能实现的效果，只需要将源图像与目标图像对调，利用对应的 DST 模式就可以实现同样的效果。比如，在 8.3 节中所实现的圆角效果，它对应的 DST 模式的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap bmpDST, bmpSRC;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        bmpDST = BitmapFactory.decodeResource(getResources(),R.drawable.dog,null);</div><div class="line">        bmpSRC = BitmapFactory.decodeResource(getResources(),R.drawable.dog_shade,null);</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.DST_IN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line"></div><div class="line">        canvas.drawBitmap(bmpDST,0,0,mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(bmpSRC,0,0,mPaint);</div><div class="line"></div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>很明显，这里只改了两部分代码：首先，在解析图片时，将要显示的小狗图像作为目标图像，将控制哪部分显示的遮罩图像作为源图像；其次，将合成模式改为 Mode.DST_IN。其效果与 8.3 节中圆角效果一致。</p><h5 id="2）示例：区域波纹"><a href="#2）示例：区域波纹" class="headerlink" title="2）示例：区域波纹"></a>2）示例：区域波纹</h5><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0953ae10e49251e0.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Canvas mTempCanvas;</div><div class="line">    // 用来生成波纹</div><div class="line">    private Path mPath;</div><div class="line">    // 波纹图像为目标图像，要显示的内容</div><div class="line">    private Bitmap dstBmp;</div><div class="line">    // 文字图像为源图像</div><div class="line">    private Bitmap srcBmp;</div><div class="line">    // 波纹动画移动的距离</div><div class="line">    private int mDx;</div><div class="line">    // 波纹下降动画的位移</div><div class="line">    private int mDy;</div><div class="line">    // 一个波长</div><div class="line">    private int mItemWaveLength = 1000;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line">    private String mText;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line"></div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.DST_IN);</div><div class="line">        mPath = new Path();</div><div class="line">        mTempCanvas = new Canvas();</div><div class="line">        mText = &quot;先小涛&quot;;</div><div class="line"></div><div class="line">        srcBmp = makeTextBitmap();</div><div class="line">        dstBmp = Bitmap.createBitmap(srcBmp.getWidth(), srcBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line"></div><div class="line">        startAnim();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 开启动画</div><div class="line">     */</div><div class="line">    public void startAnim() &#123;</div><div class="line">        // 波纹动画</div><div class="line">        ValueAnimator waveAnimator = ValueAnimator.ofInt(0, mItemWaveLength);</div><div class="line">        waveAnimator.setDuration(2000);</div><div class="line">        waveAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        waveAnimator.setInterpolator(new LinearInterpolator());</div><div class="line">        waveAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                mDx = (Integer) animation.getAnimatedValue();</div><div class="line">                postInvalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        // 下降动画</div><div class="line">        ValueAnimator downAnimator = ValueAnimator.ofInt(0, srcBmp.getHeight());</div><div class="line">        downAnimator.setDuration(8000);</div><div class="line">        downAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        downAnimator.setInterpolator(new LinearInterpolator());</div><div class="line">        downAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                mDy = (Integer) animation.getAnimatedValue();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.play(waveAnimator).with(downAnimator);</div><div class="line">        animatorSet.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        // 将生成的波纹绘制到空白区域</div><div class="line">        generateWavePath();</div><div class="line">        mTempCanvas.setBitmap(dstBmp);</div><div class="line">        mTempCanvas.drawColor(Color.BLACK, PorterDuff.Mode.CLEAR);</div><div class="line">        mTempCanvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">        // 先绘制文字，再绘制合成效果</div><div class="line">        canvas.drawBitmap(srcBmp, 0, 0, mPaint);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.drawBitmap(dstBmp, 0, 0, mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(srcBmp, 0, 0, mPaint);</div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 将字符串转化成 bitmap</div><div class="line">     * @return Bitmap</div><div class="line">     */</div><div class="line">    private Bitmap makeTextBitmap() &#123;</div><div class="line">        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        paint.setTextSize(200);</div><div class="line">        paint.setColor(Color.WHITE);</div><div class="line">        paint.setTextAlign(Paint.Align.LEFT);</div><div class="line"></div><div class="line">        Paint.FontMetricsInt fm = paint.getFontMetricsInt();</div><div class="line">        int width = (int) paint.measureText(mText);</div><div class="line">        int height = fm.descent - fm.ascent;</div><div class="line"></div><div class="line">        Bitmap bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bitmap);</div><div class="line">        canvas.drawText(mText, 0, fm.leading - fm.ascent, paint);</div><div class="line">        canvas.save();</div><div class="line"></div><div class="line">        return bitmap;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 生成波纹</div><div class="line">     */</div><div class="line">    private void generateWavePath() &#123;</div><div class="line">        mPath.reset();</div><div class="line">        // int originY = srcBmp.getHeight() / 2;</div><div class="line">        int originY = mDy;</div><div class="line">        int halfWaveLen = mItemWaveLength / 2;</div><div class="line">        mPath.moveTo(-mItemWaveLength + mDx, originY);</div><div class="line">        for (int i = -mItemWaveLength; i &lt;= getWidth() + mItemWaveLength; i+= mItemWaveLength) &#123;</div><div class="line">            mPath.rQuadTo(halfWaveLen / 2f, -50, halfWaveLen, 0);</div><div class="line">            mPath.rQuadTo(halfWaveLen / 2f, 50, halfWaveLen, 0);</div><div class="line">        &#125;</div><div class="line">        mPath.lineTo(srcBmp.getWidth(), srcBmp.getHeight());</div><div class="line">        mPath.lineTo(0, srcBmp.getHeight());</div><div class="line">        mPath.close();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h5 id="3）示例：区域不规则波纹"><a href="#3）示例：区域不规则波纹" class="headerlink" title="3）示例：区域不规则波纹"></a>3）示例：区域不规则波纹</h5><h4 id="3-Mode-DST-OUT"><a href="#3-Mode-DST-OUT" class="headerlink" title="3. Mode.DST_OUT"></a>3. Mode.DST_OUT</h4><p>计算公式为：[Da <em> (1 - Sa), Dc </em> (1 - Sa)]。</p><p>将这个公式与 Mode.SRC_OUT 的公式（[Sa <em> (1 - Da), Sc </em> (1 - Da)]）对比一下可以看出，Mode.SRC_OUT 是利用目标图像的透明度的补值来改变源图像的透明度和饱和度。而 Mode.DST_OUT 反过来，是通过源图像的透明度补值来改变目标图像的透明度和饱和度。<br>简单来说，在 Mode.DST_OUT 模式下，就是相交区域显示的是目标图像，目标图像的透明度和饱和度与源图像的透明度相反，当源图像透明底是100%时，则相交区域为空值。当源图像透明度为0时，则完全显示目标图像。非相交区域完全显示目标图像。示例图像如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-361e3c3461b8fcd9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>用下图的分解图来讲解一下这个效果的生成方式，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-65d2b99bb482da0a?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>图中区域一的相交区域：在 DST_OUT 模式下，由于源图像的透明度是 100%，所以计算后的结果图像在这个区域是空白像素。</p><p>图中区域二的非相交区域：在 DST_OUT 模式下，这个区域的源图像透明度仍为 100%，所以计算后的结果图像在这个区域仍是空白像素。</p><p>所以，当源图像区域透明度为 100%时，所在区域计算结果为透明像素，当源图像的区域透明时，计算结果就是目标图像。</p><p>这与 SRC_OUT 模式的结果正好相反，在 SRC_OUT 模式下，当目标图像区域透明度为 100% 时，所在区域计算结果为透明像素；当目标图像的区域透明时，非相交区域的计算结果就是源图像。</p><p>所以，在 8.3.3 节中使用 SRC_OUT 模式实现的橡皮擦效果和刮刮卡效果都是可以使用 DST_OUT 模式实现的，只需要将 SRC 和 DST 所对应的图像翻转一下就可以了。</p><h4 id="4-Mode-DST-OVER"><a href="#4-Mode-DST-OVER" class="headerlink" title="4. Mode.DST_OVER"></a>4. Mode.DST_OVER</h4><p>计算公式为：[Sa + (1 - Sa) <em> Da, Rc = Dc + (1 - Da) </em> Sc]。</p><p>同样先与 Mode.SRC_OVER 的公式（[Sa + (1 - Sa)<em>Da, Rc = Sc + (1 - Sa) </em> Dc]）对比一下，可以看出，从 SRC 模式中以显示 SRC 图像为主变成了以显示 DST 图像为主，从 SRC 模式中的使用目标图像控制结果图像的透明度和饱和度变成了由源图像控件结果图像的透明度和饱和度。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6c47a26b2ec99073.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="5-Mode-DST-ATOP"><a href="#5-Mode-DST-ATOP" class="headerlink" title="5. Mode.DST_ATOP"></a>5. Mode.DST_ATOP</h4><p>计算公式为：[Sa, Sa <em> Dc + Sc </em> (1 - Da)]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b9e5222f1c048369.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 SRC 中，一般而言，SRC_ATOP 是可以和 SRC_IN 通用的，但 SRC_ATOP 所产生的效果图在目标图的透明度不是 0 或 100% 的时候，会比 SRC_IN 模式产生的效果图更亮。</p><p>我们再来对比下 DST 中的两种模式与 SRC 中的这两种模式的公式的区别：</p><table><thead><tr><th style="text-align:left">模式</th><th style="text-align:left">公式</th></tr></thead><tbody><tr><td style="text-align:left">SRC_IN</td><td style="text-align:left">[Sa <em> Da, Sc </em> Da]</td></tr><tr><td style="text-align:left">SRC_ATOP</td><td style="text-align:left">[Da, Sc <em> Da + (1 - Sa) </em> Dc]</td></tr><tr><td style="text-align:left">DST_IN</td><td style="text-align:left">[Da <em> Sa, Dc </em> Sa ]</td></tr><tr><td style="text-align:left">DST_ATOP</td><td style="text-align:left">[Sa, Sa <em> Dc + Sc </em> (1 - Da)]</td></tr></tbody></table><p>从公式中可以看到，在 SRC 模式中，以显示源图像为主，透明度和饱和度利用 Da 来调节；而在 DST 模式中，以显示目标图像为主，透明度和饱和度利用 Sa 来调节。</p><p>所以，Mode.DST_ATOP 与 Mode.DST_IN 的关系也是：<br>一般而言，DST_ATOP 是可以和 DST_IN 通用的，但 DST_ATOP 所产生的效果图在源图像的透明度不是 0 或 100% 的时候，会比 DST_IN 模式产生的效果图更亮。</p><p>同样，使用 Mode.DST_ATOP 也可以实现 8.3.2 节中利用 Mode.SRC_ATOP 所实现的两个示例：圆角效果和图片倒影，这里就不再讲了。</p><p>到这里，有关 DST 相关模式都讲完了，我们总结一下：</p><ul><li>DST 相关模式是完全可以使用 SRC 对应的模式来实现的，只需将目标图像和源图像对调一下即可。</li><li>在 SRC 模式中，是以显示源图像为主，通过目标图像的透明度来调节计算结果的透明度和饱和度，而在 DST 模式中，是以显示目标图像为主，通过源图像的透明度来调节计算结果的透明度和饱和度。</li></ul><p><div id="jump2"></div></p><h3 id="8-4-2-其他模式"><a href="#8-4-2-其他模式" class="headerlink" title="8.4.2 其他模式"></a>8.4.2 其他模式</h3><p>计算公式：[0, 0]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-39b617495005ddf8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从公式中可以看到，计算结果直接就是[0,0]，即空白像素。也就是说，源图像所在区域都会变成空像素，这样就起到了清空源图像所在区域图像的作用。</p><p><div id="jump3"></div></p><h3 id="8-4-3-模式总结"><a href="#8-4-3-模式总结" class="headerlink" title="8.4.3 模式总结"></a>8.4.3 模式总结</h3><p>在实际应用中，我们可以从以下三个方面来决定使用哪种模式。</p><ul><li>目标图像和源图像混合，需不需要生成颜色的叠加特效。如果需要，则从颜色叠加相关模式中选择，有 Mode.ADD（饱和度相加）、Mode.DARKEN（变暗）、Mode.LIGHTEN（变亮）、Mode.MULTIPLY（正片叠底）、Mode.OVERLAY（叠加）、Mode.SCREEN（滤色）。</li><li>当不需要特效，而需要根据某张图片的透明像素来裁剪时，就需要使用 SRC 相关或 DST 相关模式了。而 SRC 相关模式与 DST 相关模式是相通的，唯一不同的是决定当前哪个图像是目标图像和源图像。</li><li>当需要清空图像时，使用 Mode.CLEAR 模式。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.3 精通自定义 View 之 混合模式——PorterDuffXfermode 之源图像模式</title>
      <link href="/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/"/>
      <url>/2019/07/08/Custom%20View/08.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode%20%E4%B9%8B%E6%BA%90%E5%9B%BE%E5%83%8F%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>除 Photoshop 中存在的几个模式以外，还有几种是在处理结果时以源图像显示为主的几个模式，所以大家在遇到图像相交，需要显示源图像的情况时，就需要从这几种模式中考虑了，主要有 Mode.SRC、Mode.SRC_IN、Mode.SRC_OUT、Mode.SRC_OVER、Mode.SRC_ATOP。</p><p><div id="jump1"></div></p><h3 id="8-3-1-Mode-SRC"><a href="#8-3-1-Mode-SRC" class="headerlink" title="8.3.1 Mode.SRC"></a>8.3.1 Mode.SRC</h3><p>计算公式为：[Sa, Sc]。<br>从公式中也可以看出，在处理源图像所在区域的相交问题时，全部以源图像显示。示例图像如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-89f7351e119d5fb4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump2"></div></p><h3 id="8-3-2-Mode-SRC-IN"><a href="#8-3-2-Mode-SRC-IN" class="headerlink" title="8.3.2 Mode.SRC_IN"></a>8.3.2 Mode.SRC_IN</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>计算公式为：[Sa <em> Da, Sc </em> Da]。<br>在这个公式中结果值的透明度和颜色值都是由 Sa、Sc 分别乘以目标图像的 Da 来计算的。所以当目标图像为空白像素时，计算结果也将会为空白像素。示例图像如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cf39995c77c03dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>大家注意 SRC_IN 模式与 SRC 模式的区别。一般而言，是在相交区域时无论 SRC_IN 还是 SRC 模式都是显示源图像，而唯一不同的是，当目标图像是空白像素时，在 SRC_IN 所对应的区域也将会变成空白像素。</p><p>其实更严格的来讲，SRC_IN 模式是在相交时利用目标图像的透明度来改变源图像的透明度和饱和度。当目标图像透明度为 0 时，源图像就完全不显示。</p><p>利用这个特性，我们能完成很多功能，比如圆角效果和图片倒影。</p><p>圆角效果的生成非常简单，依然使用两张图片合成，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a47ca08d9ba84b3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>小狗图像是源图像，目标图像是一张遮罩图，可以看到这张遮罩图的 4 个角都是圆形切角，而且是透明的。这里我们就需要使用 SRC_IN 模式的特性：当目标图像与源图像相交时，根据目标图像的透明度来决定显示源图像的哪部分。</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap bmpDST, bmpSRC;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        bmpDST = BitmapFactory.decodeResource(getResources(),R.drawable.dog_shade,null);</div><div class="line">        bmpSRC = BitmapFactory.decodeResource(getResources(),R.drawable.dog,null);</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line"></div><div class="line">        canvas.drawBitmap(bmpDST,0,0,mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(bmpSRC,0,0,mPaint);</div><div class="line"></div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-图片倒影效果"><a href="#2-图片倒影效果" class="headerlink" title="2. 图片倒影效果"></a>2. 图片倒影效果</h4><p>SRC_IN 模式是在相交时利用目标图像的透明度来改变源图像的透明度和饱和度。所以当目标图像的透明度在 0~255 之间时，就会把源图像的透明度和颜色值都会变小。利用这个特性，可以做出倒影效果，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a9774a1637b816f2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>很明显，由于 SRC_IN 模式的特性是根据目标图像的透明度来决定如何显示源图像，而我们要显示的是小狗图像，所以，源图像是小狗图像，目标图像是一张遮罩图，它是一个从上到下的白色填充渐变，白色的透明度从 49% 到 0。</p><p>小效果图中，我们先画出小狗图像，然后将画布下移，最后将源图像与目标图像再次合成，画出倒影即可。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line">    private Paint mBitPaint;</div><div class="line">    private Bitmap bmpDST, bmpSRC, bmpRevert;</div><div class="line">    private PorterDuffXfermode mode;</div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mBitPaint = new Paint();</div><div class="line">        mode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</div><div class="line">        bmpDST = BitmapFactory.decodeResource(getResources(),R.drawable.dog_invert_shade,null);</div><div class="line">        bmpSRC = BitmapFactory.decodeResource(getResources(),R.drawable.dog,null);</div><div class="line"></div><div class="line">        Matrix matrix = new Matrix();</div><div class="line">        matrix.setScale(1F, -1F);</div><div class="line">        // 生成倒影图</div><div class="line">        bmpRevert = Bitmap.createBitmap(bmpSRC, 0, 0, bmpSRC.getWidth(), bmpSRC.getHeight(), matrix, true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        // 先画出小狗图片</div><div class="line">        canvas.drawBitmap(bmpSRC,0,0,mBitPaint);</div><div class="line"></div><div class="line">        // 再画出倒影</div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.translate(0, bmpSRC.getHeight());</div><div class="line">        canvas.drawBitmap(bmpDST,0,0,mBitPaint);</div><div class="line">        mBitPaint.setXfermode(mode);</div><div class="line">        canvas.drawBitmap(bmpRevert,0,0,mBitPaint);</div><div class="line">        mBitPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="8-3-3-Mode-SRC-OUT"><a href="#8-3-3-Mode-SRC-OUT" class="headerlink" title="8.3.3 Mode.SRC_OUT"></a>8.3.3 Mode.SRC_OUT</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>计算公式为：[Sa <em> (1 - Da), Sc </em> (1 - Da)]。<br>示例图像如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6e57a4f4165ff0c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从公式中可以看出，计算结果的透明度为 Sa * (1 - Da)；也就是说当目标图像图像完全不透明时，计算结果将是透明的。</p><p>从示例图中也可以看出，源图像与目标图像的相交部分由于目标图像的不透明度为 100%，所以相交部分的计算结果为空白像素。在目标图像为空白像素时，完全以源图像显示。</p><p>所以这个模式的特性可以概括为：以目标图像的透明度的补值来调节源图像的透明度和色彩饱和度。即当目标图像为空白像素时，就完全显示源图像，当目标图像的不透明度为 100%时，交合区域为空像素。简单来说，当目标图像有图像时结果显示空白像素，当目标图像没有图像时，结果显示源图像。</p><h4 id="2-橡皮擦效果"><a href="#2-橡皮擦效果" class="headerlink" title="2. 橡皮擦效果"></a>2. 橡皮擦效果</h4><p>利用 SRC_OUT 模式的特性，可以实现橡皮擦效果，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-39dc8d760b630613.gif?imageMogr2/auto-orient/strip" alt=""></p><p>原理：对于 Mode.SRC_OUT 模式，当目标图像有图像时计算结果为空白像素；当目标图像没有图像时，显示源图像。所以我们把手指轨迹做为目标图像，在与源图像计算时，有手指轨迹的地方就变为空白像素了，看起来的效果就是被擦除了。</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mDstBmp;</div><div class="line">    private Bitmap mSrcBmp;</div><div class="line">    private Path mPath;</div><div class="line">    private float mPreX, mPreY;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line">    private Canvas mTempCanvas;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(100);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line"></div><div class="line">        BitmapFactory.Options options = new BitmapFactory.Options();</div><div class="line">        options.inSampleSize = 2;</div><div class="line"></div><div class="line">        mSrcBmp = BitmapFactory.decodeResource(getResources(), R.drawable.meinv, options);</div><div class="line">        mDstBmp = Bitmap.createBitmap(mSrcBmp.getWidth(), mSrcBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        mPath = new Path();</div><div class="line">        mTempCanvas = new Canvas();</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        switch (event.getAction()) &#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                mPath.moveTo(event.getX(), event.getY());</div><div class="line">                mPreX = event.getX();</div><div class="line">                mPreY = event.getY();</div><div class="line">                return true;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                float endX = (mPreX + event.getX()) / 2;</div><div class="line">                float endY = (mPreY + event.getY()) / 2;</div><div class="line">                mPath.quadTo(mPreX, mPreY, endX, endY);</div><div class="line">                mPreX = event.getX();</div><div class="line">                mPreY = event.getY();</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        postInvalidate();</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        // 先把手势轨迹画到目标图像上</div><div class="line">        mTempCanvas.setBitmap(mDstBmp);</div><div class="line">        mTempCanvas.drawPath(mPath, mPaint);</div><div class="line">        // 然后把目标图像画到画布上</div><div class="line">        canvas.drawBitmap(mDstBmp, 0 , 0, mPaint);</div><div class="line">        // 计算源图像区域</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(mSrcBmp, 0, 0, mPaint);</div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-刮刮卡效果"><a href="#3-刮刮卡效果" class="headerlink" title="3. 刮刮卡效果"></a>3. 刮刮卡效果</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0f4082ea19d4bf65.gif?imageMogr2/auto-orient/strip" alt=""></p><p>需要准备两张图片，一张是刮奖遮罩层图片（scratch_over.png），一张是中奖图片图片（scratch.png），如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-39e40bd1ea2aad4e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="scratch_over.png"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-80d3e5f4969ba35e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="scratch.png"></p><p>示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mDstBmp;</div><div class="line">    private Bitmap mSrcBmp;</div><div class="line">    private Bitmap mTextBmp;</div><div class="line">    private Path mPath;</div><div class="line">    private float mPreX, mPreY;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line">    private Canvas mTempCanvas;</div><div class="line">    private RectF mRect;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(100);</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line"></div><div class="line">        mTextBmp = BitmapFactory.decodeResource(getResources(), R.drawable.scratch);</div><div class="line">        mSrcBmp = BitmapFactory.decodeResource(getResources(), R.drawable.scratch_over);</div><div class="line">        mDstBmp = Bitmap.createBitmap(mSrcBmp.getWidth(), mSrcBmp.getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">        mPath = new Path();</div><div class="line">        mTempCanvas = new Canvas();</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.SRC_OUT);</div><div class="line">        mRect = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        switch (event.getAction()) &#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                mPath.moveTo(event.getX(), event.getY());</div><div class="line">                mPreX = event.getX();</div><div class="line">                mPreY = event.getY();</div><div class="line">                return true;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                float endX = (mPreX + event.getX()) / 2;</div><div class="line">                float endY = (mPreY + event.getY()) / 2;</div><div class="line">                mPath.quadTo(mPreX, mPreY, endX, endY);</div><div class="line">                mPreX = event.getX();</div><div class="line">                mPreY = event.getY();</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        postInvalidate();</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        float width = mTextBmp.getWidth();</div><div class="line">        float height = mTextBmp.getHeight();</div><div class="line">        float screenWidth = getWidth();</div><div class="line">        if (width &gt; screenWidth) &#123;</div><div class="line">            height = height * screenWidth / width;</div><div class="line">            width = screenWidth;</div><div class="line">        &#125;</div><div class="line">        mRect.set(0, 0, width, height);</div><div class="line"></div><div class="line">        // 先画底层奖励文案图片</div><div class="line">        canvas.drawBitmap(mTextBmp, null, mRect, mPaint);</div><div class="line">        int layerId = canvas.saveLayer(140, 70, width - 140, height - 70,</div><div class="line">                null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        // 把手势轨迹画到目标图像上</div><div class="line">        mTempCanvas.setBitmap(mDstBmp);</div><div class="line">        mTempCanvas.drawPath(mPath, mPaint);</div><div class="line">        // 然后把目标图像画到画布上</div><div class="line">        canvas.drawBitmap(mDstBmp, 0, 0, mPaint);</div><div class="line">        // 计算源图像区域</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        mRect.set(140, 70, width-140, height-70);</div><div class="line">        canvas.drawBitmap(mSrcBmp, null, mRect, mPaint);</div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="8-3-4-Mode-SRC-OVER"><a href="#8-3-4-Mode-SRC-OVER" class="headerlink" title="8.3.4 Mode.SRC_OVER"></a>8.3.4 Mode.SRC_OVER</h3><p>计算公式为：[Sa + (1 - Sa) <em> Da, Rc = Sc + (1 - Sa) </em> Dc]。<br>示例图像为：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a65e54a4d2ed9fd8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在计算结果中，源图像没有改变。它的意思就是，在目标图像的顶部绘制源图像。从公式中也可以看出，目标图像的透明度为 Sa + (1 - Sa) * Da；即在源图像的透明度基础上增加一部分目标图像的透明度。增加的透明度是源图像透明度的补量；目标图像的色彩值的计算方式同理，所以当源图像透明度为 100% 时，就原样显示源图像。</p><p><div id="jump5"></div></p><h3 id="8-3-5-Mode-SRC-ATOP"><a href="#8-3-5-Mode-SRC-ATOP" class="headerlink" title="8.3.5 Mode.SRC_ATOP"></a>8.3.5 Mode.SRC_ATOP</h3><p>计算公式为：[Da, Sc <em> Da + (1 - Sa) </em> Dc]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4d160056ab5c4a12.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>很奇怪，它的效果图竟然与 SRC_IN 模式是相同的，我们来对比一下它们的公式：</p><p>SRC_IN：[Sa <em> Da, Sc </em> Da]<br>SRC_ATOP：[Da, Sc <em> Da + (1 - Sa) </em> Dc]</p><p>先看透明度：在 SRC_IN 中是 Sa * Da,在 SRC_ATOP 是 Da。<br>SRC_IN 是源图像透明度乘以目标图像的透明度做为结果透明度，而SRC_ATOP 是直接使用目标图像的透明度做为结果透明度。</p><p>再看颜色值：SRC_IN 的颜色值为 Sc <em> Da，SRC_ATOP 的颜色值为Sc </em> Da + (1 - Sa) <em> Dc，SRC_ATOP 在 SRC_IN 的基础上还增加了(1 - Sa) </em> Dc。</p><p>所以，结论为：<br>1）当透明度是 100% 和 0 时，SRC_ATOP 和 SRC_IN 模式是通用的。<br>2）当透明度不是 100% 和 0 时，SRC_ATOP 相比 SRC_IN 源图像的饱和度会增加，即会显得更亮。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.2 精通自定义 View 之 混合模式——PorterDuffXfermode</title>
      <link href="/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/"/>
      <url>/2019/07/08/Custom%20View/08.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94PorterDuffXfermode/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="8-2-1-PorterDuffXfermode-概述"><a href="#8-2-1-PorterDuffXfermode-概述" class="headerlink" title="8.2.1 PorterDuffXfermode 概述"></a>8.2.1 PorterDuffXfermode 概述</h3><p><a href="">官方文档链接</a><br>PorterDuffXfermode 的构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public PorterDuffXfermode(PorterDuff.Mode mode)</div></pre></td></tr></table></figure></p><p>它只有一个参数 <a href="https://developer.android.google.cn/reference/android/graphics/PorterDuff.Mode.html?hl=en" target="_blank" rel="external">PorterDuff.Mode</a>，表示混合模式，枚举值有18个，表示各种图形混合模式，每一种模式都对应着一种算法，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b3b585f409b1e5a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>比如，LIGHTEN 的计算方式为[Sa + Da - Sa <em> Da, Sc </em> (1 - Da) + Dc <em> (1 - Sa) + max(Sc, Dc)]，其中 Sa 全称为 Source alpha 表示源图的 Alpha 通道；Sc 全称为 Source color 表示源图的颜色；Da 全称为 Destination alpha 表示目标图的 Alpha 通道；Dc 全称为 Destination color 表示目标图的颜色，在每个公式中，都会被分为两部分[……，……]，其中 “,” 前的部分为 “Sa + Da - Sa </em> Da” 这一部分的值代表计算后的 Alpha 通道；而 “,” 后的部分为 “Sc <em> (1 - Da) + Dc </em> (1 - Sa) + max(Sc, Dc)” 这一部分的值代表计算后的颜色值，图形混合后的图片就是依据这个公式来对 DST 和 SR C两张图像中每一个像素进行计算，得到最终的结果的。</p><p>显示的是两个图形一圆一方通过一定的计算产生不同的组合效果，其中圆形是底部的目标图像，方形是上方的源图像。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2792a9df1c20f4ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在上面的公式中涉及到一个概念，目标图 DST，源图 SRC。那什么是源图，什么是目标图呢？我们简单举例子来说明一下：</p><p>首先需要自定义一个控件并进行初始化；然后禁用硬件加速；新建两张空白图片，然后在图片上分别画一个圆形 (DST) 和一个矩形 (SRC) 并填充相应的颜色，图形以外的位置都是空白像素；最后在离屏绘制部分，现在 (0, 0) 位置把圆形图像画出来，然后设置 PorterDuffXfermode 的模式为 Mode.SRC_IN，之后再以圆形中心为左上角点画出矩形，清空 Xfermode。</p><p>在 Xfermode 设置前画出的图像叫做目标图像，即给谁应用 Xfermode；在 Xfermode 设置后画出的图像叫做源图像，即拿什么应用 Xfermode。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap dstBmp;</div><div class="line">    private Bitmap srcBmp;</div><div class="line">    private int width = 200;</div><div class="line">    private int height = 200;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        dstBmp = makeBitmap(width, height, 0xFFFFCC44, &quot;oval&quot;);</div><div class="line">        srcBmp = makeBitmap(width, height, 0xFF66AAFF, &quot;rect&quot;);</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.SRC_IN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Bitmap makeBitmap(int w, int h, int color, String type) &#123;</div><div class="line">        Bitmap bmp = Bitmap.createBitmap(w, h, Bitmap.Config.ARGB_8888);</div><div class="line">        Canvas canvas = new Canvas(bmp);</div><div class="line">        Paint paint = new Paint(Paint.ANTI_ALIAS_FLAG);</div><div class="line">        paint.setColor(color);</div><div class="line">        if (&quot;oval&quot;.equals(type)) &#123;</div><div class="line">            canvas.drawOval(new RectF(0, 0, w, h), paint);</div><div class="line">        &#125; else &#123;</div><div class="line">            canvas.drawRect(0, 0, w, h, paint);</div><div class="line">        &#125;</div><div class="line">        return bmp;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.translate(100, 100);</div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        canvas.drawBitmap(dstBmp, 0, 0, mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(srcBmp, width / 2f, height / 2f, mPaint);</div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>该示例的效果如下图所示。<br><img src="https://upload-images.jianshu.io/upload_images/14186083-63bb7357915f6bbe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>对于 Mode.SRC_IN，它的计算公式为[Sa <em> Da, Sc </em> Da]。在这个公式中，结果值的透明度和颜色值都是由 Sa、Sc 分别乘以目标图像的 Da 来计算的。当目标图像为空白像素时，计算结果也将为空白像素；当目标图像不透明时，相交区域将显示源图像像素。所以，从效果图中可以看出，两图像相交部分显示的是源图像；对于不相交的部分，此时目标图像的透明度是 0，源图像不显示。</p><p><div id="jump2"></div></p><h3 id="8-2-2-颜色叠加相关模式"><a href="#8-2-2-颜色叠加相关模式" class="headerlink" title="8.2.2 颜色叠加相关模式"></a>8.2.2 颜色叠加相关模式</h3><p>这部分涉及到的几个模式有 Mode.ADD（饱和度相加）、Mode.LIGHTEN（变亮）、Mode.DARKEN（变暗）、Mode.MULTIPLY（正片叠底）、Mode.OVERLAY（叠加），Mode.SCREEN（滤色）。</p><h4 id="1-Mode-ADD（饱和度相加）"><a href="#1-Mode-ADD（饱和度相加）" class="headerlink" title="1. Mode.ADD（饱和度相加）"></a>1. Mode.ADD（饱和度相加）</h4><p>它的公式是 Saturate(S + D)。ADD 模式简单来说就是对 SRC 与 DST 两张图片相交区域的饱和度进行相加。使用 8.2.1 节中的例子，将 PorterDuff.Mode.SRC_IN 改为 PorterDuff.Mode.ADD，效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-272826d11c1fe6df.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以看出，只有源图与目标图像相交的部分的图像的饱和度产生了变化，没相交的部分是没有变的，因为对方的饱和度是 0，当然不相交的位置饱和度是不会变的。这个模式的应用范围比较少，暂时想不到哪里会用到。</p><h4 id="2-Mode-LIGHTEN（变亮）"><a href="#2-Mode-LIGHTEN（变亮）" class="headerlink" title="2. Mode.LIGHTEN（变亮）"></a>2. Mode.LIGHTEN（变亮）</h4><p>它的算法是： [Sa + Da - Sa <em> Da, Sc </em> (1 - Da) + Dc * (1 - Sa) + max(Sc, Dc)]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0407b841d01c9059.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这个效果比较容易理解，两个图像重合的区域才会有颜色值变化，所以只有重合区域才有变亮的效果，源图像非重合的区域，由于对应区域的目标图像是空白像素，所以直接显示源图像。</p><p>在实际应用中，会出现这种情况：当选中一本书时，给这本书加上灯光效果，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a7a6238ac3259e1e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap bmpDST, bmpSRC;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        bmpDST = BitmapFactory.decodeResource(getResources(),R.drawable.book_bg,null);</div><div class="line">        bmpSRC = BitmapFactory.decodeResource(getResources(),R.drawable.book_light,null);</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.LIGHTEN);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        // 先画书架，做为目标图像</div><div class="line">        canvas.drawBitmap(bmpDST,0,0,mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        // 再图光点</div><div class="line">        canvas.drawBitmap(bmpSRC,0,0,mPaint);</div><div class="line"></div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-Mode-DARKEN（变暗）"><a href="#3-Mode-DARKEN（变暗）" class="headerlink" title="3. Mode.DARKEN（变暗）"></a>3. Mode.DARKEN（变暗）</h4><p>对应公式是： [Sa + Da - Sa <em> Da, Sc </em> (1 - Da) + Dc * (1 - Sa) + max(Sc, Dc)]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-208c3a7a05ec8be7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-Mode-MULTIPLY（正片叠底）"><a href="#4-Mode-MULTIPLY（正片叠底）" class="headerlink" title="4. Mode.MULTIPLY（正片叠底）"></a>4. Mode.MULTIPLY（正片叠底）</h4><p>公式是：[Sa <em> Da, Sc </em> Dc]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-47b83c76e8a6ebc4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从公式中可以看出，计算 Alpha 值时的公式是 Sa * Da，是用源图像的 Alpha 值乘以目标图像的 Alpha 值。由于源图像的非相交区域所对应的目标图像像素的 Alpha 是 0，所以结果像素的 Alpha 值仍是 0，源图像的非相交区域在计算后是透明的。</p><h4 id="5-Mode-OVERLAY（叠加）"><a href="#5-Mode-OVERLAY（叠加）" class="headerlink" title="5. Mode.OVERLAY（叠加）"></a>5. Mode.OVERLAY（叠加）</h4><p>Google 没有给出这种模式的算法，效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-59f7de884fff1620.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="6-Mode-SCREEN（滤色）"><a href="#6-Mode-SCREEN（滤色）" class="headerlink" title="6. Mode.SCREEN（滤色）"></a>6. Mode.SCREEN（滤色）</h4><p>对应公式是：[Sa + Da - Sa <em> Da, Sc + Dc - Sc </em> Dc]。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-272f4a1d4a6e941f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>到这里，这六种混合模式就讲完了，下面总结一下：</p><ul><li>这几种模式都是 PhotoShop 中存在的模式，是通过计算改变交合区域的颜色值的。</li><li>除了 Mode.MULTIPLY（正片叠底）会在目标图像透明时将结果对应区域置为透明，其它图像都不受目标图像透明像素影响，即源图像非交合部分保持原样。</li></ul><h4 id="7-示例：Twitter-标识的描边效果"><a href="#7-示例：Twitter-标识的描边效果" class="headerlink" title="7. 示例：Twitter 标识的描边效果"></a>7. 示例：Twitter 标识的描边效果</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d17cc37950a2fe6d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在图一中，小鸟整个都是蓝色的。在图二中，只有小鸟的边缘部分是白色的，中间部分是透明的。在最终的合成图中：图一和图二中小鸟与边缘的是显示的，而且还有某种效果，但小鸟中间的区域变透明了，显示的是底部Activity的背景色。</p><p>前面学到的几种样式中，只有 Mode.MULTIPLY（正片叠底）会在两个图像的一方透明时，结果像素就是透明的。所以这里使用的模式就是 Mode.MULTIPLY 模式。</p><p>代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap bmpDST, bmpSRC;</div><div class="line">    private PorterDuffXfermode mMode;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        bmpDST = BitmapFactory.decodeResource(getResources(),R.drawable.twiter_bg,null);</div><div class="line">        bmpSRC = BitmapFactory.decodeResource(getResources(),R.drawable.twiter_light,null);</div><div class="line">        mMode = new PorterDuffXfermode(PorterDuff.Mode.MULTIPLY);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line">        </div><div class="line">        canvas.drawBitmap(bmpDST,0,0,mPaint);</div><div class="line">        mPaint.setXfermode(mMode);</div><div class="line">        canvas.drawBitmap(bmpSRC,0,0,mPaint);</div><div class="line"></div><div class="line">        mPaint.setXfermode(null);</div><div class="line">        canvas.restoreToCount(layerId);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08.1 精通自定义 View 之 混合模式——AvoidXfermode</title>
      <link href="/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/"/>
      <url>/2019/07/08/Custom%20View/08.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E6%B7%B7%E5%90%88%E6%A8%A1%E5%BC%8F%E2%80%94%E2%80%94AvoidXfermode/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="8-1-1-混合模式概述"><a href="#8-1-1-混合模式概述" class="headerlink" title="8.1.1 混合模式概述"></a>8.1.1 混合模式概述</h3><p>混合模式能够将两张图片无缝结合，实现类似 Photoshop 中的两张图片融合效果。</p><p>混合模式是通过 Paint 类中的 Xfermode setXfermode(Xfermode xfermode) 函数实现的，它的参数 Xfermode 是一个空类，主要靠它的子类来实现不同的功能，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2b8b059439df3bc5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在启舰的书里派生自 Xfermode 的子类有 AvoidXfermode、PixelXorXfermode 和 PorterDuffXfermode，并且讲解了相关的知识。但笔者在 2019 年最新的官方文档中，已经找不到 AvoidXfermode 和 PixelXorXfermode 这两个类的相关文档，且在 AndroidX 系列中不支持相关 API。<a href="https://blog.csdn.net/harvic880925/article/details/51264653" target="_blank" rel="external">若想了解详情，请点击前往启舰的博客</a>。</p><p>在使用 Xfermode 时，需要做两件事。<br>1）禁用硬件加速<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setLayerType(View.LAYER_TYPE_SOFTWARE, null);</div></pre></td></tr></table></figure></p><p>2）使用离屏绘制（详见第九章）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 新建图层</div><div class="line">int layerId = canvas.saveLayer(0, 0, getWidth(), getHeight(), null, Canvas.ALL_SAVE_FLAG);</div><div class="line"></div><div class="line">// 核心绘制代码</div><div class="line">...</div><div class="line"></div><div class="line">// 还原图层</div><div class="line">canvas.restoreToCount(layerId);</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.6 精通自定义 View 之 绘图进阶——Shader 之 RadialGradient</title>
      <link href="/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/"/>
      <url>/2019/07/07/Custom%20View/07.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20RadialGradient/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>RadialGradient 是 Shader 的另一种实现，它的含义是放射渐变，即它会像一个放射源一样，从一个点开始向外扩散，从一种颜色变成另一种颜色。</p><p><div id="jump1"></div></p><h3 id="7-6-1-双色渐变"><a href="#7-6-1-双色渐变" class="headerlink" title="7.6.1 双色渐变"></a>7.6.1 双色渐变</h3><p>RadialGradient 有两个构造函数，分别能完成双色渐变和多色渐变。双色渐变的构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RadialGradient(float centerX, float centerY, float radius, </div><div class="line">        int centerColor, int edgeColor, Shader.TileMode tileMode)</div></pre></td></tr></table></figure></p><ul><li>centerX：渐变中心点X坐标。</li><li>centerY：渐变中心点Y坐标。</li><li>radius：渐变半径。</li><li>centerColor：渐变的起始颜色，即渐变中心点的颜色,取值类型必须是八位的0xAARRGGBB色值！透明底Alpha值不能省略，不然不会显示出颜色。</li><li>edgeColor：渐变结束时的颜色，即渐变圆边缘的颜色，同样，取值类型必须是八位的0xAARRGGBB色值。</li><li>TileMode：与我们前面讲的各个Shader一样，用于指定当控件区域大于指定的渐变区域时，空白区域的颜色填充方式。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class TestView extends AppCompatTextView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private RadialGradient mRadialGradient;</div><div class="line">    private int mRadius;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = getPaint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mRadius = w / 5;</div><div class="line">        mRadialGradient = new RadialGradient(w / 2f, h / 2f, mRadius, 0xffff0000, 0xff00ff00, Shader.TileMode.CLAMP);</div><div class="line">        mPaint.setShader(mRadialGradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawCircle(getWidth()/2f, getHeight()/2f, mRadius, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-22066725bd2f934f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump2"></div></p><h3 id="7-6-2-多色渐变"><a href="#7-6-2-多色渐变" class="headerlink" title="7.6.2 多色渐变"></a>7.6.2 多色渐变</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">RadialGradient(float centerX, float centerY, float radius, </div><div class="line">        int[] colors, float[] stops, Shader.TileMode tileMode)</div></pre></td></tr></table></figure><ul><li>int[] colors：表示所需要的渐变颜色数组。<br>+float[] stops：表示每个渐变颜色所在的位置百分点，取值 0~1，数量必须与 colors 数组保持一致，不然直接 crash。一般第一个数值取 0，最后一个数值取 1，比如，取一个位置数组：{0.2,0.5,0.8}，起始点是0.2百分比位置，结束点是0.8百分比位置，而 0~0.2 百分比位置和 0.8~1.0 百分比的位置都是没有指定颜色的。这些位置的颜色就是根据我们指定的 TileMode 空白区域填充模式来自行填充。但有时效果我们是不可控的。所以，为了方便起见，建议大家 stop 数组的起始和终止数值设为 0 和 1。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class TestView extends AppCompatTextView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private RadialGradient mRadialGradient;</div><div class="line">    private int mRadius;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = getPaint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mRadius = w / 5;</div><div class="line">        int[] colors = &#123;0xffff0000, 0xff00ff00, 0xff0000ff, 0xffffff00&#125;;</div><div class="line">        float[] stops = &#123;0f, 0.2f, 0.5f, 1f&#125;;</div><div class="line">        mRadialGradient = new RadialGradient(w / 2f, h / 2f, mRadius, colors, stops, Shader.TileMode.CLAMP);</div><div class="line">        mPaint.setShader(mRadialGradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawCircle(getWidth()/2f, getHeight()/2f, mRadius, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d5a4aac06acfb365.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="7-6-3-TileMode-填充模式"><a href="#7-6-3-TileMode-填充模式" class="headerlink" title="7.6.3 TileMode 填充模式"></a>7.6.3 TileMode 填充模式</h3><p>在 RadialGradient 构造函数中，只有一个 TileMode 参数，这说明当填充空白区域时，X 轴和 Y 轴使用同一种填充模式。而不能像 BitmapShader 那样分别指定 X 轴与 Y 轴的填充参数。</p><p>分别设置填充模式为：TileMode.CLAMP、TileMode.MIRROR、TileMode.REPEAT。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7290d14d66a44d1b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TileMode.CLAMP"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-034e859f3e78b1a0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TileMode.MIRROR"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-84766214e50ca249.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="TileMode.REPEAT"></p><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class TestView extends AppCompatTextView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private RadialGradient mGradient;</div><div class="line">    private int mRadius;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = getPaint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mRadius = w / 10;</div><div class="line">        mGradient = new RadialGradient(w / 2f, h / 2f, mRadius, 0xffff0000, 0xff00ff00, Shader.TileMode.REPEAT);</div><div class="line">        mPaint.setShader(mGradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawRect(0, 0, getWidth(), getHeight(), mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="7-6-4-示例：水波纹按钮效果"><a href="#7-6-4-示例：水波纹按钮效果" class="headerlink" title="7.6.4 示例：水波纹按钮效果"></a>7.6.4 示例：水波纹按钮效果<div id="jump4"></div></h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c5bfca27e35260ff.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">public class TestView extends AppCompatButton &#123;</div><div class="line"></div><div class="line">    private int mX, mY;</div><div class="line">    private ObjectAnimator mAnimator;</div><div class="line">    private int DEFAULT_RADIUS = 50;</div><div class="line">    private int mCurRadius = 0;</div><div class="line">    private RadialGradient mRadialGradient;</div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs, int defStyle) &#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE,null);</div><div class="line">        mPaint = new Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line"></div><div class="line">        if (mX != event.getX() || mY != mY) &#123;</div><div class="line">            mX = (int) event.getX();</div><div class="line">            mY = (int) event.getY();</div><div class="line"></div><div class="line">            setRadius(DEFAULT_RADIUS);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line"></div><div class="line">            return true;</div><div class="line">        &#125; else if (event.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line"></div><div class="line">            if (mAnimator != null &amp;&amp; mAnimator.isRunning()) &#123;</div><div class="line">                mAnimator.cancel();</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            if (mAnimator == null) &#123;</div><div class="line">                mAnimator = ObjectAnimator.ofInt(this,&quot;radius&quot;,DEFAULT_RADIUS, getWidth());</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            mAnimator.setInterpolator(new AccelerateInterpolator());</div><div class="line">            mAnimator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">                @Override</div><div class="line">                public void onAnimationStart(Animator animation) &#123;&#125;</div><div class="line">                @Override</div><div class="line">                public void onAnimationEnd(Animator animation) &#123;</div><div class="line">                    setRadius(0);</div><div class="line">                &#125;</div><div class="line">                @Override</div><div class="line">                public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">                @Override</div><div class="line">                public void onAnimationRepeat(Animator animation) &#123;&#125;</div><div class="line">            &#125;);</div><div class="line">            mAnimator.start();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setRadius(final int radius) &#123;</div><div class="line">        mCurRadius = radius;</div><div class="line">        if (mCurRadius &gt; 0) &#123;</div><div class="line">            mRadialGradient = new RadialGradient(mX, mY, mCurRadius, 0x00FFFFFF, 0xFF58FAAC, Shader.TileMode.CLAMP);</div><div class="line">            mPaint.setShader(mRadialGradient);</div><div class="line">        &#125;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.drawCircle(mX, mY, mCurRadius, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.5 精通自定义 View 之 绘图进阶——Shader 之 LinearGradient</title>
      <link href="/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/"/>
      <url>/2019/07/07/Custom%20View/07.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B9%8B%20LinearGradient/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>通过 LinearGradient 可以实现线性渐变效果。</p><p><div id="jump1"></div></p><h3 id="7-5-1-概述"><a href="#7-5-1-概述" class="headerlink" title="7.5.1 概述"></a>7.5.1 概述</h3><h4 id="1-构造函数"><a href="#1-构造函数" class="headerlink" title="1. 构造函数"></a>1. 构造函数</h4><p>第一个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public LinearGradient(float x0, float y0, float x1, float y1,</div><div class="line">        int color0, int color1, TileMode tile)</div></pre></td></tr></table></figure></p><ul><li>(x0,y0) ：起始渐变点坐标；(x1,y1) ：结束渐变点坐标。</li><li>color0：起始颜色；color1：终止颜色。颜色值必须使用 0xAARRGGBB 形式的 16 进制表示，表示透明度的 AA 一定不能少。</li><li>TileMode tile：与 BitmapShader 一样，用于指定控件区域大于指定的渐变区域时，空白区域的颜色填充方法。</li></ul><p>第二个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public LinearGradient(float x0, float y0, float x1, float y1,</div><div class="line">        int colors[], float positions[], TileMode tile)</div></pre></td></tr></table></figure></p><ul><li>colors[]：用于指定渐变的颜色值数组。同样，颜色值必须使用 0xAARRGGBB 形式的 16 进制表示，表示透明度的 AA 一定不能少。</li><li>positions[]：与渐变的颜色相对应，取值是 0-1 的 float 类型，表示在每一个颜色在整条渐变线中的百分比位置</li></ul><h4 id="2-双色渐变使用示例"><a href="#2-双色渐变使用示例" class="headerlink" title="2. 双色渐变使用示例"></a>2. 双色渐变使用示例</h4><p>自定义一个从左到右的双色渐变控件，代码如下。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private int mWidth, mHeight;</div><div class="line">    private LinearGradient mLinearGradient;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mWidth = getMeasuredWidth();</div><div class="line">        mHeight = getMeasuredHeight();</div><div class="line">        mLinearGradient = new LinearGradient(0, mHeight / 2f, mWidth, mHeight / 2f,</div><div class="line">                0xFFFF0000, 0xFF00FF00, Shader.TileMode.CLAMP);</div><div class="line">        mPaint.setShader(mLinearGradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawRect(0, 0, mWidth, mHeight, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bd6dbc498b7ed192.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="3-多色渐变使用示例"><a href="#3-多色渐变使用示例" class="headerlink" title="3. 多色渐变使用示例"></a>3. 多色渐变使用示例</h4><p>在上面示例的基础上，使用多色渐变来构造 LinearGradient 实例。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private int mWidth, mHeight;</div><div class="line">    private LinearGradient mLinearGradient;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mWidth = getMeasuredWidth();</div><div class="line">        mHeight = getMeasuredHeight();</div><div class="line">        int[] colors = &#123;0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFFFF00, 0xFF00FFFF&#125;;</div><div class="line">        float[] pos = &#123;0f, 0.2f, 0.4f, 0.6f, 1.0f&#125;;</div><div class="line">        mLinearGradient = new LinearGradient(0, mHeight / 2f, mWidth, mHeight / 2f,</div><div class="line">                colors, pos, Shader.TileMode.CLAMP);</div><div class="line">        mPaint.setShader(mLinearGradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawRect(0, 0, mWidth, mHeight, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2d1eccd29d3cf068.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从这里可以看出，渐变的开始点同样是控件左边中点，渐变的结束点也同样是控件右边中点；这里我们指定了五种渐变颜色，而且指定了每个颜色的位置，前四种颜色是按 20% 均匀分布的，最后两种颜色相距 40%；最后通过 canvas.drawRect() 函数把整个控件区域画出来。</p><p>注意：colors 和 pos 的个数一定要相等，也就是说必须指定每一个颜色值的位置。如果元素个数不相等，则会直接报错，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b3a9b6144803c90f.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-TileMode-填充模式"><a href="#4-TileMode-填充模式" class="headerlink" title="4. TileMode 填充模式"></a>4. TileMode 填充模式</h4><p>从构造函数中可以看出，LiearGradient 只有一个 TileMode 参数，这说明 X 轴与 Y 轴共用这一个 TileMode 填充参数，而不能像 BitmapShader 那样分别指定 X 轴与 Y 轴的填充参数。</p><p>示例：分别指定不同的填充模式</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d78f1af0694fccb9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="从上到下依次为：CLAMP、MIRROR、REPEAT"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private int mWidth, mHeight;</div><div class="line">    private LinearGradient mGradientCLAMP, mGradientMIRROR, mGradientREPEAT;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">        mWidth = getMeasuredWidth();</div><div class="line">        mHeight = 200;</div><div class="line">        int[] colors = &#123;0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFFFF00, 0xFF00FFFF&#125;;</div><div class="line">        float[] pos = &#123;0f, 0.2f, 0.4f, 0.6f, 1.0f&#125;;</div><div class="line">        mGradientCLAMP = new LinearGradient(0, 0, mWidth / 2f, mHeight / 2f,</div><div class="line">                colors, pos, Shader.TileMode.CLAMP);</div><div class="line">        mGradientMIRROR = new LinearGradient(0, mHeight, mWidth / 2f, mHeight * 3f / 2,</div><div class="line">                colors, pos, Shader.TileMode.MIRROR);</div><div class="line">        mGradientREPEAT = new LinearGradient(0, mHeight * 2f, mWidth / 2f, mHeight*5 / 2f,</div><div class="line">                colors, pos, Shader.TileMode.REPEAT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPaint.setShader(mGradientCLAMP);</div><div class="line">        canvas.drawRect(0, 0, mWidth, mHeight, mPaint);</div><div class="line">        mPaint.setShader(mGradientMIRROR);</div><div class="line">        canvas.drawRect(0, mHeight, mWidth, mHeight * 2, mPaint);</div><div class="line">        mPaint.setShader(mGradientREPEAT);</div><div class="line">        canvas.drawRect(0, mHeight * 2, mWidth, mHeight * 3, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5-Shader-填充与显示区域"><a href="#5-Shader-填充与显示区域" class="headerlink" title="5. Shader 填充与显示区域"></a>5. Shader 填充与显示区域</h4><p>所有 Shader 都是一样的：Shader 的布局和显示是分离的；Shader 总是从控件的左上角开始布局的；如果单张图片无法覆盖整个控件，则会使用 TileMode 重复模式来填充空白区域；而 canvas.draw 系列函数则只表示哪部分区域被显示出来。</p><p>下面利用 drawText() 函数实现一个渐变文字效果。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d3c178884edce57a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private String mText;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setTextSize(80);</div><div class="line">        mText = &quot;欢迎关注先先生的Blog&quot;;</div><div class="line"></div><div class="line">        float width = mPaint.measureText(mText);</div><div class="line">        int[] colors = &#123;0xFFFF0000, 0xFF00FF00, 0xFF0000FF, 0xFFFFFF00, 0xFF00FFFF&#125;;</div><div class="line">        float[] pos = &#123;0f, 0.2f, 0.4f, 0.6f, 1.0f&#125;;</div><div class="line">        LinearGradient gradient = new LinearGradient(0, 0, width / 2f, 0,</div><div class="line">                colors, pos, Shader.TileMode.MIRROR);</div><div class="line">        mPaint.setShader(gradient);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawText(mText, 0, 100, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump2"></div></p><h3 id="7-5-2-示例：闪光文字效果"><a href="#7-5-2-示例：闪光文字效果" class="headerlink" title="7.5.2 示例：闪光文字效果"></a>7.5.2 示例：闪光文字效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1df20933fc32f800.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div></pre></td><td class="code"><pre><div class="line">public class TestView extends AppCompatTextView &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private LinearGradient mLinearGradient;</div><div class="line">    private int mDx;</div><div class="line">    private Matrix mMatrix;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = getPaint();</div><div class="line">        mMatrix = new Matrix();</div><div class="line">        int length = (int) mPaint.measureText(getText().toString());</div><div class="line">        createAnim(length);</div><div class="line">        createLinearGradient(length);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void createAnim(int length) &#123;</div><div class="line">        ValueAnimator animator = ValueAnimator.ofInt(0, 2 * length);</div><div class="line">        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                mDx = (Integer) animation.getAnimatedValue();</div><div class="line">                postInvalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        animator.setDuration(2000);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void createLinearGradient(int length) &#123;</div><div class="line">        mLinearGradient = new LinearGradient(-length, 0, 0, 0,</div><div class="line">                new int[]&#123;getCurrentTextColor(), 0xFF00FF00, getCurrentTextColor()&#125;,</div><div class="line">                new float[]&#123;0, 0.5f, 1&#125;,</div><div class="line">                Shader.TileMode.CLAMP);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mMatrix.reset();</div><div class="line">        mMatrix.setTranslate(mDx, 0);</div><div class="line">        mLinearGradient.setLocalMatrix(mMatrix);</div><div class="line">        mPaint.setShader(mLinearGradient);</div><div class="line"></div><div class="line">        super.onDraw(canvas);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 res/layout/act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_margin=&quot;20dp&quot;</div><div class="line">        android:textSize=&quot;24sp&quot;</div><div class="line">        android:text=&quot;欢迎关注先先生的Blog&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>控件派生自 TextView 的子类，所以可以使用 TextView 的自带方法 getCurrentTextColor() 来获取文字颜色、画笔、文字长度等；利用 Shader.setLocalMatrix(Matrix localM) 设置逐渐平移的矩阵，最后用 ValueAnimator 来控制矩阵平移的位移 mDx，移动距离是从 0 到两倍的 text 距离。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.4 精通自定义 View 之 绘图进阶——Shader 与 BitmapShader</title>
      <link href="/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/"/>
      <url>/2019/07/07/Custom%20View/07.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94Shader%20%E4%B8%8E%20BitmapShader/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="7-4-1-Shader-概述"><a href="#7-4-1-Shader-概述" class="headerlink" title="7.4.1 Shader 概述"></a>7.4.1 Shader 概述</h3><p>Shader 在三维软件中称之为着色器，是用来给空白图形上色用的。在 PhotoShop 中有一个印章工具，能够指定印章的样式来填充图形。印章的样式可以是图像、颜色、渐变色等。这里的 Shader 实现的效果与印章类似。我们也是通过给 Shader 指定对应的图像、渐变色等来填充图形的。Paint 中有一个函数专门用于设置 Shader，其声明如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public Shader setShader(Shader shader)</div></pre></td></tr></table></figure></p><p>Shader 类只是一个基类，其中只有两个函数 setLocalMatrix(Matrix localM) 和 getLocalMatrix(Matrix localM)，用来设置坐标变换矩阵的。</p><p>Shader 类其实是一个空类，它的功能主要是靠它的派生类来实现的。继承关系如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f0612d7804eb21c1.jpg?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump2"></div></p><h3 id="7-4-2-BitmapShader-的基本用法"><a href="#7-4-2-BitmapShader-的基本用法" class="headerlink" title="7.4.2 BitmapShader 的基本用法"></a>7.4.2 BitmapShader 的基本用法</h3><p>它的构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public BitmapShader(Bitmap bitmap, TileMode tileX, TileMode tileY)</div></pre></td></tr></table></figure></p><p>这就相当于 PhotoShop 中的印章工具，bitmap 用来指定图案，tileX 用来指定当 X 轴超出单个图片大小时时所使用的重复策略，同样 tileY 用于指定当 Y 轴超出单个图片大小时时所使用的重复策略。</p><p>其中TileMode的取值有：</p><ul><li>TileMode.CLAMP：用边缘色彩填充多余空间。</li><li>TileMode.REPEAT：重复原图像来填充多余空间。</li><li>TileMode.MIRROR：重复使用镜像模式的图像来填充多余空间。</li></ul><h4 id="1-示例"><a href="#1-示例" class="headerlink" title="1. 示例"></a>1. 示例</h4><p>这里使用的印章图像如下图所示 (dog.png)。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-06b392e88addc2f4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>中间是一幅小狗头像，四周被四种不同的颜色给包围。设置 Shader 的完整代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        Bitmap mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dog_edge);</div><div class="line">        mPaint.setShader(new BitmapShader(mBitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawRect(0, 0, getWidth(), getHeight(), mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3148e2d732cb7ba9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>给自定义的控件添加上宽高限制：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;!--&lt;com.xxt.xtest.TestView</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot; /&gt;--&gt;</div><div class="line">&lt;com.xxt.xtest.TestView</div><div class="line">    android:layout_width=&quot;300dp&quot;</div><div class="line">    android:layout_height=&quot;450dp&quot;</div><div class="line">    android:layout_gravity=&quot;center_horizontal&quot;/&gt;</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6d202b7ca6dc61aa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以看出：</p><ul><li>在 X 轴和 Y 轴都使用 REPEAT 模式下，在超出单个图像的区域后，就会重复绘制这个图像。</li><li>绘制是从控件的左上角开始的，而不是从屏幕原点开始的。这点很好理解，因为我们只会在自定义控件上绘图，不会在全屏幕上绘图。</li></ul><h4 id="2-TileMode-模式解析"><a href="#2-TileMode-模式解析" class="headerlink" title="2. TileMode 模式解析"></a>2. TileMode 模式解析</h4><p>上面初步看到了 REPEAT 模式的用法，现在我们分别来看在各个模式下的不同表现。<br><strong>1）TileMode.REPEAT 模式：重复原图像来填充多余空间</strong><br>在更改模式时，只需要更新setShader里的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setShader(new BitmapShader(mBmp, TileMode.REPEAT, TileMode.REPEAT));</div></pre></td></tr></table></figure></p><p>在这里，X 轴、Y 轴全部设置成 REPEAT 模式，所以当控件的显示范围超出了单个图的显示范围时，在 X 轴上将使用 REPEAT 模式；同样，在 Y 轴上也将使用 REPEAT 模式。</p><p><strong>2）TileMode.MIRROR 模式：重复使用镜像模式的图像来填充多余空间</strong><br>同样，将 X 轴、Y 轴全部改为 MIRROR 模式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setShader(new BitmapShader(mBmp, TileMode.MIRROR, TileMode.MIRROR));</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1acfebf405a0e336.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 X 轴上每两张图片的显示都像镜子一样翻转一下。同样，在 Y 轴上每两张图片的显示也都像镜子一样翻转一下。所以这就是镜相效果的作用，镜相效果其实就是在显示下一图片的时候，就相当于两张图片中间放了一个镜子一样。</p><p><strong>3）TileMode.CLAMP：用边缘色彩填充多余空间</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setShader(new BitmapShader(mBmp, TileMode.CLAMP, TileMode.CLAMP));</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a3d0c5b36c613db1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>CLAMP 模式的意思就是当控件区域超过当前单个图片的大小时，空白位置的颜色填充就用图片的边缘颜色来填充。</p><p><strong>4）TileMode.CLAMP 与填充顺序</strong><br>当 X 轴、Y 轴全部都是 CLAMP 模式时，X 轴的空白区域会用图像的右侧边缘颜色来填充；Y 轴的空白区域会用图像的底部的边缘颜色来填充，那效果应该是这样的：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-8a5b91ff64280b8c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>明显右下角的空白位置根本与图像是不沾边的，那它要用什么颜色来填充呢？是填充上方的蓝色还是填充左侧的绿色呢？</p><p>从最终的效果图来看，这部分填充的颜色是绿色的，可为什么呢？其实这是跟填充顺序有关的，并且是先填充竖向再填充横向。如果是先填充横向再填充竖向，那么右下角颜色应该是蓝色。</p><p><strong>4）使用混合填充模式</strong><br>比如在 X 轴填充空白区域时使用 MIRROR 样式、在填充 Y 轴空白区域时使用REPEAT样式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mPaint.setShader(new BitmapShader(mBmp, TileMode.MIRROR, TileMode.REPEAT));</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-9dbadb9051f8c178.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以看出来，首先使用 REPEAT 模式填充 Y 轴，然后使用 MIRROR 模式填充 X 轴。</p><blockquote><p>总之：无论哪两种模式混合或者相同模式，都是先填充 Y 轴，然后填充 X 轴。</p></blockquote><h4 id="3-绘图位置与图像显示"><a href="#3-绘图位置与图像显示" class="headerlink" title="3. 绘图位置与图像显示"></a>3. 绘图位置与图像显示</h4><p>在上面的例子中，我们利用 drawRect 把整个控件大小都给覆盖了，那假如我们只画一个小矩形而不完全覆盖整个控件，那我们 setShader() 函数中所设置的图片是从哪里开始画的呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        Bitmap mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dog_edge);</div><div class="line">        mPaint.setShader(new BitmapShader(mBitmap, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        float left = getWidth() / 3f;</div><div class="line">        float top = getHeight() / 3f;</div><div class="line">        float right = getWidth() * 2f / 3;</div><div class="line">        float bottom = getHeight() * 2f / 3;</div><div class="line">        canvas.drawRect(left,top,right,bottom, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>即在绘图时，并不是完全覆盖控件大小的，而是取控件中间位置的 1/3 区域显示的。效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bebdbf0c243f7d16.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="7-4-3-示例一：望远镜效果"><a href="#7-4-3-示例一：望远镜效果" class="headerlink" title="7.4.3 示例一：望远镜效果"></a>7.4.3 示例一：望远镜效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d4a84ed28fe1ee93.gif?imageMogr2/auto-orient/strip" alt=""></p><p>这里要实现的效果是：根据手指所在的位置，把对应的图像绘制出来。这样看起来就是望远镜效果了。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Rect mRect;</div><div class="line">    private int mDx = -1;</div><div class="line">    private int mDy = -1;</div><div class="line">    private Bitmap mBitmap, mBitmapBg;</div><div class="line">    private int mRadius = 300;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.meinv);</div><div class="line">        mRect = new Rect();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        switch (event.getAction()) &#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                mDx = (int) event.getX();</div><div class="line">                mDy = (int) event.getY();</div><div class="line">                invalidate();</div><div class="line">                return true;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                mDx = (int) event.getX();</div><div class="line">                mDy = (int) event.getY();</div><div class="line">                break;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">            case MotionEvent.ACTION_CANCEL:</div><div class="line">                mDx = -1;</div><div class="line">                mDy = -1;</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        invalidate();</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        if (mBitmapBg == null) &#123;</div><div class="line">            mBitmapBg = Bitmap.createBitmap(getWidth(), getHeight(), Bitmap.Config.ARGB_8888);</div><div class="line">            Canvas canvasBg = new Canvas(mBitmapBg);</div><div class="line">            mRect.set(0, 0, getWidth(), getHeight());</div><div class="line">            canvasBg.drawBitmap(mBitmap, null, mRect, mPaint);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        if (mDx != -1 &amp;&amp; mDy != -1) &#123;</div><div class="line">            mPaint.setShader(new BitmapShader(mBitmapBg, Shader.TileMode.REPEAT, Shader.TileMode.REPEAT));</div><div class="line">            canvas.drawCircle(mDx, mDy, mRadius, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>我们主要来看下 OnDraw() 函数：<br>在 onDraw() 函数中，第一部分，就是新建一个空白的 bitmap，这个 bitmap 的大小与控件一样，然后把我们的背景图进行拉伸，画到这个空白的 bitmap 上。由于这里的 canvasBg 是用 mBitmapBg 创建的，所以所画的任何图像都会直接显示在 mBitmapBg 上，而我们创建的 mBitmapBg 是与控件一样大的，所以当把 mBitmapBg 做为 Shader 来设置给 mPaint 时，mBitmapBg 会正好覆盖整个控件，而不会有多余的空白像素。</p><p>这里需要注意的就是我们在将原图像画到 mBitmapBg 时，进行了拉伸压缩，把它拉伸到和当前控件一样大小。然后利用 OnMotionEvent 来捕捉用户的手指位置，当用户手指下按时，在手指位置画一个半径为 mRadius 的圆形，把对应的位置的图像显示出来就可以了。</p><p><div id="jump4"></div></p><h3 id="7-4-4-示例二：生成不规则头像"><a href="#7-4-4-示例二：生成不规则头像" class="headerlink" title="7.4.4 示例二：生成不规则头像"></a>7.4.4 示例二：生成不规则头像</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-817a7e05511f03bc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>res/values/attrs.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;TestView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;src&quot; format=&quot;reference&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;format&quot; format=&quot;enum&quot;&gt;</div><div class="line">            &lt;enum name=&quot;circle&quot; value=&quot;0&quot;/&gt;</div><div class="line">            &lt;enum name=&quot;rectTangle&quot; value=&quot;1&quot;/&gt;</div><div class="line">        &lt;/attr&gt;</div><div class="line">        &lt;attr name=&quot;radius&quot; format=&quot;integer&quot; /&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>自定义控件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private BitmapShader mBitmapShader;</div><div class="line">    private int mEnumFormat = 0;</div><div class="line">    private int mRadius = 5;</div><div class="line">    private RectF mRectF;</div><div class="line">    private Matrix mMatrix;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) throws Exception&#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init(context,attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs, int defStyle) throws Exception&#123;</div><div class="line">        super(context, attrs, defStyle);</div><div class="line">        init(context,attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init(Context context,AttributeSet attrs) throws Exception&#123;</div><div class="line">        // 提取属性定义</div><div class="line">        TypedArray typedArray = context.obtainStyledAttributes(attrs,R.styleable.TestView);</div><div class="line">        int BitmapID = typedArray.getResourceId(R.styleable.TestView_src,-1);</div><div class="line">        if (BitmapID == -1)&#123;</div><div class="line">            throw new Exception(&quot;TestView 需要定义 Src 属性，而且必须是图像&quot;);</div><div class="line">        &#125;</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(),BitmapID);</div><div class="line">        mEnumFormat = typedArray.getInt(R.styleable.TestView_format,0);</div><div class="line">        if (mEnumFormat == 1)&#123;</div><div class="line">            mRadius = typedArray.getInt(R.styleable.TestView_radius,5);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        typedArray.recycle();</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mBitmapShader = new BitmapShader(mBitmap, Shader.TileMode.CLAMP, Shader.TileMode.CLAMP);</div><div class="line">        mRectF = new RectF();</div><div class="line">        mMatrix = new Matrix();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">        int width = mBitmap.getWidth();</div><div class="line">        int height = mBitmap.getHeight();</div><div class="line">        width = (measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth: width;</div><div class="line">        height = (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight: height;</div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        float scale = (float) getWidth()/mBitmap.getWidth();</div><div class="line">        mMatrix.reset();</div><div class="line">        mMatrix.setScale(scale, scale);</div><div class="line">        mBitmapShader.setLocalMatrix(mMatrix);</div><div class="line">        mPaint.setShader(mBitmapShader);</div><div class="line"></div><div class="line">        float half = getWidth() / 2f;</div><div class="line"></div><div class="line">        if (mEnumFormat == 0)&#123;</div><div class="line">            canvas.drawCircle(half, half, getWidth() / 2f, mPaint);</div><div class="line">        &#125; else if(mEnumFormat == 1)&#123;</div><div class="line">            mRectF.set(0, 0, getWidth(), getHeight());</div><div class="line">            canvas.drawRoundRect(mRectF, mRadius, mRadius, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 XML 中使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:padding=&quot;20dp&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        app:src=&quot;@drawable/meinv&quot;</div><div class="line">        app:format=&quot;circle&quot;/&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;100dp&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        app:src=&quot;@drawable/head&quot;</div><div class="line">        app:format=&quot;circle&quot;/&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;100dp&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;</div><div class="line">        app:src=&quot;@drawable/meinv&quot;</div><div class="line">        app:format=&quot;rectTangle&quot;</div><div class="line">        app:radius=&quot;10&quot;/&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;130dp&quot;</div><div class="line">        android:layout_height=&quot;130dp&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;</div><div class="line">        app:src=&quot;@drawable/head&quot;</div><div class="line">        app:format=&quot;rectTangle&quot;</div><div class="line">        app:radius=&quot;30&quot;/&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;150dp&quot;</div><div class="line">        android:layout_height=&quot;150dp&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;</div><div class="line">        app:src=&quot;@drawable/meinv&quot;</div><div class="line">        app:format=&quot;rectTangle&quot;</div><div class="line">        app:radius=&quot;70&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.3 精通自定义 View 之 绘图进阶——BlurMaskFilter 发光效果与图片阴影</title>
      <link href="/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/"/>
      <url>/2019/07/07/Custom%20View/07.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94BlurMaskFilter%20%E5%8F%91%E5%85%89%E6%95%88%E6%9E%9C%E4%B8%8E%E5%9B%BE%E7%89%87%E9%98%B4%E5%BD%B1/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2c82cb72b3789dbb.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在这张效果图中涉及三个发光效果：文字、图形和位图。</p><p>从最后一张美女位图所形成的发光效果中可以看到，与 setShadowLayer() 函数一样，发光效果也只会影响边缘部分图像，内部图像是不受影响的。</p><p>从第三幅图像（红绿各一半的位图）中可以看到：发光效果是无法指定发光颜色的，采用边缘部分的颜色取样来进行模糊发光。所以边缘是什么颜色，发出的光也就是什么颜色的。</p><p>所以初步我们对发光效果有如下结论：</p><ul><li>与 setShadowLayer() 函数一样，发光效果使用的也是高斯模糊算法，并且只会影响边缘部分图像，内部图像是不受影响的。</li><li>发光效果是无法指定发光颜色的，采用边缘部分的颜色取样来进行模糊发光。所以边缘是什么颜色，发出的光也就是什么颜色的。</li></ul><p><div id="jump1"></div></p><h3 id="7-3-1-概述"><a href="#7-3-1-概述" class="headerlink" title="7.3.1 概述"></a>7.3.1 概述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public MaskFilter setMaskFilter(MaskFilter maskfilter)</div></pre></td></tr></table></figure><p>setMaskFilter() 函数中的 MaskFilter 也是没有具体实现的，是通过派生子类来实现具体的不同功能的。MaskFilter 有两个派生类：BlurMaskFilter 和 EmbossMaskFilter。其中，BlurMaskFilter 就能够实现发光效果；而 EmbossMaskFilter 则可以用于实现浮雕效果，用处很少，这里就不再讲解了。另一点需要注意的是，setMaskFilter() 函数是不支持硬件加速的，必须关闭硬件加速才可以。</p><p>BlurMaskFilter 的构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public BlurMaskFilter(float radius, Blur style)</div></pre></td></tr></table></figure></p><ul><li>float radius：用来定义模糊半径，同样是高斯模糊算法。</li><li>Blur style：发光样式，有内 Blur.INNER(内发光)、Blur.SOLID(外发光)、Blur.NORMAL(内外发光)、Blur.OUTER(仅发光部分可见)。</li></ul><p>上面效果图的示例代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint = new Paint();</div><div class="line">    private Bitmap mHeadBmp;</div><div class="line">    private Rect mRect;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init()&#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setTextSize(50);</div><div class="line">        mHeadBmp = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">        mRect = new Rect();</div><div class="line">        mPaint.setMaskFilter(new BlurMaskFilter(40, BlurMaskFilter.Blur.SOLID));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.drawText(&quot;xian小涛&quot;,100,100, mPaint);</div><div class="line">        canvas.drawCircle(300,300,50, mPaint);</div><div class="line">        mRect.set(300,500,300 + mHeadBmp.getWidth(),500 + mHeadBmp.getHeight());</div><div class="line">        canvas.drawBitmap(mHeadBmp,null, mRect, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><strong>BlurStyle 发光效果图</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a54f96eedd8b3cf7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依次为：Blur.INNER(内发光)、Blur.SOLID(外发光)、Blur.NORMAL(内外发光)、Blur.OUTER(仅发光部分可见)"></p><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private BlurMaskFilter inner, solid, normal, outer;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line"></div><div class="line">        inner = new BlurMaskFilter(40, BlurMaskFilter.Blur.INNER);</div><div class="line">        solid = new BlurMaskFilter(40, BlurMaskFilter.Blur.SOLID);</div><div class="line">        normal = new BlurMaskFilter(40, BlurMaskFilter.Blur.NORMAL);</div><div class="line">        outer = new BlurMaskFilter(40, BlurMaskFilter.Blur.OUTER);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPaint.setMaskFilter(inner);</div><div class="line">        canvas.drawCircle(200,200,100, mPaint);</div><div class="line"></div><div class="line">        canvas.translate(300, 0);</div><div class="line">        mPaint.setMaskFilter(solid);</div><div class="line">        canvas.drawCircle(200,200,100, mPaint);</div><div class="line"></div><div class="line">        canvas.translate(300, 0);</div><div class="line">        mPaint.setMaskFilter(normal);</div><div class="line">        canvas.drawCircle(200,200,100, mPaint);</div><div class="line"></div><div class="line">        canvas.translate(300, 0);</div><div class="line">        mPaint.setMaskFilter(outer);</div><div class="line">        canvas.drawCircle(200,200,100, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>其中，Blur.OUTER 比较特殊，在这种模式下仅显示发光效果，会把原图像中除发光部分外的其他部分全部变为透明。</p></blockquote><p><div id="jump2"></div></p><h3 id="7-3-2-给图片添加纯色阴影"><a href="#7-3-2-给图片添加纯色阴影" class="headerlink" title="7.3.2 给图片添加纯色阴影"></a>7.3.2 给图片添加纯色阴影</h3><p>大家是否可以看出来发光效果与 setShadowLayer() 函数所生成的阴影之间有什么联系？</p><p>先来分析一下 setShadowLayer() 函数的阴影形成过程（假定阴影画笔是灰色）。对于文字和图形，它首先产生一个跟原型一样的灰色副本。然后对这个灰色副本应用 BlurMaskFilter，使其内外发光；这样就形成了所谓的阴影，当然最后再偏移一段距离。</p><p>所以，我们要给图片添加灰色阴影效果，就可以仿照这个过程：先绘制一幅跟图片一样大小的灰色图像，然后给这个灰色图形应用 BlurMaskFilter 使其内外发光，最后偏移原图形一段距离绘制阴影。</p><p>这里涉及到三个点：</p><ul><li>绘制一幅跟图片一样大小的灰色图像。</li><li>对灰色图像应用 BlurMaskFilter 使其内外发光。</li><li>偏移原图形一段距离绘制阴影。</li></ul><h4 id="1-抽取灰色图像"><a href="#1-抽取灰色图像" class="headerlink" title="1. 抽取灰色图像"></a>1. 抽取灰色图像</h4><p>首先来看怎么能绘出一个指定位图所对应的灰色图像。我们知道 canvas.drawBitmap(Bitmap bitmap, Rect src, Rect dst, Paint paint) 中的画笔颜色对画出来的位图是没有任何影响的，所以，如果我们需要画一张对应的灰色图像，就需要新建一张一样大小的空白图，而且新图片的透明度要与原图片保持一致。这样一来，如何从原图片中抽出 Alpha 值成为关键。即我们只需要创建一个与原图片一样大小且Alpha相同的图片即可。</p><p>其实，Bitmap 中已经存在抽取出只具有 Alpha 值图片的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public Bitmap extractAlpha();</div></pre></td></tr></table></figure></p><p>这个函数的功能是：新建一张空白图片，该图片具有与原图片一样的 Alpha 值，把这个新建的 Bitmap 作为结果返回。这个空白图片中每个像素都具有与原图片一样的 Alpha 值，而且具体的颜色是在使用canvas.drawBitmap() 函数绘制时由传入的画笔颜色指定的。</p><p><strong>总结：extractAlpha() 会新建一幅仅具有 Alpha 值的空白图像，而且这张图像的颜色是在使用 canvas.drawBitmap() 函数绘制时传入的画笔颜色指定的。</strong></p><p>下面拿一张图片来做实验，这张 PNG 图片中，只有一只小狗，其余地方都是透明色。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0fa63d9969df5489.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>下面分别利用 extractAlpha() 函数画出该图片所对应的灰色和黑色阴影，效果图如下所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ca07885ef1838c7d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="原图、灰色阴影、黑色阴影"></p><p>示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap, mAlphaBmp;</div><div class="line">    private Rect mRect;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mRect = new Rect();</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">        mAlphaBmp = mBitmap.extractAlpha();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        int width = 200;</div><div class="line">        int height = width * mAlphaBmp.getHeight() / mAlphaBmp.getWidth();</div><div class="line">        // 绘制原图</div><div class="line">        mRect.set(50, 50, 50 + width, 50 + height);</div><div class="line">        canvas.drawBitmap(mBitmap, null, mRect, mPaint);</div><div class="line">        // 绘制灰色阴影</div><div class="line">        canvas.translate(width + 100, 0);</div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        canvas.drawBitmap(mAlphaBmp, null, mRect, mPaint);</div><div class="line">        // 绘制黑色阴影</div><div class="line">        canvas.translate(width + 100, 0);</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        canvas.drawBitmap(mAlphaBmp, null, mRect, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-绘制阴影"><a href="#2-绘制阴影" class="headerlink" title="2. 绘制阴影"></a>2. 绘制阴影</h4><p>在上面灰色纯色图像的基础上，将此灰色图像使用 BlurMaskFilter 使其内外发光。然后再在灰色模糊阴影的基础上画上原图像，就形成了模糊阴影。代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap, mAlphaBmp;</div><div class="line">    private Rect mRect;</div><div class="line">    private BlurMaskFilter mFilter;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mRect = new Rect();</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.dog);</div><div class="line">        mAlphaBmp = mBitmap.extractAlpha();</div><div class="line">        mFilter = new BlurMaskFilter(30, BlurMaskFilter.Blur.NORMAL);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        int width = 200;</div><div class="line">        int height = width * mAlphaBmp.getHeight() / mAlphaBmp.getWidth();</div><div class="line">        mRect.set(50, 50, 50 + width, 50 + height);</div><div class="line"></div><div class="line">        // 绘制灰色阴影</div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        mPaint.setMaskFilter(mFilter);</div><div class="line">        canvas.drawBitmap(mAlphaBmp, null, mRect, mPaint);</div><div class="line"></div><div class="line">        // 绘制原图</div><div class="line">        mPaint.setMaskFilter(null);</div><div class="line">        canvas.translate(-10, -10);</div><div class="line">        canvas.drawBitmap(mBitmap, null, mRect, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-64d6af67e125a769.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="7-3-3-封装控件"><a href="#7-3-3-封装控件" class="headerlink" title="7.3.3 封装控件"></a>7.3.3 封装控件</h3><p>将它封装成一个控件，具有如下功能：</p><ul><li>让用户定义图片内容。</li><li>让用户定义偏移距离。</li><li>让用户定义阴影颜色和阴影模糊程度。</li><li>可以使用wrap_content属性自适应大小。</li></ul><blockquote><p>下面程序经过多次测试，效果并不完美，待完善。</p></blockquote><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7a5cfd013c874038.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>res/values/xshadow.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;resources&gt;</div><div class="line">    &lt;declare-styleable name=&quot;XShadowImageView&quot;&gt;</div><div class="line">        &lt;attr name=&quot;src&quot; format=&quot;reference&quot;/&gt;</div><div class="line">        &lt;attr name=&quot;shadowDx&quot; format=&quot;integer&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;shadowDy&quot; format=&quot;integer&quot; /&gt;</div><div class="line">        &lt;attr name=&quot;shadowColor&quot; format=&quot;color&quot;/&gt;</div><div class="line">        &lt;attr name=&quot;shadowRadius&quot; format=&quot;float&quot;/&gt;</div><div class="line">    &lt;/declare-styleable&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>src/…/XShadowImageView.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class XShadowImageView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap, mShadowBitmap;</div><div class="line">    private int mDx, mDy;</div><div class="line">    private float mRadius;</div><div class="line">    private int mShadowColor;</div><div class="line">    private BlurMaskFilter mBlurMaskFilter;</div><div class="line">    private Rect mRect;</div><div class="line"></div><div class="line">    public XShadowImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public XShadowImageView(Context context, @Nullable AttributeSet attrs, int defStyleAttr) &#123;</div><div class="line">        super(context, attrs, defStyleAttr);</div><div class="line">        init(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        // 禁用硬件加速</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line"></div><div class="line">        // 提取属性</div><div class="line">        TypedArray ta = context.obtainStyledAttributes(attrs, R.styleable.XShadowImageView);</div><div class="line">        mDx = ta.getInt(R.styleable.XShadowImageView_shadowDx, 0);</div><div class="line">        mDy = ta.getInt(R.styleable.XShadowImageView_shadowDy, 0);</div><div class="line">        mRadius = ta.getFloat(R.styleable.XShadowImageView_shadowRadius, 0);</div><div class="line">        mShadowColor = ta.getInt(R.styleable.XShadowImageView_shadowColor, Color.BLACK);</div><div class="line">        int bitmapId = ta.getResourceId(R.styleable.XShadowImageView_src, -1);</div><div class="line">        if (bitmapId != -1) &#123;</div><div class="line">            mBitmap = BitmapFactory.decodeResource(getResources(), bitmapId);</div><div class="line">        &#125;</div><div class="line">        ta.recycle();</div><div class="line"></div><div class="line">        // 其他初始化</div><div class="line">        mRect = new Rect();</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(mShadowColor);</div><div class="line">        mBlurMaskFilter = new BlurMaskFilter(mRadius, BlurMaskFilter.Blur.NORMAL);</div><div class="line">        if (mBitmap != null) &#123;</div><div class="line">            mShadowBitmap = mBitmap.extractAlpha();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        int measureWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int measureHeight = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int measureWidthMode = MeasureSpec.getMode(widthMeasureSpec);</div><div class="line">        int measureHeightMode = MeasureSpec.getMode(heightMeasureSpec);</div><div class="line"></div><div class="line">        int width = mBitmap.getWidth();</div><div class="line">        int height = mBitmap.getHeight();</div><div class="line">        width = (measureWidthMode == MeasureSpec.EXACTLY) ? measureWidth: width;</div><div class="line">        height = (measureHeightMode == MeasureSpec.EXACTLY) ? measureHeight: height;</div><div class="line">        setMeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        if (mBitmap != null) &#123;</div><div class="line">            int width = getWidth() - mDx;</div><div class="line">            int height = getHeight() - mDy;</div><div class="line"></div><div class="line">            // 绘制阴影</div><div class="line">            mPaint.setMaskFilter(mBlurMaskFilter);</div><div class="line">            mRect.set(mDx, mDy, width, height);</div><div class="line">            canvas.drawBitmap(mShadowBitmap, null, mRect, mPaint);</div><div class="line"></div><div class="line">            // 绘制原图像</div><div class="line">            mPaint.setMaskFilter(null);</div><div class="line">            mRect.set(0, 0, width, height);</div><div class="line">            canvas.drawBitmap(mBitmap, null, mRect, mPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    xmlns:app=&quot;http://schemas.android.com/apk/res-auto&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.XShadowImageView</div><div class="line">        android:layout_width=&quot;100dp&quot;</div><div class="line">        android:layout_height=&quot;100dp&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">        app:src=&quot;@drawable/head&quot;</div><div class="line">        app:shadowDx=&quot;30&quot;</div><div class="line">        app:shadowDy=&quot;30&quot;</div><div class="line">        app:shadowRadius=&quot;30.0&quot;</div><div class="line">        app:shadowColor=&quot;@android:color/black&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.XShadowImageView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">        app:src=&quot;@drawable/head&quot;</div><div class="line">        app:shadowDx=&quot;30&quot;</div><div class="line">        app:shadowDy=&quot;30&quot;</div><div class="line">        app:shadowRadius=&quot;30.0&quot;</div><div class="line">        app:shadowColor=&quot;@android:color/holo_red_dark&quot;/&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.XShadowImageView</div><div class="line">        android:layout_width=&quot;260dp&quot;</div><div class="line">        android:layout_height=&quot;360dp&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">        app:src=&quot;@drawable/meinv&quot;</div><div class="line">        app:shadowDx=&quot;40&quot;</div><div class="line">        app:shadowDy=&quot;40&quot;</div><div class="line">        app:shadowRadius=&quot;40.0&quot;</div><div class="line">        app:shadowColor=&quot;@android:color/holo_red_dark&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.2 精通自定义 View 之 绘图进阶——setShadowLayer 与阴影效果</title>
      <link href="/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/"/>
      <url>/2019/07/07/Custom%20View/07.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94setShadowLayer%20%E4%B8%8E%E9%98%B4%E5%BD%B1%E6%95%88%E6%9E%9C/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>利用 layer-list 只能实现按钮的阴影效果，对于文字和图片都无法实现阴影效果，除了 layer-list，我们只能用自定义控件来实现阴影效果了，Paint 中有一个专门用来实现阴影效果的函数 setShadowLayer，我们先来看看这个函数实现的阴影效果图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fea6ceb64d2ef245.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以看出 setShadowLayer 函数能够实现：</p><ul><li>定制阴影模糊程度</li><li>定制阴影偏移距离</li><li>清除阴影和显示阴影</li></ul><p><div id="jump1"></div></p><h3 id="7-2-1-setShadowLayer-构造函数"><a href="#7-2-1-setShadowLayer-构造函数" class="headerlink" title="7.2.1 setShadowLayer() 构造函数"></a>7.2.1 setShadowLayer() 构造函数</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setShadowLayer(float radius, float dx, float dy, int color)</div></pre></td></tr></table></figure><ul><li>float radius：意思是模糊半径，radius 越大越模糊，越小越清晰，但是如果 radius 设置为0，则阴影消失不见。</li><li>float dx：阴影的横向偏移距离，正值向右偏移，负值向左偏移。</li><li>float dy：阴影的纵向偏移距离，正值向下偏移，负值向上偏移。</li><li>int color：绘制阴影的画笔颜色，即阴影的颜色（对图片阴影无效）。</li></ul><p>setShadowLayer 使用的是高斯模糊算法，高斯模糊的具体算法是：对于正在处理的每一个像素，取周围若干个像素的 RGB 值并且平均，然后这个平均值就是模糊处理过的像素。如果对图片中的所有像素都这么处理的话，处理完成的图片就会变得模糊。其中，所取周围像素的半径就是模糊半径。所以，模糊半径越大，所得平均像素与原始像素相差就越大，也就越模糊。</p><p>绘制阴影的画笔颜色为什么对图片无效？</p><p>从上面的效果图中可以看出，使用 setShadowLayer 所产生的阴影，对于文字和绘制的图形的阴影都是使用自定义的阴影画笔颜色来画的；而图片的阴影则是直接产生一张相同的图片，仅对阴影图片的边缘进行模糊。之所以生成一张相同的背景图片，是因为如果统一使用某一种颜色来做阴影可能会与图片的颜色相差很大，而且不协调，比如某张图片的色彩非常丰富，而阴影如果使用灰色来做，可能就会显得很突兀，所以为了解决这个问题，针对图片的阴影就不再是统一颜色了，而是复制出这张图片，把复制出的图片的边缘进行模糊，做为阴影。但这样又会引起一个问题，就是如果我们想把图片的阴影做成灰色怎么办？使用 setShadowLayer 自动生成阴影是没办法了，在下篇我们会具体来讲，如何给图片添加指定颜色的阴影。</p><blockquote><p>注意：setShadowLayer 只有文字绘制阴影支持硬件加速，其它都不支持硬件加速，为了方便起见，需要在自定义控件中禁用硬件加速。</p></blockquote><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fc3493677e1727cb.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint = new Paint();</div><div class="line">    private Bitmap mHeadBmp;</div><div class="line">    private Rect mRect;</div><div class="line">    private int mRadius = 1;</div><div class="line">    private int mDx = 10;</div><div class="line">    private int mDy = 10;</div><div class="line">    private boolean mSetShadow = true;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init()&#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setTextSize(50);</div><div class="line">        mHeadBmp = BitmapFactory.decodeResource(getResources(), R.drawable.head);</div><div class="line">        mRect = new Rect();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        if (mSetShadow) &#123;</div><div class="line">            mPaint.setShadowLayer(mRadius, mDx, mDy, Color.GRAY);</div><div class="line">        &#125; else &#123;</div><div class="line">            mPaint.clearShadowLayer();</div><div class="line">        &#125;</div><div class="line">        canvas.drawText(&quot;xian小涛&quot;,100,100, mPaint);</div><div class="line">        canvas.drawCircle(200,200,50, mPaint);</div><div class="line">        mRect.set(200,300,200 + mHeadBmp.getWidth(),300 + mHeadBmp.getHeight());</div><div class="line">        canvas.drawBitmap(mHeadBmp,null, mRect, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void changeRadius() &#123;</div><div class="line">        mRadius++;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void changeDx() &#123;</div><div class="line">        mDx+=5;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void changeDy() &#123;</div><div class="line">        mDy+=5;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void clearShadow()&#123;</div><div class="line">        mSetShadow = false;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void showShadow()&#123;</div><div class="line">        mSetShadow = true;</div><div class="line">        postInvalidate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private TestView mView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mView = findViewById(R.id.view);</div><div class="line">        findViewById(R.id.radius_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.dx_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.dy_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.clear_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.show_btn).setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        switch (v.getId())&#123;</div><div class="line">            case R.id.radius_btn:</div><div class="line">                mView.changeRadius();</div><div class="line">                break;</div><div class="line">            case R.id.dx_btn:</div><div class="line">                mView.changeDx();</div><div class="line">                break;</div><div class="line">            case R.id.dy_btn:</div><div class="line">                mView.changeDy();</div><div class="line">                break;</div><div class="line">            case R.id.clear_btn:</div><div class="line">                mView.clearShadow();</div><div class="line">                break;</div><div class="line">            case R.id.show_btn:</div><div class="line">                mView.showShadow();</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="7-2-2-清除阴影"><a href="#7-2-2-清除阴影" class="headerlink" title="7.2.2 清除阴影"></a>7.2.2 清除阴影</h3><p>清除阴影其实有两个方法，可以将setShadowLayer的radius的值设为0，也可以使用专门的清除阴影的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void clearShadowLayer()</div></pre></td></tr></table></figure></p><p>具体效果见上面例子。</p><p><div id="jump3"></div></p><h3 id="7-2-3-示例：给文字添加阴影"><a href="#7-2-3-示例：给文字添加阴影" class="headerlink" title="7.2.3 示例：给文字添加阴影"></a>7.2.3 示例：给文字添加阴影</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-37733c90da49b0ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从图中可以看到，TextView、Button、EditText 中的文字自定添加了阴影。而且对于 EditText 而言，新输入的文字依然有阴影效果。</p><p>setShadowLayer 是 API 1 就已经引入的函数，而且添加了 TextView 类 和 TextView 的派生类来支持阴影设置。TextView 的派生类如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b2bc9117410494fb?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="1-通过-XML-属性添加阴影"><a href="#1-通过-XML-属性添加阴影" class="headerlink" title="1. 通过 XML 属性添加阴影"></a>1. 通过 XML 属性添加阴影</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;TextView</div><div class="line">    ......</div><div class="line">    android:shadowRadius=&quot;3&quot;</div><div class="line">    android:shadowDx=&quot;5&quot;</div><div class="line">    android:shadowDy=&quot;5&quot;</div><div class="line">    android:shadowColor=&quot;@android:color/darker_gray&quot;/&gt;</div></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;使用XML添加阴影效果&quot;</div><div class="line">        android:shadowRadius=&quot;3&quot;</div><div class="line">        android:shadowDx=&quot;5&quot;</div><div class="line">        android:shadowDy=&quot;5&quot;</div><div class="line">        android:shadowColor=&quot;@android:color/darker_gray&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/radius_btn&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;使用XML添加阴影效果&quot;</div><div class="line">        android:shadowRadius=&quot;3&quot;</div><div class="line">        android:shadowDx=&quot;5&quot;</div><div class="line">        android:shadowDy=&quot;5&quot;</div><div class="line">        android:shadowColor=&quot;@android:color/darker_gray&quot;/&gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;使用XML添加阴影效果&quot;</div><div class="line">        android:shadowRadius=&quot;3&quot;</div><div class="line">        android:shadowDx=&quot;5&quot;</div><div class="line">        android:shadowDy=&quot;5&quot;</div><div class="line">        android:shadowColor=&quot;@android:color/darker_gray&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><h4 id="2-代码实现"><a href="#2-代码实现" class="headerlink" title="2. 代码实现"></a>2. 代码实现</h4><p>TextView 及其派生类都有一个 Paint.setShadowLayer 的同名方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setShadowLayer(float radius, float dx, float dy, int color)</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">TextView tv = findViewById(R.id.tv);</div><div class="line">tv.setShadowLayer(3, 5, 5, Color.GRAY);</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07.1 精通自定义 View 之 绘图进阶——贝济埃曲线</title>
      <link href="/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/"/>
      <url>/2019/07/07/Custom%20View/07.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20%E7%BB%98%E5%9B%BE%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E8%B4%9D%E6%B5%8E%E5%9F%83%E6%9B%B2%E7%BA%BF/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="7-1-1-概述"><a href="#7-1-1-概述" class="headerlink" title="7.1.1 概述"></a>7.1.1 概述</h3><p>在 Path 的系列函数中，除了一些基本的设置和绘图用法外，还有一个强大的工具——贝济埃曲线。它能将利用 moveTo、lineTo 连接的生硬路径变得平滑，也能够实现很多炫酷的效果，比如水波纹等。</p><h4 id="1-贝赛尔曲线来源"><a href="#1-贝赛尔曲线来源" class="headerlink" title="1. 贝赛尔曲线来源"></a>1. 贝赛尔曲线来源</h4><p>贝塞尔曲线于 1962 年，由法国工程师皮埃尔·贝塞尔（Pierre Bézier）所广泛发表，他运用贝塞尔曲线来为汽车的主体进行设计。贝塞尔曲线最初由 Paul de Casteljau 于 1959 年运用 de Casteljau 算法开发，以稳定数值的方法求出贝塞尔曲线。</p><p>在数学的数值分析领域中，贝赛尔曲线（Bézier 曲线）是电脑图形学中相当重要的参数曲线。更高维度的广泛化贝塞尔曲线就称作贝塞尔曲面，其中贝塞尔三角是一种特殊的实例。</p><h4 id="2-贝济埃曲线公式"><a href="#2-贝济埃曲线公式" class="headerlink" title="2. 贝济埃曲线公式"></a>2. 贝济埃曲线公式</h4><p><strong>1）一阶贝济埃曲线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d7535084366336a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-88a1d9f33c56d0d5?imageMogr2/auto-orient/strip" alt=""></p><p>P0 为起点、P1 为终点，t 表示当前时间，B(t) 表示公式的结果值。<br>注意，曲线的意义就是公式结果 B(t) 随时间的变化，其取值所形成的轨迹。在动画中，黑色点表示在当前时间 t 下公式 B(t) 的取值。而红色的那条线就不在各个时间点下不同取值的 B(t) 所形成的轨迹。</p><p>总而言之：对于一阶贝济埃曲线，大家可以理解为在起始点和终点形成的这条直线上，匀速移动的点。</p><p><strong>2）二阶贝济埃曲线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d0fab250e052d246?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-723ce7c1ee1e0016?imageMogr2/auto-orient/strip" alt=""></p><p>在这里 P0 是起始点，P2 是终点，P1 是控制点。<br>假设将时间定在 t=0.25 的时刻，此时的状态如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b43003ea2bdfb507?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>首先，P0 点和 P1 点形成了一条贝济埃曲线，还记得我们上面对一阶贝济埃曲线的总结么：就是一个点在这条直线上做匀速运动；所以 P0-P1 这条直线上的移动的点就是 Q0。</p><p>同样，P1、P2 形成了一条一阶贝济埃曲线，在这条一阶贝济埃曲线上，它们的随时间移动的点是 Q1。</p><p>最后，动态点 Q0 和 Q1 又形成了一条一阶贝济埃曲线，在它们这条一阶贝济埃曲线动态移动的点是 B。而 B 的移动轨迹就是这个二阶贝济埃曲线的最终形态。从上面的讲解大家也可以知道，之所以叫它二阶贝济埃曲线是因为，B 的移动轨迹是建立在两个一阶贝济埃曲线的中间点 Q0、Q1 的基础上的。</p><p>在理解了二阶贝赛尔曲线的形成原理以后，我们就不难理解三阶贝赛尔曲线了。</p><p><strong>3）三阶贝济埃曲线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-044ad9428fcbbc29?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2c38ba6a9c8950a3?imageMogr2/auto-orient/strip" alt=""></p><p>同样，我们取其中一点来讲解轨迹的形成原理，当 t=0.25 时,此时状态如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f67fcc49e576bc40?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>同样，P0 是起始点，P3 是终点；P1 是第一个控制点，P2 是第二个控制点。</p><p>首先，这里有三条一阶贝济埃曲线，分别是 P0-P1、P1-P2、P2-P3，他们随时间变化的点分别为 Q0、Q1、Q2。然后是由 Q0、Q1、Q2 这三个点，再次连接，形成了两条一阶贝济埃曲线，分别是Q0-Q1、Q1-Q2，他们随时间变化的点为 R0、R1。</p><p>同样，R0 和 R1 同样可以连接形成一条一阶贝济埃曲线，在 R0-R1 这条贝赛尔曲线上随时间移动的点是 B，而 B 的移动轨迹就是这个三阶贝济埃曲线的最终形状。</p><p>从上面的解析大家可以看出，所谓几阶贝济埃曲线，全部是由一条条一阶贝济埃曲线搭起来的。在上图中，形成一阶贝济埃曲线的直线是灰色的，形成二阶贝济埃曲线线是绿色的，形成三阶贝济埃曲线的线是蓝色的。</p><p>在理解了上面的二阶和三阶贝济埃曲线以后，我们再来看几个贝济埃曲线的动态图。</p><p><strong>4）四阶贝济埃曲线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-91e7647f793fd876?imageMogr2/auto-orient/strip" alt=""></p><p><strong>5）五阶贝济埃曲线</strong></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e28ef335e39c174f?imageMogr2/auto-orient/strip" alt=""></p><h4 id="3-贝济埃曲线与-PhotoShop-钢笔工具"><a href="#3-贝济埃曲线与-PhotoShop-钢笔工具" class="headerlink" title="3. 贝济埃曲线与 PhotoShop 钢笔工具"></a>3. 贝济埃曲线与 PhotoShop 钢笔工具</h4><p>在专业绘图工具 Photoshop 中，有一个钢笔工具，它使用的路径弯曲效果就是二阶贝济埃曲线，下面利用 Photoshop 的钢笔工具来得出二阶贝济埃曲线的相关控制点。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-003dae5d4ff785c8?imageMogr2/auto-orient/strip" alt=""></p><p>我们拿最终成形的图形来看一下为什么钢笔工具是二阶贝济埃曲线：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cb15295694db8eff.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>右图演示的假设某一点 t=0.25 时，动态点 B 的位置图。<br>同样，这里 P0 是起始点，P2 是终点，P1 是控制点。<br>P0-P1、P1-P2 形成了第一层的一阶贝济埃曲线。它们随时间的动态点分别是 Q0、Q1；动态点 Q0、Q1 又形成了第二层的一阶贝济埃曲线，它们的动态点是 B。而 B 的轨迹跟钢笔工具的形状是完全一样的，所以说钢笔工具的拉伸效果使用的是二阶贝济埃曲线。</p><p>这里需要注意的是，我们在使用钢笔工具时，拖动的是 P5 点。其实二阶贝济埃曲线的控制点是其对面的 P1 点，钢笔工具这样设计是当然是因为操作起来比较方便。</p><p><div id="jump2"></div></p><h3 id="7-1-2-贝济埃曲线之-quadTo"><a href="#7-1-2-贝济埃曲线之-quadTo" class="headerlink" title="7.1.2 贝济埃曲线之 quadTo"></a>7.1.2 贝济埃曲线之 quadTo</h3><p>在 Path 类中有四个方法与贝济埃曲线相关，分别是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 二阶济埃尔</div><div class="line">public void quadTo(float x1, float y1, float x2, float y2)</div><div class="line">public void rQuadTo(float dx1, float dy1, float dx2, float dy2)</div><div class="line">// 三阶济埃尔</div><div class="line">public void cubicTo(float x1, float y1, float x2, float y2,float x3, float y3)</div><div class="line">public void rCubicTo(float x1, float y1, float x2, float y2,float x3, float y3)</div></pre></td></tr></table></figure></p><p>在这四个函数中 quadTo、rQuadTo 是二阶贝济埃曲线，cubicTo、rCubicTo 是三阶贝济埃曲线；我们这篇文章以二阶贝济埃曲线的 quadTo、rQuadTo 为主，三阶贝济埃曲线 cubicTo、rCubicTo 用的使用方法与二阶贝济埃曲线类似，用处也比较少，这篇就不再细讲了。</p><h4 id="1-quadTo-使用原理"><a href="#1-quadTo-使用原理" class="headerlink" title="1. quadTo 使用原理"></a>1. quadTo 使用原理</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void quadTo(float x1, float y1, float x2, float y2)</div></pre></td></tr></table></figure><p>参数中 (x1,y1) 是控制点坐标，(x2,y2) 是终点坐标。<br>大家可能会有一个疑问：有控制点和终点坐标，那起始点是多少呢？<br>整条线的起始点是通过 Path.moveTo(x,y) 来指定的，而如果我们连续调用 quadTo()，前一个 quadTo() 的终点，就是下一个 quadTo() 函数的起点；如果初始没有调用 Path.moveTo(x,y) 来指定起始点，则默认以控件左上角(0,0)为起始点。大家可能还是有点迷糊，下面我们就举个例子来看看，我们利用 quadTo() 来画下面的这条波浪线：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-8c334c61c48848cf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>下面分析一下，在这条路径轨迹中，控制点分别在哪个位置，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e37060659bbc933e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们先看 P0-P2 这条轨迹，P0 是起点，假设位置坐标是 (100,300)，P2 是终点，假充位置坐标是 (300,300)；在以 P0 为起始点，P2 为终点这条二阶贝济埃曲线上，P1 是控制点，很明显 P1 大概在 P0、P2 中间的位置，所以它的 X 坐标应该是 200，关于 Y 坐标，我们无法确定，但很明显的是 P1 在 P0、P2 点的上方，也就是它的 Y 值比它们的小，所以根据钢笔工具上面的位置，我们让 P1 的比 P0、P2 的小 100，所以 P1的坐标是 (200，200)。</p><p>同理，不难求出在 P2-P4 这条二阶贝济埃曲线上，它们的控制点 P3 的坐标位置应该是 (400,400)。</p><p>所以我们就可以自定义一个控件，并重写它的 onDraw() 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line">        mPaint.setColor(Color.GRAY);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPath.moveTo(100, 300);</div><div class="line">        mPath.quadTo(200, 200, 300, 300);</div><div class="line">        mPath.quadTo(400, 400, 500, 300);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>通过这个例子希望大家知道两点：</p><ul><li>整条线的起始点是通过 Path.moveTo(x,y) 来指定的，如果初始没有调用 Path.moveTo(x,y) 来指定起始点，则默认以控件左上角 (0,0) 为起始点。</li><li>如果我们连续调用 quadTo()，前一个 quadTo() 的终点，就是下一个 quadTo() 函数的起点。</li></ul><h4 id="2-示例：手指轨迹"><a href="#2-示例：手指轨迹" class="headerlink" title="2. 示例：手指轨迹"></a>2. 示例：手指轨迹</h4><p>要实现手指轨迹其实是非常简单的，我们只需要在自定义中拦截 OnTouchEvent，然后根据手指的移动轨迹来绘制 Path 即可。最简单的方法就是直接使用 Path.lineTo() 就能实现把各个点连接起来。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        switch (event.getAction())&#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                mPath.moveTo(event.getX(), event.getY());</div><div class="line">                return true;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                mPath.lineTo(event.getX(), event.getY());</div><div class="line">                invalidate();</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>虽然实现了画出手指的移动轨迹，但我们仔细来看看画出来的图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d6cd12f5a2fbbdd4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>我们把轨迹放大，明显看出，在两个点连接处有明显的转折，而且在轨迹顶部位置横纵坐标变化比较快的位置，看起来跟图片这大后的马赛克一样；利用 Path 绘图，是不可能出现马赛克的，因为除了 Bitmap 以外的任何 canvas 绘图全部都是矢量图，也就是利用数学公式来作出来的图，无论放在多大屏幕上，都不可能会出现马赛克。这里利用 Path 绘图，在轨迹顶部之所以看起来像是马赛克是因为这个轨迹是由各个不同点之间连线写出来的，而之间并没有平滑过渡，所以当坐标变化比较剧烈时，线与线之间的转折就显得特别明显了。</p><p>所以要想优化这种效果，就得实现线与线之间的平滑过渡，很显然，二阶贝济埃曲线就是干这个事的。下面我们就利用我们新学的 Path.quadTo 函数来重新实现下移动轨迹效果。</p><h4 id="3-优化：使用-Path-quadTo-函数实现手势过渡"><a href="#3-优化：使用-Path-quadTo-函数实现手势过渡" class="headerlink" title="3. 优化：使用 Path.quadTo() 函数实现手势过渡"></a>3. 优化：使用 Path.quadTo() 函数实现手势过渡</h4><p>使用 Path.lineTo() 的最大问题就是线段转折处不够平滑。Path.quadTo() 可以实现平滑过渡，但使用 Path.quadTo() 的最大问题是，如何找到起始点和结束点。</p><p>下图中，有用绿点表示的三个点，连成的两条直线，很明显他们转折处是有明显折痕的</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-88af940cfd85bb19.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>下面我们在 PhotoShop 中利用钢笔工具，看如何才能实现这两条线之间的转折。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-65b3cc5c9634eb46?imageMogr2/auto-orient/strip" alt=""></p><p>最终的贝济埃曲线连接如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b26dea192018dcc1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从这两个线段中可以看出，我们使用 Path.lineTo() 的时候，是直接把手指触点 A、B、C 给连起来。而钢笔工具要实现这三个点间的流畅过渡，就只能将这两个线段的中间点做为起始点和结束点，而将手指的倒数第二个触点 B 做为控制点。</p><p>大家可能会觉得，那这样，在结束的时候，A 到 P0 和 P1 到 C1 的这段距离岂不是没画进去？是的，如果 Path 最终没有 close 的话，这两段距离是被抛弃掉的。因为手指间滑动时，每两个点间的距离很小，所以 P1 到 C 之间的距离可以忽略不计。</p><p>下面我们就利用这种方法在photoshop中求证，在连接多个线段时，是否能行？</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c8dbebc11cee4204.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在这个图形中，有很多点连成了弯弯曲曲的线段，我们利用上面我们讲的，将两个线段的中间做为二阶贝济埃曲线的起始点和终点，把上一个手指的位置做为控制点，来看看是否真的能组成平滑的连线<br>整个连接过程如动画所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c2167deb01b0a691?imageMogr2/auto-orient/strip" alt=""></p><p>在最终的路径中看来，各个点间的连线是非常平滑的。从这里也可以看出，在为了实现平滑效果，我们只能把开头的线段一半和结束的线段的一半抛弃掉。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a218b1d8f0dce88d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private float mPreX, mPreY;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        switch (event.getAction())&#123;</div><div class="line">            case MotionEvent.ACTION_DOWN:</div><div class="line">                mPath.moveTo(event.getX(), event.getY());</div><div class="line">                mPreX = event.getX();</div><div class="line">                mPreY = event.getY();</div><div class="line">                return true;</div><div class="line">            case MotionEvent.ACTION_MOVE:</div><div class="line">                float endX = (mPreX + event.getX()) / 2;</div><div class="line">                float endY = (mPreY + event.getY()) / 2;</div><div class="line">                mPath.quadTo(mPreX, mPreY, endX, endY);</div><div class="line">                mPreX = event.getX();</div><div class="line">                mPreY = event.getY();</div><div class="line">                invalidate();</div><div class="line">                break;</div><div class="line">            default:</div><div class="line">                break;</div><div class="line">        &#125;</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump3"></div></p><h3 id="7-1-3-贝济埃曲线之-rQuadTo"><a href="#7-1-3-贝济埃曲线之-rQuadTo" class="headerlink" title="7.1.3 贝济埃曲线之 rQuadTo"></a>7.1.3 贝济埃曲线之 rQuadTo</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void rQuadTo(float dx1, float dy1, float dx2, float dy2)</div></pre></td></tr></table></figure><ul><li>dx1：控制点 X 坐标，表示相对上一个终点 X 坐标的位移坐标，可为负值，正值表示相加，负值表示相减。</li><li>dy1：控制点 Y 坐标，表示相对上一个终点 Y 坐标的位移坐标。同样可为负值，正值表示相加，负值表示相减。</li><li>dx2：终点 X 坐标，同样是一个相对坐标，相对上一个终点 X 坐标的位移值，可为负值，正值表示相加，负值表示相减。</li><li>dy2：终点 Y 坐标，同样是一个相对，相对上一个终点 Y 坐标的位移值。可为负值，正值表示相加，负值表示相减。</li></ul><p>这四个参数都是传递的都是相对值，相对上一个终点的位移值。</p><p>比如，我们上一个终点坐标是 (300,400) 那么利用，rQuadTo(100,-100,200,100) 得到的控制点坐标是 (300+100, 400-100) 即 (500,300)；同样，得到的终点坐标是 (300+200, 400+100)，即 (500,500)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 利用 quadTo 定义一个绝对坐标：</div><div class="line">path.moveTo(300,400);</div><div class="line">path.quadTo(500,300,500,500);</div><div class="line"></div><div class="line">// 与利用 rQuadTo 定义相对坐标是等价的：</div><div class="line">path.moveTo(300,400);</div><div class="line">path.rQuadTo(100,-100,200,100)</div></pre></td></tr></table></figure></p><h4 id="2-使用-rQuadTo-函数实现波浪线"><a href="#2-使用-rQuadTo-函数实现波浪线" class="headerlink" title="2. 使用 rQuadTo() 函数实现波浪线"></a>2. 使用 rQuadTo() 函数实现波浪线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mPath.moveTo(100, 300);</div><div class="line">/*</div><div class="line">mPath.quadTo(200, 200, 300, 300);</div><div class="line">mPath.quadTo(400, 400, 500, 300);</div><div class="line">*/</div><div class="line">// 替换成</div><div class="line">mPath.rQuadTo(100, -100, 200, 0);</div><div class="line">mPath.rQuadTo(100, 100, 200, 0);</div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure><p>第一句：path.rQuadTo(100,-100,200,0); 是建立在 (100,300) 这个点基础上来计算相对坐标的，所以：<br>控制点X坐标 = 上一个终点X坐标+控制点X位移 = 100+100=200；<br>控制点Y坐标 = 上一个终点Y坐标+控制点Y位移 = 300-100=200；<br>终点X坐标 = 上一个终点X坐标+终点X位移 = 100+200=300；<br>终点Y坐标 = 上一个终点Y坐标+终点Y位移 = 300+0=300;<br>所以这句与 path.quadTo(200,200,300,300); 对等的。</p><p>第二句：path.rQuadTo(100,100,200,0); 是建立在它的前一个终点即 (300,300) 的基础上来计算相对坐标的，所以：<br>控制点X坐标 = 上一个终点X坐标+控制点X位移 = 300+100=200；<br>控制点Y坐标 = 上一个终点Y坐标+控制点Y位移 = 300+100=200；<br>终点X坐标 = 上一个终点X坐标+终点X位移 = 300+200=500；<br>终点Y坐标 = 上一个终点Y坐标+终点Y位移 = 300+0=300;<br>所以这句与 path.quadTo(400,400,500,300); 对等的。</p><p>最终效果也是一样的。</p><p>通过这个例子，只想让大家明白一点：rQuadTo(float dx1, float dy1, float dx2, float dy2) 中的位移坐标，都是以上一个终点位置为基准来做偏移的。</p><p><div id="jump4"></div></p><h3 id="7-1-4-示例：波浪效果"><a href="#7-1-4-示例：波浪效果" class="headerlink" title="7.1.4 示例：波浪效果"></a>7.1.4 示例：波浪效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-500be19b0bdb1bd8.gif?imageMogr2/auto-orient/strip" alt=""></p><p>我们将 mPath 的起始位置向左移一个波长，然后利用 for 循环画出当前屏幕中可能容得下的所有波。然后画一个波的左右两个半波：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 画的是一个波长中的前半个波</div><div class="line">mPath.rQuadTo(halfWaveLen/2, -100, halfWaveLen, 0); </div><div class="line">// 画的是一个波长中的后半个波</div><div class="line">mPath.rQuadTo(halfWaveLen/2, 100, halfWaveLen, 0);</div></pre></td></tr></table></figure></p><p>大家在这里可以看到，屏幕左右都多画了一个波长的图形。这是为了波形移动做准备的。</p><p>让波纹动起来其实挺简单，利用调用在 path.moveTo 的时候，将起始点向右移动即可实现移动，而且只要我们移动一个波长的长度，波纹就会重合，就可以实现无限循环了。</p><p>完整的代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private int mItemWaveLength = 1000;</div><div class="line">    private int dx;</div><div class="line"></div><div class="line">    public TestView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPath = new Path();</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPath.reset();</div><div class="line">        int originY = 300;</div><div class="line">        int halfWaveLen = mItemWaveLength/2;</div><div class="line">        mPath.moveTo(-mItemWaveLength+dx,originY);</div><div class="line">        for (int i = -mItemWaveLength; i&lt;=getWidth()+mItemWaveLength; i+=mItemWaveLength)&#123;</div><div class="line">            mPath.rQuadTo(halfWaveLen/2f,-100,halfWaveLen,0);</div><div class="line">            mPath.rQuadTo(halfWaveLen/2f,100,halfWaveLen,0);</div><div class="line">        &#125;</div><div class="line">        mPath.lineTo(getWidth(),getHeight());</div><div class="line">        mPath.lineTo(0,getHeight());</div><div class="line">        mPath.close();</div><div class="line"></div><div class="line">        canvas.drawPath(mPath,mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void startAnim()&#123;</div><div class="line">        ValueAnimator animator = ValueAnimator.ofInt(0,mItemWaveLength);</div><div class="line">        animator.setDuration(2000);</div><div class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        animator.setInterpolator(new LinearInterpolator());</div><div class="line">        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                dx = (int)animation.getAnimatedValue();</div><div class="line">                postInvalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用 TestView<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        TestView view = findViewById(R.id.view);</div><div class="line">        view.startAnim();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.3 精通自定义 View 之 Paint 基本使用——常用函数</title>
      <link href="/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
      <url>/2019/07/06/Custom%20View/06.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="6-1-1-基本函数设置"><a href="#6-1-1-基本函数设置" class="headerlink" title="6.1.1 基本函数设置"></a>6.1.1 基本函数设置</h3><p>我们先来看一下paint中基本设置的函数都有哪些。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// 重置画笔</div><div class="line">reset()</div><div class="line">// 给画笔设置颜色值</div><div class="line">setColor(int color)</div><div class="line">// 设置颜色，利用 ARGB 分开设置</div><div class="line">setARGB(int a, int r, int g, int b)</div><div class="line">// 设置画笔透明度</div><div class="line">setAlpha(int a)</div><div class="line">// 设置画笔样式，取值有：Paint.Style.FILL、STROKE、FILL_AND_STROKE</div><div class="line">setStyle(Paint.Style style)</div><div class="line">// 设置画笔宽度</div><div class="line">setStrokeWidth(float width)</div><div class="line">// 设置画笔是否抗锯齿</div><div class="line">setAntiAlias(boolean aa)</div><div class="line"></div><div class="line">// 设置线冒样式，取值有Cap.ROUND(圆形线冒)、</div><div class="line">// Cap.SQUARE(方形线冒)、Paint.Cap.BUTT(无线冒)</div><div class="line">setStrokeCap(Paint.Cap cap)</div><div class="line">// 设置线段连接处样式，取值有：Join.MITER（结合处为锐角）、</div><div class="line">// Join.Round(结合处为圆弧)、Join.BEVEL(结合处为直线)</div><div class="line">setStrokeJoin(Paint.Join join)</div><div class="line">// 设置笔画的倾斜度，区别不明显</div><div class="line">setStrokeMiter(float miter)</div><div class="line">// 设置路径样式。取值类型是所有派生自 PathEffect 的子类：</div><div class="line">// ComposePathEffect、CornerPathEffect、DashPathEffect、</div><div class="line">// DiscretePathEffect、PathDashPathEffect、SumPathEffect</div><div class="line">setPathEffect(PathEffect effect)</div></pre></td></tr></table></figure></p><h4 id="1-setStrokeCap-Paint-Cap-cap"><a href="#1-setStrokeCap-Paint-Cap-cap" class="headerlink" title="1. setStrokeCap(Paint.Cap cap)"></a>1. setStrokeCap(Paint.Cap cap)</h4><p>设置线帽样式，取值有 Cap.ROUND (圆形线帽)、Cap.SQUARE (方形线帽)、Paint.Cap.BUTT (无线帽)</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-8d1fcbc504d407cd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>红线左侧多出来的区域就是线帽。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStrokeWidth(80);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        // 无线帽</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.BUTT);</div><div class="line">        canvas.drawLine(100, 200, 400, 200, mPaint);</div><div class="line">        // 方形线帽</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.SQUARE);</div><div class="line">        canvas.drawLine(100, 400, 400, 400, mPaint);</div><div class="line">        // 圆形线帽</div><div class="line">        mPaint.setStrokeCap(Paint.Cap.ROUND);</div><div class="line">        canvas.drawLine(100, 600, 400, 600, mPaint);</div><div class="line"></div><div class="line">        // 画辅助线</div><div class="line">        mPaint.reset();</div><div class="line">        mPaint.setStrokeWidth(2);</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        canvas.drawLine(100, 50, 100, 750, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-setStrokeJoin-Paint-Join-join"><a href="#2-setStrokeJoin-Paint-Join-join" class="headerlink" title="2. setStrokeJoin(Paint.Join join)"></a>2. setStrokeJoin(Paint.Join join)</h4><p>参数取值有：Join.MITER (结合处为锐角)、Join.Round (结合处为圆弧)、Join.BEVEL(结合处为直线)</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4e349899a7f42832?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-10d2f61db3868fbc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStrokeWidth(40);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 结合处为锐角 MITER</div><div class="line">        mPath.moveTo(100, 100);</div><div class="line">        mPath.lineTo(250, 100);</div><div class="line">        mPath.lineTo(100, 250);</div><div class="line">        mPaint.setStrokeJoin(Paint.Join.MITER);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 结合处为圆弧 ROUND</div><div class="line">        mPath.moveTo(300, 100);</div><div class="line">        mPath.lineTo(450, 100);</div><div class="line">        mPath.lineTo(300, 250);</div><div class="line">        mPaint.setStrokeJoin(Paint.Join.ROUND);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 结合处为直线 BEVEL</div><div class="line">        mPath.moveTo(500, 100);</div><div class="line">        mPath.lineTo(650, 100);</div><div class="line">        mPath.lineTo(500, 250);</div><div class="line">        mPaint.setStrokeJoin(Paint.Join.BEVEL);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-setPathEffect-PathEffect-effect"><a href="#3-setPathEffect-PathEffect-effect" class="headerlink" title="3. setPathEffect(PathEffect effect)"></a>3. setPathEffect(PathEffect effect)</h4><p>设置路径样式。取值类型是所有派生自 PathEffect 的子类：ComposePathEffect、CornerPathEffect、DashPathEffect、DiscretePathEffect、PathDashPathEffect、SumPathEffect。</p><p>1）CornerPathEffect<br>它的作用就是将原来 Path 生硬的直线拐角，变成圆形拐角。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public CornerPathEffect(float radius)</div></pre></td></tr></table></figure></p><p>参数 radius：即当前连接两条直线所使用的圆的半径。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fc5362e0bd2e16ea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c6098ec540f11b5e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private CornerPathEffect effect100, effect200;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        mPath = new Path();</div><div class="line">        effect100 = new CornerPathEffect(100);</div><div class="line">        effect200 = new CornerPathEffect(200);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPath.moveTo(100,600);</div><div class="line">        mPath.lineTo(400,100);</div><div class="line">        mPath.lineTo(700,900);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setPathEffect(effect100);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        mPaint.setPathEffect(effect200);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>2）DashPathEffect 虚线效果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public DashPathEffect(float intervals[], float phase)</div></pre></td></tr></table></figure></p><p>phase：开始绘制的偏移值。<br>intervals[]：表示组成虚线的各个线段的长度；整条虚线就是由intervals[] 中这些基本线段循环组成的。比如，我们定义new float[] {20,10}；那这个虚线段就是由两段线段组成的，第一个可见的线段长为20，每二个线段不可见，长度为10。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b59d246d7eca5520?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>对于 intervals[] 数组的有两个限定：</p><ul><li>长度必须大于等于 2；因为必须有一个实线段和一个空线段来组成虚线。</li><li>个数必须为偶数，如果是基数，最后一个数字将被忽略；这个很好理解，因为一组虚线的组成必然是一个实线和一个空线成对组成的。</li></ul><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aed9539fe190586b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private DashPathEffect effect1, effect2;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        mPath = new Path();</div><div class="line">        effect1 = new DashPathEffect(new float[]&#123;20,10,100,100&#125;,0);</div><div class="line">        effect2 = new DashPathEffect(new float[]&#123;20,10,50,100&#125;,15);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        mPath.moveTo(100,600);</div><div class="line">        mPath.lineTo(400,100);</div><div class="line">        mPath.lineTo(700,900);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setPathEffect(effect1);</div><div class="line">        canvas.translate(0, 100);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        mPaint.setPathEffect(effect2);</div><div class="line">        canvas.translate(0, 100);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>3）DiscretePathEffect 离散路径效果<br>DiscretePathEffect 就是将原来路径分隔成定长的线段，然后将每条线段随机偏移一段位置，我们可以用它来模拟一种类似生锈铁丝的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public DiscretePathEffect(float segmentLength, float deviation)</div></pre></td></tr></table></figure></p><ul><li>参数 segmentLength：表示将原来的路径切成多长的线段。如果值为2，那么这个路径就会被切成一段段由长度为 2 的小线段。所以这个值越小，所切成的小线段越多；这个值越大，所切成的小线段越少。</li><li>参数 deviation：表示被切成的每个小线段的可偏移距离。值越大，就表示每个线段的可偏移距离就越大，就显得越凌乱，值越小，每个线段的可偏移原位置的距离就越小。</li></ul><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-9d31b725f3a65625.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = getPaint();</div><div class="line">        mPath = getPath();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 第一条原生 Path</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 第二条 Path</div><div class="line">        canvas.translate(0,200);</div><div class="line">        mPaint.setPathEffect(new DiscretePathEffect(2,5));</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 第三条 Path</div><div class="line">        canvas.translate(0,200);</div><div class="line">        mPaint.setPathEffect(new DiscretePathEffect(6,5));</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 第四条 Path</div><div class="line">        canvas.translate(0,200);</div><div class="line">        mPaint.setPathEffect(new DiscretePathEffect(6,15));</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Path getPath()&#123;</div><div class="line">        Path path = new Path();</div><div class="line">        // 定义路径的起点</div><div class="line">        path.moveTo(0, 0);</div><div class="line"></div><div class="line">        // 定义路径的各个点</div><div class="line">        for (int i = 0; i &lt;= 40; i++) &#123;</div><div class="line">            path.lineTo(i*35, (float) (Math.random() * 150));</div><div class="line">        &#125;</div><div class="line">        return path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Paint getPaint()&#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setStrokeWidth(4);</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>4）PathDashPathEffect 印章路径效果<br>它的作用就是用另一个路径图案做为印章，沿着指定路径一个个盖上去。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public PathDashPathEffect(Path shape, float advance, float phase,Style style)</div></pre></td></tr></table></figure></p><ul><li>Path shape：表示印章路径，比如我们下面示例中的三角形加右上角一个点。</li><li>float advance：表示两个印章路径间的距离，印章间距离越大，间距就越大。</li><li>float phase：路径绘制偏移距离，与上面 DashPathEffect 中的 float phase 参数意义相同。</li><li>Style style：表示在遇到转角时，如何操作印章以使转角平滑过渡，取值有：Style.ROTATE，Style.MORPH，Style.TRANSLATE；Style.ROTATE 表示通过旋转印章来过渡转角；Style.MORPH 表示通过变形印章来过渡转角；Style.TRANSLATE 表示通过位移来过渡转角。</li></ul><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4dfb51710a4d6aa1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private PathDashPathEffect mEffectMORPH, mEffectROTATE, mEffectTRANSLATE;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = getPaint();</div><div class="line">        mPath = getPath();</div><div class="line">        // 构建印章路径</div><div class="line">        Path stampPath = getStampPath();</div><div class="line">        stampPath.addCircle(0,0,3, Path.Direction.CCW);</div><div class="line">        mEffectMORPH = new PathDashPathEffect(stampPath,35,0, PathDashPathEffect.Style.MORPH);</div><div class="line">        mEffectROTATE = new PathDashPathEffect(stampPath,35,0, PathDashPathEffect.Style.ROTATE);</div><div class="line">        mEffectTRANSLATE = new PathDashPathEffect(stampPath,35,0, PathDashPathEffect.Style.TRANSLATE);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 原始线</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 使用印章路径效果 MORPH</div><div class="line">        canvas.translate(0,200);</div><div class="line">        mPaint.setPathEffect(mEffectMORPH);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 使用印章路径效果 ROTATE</div><div class="line">        canvas.translate(0,200);</div><div class="line">        mPaint.setPathEffect(mEffectROTATE);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">        // 使用印章路径效果 TRANSLATE</div><div class="line">        canvas.translate(0,200);</div><div class="line">        mPaint.setPathEffect(mEffectTRANSLATE);</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Path getPath()&#123;</div><div class="line">        Path path = new Path();</div><div class="line">        // 定义路径的起点</div><div class="line">        path.moveTo(0, 0);</div><div class="line"></div><div class="line">        // 定义路径的各个点</div><div class="line">        for (int i = 0; i &lt;= 40; i++) &#123;</div><div class="line">            path.lineTo(i*35, (float) (Math.random() * 150));</div><div class="line">        &#125;</div><div class="line">        return path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Path getStampPath()&#123;</div><div class="line">        Path path  = new Path();</div><div class="line">        path.moveTo(0,20);</div><div class="line">        path.lineTo(10,0);</div><div class="line">        path.lineTo(20,20);</div><div class="line">        path.close();</div><div class="line"></div><div class="line">        path.addCircle(0,0,3, Path.Direction.CCW);</div><div class="line">        return path;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Paint getPaint()&#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setStrokeWidth(4);</div><div class="line">        paint.setColor(Color.GREEN);</div><div class="line">        paint.setStyle(Paint.Style.STROKE);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>5）ComposePathEffect &amp; SumPathEffect<br>这两个都是用来合并两个特效的。但它们之间是有区别的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public ComposePathEffect(PathEffect outerpe, PathEffect innerpe)</div><div class="line">public SumPathEffect(PathEffect first, PathEffect second)</div></pre></td></tr></table></figure></p><p>ComposePathEffect 合并两个特效是有先后顺序的，它会先将第二个参数的 PathEffect innerpe 的特效作用于路径上，然后再在此加了特效的路径上作用第一个特效。</p><p>而 SumPathEffect 是分别对原始路径分别作用第一个特效和第二个特效。然后再将这两条路径合并，做为最终结果。</p><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5444bb1a116fd454?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">// 画原始路径</div><div class="line">Paint paint = getPaint();</div><div class="line">Path path = getPath();</div><div class="line">canvas.drawPath(path,paint);</div><div class="line"> </div><div class="line">// 仅应用圆角特效的路径</div><div class="line">canvas.translate(0,200);</div><div class="line">CornerPathEffect cornerPathEffect = new CornerPathEffect(100);</div><div class="line">paint.setPathEffect(cornerPathEffect);</div><div class="line">canvas.drawPath(path,paint);</div><div class="line"> </div><div class="line">// 仅应用虚线特效的路径</div><div class="line">canvas.translate(0,200);</div><div class="line">DashPathEffect dashPathEffect = new DashPathEffect(new float[]&#123;2,5,10,10&#125;,0);</div><div class="line">paint.setPathEffect(dashPathEffect);</div><div class="line">canvas.drawPath(path,paint);</div><div class="line"> </div><div class="line">// 利用 ComposePathEffect 先应用圆角特效，再应用虚线特效</div><div class="line">canvas.translate(0,200);</div><div class="line">ComposePathEffect composePathEffect = new ComposePathEffect(dashPathEffect,cornerPathEffect);</div><div class="line">paint.setPathEffect(composePathEffect);</div><div class="line">canvas.drawPath(path,paint);</div><div class="line"> </div><div class="line">// 利用 SumPathEffect，分别将圆角特效应用于原始路径，然后将生成的两条特效路径合并</div><div class="line">canvas.translate(0,200);</div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">SumPathEffect sumPathEffect = new SumPathEffect(cornerPathEffect,dashPathEffect);</div><div class="line">paint.setPathEffect(sumPathEffect);</div><div class="line">canvas.drawPath(path,paint);</div></pre></td></tr></table></figure><p><div id="jump2"></div></p><h3 id="6-1-2-字体相关函数"><a href="#6-1-2-字体相关函数" class="headerlink" title="6.1.2 字体相关函数"></a>6.1.2 字体相关函数</h3><p><strong>setTextSize(float textSize)</strong><br>设置文字大小</p><p><strong>setFakeBoldText(boolean fakeBoldText)</strong><br>设置是否为粗体文字</p><p><strong>setStrikeThruText(boolean strikeThruText)</strong><br>设置带有删除线效果</p><p><strong>setUnderlineText(boolean underlineText)</strong><br>设置下划线</p><p><strong>setTextAlign(Paint.Align align)</strong><br>设置开始绘图点位置</p><p><strong>setTextScaleX(float scaleX)</strong><br>水平拉伸设置</p><p><strong>setTextSkewX(float skewX)</strong><br>设置字体水平倾斜度，普通斜体字是-0.25，可见往右斜</p><p><strong>setTypeface(Typeface typeface)</strong><br>字体样式</p><p><strong>setLinearText(boolean linearText)</strong><br>设置是否打开线性文本标识；由于文本想要快速绘制出来，必然是需要提前缓存在显存中的，一般而言每个文字需要一个字节的大小来存储它（当然具体需要多少字节与编码方式有关），那如果是长篇文章，可见所需的大小可想而知。我们可以通过 setLinearText (true) 告诉 Android 我们不需要这样的文本缓存。但如果我们不用文本缓存，虽然能够省去一些内存空间，但这是以显示速度为代价的。</p><p>由于这个是 API 1 的函数，由于当时的 android 手机的内存大小还是很小的，所以尽量减少内存使用是每个应用的头等大事，在当时的的环境下这个函数还是很有用的。</p><p>但在今天，内存动不动就是 4G 以上了，文本缓存的所占的那点内存就微不足道了，没有哪个 APP 会牺牲性能来减少这点这内存占用了，所以这个函数基本没用了。</p><p><strong>setSubpixelText(boolean subpixelText)</strong><br>表示是否打开亚像素设置来绘制文本。亚像素的概念比较难理解，首先，我们都知道像素，比如一个 android 手机的分辨率是 1280<em>720，那就是指它的屏幕在垂直方向有 1280 个像素点，水平方向上有 720 个像素点。我们知道每个像素点都是一个独立显示一个颜色的个体。所以如果一副图片，在一个屏幕上用了 300</em>100 个相素点，而在另一个屏幕上却用了 450*150 个像素来显示。那么，请问在哪个屏幕上这张图片显示的更清晰？当然是第二个屏幕，因为它使用的像素点更多，所显示的细节更精细。</p><p>那么问题来了，android 设置在出厂时，设定的像素显示都是固定的几个范围：320<em>480，480</em>800，720<em>1280，1080</em>1920 等等；那么如何在同样的分辨率的显示器中增强显示清晰度呢？</p><p>亚像素的概念就油然而生了，亚像素就是把两个相邻的两个像素之间的距离再细分，再插入一些像素，这些通过程序加入的像素就是亚像素。在两个像素间插入的像素个数是通过程序计算出来的，一般是插入两个、三个或四个。</p><p>所以打开亚像素显示，是可以在增强文本显示清晰度的，但由于插入亚像素是通过程序计算而来的，所以会耗费一定的计算机性能。注意：亚像素是通过程序计算出来模拟插入的，在没有改变硬件构造的情况下，来改善屏幕分辨率大小。</p><p>亚像素显示，是仅在液晶显示器上使用的一种增强字体清晰度的技术。但这种技术有时会出现问题，用投影仪投射到白色墙壁上，会出出字体显示不正常的情况，而且对于老式的CRT显示器是根本不支持的。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.2 精通自定义 View 之 Paint 基本使用——文字</title>
      <link href="/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/"/>
      <url>/2019/07/06/Custom%20View/06.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="6-2-1-概述"><a href="#6-2-1-概述" class="headerlink" title="6.2.1 概述"></a>6.2.1 概述</h3><h4 id="1-四线格与基线"><a href="#1-四线格与基线" class="headerlink" title="1. 四线格与基线"></a>1. 四线格与基线</h4><p>小时候，我们在刚开始学习写字母时，用的本子是四线格的，我们必须把字母按照规则写在四线格内。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b796318147ad1ee8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 canvas 在利用 drawText 绘制文字时，也是有规则的，这个规则就是基线！我们先来看一下什么是基线：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ab25407ebd89fbb0?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可见基线就是四线格中的第三条线。也就是说，只要基线的位置定了，那文字的位置必然是定了的！</p><h4 id="2-canvas-drawText"><a href="#2-canvas-drawText" class="headerlink" title="2. canvas.drawText()"></a>2. canvas.drawText()</h4><p>1）canvas.drawText() 与基线<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * text:要绘制的文字</div><div class="line"> * x：绘制原点x坐标</div><div class="line"> * y：绘制原点y坐标</div><div class="line"> * paint:用来做画的画笔</div><div class="line"> */</div><div class="line">public void drawText(String text, float x, float y, Paint paint)</div></pre></td></tr></table></figure></p><p>上面这个构造函数是最常用的 drawText 方法，传进去一个 String 对象就能画出对应的文字。但这里有两个参数需要非常注意，表示原点坐标的 x 和 y。很多同学可能会认为，这里传进去的原点参数 (x,y) 是所在绘制文字所在矩形的左上角的点。但实际上并不是！比如，我们上面如果要画 “harvic’s blog” 这几个字，这个原点坐标应当是下图中绿色小点的位置。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6799d753bccdd71f?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>一般而言，(x,y) 所代表的位置是所画图形对应的矩形的左上角点。但在 drawText 中是非常例外的，y 所代表的是基线的位置。</p><p>2）示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line"> </div><div class="line">    int baseLineX = 0;</div><div class="line">    int baseLineY = 200;</div><div class="line">    </div><div class="line">    // 画基线</div><div class="line">    Paint paint = new Paint();</div><div class="line">    paint.setColor(Color.RED);</div><div class="line">    canvas.drawLine(baseLineX, baseLineY, 3000, baseLineY, paint);</div><div class="line"> </div><div class="line">    // 写文字</div><div class="line">    paint.setColor(Color.GREEN);</div><div class="line">    paint.setTextSize(120); // 以px为单位</div><div class="line">    canvas.drawText(&quot;harvic\&apos;s blog&quot;, baseLineX, baseLineY, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先，我们把 (0,200) 所在的这条横线画出来，所以我先画了一条线从点坐标为 (0,200) 到点坐标为 (3000,200) 的一条直线，然后利用 canvas.drawText 以 (0,200) 为原点画出文字，最终效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ba0826eb929753ec.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>结论：</p><ul><li>drawText() 函数中的参数 y 是基线的位置。</li><li>一定要清楚的是，只要 x 坐标、基线位置、文字大小确定，文字的位置就是确定了。</li></ul><h4 id="3-paint-setTextAlign-函数"><a href="#3-paint-setTextAlign-函数" class="headerlink" title="3. paint.setTextAlign() 函数"></a>3. paint.setTextAlign() 函数</h4><p>在上面我们讲了，drawText() 函数中的 y 参数表示所要绘制文字的基线所在位置。从上面的例子中可以看到，绘制是从 x 坐标的右边开始的，但这并不是必然的结果。我们来看一张图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-308a568c5c7ea992.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在 drawText(text, x, y, paint) 中传进去的原点坐标 (x,y)。其中，y 表示的基线的位置。那 x 代表什么呢？从上面的例子运行结果来看，应当是文字开始绘制的地方。</p><p>并不是！x 代表所要绘制文字所在矩形的相对位置。相对位置就是指指定点 (x,y) 在在所要绘制矩形的位置。我们知道所绘制矩形的纵坐标是由 y 值来确定的，而相对 x 坐标的位置，只有左、中、右三个位置了。也就是所绘制矩形可能是在 x 坐标的左侧绘制，也有可能在 x 坐标的中间，也有可能在 x 坐标的右侧。而定义在 x 坐标在所绘制矩形相对位置的函数是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 其中 Align 的取值为：Panit.Align.LEFT,Paint.Align.CENTER,Paint.Align.RIGHT</div><div class="line"> */</div><div class="line">Paint::setTextAlign(Align align);</div></pre></td></tr></table></figure></p><p>仍然使用上面的例子，当设置不同的 Align 取值时，效果如下图所示。<br><strong>Paint.Align.LEFT：</strong><br><img src="https://upload-images.jianshu.io/upload_images/14186083-7cbb15dc7967a198.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>Paint.Align.CENTER：</strong><br><img src="https://upload-images.jianshu.io/upload_images/14186083-dcdac7faa0f2601e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><strong>Paint.Align.RIGHT：</strong><br><img src="https://upload-images.jianshu.io/upload_images/14186083-fe138d527ea49694.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-注意"><a href="#4-注意" class="headerlink" title="4. 注意"></a>4. 注意</h4><p>这里需要再次强调的是：相对位置是根据所要绘制文字所在矩形来计算的。比如，只写一个大写字母 A，将其相对位置设置为 Paint.Align.CENTER。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">canvas.drawText(&quot;A&quot;, baseLineX, baseLineY, mPaint);</div></pre></td></tr></table></figure></p><p>效果如下图所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e0e6bdfd3959f399.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump2"></div></p><h3 id="6-2-2-绘图四线格与-FontMetrics"><a href="#6-2-2-绘图四线格与-FontMetrics" class="headerlink" title="6.2.2 绘图四线格与 FontMetrics"></a>6.2.2 绘图四线格与 FontMetrics</h3><h4 id="1-文字的绘图四线格"><a href="#1-文字的绘图四线格" class="headerlink" title="1. 文字的绘图四线格"></a>1. 文字的绘图四线格</h4><p>除了基线以外，系统在绘制文字时还有 4 条线，分别是 ascent、descent、top、bottom，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f4f98522d06491b8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>ascent：系统建议的，绘制单个字符时，字符应当的最高高度所在线。</li><li>descent：系统建议的，绘制单个字符时，字符应当的最低高度所在线。</li><li>top：可绘制的最高高度所在线。</li><li>bottom：可绘制的最低高度所在线。</li></ul><p>我们在绘制文字时，ascent 是推荐的绘制文字的最高高度，就表示在绘制文字时，尽力要在这个最高高度以下绘制文字。descent 是推荐的绘制文字的最底高度线，同样表示是在绘制文字时尽量在这个 descent 线以上来绘制文字。而 top 线则指该文字可以绘制的最高高度线，bottom 则是表示该文字可以绘制的最低高度线。ascent、descent 是系统建议上的绘制高度，而 top、bottom 则是物理上屏幕最高、最低可以画的高度值。</p><h4 id="2-FontMetrics"><a href="#2-FontMetrics" class="headerlink" title="2. FontMetrics"></a>2. FontMetrics</h4><p>1）FontMetrics 概述<br>我们知道基线的位置是我们在构造 drawText() 函数时由参数 y 来决定的，那 ascent、descent、top、bottom 这些线的位置要怎么计算出来呢？</p><p>Android 给我们提供了一个类：FontMetrics，它里面有四个成员变量：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">FontMetrics::ascent;</div><div class="line">FontMetrics::descent;</div><div class="line">FontMetrics::top;</div><div class="line">FontMetrics::bottom;</div></pre></td></tr></table></figure></p><p>他们的意义与值的计算方法分别如下：</p><ul><li>ascent = ascent 线的 y 坐标 - baseline 线的 y 坐标。</li><li>descent = descent 线的 y 坐标 - baseline 线的 y 坐标。</li><li>top = top 线的 y 坐标 - baseline 线的 y 坐标。</li><li>bottom = bottom 线的 y 坐标 - baseline 线的 y 坐标。</li></ul><p>我们再来看个图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0cfad062b77303f8?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从这个图中，我们先说明两点，然后再回过头来看上面的公式：<br>1、X 轴，Y 轴的正方向走向是 X 轴向右是正方向，Y 轴向下是正方向，所以越往下 Y 坐标越大！<br>2、大家千万不要将 FontMetrics 中的 ascent、descent、top、bottom 与现实中的 ascent、descent、top、bottom 所在线混淆！这几条线是真实存在的，而 FontMetrics 中的 ascent、descent、top、bottom 这个变量的值就是用来计算这几条线的位置的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ascent = ascent线的y坐标 - baseline线的y坐标</div></pre></td></tr></table></figure></p><p>FontMetrics 的这几个变量的值都是以 baseline 为基准的，对于 ascent 来说，baseline 线在 ascent 线之下，所以必然 baseline 的 y 值要大于 ascent 线的 y 值，所以 ascent 变量的值是负的。</p><p>同理，对于 descent 而言：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">descent = descent线的y坐标 - baseline线的y坐标</div></pre></td></tr></table></figure></p><p>descent 线在 baseline 线之下，所以必然 descent 线的 y 坐标要大于 baseline 线的 y 坐标，所以 descent 变量的值必然是正数。</p><p>2）得到 Text 四线格的各线位置<br>先列出一个公式：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ascent 线 Y 坐标 = baseline 线 Y 坐标 + fontMetric.ascent</div></pre></td></tr></table></figure></p><p>推算过程如下：</p><p>因为 ascent 线的 Y 坐标等于 baseline 线的 Y 坐标减去从 baseline 线到 ascent 线的这段距离。也就是：(|fontMetric.ascent|表示取绝对值)。<br>ascent 线 Y 坐标 = baseline 线 Y 坐标 - |fontMetric.ascent|;<br>又因为 fontMetric.ascent 是负值，所以：<br>ascent 线 Y 坐标 = baseline 线 Y 坐标 - |fontMetric.ascent|;<br>ascent 线 Y 坐标 = baseline 线 Y 坐标 - (-fontMetric.ascent);<br>ascent 线 Y 坐标 = baseline 线 Y 坐标 + fontMetric.ascent;</p><p>这就是整个推算过程，没什么难度，同理可以得到：</p><ul><li>ascent 线 Y 坐标 = baseline 线的 y 坐标 + fontMetric.ascent；</li><li>descent 线 Y 坐标 = baseline 线的 y 坐标 + fontMetric.descent；</li><li>top 线 Y 坐标 = baseline 线的 y 坐标 + fontMetric.top；</li><li>bottom 线 Y 坐标 = baseline 线的 y 坐标 + fontMetric.bottom；</li></ul><p>3）获取 FontMetrics 对象<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Paint paint = new Paint();</div><div class="line">Paint.FontMetrics fm = paint.getFontMetrics();</div><div class="line">Paint.FontMetricsInt fmInt = paint.getFontMetricsInt();</div></pre></td></tr></table></figure></p><p>从这里可以看到，通过 paint.getFontMetrics() 得到对应的 FontMetrics 对象。这里还有另外一个 FontMetrics 同样的类叫做 FontMetricsInt，它的意义与 FontMetrics 完全相同，只是得到的值的类型不一样而已，FontMetricsInt 中的四个成员变量的值都是 Int 类型，而 FontMetrics 得到的四个成员变量的值则都是 float 类型的。</p><p>4）示例：计算 Text 四线格位置</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dbe98aa14347e5e6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Paint.FontMetrics mFm;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setTextSize(120);</div><div class="line">        mPaint.setTextAlign(Paint.Align.LEFT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int baseLineX = 0;</div><div class="line">        int baseLineY = 200;</div><div class="line"></div><div class="line">        // 写文字</div><div class="line">        canvas.drawText(&quot;harvic\&apos;s blog&quot;, baseLineX, baseLineY, mPaint);</div><div class="line">        // 计算各线在位置</div><div class="line">        mFm = mPaint.getFontMetrics();</div><div class="line">        float ascent = baseLineY + mFm.ascent;</div><div class="line">        float descent = baseLineY + mFm.descent;</div><div class="line">        float top = baseLineY + mFm.top;</div><div class="line">        float bottom = baseLineY + mFm.bottom;</div><div class="line">        // 画基线</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        canvas.drawLine(baseLineX, baseLineY, 3000, baseLineY, mPaint);</div><div class="line">        // 画 top</div><div class="line">        mPaint.setColor(Color.BLUE);</div><div class="line">        canvas.drawLine(baseLineX, top, 3000, top, mPaint);</div><div class="line">        // 画 ascent</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        canvas.drawLine(baseLineX, ascent, 3000, ascent, mPaint);</div><div class="line">        // 画 descent</div><div class="line">        mPaint.setColor(Color.YELLOW);</div><div class="line">        canvas.drawLine(baseLineX, descent, 3000, descent, mPaint);</div><div class="line">        // 画 bottom</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        canvas.drawLine(baseLineX, bottom, 3000, bottom, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump3"></div></p><h3 id="6-2-3-常用函数"><a href="#6-2-3-常用函数" class="headerlink" title="6.2.3 常用函数"></a>6.2.3 常用函数</h3><h4 id="1-字符串所占高度和宽度"><a href="#1-字符串所占高度和宽度" class="headerlink" title="1. 字符串所占高度和宽度"></a>1. 字符串所占高度和宽度</h4><p>1）高度<br>字符串所占高度很容易得到，直接用 bottom 线所在位置的 Y 坐标减去 top 线所在位置的 Y 坐标就是字符串所占的高度：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mFm = mPaint.getFontMetricsInt();</div><div class="line">int top = baseLineY + fm.top;</div><div class="line">int bottom = baseLineY + fm.bottom;</div><div class="line">// 所占高度</div><div class="line">int height = bottom - top;</div></pre></td></tr></table></figure></p><p>2）、宽度<br>宽度是非常容易得到的，直接利用下面的函数就可以得到：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">int width = mPaint.measureText(&quot;harvic&apos;s blog&quot;);</div></pre></td></tr></table></figure></p><h4 id="2-最小矩形"><a href="#2-最小矩形" class="headerlink" title="2. 最小矩形"></a>2. 最小矩形</h4><p>1）概述<br>要获取最小矩形，也是通过系统函数来获取的，函数及意义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 获取指定字符串所对应的最小矩形，以（0，0）点所在位置为基线</div><div class="line"> * @param text  要测量最小矩形的字符串</div><div class="line"> * @param start 要测量起始字符在字符串中的索引</div><div class="line"> * @param end   所要测量的字符的长度</div><div class="line"> * @param bounds 接收测量结果</div><div class="line"> */</div><div class="line">public void getTextBounds(String text, int start, int end, Rect bounds);</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">String text = &quot;harvic\&apos;s blog&quot;;</div><div class="line">Paint paint = new Paint();</div><div class="line">// 设置paint</div><div class="line">paint.setTextSize(120); </div><div class="line"> </div><div class="line">Rect minRect = new Rect();</div><div class="line">paint.getTextBounds(text,0,text.length(),minRect);</div><div class="line">Log.e(&quot;xian&quot;,minRect.toShortString());</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-65a904e02b3acde3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>可以看到这个矩形的左上角位置为（8,-90），右下角的位置为（654,25）；大家可能会有疑问，为什么左上角的 Y 坐标是个负数？从代码中，我们也可以看到，我们并没有给 getTextBounds() 传递基线位置。那它就是以（0,0）为基线来得到这个最小矩形的！所以这个最小矩形的位置就是以（0,0）为基线的结果！</p><p>2）得到最小矩形的实际位置<br>我们先来看一个原理图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-436e2f53ad881b18.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在上面这个图中，我们将黑色矩形平行下移距离Y（黄色线依照的是基线的位置），那么平移后的左上角点的 y 坐标就是 y2 = y1 + Y。</p><p>同样的道理，由于 paint.getTextBounds() 得到最小矩形的基线是 y = 0；那我们直接将这个矩形移动 baseline 的距离就可以得到这个矩形实际应当在的位置了。</p><p>所以矩形应当所在实际位置的坐标是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Rect minRect = new Rect();</div><div class="line">paint.getTextBounds(text,0,text.length(),minRect);</div><div class="line">// 最小矩形，实际 top 位置</div><div class="line">int minTop = bounds.top + baselineY;</div><div class="line">// 最小矩形，实际 bottom 位置</div><div class="line">int minBottom = bounds.bottom + baselineY;</div></pre></td></tr></table></figure></p><p>3）完整的代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line"></div><div class="line">    String text = &quot;harvic\&apos;s blog&quot;;</div><div class="line">    int baseLineY = 200;</div><div class="line">    int baseLineX = 0 ;</div><div class="line"></div><div class="line">    // 设置paint</div><div class="line">    Paint paint = new Paint();</div><div class="line">    paint.setTextSize(120); //以px为单位</div><div class="line">    paint.setTextAlign(Paint.Align.LEFT);</div><div class="line"></div><div class="line">    // 画text所占的区域</div><div class="line">    Paint.FontMetricsInt fm = paint.getFontMetricsInt();</div><div class="line">    int top = baseLineY + fm.top;</div><div class="line">    int bottom = baseLineY + fm.bottom;</div><div class="line">    int width = (int)paint.measureText(text);</div><div class="line">    Rect rect = new Rect(baseLineX,top,baseLineX+width,bottom);</div><div class="line"></div><div class="line">    paint.setColor(Color.GREEN);</div><div class="line">    canvas.drawRect(rect,paint);</div><div class="line"></div><div class="line">    // 画最小矩形</div><div class="line">    Rect minRect = new Rect();</div><div class="line">    paint.getTextBounds(text,0,text.length(),minRect);</div><div class="line">    minRect.top = baseLineY + minRect.top;</div><div class="line">    minRect.bottom = baseLineY + minRect.bottom;</div><div class="line">    paint.setColor(Color.RED);</div><div class="line">    canvas.drawRect(minRect,paint);</div><div class="line"></div><div class="line">    // 写文字</div><div class="line">    paint.setColor(Color.BLACK);</div><div class="line">    canvas.drawText(text, baseLineX, baseLineY, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ebb6cef9d9cbf11e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump4"></div></p><h3 id="6-2-4-示例：定点写字"><a href="#6-2-4-示例：定点写字" class="headerlink" title="6.2.4 示例：定点写字"></a>6.2.4 示例：定点写字</h3><h4 id="1-给定左上顶点绘图"><a href="#1-给定左上顶点绘图" class="headerlink" title="1. 给定左上顶点绘图"></a>1. 给定左上顶点绘图</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ea033f084880c022.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在这个图中，我们给定左上角的位置，即 (left,top)；我们知道要画文字，drawText() 中传进去的 Y 坐标是基线的位置，所以我们就必须根据 top 的位置计算出 baseline 的位置。</p><p>我们来看一个公式：<br>FontMetrics.top = top - baseline;</p><p>所以：<br>baseline = top - FontMetrics.top;</p><p>因为 FontMetrics.top 是可以得到的，又因为我们的 top 坐标是给定的，所以通过这个公式就能得到 baseline 的位置了。</p><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Paint.FontMetrics mFm;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.GREEN);</div><div class="line">        mPaint.setTextSize(120);</div><div class="line">        mPaint.setTextAlign(Paint.Align.LEFT);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        mFm = mPaint.getFontMetrics();</div><div class="line">        float top = 0;</div><div class="line">        int baseLineX = 0;</div><div class="line">        float baseLineY = top - mFm.top;</div><div class="line"></div><div class="line">        // 写文字</div><div class="line">        canvas.drawText(&quot;harvic\&apos;s blog&quot;, 0, baseLineY, mPaint);</div><div class="line"></div><div class="line">        // 画基线</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        canvas.drawLine(baseLineX, baseLineY, 3000, baseLineY, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-给定中间线位置绘图"><a href="#2-给定中间线位置绘图" class="headerlink" title="2. 给定中间线位置绘图"></a>2. 给定中间线位置绘图</h4><p>先来看一张图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1072d0900b738e32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>在这个图中，总共有四条线：top 线、bottom 线、baseline 和 center线。其中 center 线正是在 top 线和 bottom 线的正中间。</p><p>为了方便推导公式，另外标了三个距离 A、B、C。显然，距离 A 和距离 C 是相等的，都等于文字所在矩形高度以的一半，即 A = C = (bottom - top)/2。</p><p>又因为：<br>bottom = baseline + FontMetrics.bottom<br>top = baseline + FontMetrics.top<br>将这两个公式代入上面的公式，就可得到：<br>A = C = (FontMetrics.bottom - FontMetrics.top)/2</p><p>而距离 B 则表示 center 线到 baseline 的距离。很显然距离<br>B = C - (bottom - baseline)</p><p>又因为：<br>FontMetrics.bottom = bottom - baseline<br>C = A<br>所以：<br>B = A - FontMetrics.bottom</p><p>从而有：<br>baseline = center + B = center + A - FontMetrics.bottom = center + (FontMetrics.bottom - FontMetrics.top)/2 - FontMetrics.bottom</p><p>根据上面的推导过程，我们最终可知，当给定中间线 center 位置以后，baseline 的位置为：<br>baseline = center + (FontMetrics.bottom - FontMetrics.top)/2 - FontMetrics.bottom</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06.1 精通自定义 View 之 Paint 基本使用——硬件加速</title>
      <link href="/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/"/>
      <url>/2019/07/06/Custom%20View/06.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%20Paint%20%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8%E2%80%94%E2%80%94%E7%A1%AC%E4%BB%B6%E5%8A%A0%E9%80%9F/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><a href="https://www.jianshu.com/p/7a832e074b69" target="_blank" rel="external">参考文档：硬件加速</a></p><p><div id="jump1"></div></p><h3 id="6-1-1-本质和原理"><a href="#6-1-1-本质和原理" class="headerlink" title="6.1.1 本质和原理"></a>6.1.1 本质和原理</h3><h4 id="1-概念"><a href="#1-概念" class="headerlink" title="1. 概念"></a>1. 概念</h4><p>所谓硬件加速，指的是把某些计算工作交给专门的硬件来做，而不是和普通的计算工作一样交给 CPU 来处理。这样不仅减轻了 CPU 的压力，而且由于有了「专人」的处理，这份计算工作的速度也被加快了。这就是「硬件加速」。</p><p>而对于 Android 来说，硬件加速有它专属的意思：在 Android 里，硬件加速专指把 View 中绘制的计算工作交给 GPU 来处理。进一步地再明确一下，这个「绘制的计算工作」指的就是把绘制方法中的那些 Canvas.drawXXX() 变成实际的像素这件事。</p><h4 id="2-原理"><a href="#2-原理" class="headerlink" title="2. 原理"></a>2. 原理</h4><p>在硬件加速关闭的时候，Canvas 绘制的工作方式是：把要绘制的内容写进一个 Bitmap，然后在之后的渲染过程中，这个 Bitmap 的像素内容被直接用于渲染到屏幕。这种绘制方式的主要计算工作在于把绘制操作转换为像素的过程（例如由一句 Canvas.drawCircle() 来获得一个具体的圆的像素信息），这个过程的计算是由 CPU 来完成的。大致就像这样：</p><p><img src="https://upload-images.jianshu.io/upload_images/2789715-2e12c05c18113d57.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/839/format/webp" alt=""></p><p>而开启硬件加速后，Canvas 的工作方式改变了：它把绘制的内容转为 GPU 的操作保存下来，然后交给 GPU 来完成显示工作。大致过程：</p><p><img src="https://upload-images.jianshu.io/upload_images/2789715-38ff7dae4e1cdd37.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/839/format/webp" alt=""></p><p>从上图可以看出，开启硬件加速后，绘制的计算工作有 CPU 交给 GPU，不过这怎么就能起到加速作用，让绘制变快了呢？</p><ul><li>本来CPU的工作，分摊一部分给GPU，自然可以提高效率；</li><li>相对于CPU来说，GPU自身的设计本来就对于很多常见类型内容的计算(例如简单的圆形、方形)具有优势；</li><li>由于绘制流程的不同；硬件加速在界面内容发生重绘的时候绘制流程可以得到优化，避免一些重复操作，从而大幅提升绘制效率。</li></ul><p>关于第三点，它的原理大致说一下：</p><p>关闭硬件加速时，绘制内容会被 CPU 转为实际的像素，然后直接渲染到屏幕，具体来说，这个 [实际的像素]，是由 bitmap 承载的，在界面的某个 View 由于内容发生改变而调用 invalidat() 方法时，如果没有开启硬件加速，为了正确计算 bitmap 的像素，这个 View 的父 View、父 View 的父 View 乃至一直向上知道最顶级的 View，以及所有和它相交的 View，都需要被调用 invalidate() 来重绘，一个View的改变使得大半个界面甚至整个界面重绘一遍，这个工作量是非常大的。</p><p>而在开启硬件加速时，绘制的内容会被转换成 GPU 的操作保存下来(承载的形式成为 displaylist，对应的类也叫作 DisplayList)，再转交给 GPU。由于所有绘制的内容都没有变成最终的像素，所以它们之间是相互独立的，那么在界面内容发生改变时，只需把发生了改变的 View 调用 invalidate() 方法以更新它所对应的 GPU 就好，至于它的父 View 和兄弟 View，只需要保持原样，那么这个工作量就很小了。</p><p>正是由于上面的原因，硬件加速不仅是由于 GPU 的引入提高效率，而且因为绘制机制的改变，而极大的提高了界面内容改变时的刷新效率。</p><p>总结：<strong>用了 GPU，绘制更快；绘制机制的改变，导致界面内容改变时的刷新效率极大提高。</strong></p><p><div id="jump2"></div></p><h3 id="6-1-2-在-Android-中的限制"><a href="#6-1-2-在-Android-中的限制" class="headerlink" title="6.1.2 在 Android 中的限制"></a>6.1.2 在 Android 中的限制</h3><p>可事实就是，硬件加速不止有好处，也有限制：收到 GPU 绘制方式的限制，Canvas 的有些方法在硬件加速开启时会失效或者无法正常工作，比如：开启硬件加速，clipPath() 在 API 18 及以上系统中才有效，具体的 API 限制和 API 版本的关系如下图：</p><p><img src="https://upload-images.jianshu.io/upload_images/2789715-ea809b43011e9e11.jpg?imageMogr2/auto-orient/strip|imageView2/2/w/783/format/webp" alt=""></p><p>所以，如果你对自定义控件有自定义绘制的内容，最好参照一下表格，确保你的绘制操作可以正确地在所有用户手机中正常显示，而不是只在你最新 Android 系统的 Nexus 或 Pixel 里测试一遍没问题就发布。那就小心被祭天了。</p><p><div id="jump3"></div></p><h3 id="6-1-3-禁用-GPU-硬件加速的方法"><a href="#6-1-3-禁用-GPU-硬件加速的方法" class="headerlink" title="6.1.3 禁用 GPU 硬件加速的方法"></a>6.1.3 禁用 GPU 硬件加速的方法</h3><p>1）在 AndroidManifest.xml 文件中为 application 标签添加如下属性，即可为整个应用程序开启/关闭硬件加速。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;application android:hardwareAccelerated=&quot;true&quot; ...&gt;</div></pre></td></tr></table></figure></p><p>2）在 AndroidManifest.xml 文件中为 activity 标签下使用 hardwareAccelerated 属性开启/关闭硬件加速。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:hardwareAccelerated=&quot;false&quot; ...&gt;</div></pre></td></tr></table></figure></p><p>3）在 Window 层级上使用如下代码开启硬件加速（Window 层级不支持关闭硬件加速）：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">getWindow().setFlags(WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED, WindowManager.LayoutParams.FLAG_HARDWARE_ACCELERATED);</div></pre></td></tr></table></figure></p><p>4）在 View 层级上使用如下代码关闭硬件加速(在 View 层级上不支持开启硬件加速)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">setLayerType(LAYER_TYPE_SOFTWARE,null);</div></pre></td></tr></table></figure></p><p>或者在layout xml中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layerType=&quot;software&quot; &gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>事实上，view.setLayerType(LAYER_TYPE_SOFTWARE, null) 这个方法的作用并不是关闭硬件加速，只是当它的参数为 LAYER_TYPE_SOFTWARE 的时候，可以顺便把硬件加速关掉而已；并且除了这个方法外，Android 并没有提供专门的 View 级别的硬件加速开关，所以它就顺便成了一个开关硬件加速的方法。</p><ul><li>参数为 LAYER_TYPE_SOFTWARE 时，使用软件来绘制 View Layer，绘制到一个 Bitmap，并顺便关闭硬件加速；</li><li>参数为 LAYER_TYPE_HARDWARE 时，使用 GPU 来绘制 View Layer，绘制到一个 OpenGL texture (如果硬件加速关闭，那么行为和 LAYER_TYPE_SOFTWARE 一致)；</li><li>参数为 LAYER_TYPE_NONE 时，关闭 View Layer。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.2 精通自定义 View 之动画进阶——SVG 动画</title>
      <link href="/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/05/Custom%20View/05.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94SVG%20%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="5-2-1-概述"><a href="#5-2-1-概述" class="headerlink" title="5.2.1 概述"></a>5.2.1 概述</h3><p>SVG 全称是 Scalable Vector Graphics（可缩放矢量图形），即 SVG 是矢量图。与矢量图对应的是位图，Bitmap 就是位图，它由一个个像素点组成，当图片放大到一定大小时，就会出现马赛克现象，Photoshop 就是常用的位图处理软件。而矢量图则由一个个点组成，经过数学计算利用直线和曲线绘制而成，无论如何放大，都不会出现马赛克现象，Illustrator 就是常用的矢量图绘图软件。</p><p>SVG 与 Bitmap 相比有以下好处：</p><ul><li>SVG 使用 XML 格式定义图形，可被非常多的工具读取和修改。</li><li>SVG 由点来存储，由计算机根据点信息绘图，不会失真，无须根据分辨率适配多套图标。</li><li>SVG 的占用空间明显比 Bitmap 小。如 500px X 500px 的图像，转成 SVG 后占用的空间大小是 20KB，而 PNG 图片则需要 732KB 的空间。</li><li>SVG 可以转换为 Path 路径，与 Path 动画相结合，可以形成丰富的动画。</li></ul><p>对于 Android 5.0 以下的机型，可以通过引入 com.android.support:appcompat-v7:23.4.0 及以上版本进行支持。</p><p>Android 并没有对原生的 SVG 图像语法进行支持，而是以一种简化的方式对 SVG 进行兼容，也就是通过使用它的 path 标签，几乎可以实现 SVG 中的其他所有标签。这些东西可以通过工具来完成。</p><p><div id="jump2"></div></p><h3 id="5-2-2-vector-标签与图像显示"><a href="#5-2-2-vector-标签与图像显示" class="headerlink" title="5.2.2 vector 标签与图像显示"></a>5.2.2 vector 标签与图像显示</h3><p>res/drawable/svg.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:width=&quot;200dp&quot;</div><div class="line">    android:height=&quot;100dp&quot;</div><div class="line">    android:viewportWidth=&quot;100&quot;</div><div class="line">    android:viewportHeight=&quot;50&quot;&gt;</div><div class="line">    &lt;path</div><div class="line">        android:name=&quot;bar&quot;</div><div class="line">        android:pathData=&quot;M50,23 L100,23&quot;</div><div class="line">        android:strokeWidth=&quot;2&quot;</div><div class="line">        android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">&lt;/vector&gt;</div></pre></td></tr></table></figure></p><p>效果图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c19a24bc41592925.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><ul><li>vector 标签：指定画布大小，上图蓝框区域。</li><li>path 标签：绘制路径，对应上图中的红色线段。</li><li>width &amp; height 属性：表示该 SVG 图形的具体大小。</li><li>viewportWidth &amp; viewportHeight 属性：表示 SVG 图形划分的比例。</li></ul><p>width &amp; height 类似于指定画布的大小，而 viewportWidth &amp; viewportHeight 则是指将画布的宽、高分为多少个点，而 Path 中的点坐标都是以 viewportWidth &amp; viewportHeight 的点数为坐标的，而不是 dp 值。此处将宽度 200dp 分为 100 个点，在高度 100dp 分为 50 个点，每个点有 2dp。而 path 中字母 M 表示 moveTo，字母 L 表示 lineTo，所以，这里代表从（50, 23) 到点 (100, 23) 画了一条线段。</p><h4 id="1-path-标签"><a href="#1-path-标签" class="headerlink" title="1. path 标签"></a>1. path 标签</h4><p>1）常用属性</p><ul><li>android:name：声明一个标记，类似于 ID。</li><li>android:pathData：对 SVG 矢量图的描述。</li><li>android:strokeWidth：画笔的宽度</li><li>android:fillColor：填充颜色。</li><li>android:fillAlpha：填充颜色的透明度。</li><li>android:strokeColor：描边颜色。</li><li>android:strokeWidth：描边宽度。</li><li>android:strokeAlpha：描边透明度。</li><li>android:strokeLineJoin：用于指定折线拐角形状，取值有 miter（结合处为锐角）、round（结合处为圆弧）、bevel（结合处为直线）。</li><li>android:strokeLineCap：画出线条的终点的形状（线帽），取值有 butt（无线帽）、round（圆形线帽）、square（方形线帽）</li><li>android:strokeMiterLimit：设置斜角的上限。当 strokeLineJoin 为 “round” 或 “bevel” 时，该属性无效。</li></ul><p>2）android:trimPathStart 属性<br>该属性用于指定路径从哪里开始，取值为 0~1，表示路径开始位置的百分比。取值为 0 时，表示从头开始；取值为 1 时，整条路径不可见。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;path</div><div class="line">    android:name=&quot;bar&quot;</div><div class="line">    android:pathData=&quot;M50,23 L100,23&quot;</div><div class="line">    android:strokeWidth=&quot;2&quot;</div><div class="line">    android:trimPathStart=&quot;0.5&quot;</div><div class="line">    android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-343a12e0dc24f75c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>灰色部分代表的是被删除的部分，实际上是不会显示出来的，这里只是为了展示效果，下同。</p><p>3）android:trimPathEnd 属性<br>该属性用于指定路径的结束位置，取值为 0~1，表是路径结束位置的百分比。取值为 1 时，路径正常结束；取值为 0 时，表示从开始位置就已经结束了，即整条路径不可见。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;path</div><div class="line">    android:name=&quot;bar&quot;</div><div class="line">    android:pathData=&quot;M50,23 L100,23&quot;</div><div class="line">    android:strokeWidth=&quot;2&quot;</div><div class="line">    android:trimPathEnd=&quot;0.8&quot;</div><div class="line">    android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a913b917f9134edd.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>4）android:trimPathOffset 属性<br>该属性用于指定路径的位移距离，取值 0~1。取值为 0 时，不位移；当取值 为 1 时，位移整条路径的长度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;path</div><div class="line">    android:name=&quot;bar&quot;</div><div class="line">    android:pathData=&quot;M50,23 L100,23&quot;</div><div class="line">    android:strokeWidth=&quot;2&quot;</div><div class="line">    android:trimPathStart=&quot;0.2&quot;</div><div class="line">    android:trimPathEnd=&quot;0.4&quot;</div><div class="line">    android:trimPathOffset=&quot;0.6&quot;</div><div class="line">    android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b3fd2fce5e592895.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>5）android:pathData 属性<br>指定 SVG 图像的显示内容。</p><ul><li>M = moveTo(M X,Y)：将画笔移动到指定的坐标位置。</li><li>L = lineTo(L X,Y)：画直线到指定的坐标位置。</li><li>H = horizontal lineTo(H X)：画水平线到指定的 X 坐标位置。</li><li>V = vertical lineTo(V Y)：画垂直线到指定的 Y 坐标位置。</li><li>C = curveTo(C X1,Y1,X2,Y2,ENDX,ENDY)：三阶贝济埃曲线。</li><li>S = smooth curveTo(S X2,Y2,ENDX,ENDY)：三阶贝济埃曲线。S 指令会将上一条指令的终点作为这条指令的起始点。</li><li>Q = quadratic Bezier curve(Q X,Y,ENDX,ENDY)：二阶贝济埃曲线。</li><li>T = smooth quadratic Bezier curveTo(T ENDX,ENDY)：映射前面路径后的终点。</li><li>A = elliptical Arc(A RX,RY,XROTATION,FLAG1,FLAG2,X,Y)：弧线。</li><li>Z = closePath()：关闭路径。</li></ul><p>使用上面的指令时，需要注意的几点：</p><ul><li>坐标轴以（0,0）位中心，X轴水平向右，Y轴水平向下。</li><li>所有指令大小写均可，大写绝对定位，参照全局坐标系，小写相对定位，参照父容器坐标系。</li><li>指令和数据间的空格可以无视。</li><li>同一指令出现多次可以用一个。</li></ul><h4 id="2-group-标签"><a href="#2-group-标签" class="headerlink" title="2. group 标签"></a>2. group 标签</h4><p>group 标签用于定义一系列路径或者将 path 标签分组。具有以下常用属性。</p><ul><li>android:name：组的名称，用于与动画相关联。</li><li>android:rotation：指定该组图像的旋转度数。</li><li>android:pivotX：定义缩放和旋转该组时的 X 参考点。</li><li>android:pivotY：定义缩放和旋转该组时的 Y 参考点。</li><li>android:scaleX：指定该组 X 轴缩放大小。</li><li>android:scaleY：指定该组 Y 轴缩放大小。</li><li>android:translateX：指定该组沿 X 轴平移的距离。</li><li>android:translateY：指定该组沿 Y 轴平移的距离。</li></ul><p>示例：围绕画布中心旋转 90 度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:width=&quot;200dp&quot;</div><div class="line">    android:height=&quot;100dp&quot;</div><div class="line">    android:viewportWidth=&quot;100&quot;</div><div class="line">    android:viewportHeight=&quot;50&quot;&gt;</div><div class="line">    &lt;group</div><div class="line">        android:rotation=&quot;90&quot;</div><div class="line">        android:pivotX=&quot;50&quot;</div><div class="line">        android:pivotY=&quot;25&quot;&gt;</div><div class="line">        &lt;path</div><div class="line">            android:name=&quot;bar&quot;</div><div class="line">            android:pathData=&quot;M50,23 L100,23&quot;</div><div class="line">            android:strokeWidth=&quot;2&quot;</div><div class="line">            android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">    &lt;/group&gt;</div><div class="line">&lt;/vector&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-574df53f3790cc98.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="3-制作-SVG-图像"><a href="#3-制作-SVG-图像" class="headerlink" title="3. 制作 SVG 图像"></a>3. 制作 SVG 图像</h4><p>方法一：设计软件<br>如果有绘图基础，可以直接使用 Illustrator 或在线 SVG 工具制作 SVG 图像（如 <a href="http://editor.method.ac/），或者通过" target="_blank" rel="external">http://editor.method.ac/），或者通过</a> SVG 源文件下载网站下载后进行编辑。</p><p>方法二：Iconfont<br>有很多 Iconfont 开源网站，比如国内的阿里巴巴矢量图库，地址为 <a href="http://www.iconfont.cn/。" target="_blank" rel="external">http://www.iconfont.cn/。</a></p><h4 id="4-在-Android-中引入-SVG-图像"><a href="#4-在-Android-中引入-SVG-图像" class="headerlink" title="4. 在 Android 中引入 SVG 图像"></a>4. 在 Android 中引入 SVG 图像</h4><p>在 Android 中是不支持 SVG 图像解析的，我们必须将 SVG 图像转换为 vector 标签描述，这里同样有两种方法。</p><p>方法一：<a href="http://inloop.github.io/svg2android/" target="_blank" rel="external">在线转换</a>。<br>This tool has been deprecated. Use official <a href="https://developer.android.com/studio/write/vector-asset-studio#svg" target="_blank" rel="external"><strong>Vector Asset Studio</strong></a> instead.</p><p>方法二：Vector Asset Studio<br>Android Studio 2.0 及以上版本中支持创建 Vector 文件，如下图所示。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-9ff6527094fa10b7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-818c4a056b161b50.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="5-示例"><a href="#5-示例" class="headerlink" title="5. 示例"></a>5. 示例</h4><p>1）引入兼容包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">compile &apos;com.android.support:appcompat-v7:23.4.0&apos;</div><div class="line">// 或使用 androidx</div><div class="line">implementation &apos;androidx.appcompat:appcompat:1.0.2&apos;</div></pre></td></tr></table></figure></p><p>在项目的 build.gradle 脚本中添加对 Vector 兼容性的支持。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">android &#123;</div><div class="line">    defaultConfig &#123;</div><div class="line">        vectorDrawables.useSupportLibrary = true</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2）生成 Vector 图像<br>使用前面例子中的一条横线的 Vector 图像（src/drawable/svg.xml）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:width=&quot;200dp&quot;</div><div class="line">    android:height=&quot;100dp&quot;</div><div class="line">    android:viewportWidth=&quot;100&quot;</div><div class="line">    android:viewportHeight=&quot;50&quot;&gt;</div><div class="line">    &lt;path</div><div class="line">        android:name=&quot;bar&quot;</div><div class="line">        android:pathData=&quot;M50,23 L100,23&quot;</div><div class="line">        android:strokeWidth=&quot;2&quot;</div><div class="line">        android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">&lt;/vector&gt;</div></pre></td></tr></table></figure></p><p>3）在 ImageView、ImageButton 中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">    android:id=&quot;@+id/iv&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    app:srcCompat=&quot;@drawable/svg&quot;/&gt;</div></pre></td></tr></table></figure></p><p>在代码中设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ImageView iv = findViewById(R.id.iv);</div><div class="line">iv.setImageResource(R.drawable.svg);</div></pre></td></tr></table></figure></p><blockquote><p>本人测试使用 android:background=”@drawable/svg” 也是正常的。测试机型 Pixel XL，Android 7.1.2。</p></blockquote><p>4）在 Button、RadioButton 中使用<br>Button 并不能直接通过 app:srcCompat 属性来使用 Vector 图像，而需要通过 selector 标签来使用（selector_svg.xml）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;selector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/svg&quot; android:state_pressed=&quot;true&quot;/&gt;</div><div class="line">    &lt;item android:drawable=&quot;@drawable/svg&quot;/&gt;</div><div class="line">&lt;/selector&gt;</div></pre></td></tr></table></figure></p><p>如果到这里并不能直接运行，需要把下面这段代码放在 Activity 的前面。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    static &#123;</div><div class="line">        AppCompatDelegate.setCompatVectorFromResourcesEnabled(true);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        ...</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>本人测试可以直接使用 android:background=”@drawable/svg” 并且不需要在 Activity 中加入上述代码 即可正常运行。测试机型 Pixel XL，Android 7.1.2。</p></blockquote><p><div id="jump3"></div></p><h3 id="5-2-3-动态-Vector"><a href="#5-2-3-动态-Vector" class="headerlink" title="5.2.3 动态 Vector"></a>5.2.3 动态 Vector</h3><p>实现 Vector 动画，步骤如下：<br>1）使用上述 drawable/svg.xml<br>2）创建 animator/anim_trim_start.xml 文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:propertyName=&quot;trimPathStart&quot;</div><div class="line">    android:valueFrom=&quot;0&quot;</div><div class="line">    android:valueTo=&quot;1&quot;</div><div class="line">    android:duration=&quot;2000&quot;/&gt;</div></pre></td></tr></table></figure></p><p>3）关联 Vector &amp; Animator。drawable/animated_vector.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animated-vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:drawable=&quot;@drawable/svg&quot;&gt;</div><div class="line">    &lt;target</div><div class="line">        android:animation=&quot;@animator/anim_trim_start&quot;</div><div class="line">        android:name=&quot;bar&quot;/&gt;</div><div class="line">&lt;/animated-vector&gt;</div></pre></td></tr></table></figure></p><p>4）最后在代码中使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        final ImageView imageView = findViewById(R.id.iv);</div><div class="line">        AnimatedVectorDrawableCompat compat = AnimatedVectorDrawableCompat.create(</div><div class="line">                MainActivity.this, R.drawable.animated_vector);</div><div class="line">        imageView.setImageDrawable(compat);</div><div class="line"></div><div class="line"></div><div class="line">        findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                ((Animatable) imageView.getDrawable()).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-07e5d6f4bfb689d8.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump4"></div></p><h3 id="5-2-4-示例：输入搜索动画"><a href="#5-2-4-示例：输入搜索动画" class="headerlink" title="5.2.4 示例：输入搜索动画"></a>5.2.4 示例：输入搜索动画</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a5ed5dd59e09fc2c.gif?imageMogr2/auto-orient/strip" alt=""></p><h4 id="1-准备-SVG-图像"><a href="#1-准备-SVG-图像" class="headerlink" title="1. 准备 SVG 图像"></a>1. 准备 SVG 图像</h4><p>res/drawable/svg.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:width=&quot;150dp&quot;</div><div class="line">    android:height=&quot;24dp&quot;</div><div class="line">    android:viewportWidth=&quot;150&quot;</div><div class="line">    android:viewportHeight=&quot;24&quot;&gt;</div><div class="line">    &lt;!-- 搜索图形 --&gt;</div><div class="line">    &lt;path</div><div class="line">        android:name=&quot;search&quot;</div><div class="line">        android:pathData=&quot;M141,17 A9,9 0 1,1 142,16 L149,23&quot;</div><div class="line">        android:strokeWidth=&quot;2&quot;</div><div class="line">        android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">    &lt;path</div><div class="line">        android:name=&quot;bar&quot;</div><div class="line">        android:trimPathStart=&quot;1&quot;</div><div class="line">        android:pathData=&quot;M0,23 L149,23&quot;</div><div class="line">        android:strokeWidth=&quot;2&quot;</div><div class="line">        android:strokeColor=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">&lt;/vector&gt;</div></pre></td></tr></table></figure></p><h4 id="2-准备动画"><a href="#2-准备动画" class="headerlink" title="2. 准备动画"></a>2. 准备动画</h4><p>res/animator/anim_bar_trim_start.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:propertyName=&quot;trimPathStart&quot;</div><div class="line">    android:valueFrom=&quot;0&quot;</div><div class="line">    android:valueTo=&quot;1&quot;</div><div class="line">    android:valueType=&quot;floatType&quot;</div><div class="line">    android:duration=&quot;500&quot;/&gt;</div></pre></td></tr></table></figure></p><p>res/animator/anim_search_trim_start.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:propertyName=&quot;trimPathEnd&quot;</div><div class="line">    android:valueFrom=&quot;0&quot;</div><div class="line">    android:valueTo=&quot;1&quot;</div><div class="line">    android:valueType=&quot;floatType&quot;</div><div class="line">    android:duration=&quot;500&quot;/&gt;</div></pre></td></tr></table></figure></p><p>关联 Vector &amp; Animator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animated-vector xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:drawable=&quot;@drawable/svg&quot;&gt;</div><div class="line">    &lt;target</div><div class="line">        android:animation=&quot;@animator/anim_bar_trim_start&quot;</div><div class="line">        android:name=&quot;bar&quot;/&gt;</div><div class="line">    &lt;target</div><div class="line">        android:animation=&quot;@animator/anim_search_trim_start&quot;</div><div class="line">        android:name=&quot;search&quot;/&gt;</div><div class="line">&lt;/animated-vector&gt;</div></pre></td></tr></table></figure></p><h4 id="3-布局与开始动画"><a href="#3-布局与开始动画" class="headerlink" title="3. 布局与开始动画"></a>3. 布局与开始动画</h4><p>res/layout/act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;FrameLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:padding=&quot;20dp&quot; &gt;</div><div class="line">    &lt;EditText</div><div class="line">        android:id=&quot;@+id/edit&quot;</div><div class="line">        android:layout_width=&quot;150dp&quot;</div><div class="line">        android:layout_height=&quot;24dp&quot;</div><div class="line">        android:hint=&quot;点击输入&quot;</div><div class="line">        android:background=&quot;@null&quot;/&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/iv&quot;</div><div class="line">        android:layout_width=&quot;150dp&quot;</div><div class="line">        android:layout_height=&quot;24dp&quot; /&gt;</div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure></p><p>开始动画代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        final ImageView imageView = findViewById(R.id.iv);</div><div class="line">        // 将焦点放在 ImageView 上</div><div class="line">        imageView.setFocusable(true);</div><div class="line">        imageView.setFocusableInTouchMode(true);</div><div class="line">        imageView.requestFocus();</div><div class="line">        imageView.requestFocusFromTouch();</div><div class="line"></div><div class="line">        EditText editText = findViewById(R.id.edit);</div><div class="line">        editText.setOnFocusChangeListener(new View.OnFocusChangeListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onFocusChange(View v, boolean hasFocus) &#123;</div><div class="line">                AnimatedVectorDrawableCompat compat = AnimatedVectorDrawableCompat.create(</div><div class="line">                        MainActivity.this, R.drawable.animated_vector);</div><div class="line">                imageView.setImageDrawable(compat);</div><div class="line">                ((Animatable) imageView.getDrawable()).start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05.1 精通自定义 View 之动画进阶——利用 PathMeasure 实现路径动画</title>
      <link href="/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/05/Custom%20View/05.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E5%88%A9%E7%94%A8%20PathMeasure%20%E5%AE%9E%E7%8E%B0%E8%B7%AF%E5%BE%84%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>PathMeasure 类似一个计算器，可以计算出指定路径的一些信息，比如路径总长、指定长度所对应的坐标等。我们可以通过 PathMeasure 可以实现复杂的动画效果。</p><p><div id="jump1"></div></p><h3 id="5-1-1-初始化"><a href="#5-1-1-初始化" class="headerlink" title="5.1.1 初始化"></a>5.1.1 初始化</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 初始化方法一</div><div class="line">public PathMeasure();</div><div class="line">setPath(Path path, boolean forceClosed);</div><div class="line"></div><div class="line">// 初始化方法二</div><div class="line">public PathMeasure(Path path, boolean forceClosed);</div></pre></td></tr></table></figure><p>参数 boolean forceClosed 表示Path 最终是否需要闭合，如果为 true，则不管关联的 Path 是否是闭合的，都会被闭合。但是 forceClosed 参数对绑定的 Path 不会产生任何影响，例如一个折线段的 Path，本身是没有闭合的，当 forceClosed 设置为 true 的时候，PathMeasure 计算的 Path 是闭合的，但 Path 绘制出来的是不会闭合的。forceClosed 参数只对 PathMeasure 的测量结果有影响，例如一个折线段的 Path，本身没有闭合，当 forceClosed 设置为 true 时，PathMeasure 的计算就会包含最后一段闭合的路径，与原来的 Path 不同。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private PathMeasure mPathMeasureFalse;</div><div class="line">    private PathMeasure mPathMeasureTrue;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(8);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">        mPath.moveTo(50, 50);</div><div class="line">        mPath.lineTo(50, 150);</div><div class="line">        mPath.lineTo(150, 150);</div><div class="line">        mPath.lineTo(150, 50);</div><div class="line"></div><div class="line">        mPathMeasureFalse = new PathMeasure(mPath, false);</div><div class="line">        mPathMeasureTrue = new PathMeasure(mPath, true);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        Log.i(&quot;xian&quot;, &quot;forceClosed=false----&gt;&quot; + mPathMeasureFalse.getLength());</div><div class="line">        Log.i(&quot;xian&quot;, &quot;forceClosed=true-----&gt;&quot; + mPathMeasureTrue.getLength());</div><div class="line">        canvas.drawPath(mPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-adc6485f5f2929f9.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="path 图"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6c7df70a4f1b8325.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志输出"></p><p>从图中可以看到，我们创建的只是正方形的三条边，而日志打印结果表示：如果 forceClosed 为 false，则测量的是当前 Path 状态的长度；如果 forceClosed 为 true，则不论 Path 是否闭合，测量的都是 Path 的闭合长度。</p><p><div id="jump2"></div></p><h3 id="5-1-2-简单函数使用"><a href="#5-1-2-简单函数使用" class="headerlink" title="5.1.2 简单函数使用"></a>5.1.2 简单函数使用</h3><h4 id="1-getLength"><a href="#1-getLength" class="headerlink" title="1. getLength()"></a>1. getLength()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 获取一段路径的长度，不一定是整个 Path 的长度</div><div class="line">public float getLength()</div></pre></td></tr></table></figure><h4 id="2-isClosed"><a href="#2-isClosed" class="headerlink" title="2. isClosed()"></a>2. isClosed()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 判断测量 Path 时是否计算闭合，返回值是 forceClosed</div><div class="line">public boolean isClosed()</div></pre></td></tr></table></figure><h4 id="3-nextContour"><a href="#3-nextContour" class="headerlink" title="3. nextContour()"></a>3. nextContour()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public boolean nextContour()</div></pre></td></tr></table></figure><p>Path 可以由多条曲线构成，但不论是 getLength()、getSegment() 还是其他函数，都会只针对其中第一条线段进行计算。而 nextContour() 就是用于跳转到下一条曲线的函数。如果跳转成功，则返回 true；如果跳转失败，则返回 false。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath1, mPath2, mPath3;</div><div class="line">    private PathMeasure mPathMeasure;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(8);</div><div class="line"></div><div class="line">        mPath1 = new Path();</div><div class="line">        mPath1.addRect(-50, -50, 50, 50, Path.Direction.CW);</div><div class="line">        mPath2 = new Path();</div><div class="line">        mPath2.addRect(-100, -100, 100, 100, Path.Direction.CW);</div><div class="line">        mPath3 = new Path();</div><div class="line">        mPath3.addRect(-120, -120, 120, 120, Path.Direction.CW);</div><div class="line">        mPathMeasure = new PathMeasure();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.translate(150, 150);</div><div class="line"></div><div class="line">        // 只绘画最大的区域</div><div class="line">        // mPath.addRect(-50, -50, 50, 50, Path.Direction.CW);</div><div class="line">        // mPath.addRect(-100, -100, 100, 100, Path.Direction.CW);</div><div class="line">        // mPath.addRect(-120, -120, 120, 120, Path.Direction.CW);</div><div class="line">        // canvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">        mPath1.addPath(mPath2);</div><div class="line">        mPath1.addPath(mPath3);</div><div class="line">        canvas.drawPath(mPath1, mPaint);</div><div class="line">        mPathMeasure.setPath(mPath1, false);</div><div class="line"></div><div class="line">        do &#123;</div><div class="line">            float len = mPathMeasure.getLength();</div><div class="line">            Log.i(&quot;xian&quot;, &quot;len=&quot; + len);</div><div class="line">        &#125; while (mPathMeasure.nextContour());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>结果：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fcf22a7220079a96.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aee6cf7489e70d83.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="日志打印结果"></p><p>通过这个例子可以得出以下结论：</p><ul><li>nextContour() 函数得到的曲线的顺序与 Path 中添加的顺序相同。</li><li>getLength() 等函数针对的是当前线段，不是整个 Path。</li></ul><p><div id="jump3"></div></p><h3 id="5-1-3-getSegment-函数"><a href="#5-1-3-getSegment-函数" class="headerlink" title="5.1.3 getSegment() 函数"></a>5.1.3 getSegment() 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public boolean getSegment(float startD, float stopD, Path dst, boolean startWithMoveTo)</div></pre></td></tr></table></figure><p>用于截取整个 Path 中的某个片段，通过参数 startD 与 stopD 来控制截取的长度，并将截取后的 Path 保存并添加（不是替换）到参数 dst 中。startWithMoveTo 表示起始点是否使用 moveTo 将路径的新起点移动到结果 Path 的起始点，通常设置为 true，以保证每次截取的 Path 都是正常的、完整的；如果设置为 false，则新增的片段会从上一次 Path 终点开始计算，这样可以保证截取的 Path 片段是连续的，但不一定时正常的。</p><p>注意：</p><ul><li>如果 startD、stopD 的数值不在取值范围[0, getLength] 内，或者 startD == stopD，则返回值为 false，而且不会改变 dst 中的内容。</li><li>使用 getSegment() 函数时需要禁用硬件加速功能。 setLayerType(LAYER_TYPE_SOFTWARE, null)。</li></ul><p>示例一：用法举例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath, mDst;</div><div class="line">    private PathMeasure mPathMeasure;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(8);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">        mPath.addRect(-50, -50, 50, 50, Path.Direction.CW);</div><div class="line">        mDst = new Path();</div><div class="line">        mPathMeasure = new PathMeasure(mPath, false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        canvas.translate(100, 100);</div><div class="line">        mPathMeasure.getSegment(0, 150, mDst, true);</div><div class="line">        canvas.drawPath(mDst, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ace4ca83b064f380.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>结论一：路径截取是以路径的左上角为起始点开始的。</p></blockquote><p>示例二：逆时针<br>将生成路径的方式指定为逆时针。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// mPath.addRect(-50, -50, 50, 50, Path.Direction.CW);</div><div class="line">mPath.addRect(-50, -50, 50, 50, Path.Direction.CCW);</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c571e32b3e662b87.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>结论二：路径的截取方向与路径的生成方向相同。</p></blockquote><p>示例三：如果 dst 路径不为空<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mDst = new Path();</div><div class="line">mDst.lineTo(10, 100);</div><div class="line">mPathMeasure = new PathMeasure(mPath, false);</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fb56b254e3f2b72b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>结论三：会将截取的 Path 片段添加到路径 dst 中，而不是替换 dst 中的内容。</p></blockquote><p>示例四：如果 startWithMoveTo 参数为 false<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// mPathMeasure.getSegment(0, 150, mDst, true);</div><div class="line">mPathMeasure.getSegment(0, 150, mDst, false);</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c63826461afbc1d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>结论四：如果 startWithMoveTo 为 true，则被截取出来的 Path 片段保持原状；如果 startWithMoveTo 为 false，则会截取出来的 Path 片段的起始点移动到 dst 的最后一个点，以保证 dst 路径的连续性。</p></blockquote><h4 id="示例：路径加载动画"><a href="#示例：路径加载动画" class="headerlink" title="示例：路径加载动画"></a>示例：路径加载动画</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0e3076580b729727.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mCirclePath, mDstPath;</div><div class="line">    private PathMeasure mPathMeasure;</div><div class="line">    private float mCurAnimValue;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line"></div><div class="line">        mDstPath = new Path();</div><div class="line">        mCirclePath = new Path();</div><div class="line">        mCirclePath.addCircle(100, 100, 50, Path.Direction.CW);</div><div class="line">        mPathMeasure = new PathMeasure(mCirclePath, false);</div><div class="line"></div><div class="line">        ValueAnimator animator = ValueAnimator.ofFloat(0, 1);</div><div class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                mCurAnimValue = (Float) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.setDuration(1000);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.drawColor(Color.WHITE);</div><div class="line">        float stop = mPathMeasure.getLength() * mCurAnimValue;</div><div class="line">        mDstPath.reset();</div><div class="line">        mPathMeasure.getSegment(0, stop, mDstPath, true);</div><div class="line">        canvas.drawPath(mDstPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述示例中，在生成动画路径时，始终是从 0 位置开始的。如果我们稍微改变一下生成路径的起始点位置，就可以完成一个比较有意思的加载图动画，效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0bb7aa97dfd0d0db.gif?imageMogr2/auto-orient/strip" alt=""></p><p>修改代码如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.drawColor(Color.WHITE);</div><div class="line">    float length = mPathMeasure.getLength();</div><div class="line">    float stop = length * mCurAnimValue;</div><div class="line">    float start = (float) (stop - ((0.5 - Math.abs(mCurAnimValue - 0.5)) * length));</div><div class="line">    mDstPath.reset();</div><div class="line">    mPathMeasure.getSegment(start, stop, mDstPath, true);</div><div class="line">    canvas.drawPath(mDstPath, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="5-1-4-getPosTan-函数"><a href="#5-1-4-getPosTan-函数" class="headerlink" title="5.1.4 getPosTan() 函数"></a>5.1.4 getPosTan() 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean getPosTan(float distance, float[] pos, float[] tan)</div></pre></td></tr></table></figure><p>用于得到路径上某一长度的位置以及该位置的正切值。参数：</p><ul><li>float distance：距离 Path 起始点的长度，取值范围 0 ≤ distance ≤ getLength。</li><li>float[] pos：该点的坐标值。pos[0] 表示 x 坐标，pos[1] 表示 y 坐标。</li><li>float[] tan：该点的正切值。</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14186083-52fa16f0ba77e7a7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="半径为1的各点的坐标值"></p><p>在 Math 类中，有两个求反切值的函数，即夹角 a 的值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">double atan(double d)</div><div class="line">double atan2(double x, double y)</div></pre></td></tr></table></figure></p><p>示例：飞机加载动画</p><p><img src="https://upload-images.jianshu.io/upload_images/10002669-6f7a869e08621eb2.png?imageMogr2/auto-orient/strip|imageView2/2/w/808/format/webp" alt="动画原理"></p><p>动画效果：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-49a48bdececab025.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mCirclePath, mDstPath;</div><div class="line">    private PathMeasure mPathMeasure;</div><div class="line">    private float mCurAnimValue;</div><div class="line">    private Bitmap mPlaneBmp;</div><div class="line">    private Matrix mMatrix;</div><div class="line">    private ValueAnimator mValueAnimator;</div><div class="line">    private float[] pos = new float[2];</div><div class="line">    private float[] tan = new float[2];</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPlaneBmp = BitmapFactory.decodeResource(getResources(), R.drawable.plane);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(4);</div><div class="line"></div><div class="line">        mDstPath = new Path();</div><div class="line">        mCirclePath = new Path();</div><div class="line">        mPathMeasure = new PathMeasure();</div><div class="line">        mMatrix = new Matrix();</div><div class="line"></div><div class="line">        mValueAnimator = ValueAnimator.ofFloat(0, 1);</div><div class="line">        mValueAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                mCurAnimValue = (Float) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mValueAnimator.setDuration(2000);</div><div class="line">        mValueAnimator.setInterpolator(new AccelerateDecelerateInterpolator());</div><div class="line">        mValueAnimator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        int width = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int height = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int radius;</div><div class="line">        if (width &gt;= height) &#123;</div><div class="line">            radius = height / 2 - height / 8;</div><div class="line">        &#125; else &#123;</div><div class="line">            radius = width / 2 - width / 8;</div><div class="line">        &#125;</div><div class="line">        // 先画圆的 path，但是这个圆只是用来计算</div><div class="line">        mCirclePath.addCircle(width / 2f, height / 2f, radius, Path.Direction.CW);</div><div class="line">        //计算圆的path的长度</div><div class="line">        mPathMeasure.setPath(mCirclePath, false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 绘制路径加载动画</div><div class="line">        float length = mPathMeasure.getLength();</div><div class="line">        float stop = length * mCurAnimValue;</div><div class="line">        float start = (float) (stop - ((0.5 - Math.abs(mCurAnimValue - 0.5)) * length));</div><div class="line"></div><div class="line">        mDstPath.reset();</div><div class="line">        mPathMeasure.getSegment(start, stop, mDstPath, true);</div><div class="line">        canvas.drawPath(mDstPath, mPaint);</div><div class="line"></div><div class="line">        // 旋转飞机图片并绘制</div><div class="line">        // 使用 getMatrix</div><div class="line">        // mPathMeasure.getMatrix(stop, mMatrix, PathMeasure.POSITION_MATRIX_FLAG|PathMeasure.TANGENT_MATRIX_FLAG);</div><div class="line">        // mMatrix.preTranslate(-mPlaneBmp.getWidth() / 2f,-mPlaneBmp.getHeight() / 2f);</div><div class="line"></div><div class="line">        // 使用 getPosTan</div><div class="line">        mPathMeasure.getPosTan(stop, pos, tan);</div><div class="line">        float degrees = (float) (Math.atan2(tan[1], tan[0]) * 180.0 / Math.PI);</div><div class="line">        float px = mPlaneBmp.getWidth() / 2f;</div><div class="line">        float py = mPlaneBmp.getHeight() / 2f;</div><div class="line">        mMatrix.reset();</div><div class="line">        mMatrix.postRotate(degrees, mPlaneBmp.getWidth() / 2f, mPlaneBmp.getHeight() / 2f);</div><div class="line">        mMatrix.postTranslate(pos[0] - px, pos[1] - py);</div><div class="line">        canvas.drawBitmap(mPlaneBmp, mMatrix, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDetachedFromWindow() &#123;</div><div class="line">        super.onDetachedFromWindow();</div><div class="line">        mValueAnimator.cancel();</div><div class="line">        mValueAnimator = null;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump5"></div></p><h3 id="5-1-5-getMatrix-函数"><a href="#5-1-5-getMatrix-函数" class="headerlink" title="5.1.5 getMatrix() 函数"></a>5.1.5 getMatrix() 函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean getMatrix(float distance, Matrix matrix, int flags)</div></pre></td></tr></table></figure><p>用于得到路径上某一长度的位置以及该位置的正切值的矩阵。</p><ul><li>distance：距离 Path 起始点的长度。</li><li>matrix：根据flags 封装好的 matrix 会根据 flags 的设置而存入不同的内容。</li><li>flags：用于指定哪些内容会存入 matrix 中。flags 值有两个：PathMeasure.POSITION_MATRIX_FLAG 表示获取位置信息；PathMeasure.TANGENT_MATRIX_FLAG 表示获取切边信息，使得图片按 Path 旋转。可以只指定一个，也可以用“|”同时指定。</li></ul><p>很明显，getMatrix() 函数只是 PathMeasure.getPosTan() 函数的另一种实现而已。如下更改飞机加载动画：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    // 绘制路径加载动画</div><div class="line">    float length = mPathMeasure.getLength();</div><div class="line">    float stop = length * mCurAnimValue;</div><div class="line">    float start = (float) (stop - ((0.5 - Math.abs(mCurAnimValue - 0.5)) * length));</div><div class="line"></div><div class="line">    mDstPath.reset();</div><div class="line">    mPathMeasure.getSegment(start, stop, mDstPath, true);</div><div class="line">    canvas.drawPath(mDstPath, mPaint);</div><div class="line"></div><div class="line">    // 旋转飞机图片并绘制</div><div class="line">    // 使用 getMatrix</div><div class="line">    mMatrix.reset();</div><div class="line">    mPathMeasure.getMatrix(stop, mMatrix, PathMeasure.POSITION_MATRIX_FLAG|PathMeasure.TANGENT_MATRIX_FLAG);</div><div class="line">    mMatrix.preTranslate(-mPlaneBmp.getWidth() / 2f,-mPlaneBmp.getHeight() / 2f);</div><div class="line"></div><div class="line">    // 使用 getPosTan</div><div class="line">    // mPathMeasure.getPosTan(stop, pos, tan);</div><div class="line">    // float degrees = (float) (Math.atan2(tan[1], tan[0]) * 180.0 / Math.PI);</div><div class="line">    // float px = mPlaneBmp.getWidth() / 2f;</div><div class="line">    // float py = mPlaneBmp.getHeight() / 2f;</div><div class="line">    // mMatrix.postRotate(degrees, mPlaneBmp.getWidth() / 2f, mPlaneBmp.getHeight() / 2f);</div><div class="line">    // mMatrix.postTranslate(pos[0] - px, pos[1] - py);</div><div class="line">    canvas.drawBitmap(mPlaneBmp, mMatrix, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump6"></div></p><h3 id="5-1-6-示例：支付宝支付成功动画"><a href="#5-1-6-示例：支付宝支付成功动画" class="headerlink" title="5.1.6 示例：支付宝支付成功动画"></a>5.1.6 示例：支付宝支付成功动画</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a5fb69f068b0ad8b.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mCirclePath, mDstPath;</div><div class="line">    private PathMeasure mPathMeasure;</div><div class="line">    private float mCurAnimValue;</div><div class="line">    private ValueAnimator mValueAnimator;</div><div class="line">    private boolean mNext = false;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.BLACK);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(8);</div><div class="line"></div><div class="line">        mDstPath = new Path();</div><div class="line">        mCirclePath = new Path();</div><div class="line">        mPathMeasure = new PathMeasure();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">        mCirclePath.reset();</div><div class="line"></div><div class="line">        int width = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">        int height = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line">        int centerX = width / 2;</div><div class="line">        int centerY = height / 2;</div><div class="line">        int radius = Math.min(centerX, centerY) / 2;</div><div class="line"></div><div class="line">        mCirclePath.addCircle(centerX, centerY, radius, Path.Direction.CW);</div><div class="line">        mCirclePath.moveTo(centerX - radius/2f, centerY);                // 勾的起点</div><div class="line">        mCirclePath.lineTo(centerX,centerY + radius/2f);                 // 勾的拐点</div><div class="line">        mCirclePath.lineTo(centerX + radius/2f,centerY - radius/3f);  // 勾的终点</div><div class="line">        mPathMeasure.setPath(mCirclePath,false);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        if (mCurAnimValue &lt; 1) &#123;</div><div class="line">            float stop = mPathMeasure.getLength() * mCurAnimValue;</div><div class="line">            mPathMeasure.getSegment(0, stop, mDstPath, true);</div><div class="line">        &#125; else &#123;</div><div class="line">            if (!mNext) &#123;</div><div class="line">                mNext = true;</div><div class="line">                mPathMeasure.getSegment(0, mPathMeasure.getLength(), mDstPath, true);</div><div class="line">                mPathMeasure.nextContour();</div><div class="line">            &#125; else &#123;</div><div class="line">                float stop = mPathMeasure.getLength() * (mCurAnimValue - 1);</div><div class="line">                mPathMeasure.getSegment(0, stop, mDstPath, true);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        canvas.drawPath(mDstPath, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDetachedFromWindow() &#123;</div><div class="line">        super.onDetachedFromWindow();</div><div class="line">        if (mValueAnimator != null) &#123;</div><div class="line">            mValueAnimator.cancel();</div><div class="line">            mValueAnimator = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void startAnim() &#123;</div><div class="line">        mValueAnimator = ValueAnimator.ofFloat(0, 2);</div><div class="line">        mValueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                mCurAnimValue = (Float) animation.getAnimatedValue();</div><div class="line">                invalidate();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mValueAnimator.setDuration(2000);</div><div class="line">        mValueAnimator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>使用自定义控件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        findViewById(R.id.start_btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                TestView tv = findViewById(R.id.test_view);</div><div class="line">                tv.startAnim();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.4 精通自定义 View 之属性动画进阶——NineOldAndroids</title>
      <link href="/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/"/>
      <url>/2019/07/04/Custom%20View/04.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94NineOldAndroids/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>Android 3.0 推出了全新的 Animation API，使用起来很方便，但是不能在 3.0 以下版本中使用。NineOldAndroids 是一个可以在任意 Android 版本上使用的 Animation API。</p><p>常用类有 ObjectAnimator、ValueAnimator、AnimatorSet、PropertyValuesHolder、Keyframe、ViewPropertyAnimator、ViewHelper.</p><p><div id="jump1"></div></p><h3 id="4-4-1-NineOldAndroids-中的-ViewPropertyAnimator"><a href="#4-4-1-NineOldAndroids-中的-ViewPropertyAnimator" class="headerlink" title="4.4.1 NineOldAndroids 中的 ViewPropertyAnimator"></a>4.4.1 NineOldAndroids 中的 ViewPropertyAnimator</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 官方 API（3.1 以上）</div><div class="line">mView.animate().setDuration(5000).rotationY(720).x(100).y(100).start();</div><div class="line"></div><div class="line">// NineOldAndroids</div><div class="line">ViewPropertyAnimator.animate(mView).setDuration(5000).rotationY(720).x(100).y(100).start();</div></pre></td></tr></table></figure><p>从对比中可以看出，唯一不同的是 animate() 函数，其他诸如链式操作、各属性对应的函数、添加监听器都与官方 API 完全相同</p><p><div id="jump2"></div></p><h3 id="4-4-2-NineOldAndroids-中的-ViewHelper"><a href="#4-4-2-NineOldAndroids-中的-ViewHelper" class="headerlink" title="4.4.2 NineOldAndroids 中的 ViewHelper"></a>4.4.2 NineOldAndroids 中的 ViewHelper</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>ViewHelper 提供了一系列 set/get 函数去操作 View 的各种属性，比如透明度、偏移量、旋转角度等，大大方便了我们的使用，而且无须考虑低版本的兼容性问题。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public static float getAlpha(View view)</div><div class="line">public static void setAlpha(View view, float alpha)</div><div class="line"></div><div class="line">public static float getPivotX(View view)</div><div class="line">public static void setPivotX(View view, float pivotX)</div><div class="line"></div><div class="line">public static float getPivotY(View view)</div><div class="line">public static void setPivotY(View view, float pivotY)</div><div class="line"></div><div class="line">public static float getRotation(View view)</div><div class="line">public static void setRotation(View view, float rotation)</div><div class="line"></div><div class="line">public static float getRotationX(View view)</div><div class="line">public static void setRotationX(View view, float rotationX)</div><div class="line"></div><div class="line">public static float getRotationY(View view)</div><div class="line">public static void setRotationY(View view, float rotationY)</div><div class="line"></div><div class="line">public static float getScaleX(View view)</div><div class="line">public static void setScaleX(View view, float scaleX)</div><div class="line"></div><div class="line">public static float getScaleY(View view)</div><div class="line">public static void setScaleY(View view, float scaleY)</div><div class="line"></div><div class="line">public static float getScrollX(View view)</div><div class="line">public static void setScrollX(View view, float scrollX)</div><div class="line"></div><div class="line">public static float getScrollY(View view)</div><div class="line">public static void setScrollY(View view, float scrollY)</div><div class="line"></div><div class="line">public static float getTranslationX(View view)</div><div class="line">public static void setTranslationX(View view, float translationX)</div><div class="line"></div><div class="line">public static float getTranslationY(View view)</div><div class="line">public static void setTranslationY(View view, float translationY)</div><div class="line"></div><div class="line">public static float getX(View view)</div><div class="line">public static void setX(View view, float x)</div><div class="line"></div><div class="line">public static float getY(View view)</div><div class="line">public static void setY(View view, float y)</div></pre></td></tr></table></figure></p><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">final TextView tv = (TextView) findViewById(R.id.tv);</div><div class="line"></div><div class="line">findViewById(R.id.btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        ValueAnimator animator = ValueAnimator.ofFloat(0, 200);</div><div class="line">        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            public void onAnimationUpdate(ValueAnimator valueAnimator) &#123;</div><div class="line">                Float cur = (Float) valueAnimator.getAnimatedValue();</div><div class="line">                ViewHelper.setTranslationX(tv, cur);</div><div class="line">                ViewHelper.setTranslationY(tv, cur);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.3 精通自定义 View 之属性动画进阶——为 ViewGroup 内的组件添加动画</title>
      <link href="/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/04/Custom%20View/04.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94%E4%B8%BA%20ViewGroup%20%E5%86%85%E7%9A%84%E7%BB%84%E4%BB%B6%E6%B7%BB%E5%8A%A0%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump0"></div></p><h3 id="4-3-0-概述"><a href="#4-3-0-概述" class="headerlink" title="4.3.0 概述"></a>4.3.0 概述</h3><p>为 ViewGroup 内的组件添加动画，Android 共提供了 4 种方法。<br><strong>1. layoutAnimation 标签与 LayoutAnimationController</strong><br>第一：定义一个 layoutAnimation 的 animation 文件，如：(anim/layout_animation.xml)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;layoutAnimation xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:delay=&quot;1&quot;</div><div class="line">    android:animationOrder=&quot;normal&quot;</div><div class="line">    android:animation=&quot;@anim/slide_in_left&quot;/&gt;</div></pre></td></tr></table></figure></p><p>第二步：在 viewGroup 类型的控件中，添加android:layoutAnimation=”@anim/layout_animation”，如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ListView</div><div class="line">    android:id=&quot;@+id/listview&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layoutAnimation=&quot;@anim/layout_animation&quot; /&gt;</div></pre></td></tr></table></figure></p><p>其中 @anim/slide_in_left 文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot; android:duration=&quot;1000&quot;&gt;</div><div class="line">    &lt;translate android:fromXDelta=&quot;-50%p&quot; android:toXDelta=&quot;0&quot;/&gt;</div><div class="line">    &lt;alpha android:fromAlpha=&quot;0.0&quot; android:toAlpha=&quot;1.0&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p><blockquote><p>注意：android:layoutAnimation 只在 ViewGroup 创建的时候，才会对其中的 item 添加动画。在创建成功以后，再向其中添加 item 将不会再有动画。</p></blockquote><p><strong>2. gridLayoutAnimation 标签与 GridLayoutAnimationController</strong><br>gridLayoutAnimation 与 layoutAnimation 一样有缺陷：即在 GridView 初次创建的时候有入场动画，之后新添加的数据是不会有入场动画的。</p><p><a href="https://blog.csdn.net/harvic880925/article/details/50785786" target="_blank" rel="external">详情请点击前往：layoutAnimation &amp; gridLayoutAnimation</a></p><p><strong>3. animateLayoutChanges 属性</strong><br>在 API 11 之后，Android 为了支持 ViewGroup 类控件，在添加和移除其中控件时自动添加动画，为我们提供了一个非常简单的属性：android:animateLayoutChanges=[true/false]，所有派生自 ViewGroup 的控件都具有此属性，只要在 XML 中添加上这个属性，就能实现添加/删除其中控件时，带有默认动画了。</p><p><strong>4. LayoutTransition</strong><br>在 API 11 之后引入，可以实现在 ViewGroup 动态添加或删除其中的控件时指定动画。动画可以自定义。对比前三种方法，LayoutTransition 是最强大的。</p><p><div id="jump1"></div></p><h3 id="4-3-1-animateLayoutChanges-属性"><a href="#4-3-1-animateLayoutChanges-属性" class="headerlink" title="4.3.1 animateLayoutChanges 属性"></a>4.3.1 animateLayoutChanges 属性</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1009a7ad10f53cab.gif?imageMogr2/auto-orient/strip" alt=""></p><p>在相应的 GroupView 子类中添加 android:animateLayoutChanges=”true”。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:orientation=&quot;horizontal&quot;&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/add_btn&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;添加控件&quot;/&gt;</div><div class="line">        &lt;Button</div><div class="line">            android:id=&quot;@+id/remove_btn&quot;</div><div class="line">            android:layout_width=&quot;wrap_content&quot;</div><div class="line">            android:layout_height=&quot;wrap_content&quot;</div><div class="line">            android:text=&quot;移除控件&quot;/&gt;</div><div class="line">    &lt;/LinearLayout&gt;</div><div class="line">    &lt;LinearLayout</div><div class="line">        android:id=&quot;@+id/layoutTransitionGroup&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:animateLayoutChanges=&quot;true&quot;</div><div class="line">        android:orientation=&quot;vertical&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line">    private LinearLayout layoutTransitionGroup;</div><div class="line"></div><div class="line">    private int i = 0;</div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        layoutTransitionGroup = findViewById(R.id.layoutTransitionGroup);</div><div class="line">        findViewById(R.id.add_btn).setOnClickListener(this);</div><div class="line">        findViewById(R.id.remove_btn).setOnClickListener(this);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void addButtonView() &#123;</div><div class="line">        i++;</div><div class="line">        Button button = new Button(this);</div><div class="line">        button.setText(&quot;button&quot; + i);</div><div class="line">        LinearLayout.LayoutParams params = new LinearLayout.LayoutParams(</div><div class="line">                ViewGroup.LayoutParams.WRAP_CONTENT, ViewGroup.LayoutParams.WRAP_CONTENT);</div><div class="line">        button.setLayoutParams(params);</div><div class="line">        layoutTransitionGroup.addView(button, 0);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void removeButtonView() &#123;</div><div class="line">        if (i &gt; 0) &#123;</div><div class="line">            layoutTransitionGroup.removeViewAt(0);</div><div class="line">        &#125;</div><div class="line">        i--;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        if (v.getId() == R.id.add_btn) &#123;</div><div class="line">            addButtonView();</div><div class="line">        &#125;</div><div class="line">        if (v.getId() == R.id.remove_btn) &#123;</div><div class="line">            removeButtonView();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="4-3-2-LayoutTransition"><a href="#4-3-2-LayoutTransition" class="headerlink" title="4.3.2 LayoutTransition"></a>4.3.2 LayoutTransition</h3><p>上面虽然在 ViewGroup 类控件 XML 中仅添加一行android:animateLayoutChanges=[true] 即可实现内部控件添加删除时都加上动画效果。但却只能使用默认动画效果，而无法自定义动画。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-54c50a8ff19f0356.gif?imageMogr2/auto-orient/strip" alt=""></p><p>为了能让我们自定义动画，谷歌在 API 11 时，同时为我们引入了一个类 LayoutTransaction。要使用LayoutTransaction是非常容易的，只需要三步： </p><ol><li><p>创建实例</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">LayoutTransaction transitioner = new LayoutTransition();</div></pre></td></tr></table></figure></li><li><p>创建动画并设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animOut = ObjectAnimator.ofFloat(null, &quot;rotation&quot;, 0f, 90f, 0f);</div><div class="line">transitioner.setAnimator(LayoutTransition.DISAPPEARING, animOut);</div></pre></td></tr></table></figure></li><li><p>将 LayoutTransaction 设置进 ViewGroup</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">linearLayout.setLayoutTransition(mTransitioner);</div></pre></td></tr></table></figure></li></ol><p>在第二步中，transitioner.setAnimator 设置动画的函数声明为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setAnimator(int transitionType, Animator animator)</div></pre></td></tr></table></figure></p><ul><li><strong>int transitionType</strong>：表示当前应用动画的对象范围，取值有：<br>APPEARING：元素在容器中出现时所定义的动画。<br>DISAPPEARING：元素在容器中消失时所定义的动画。<br>CHANGE_APPEARING：由于容器中要显现一个新的元素，其它需要变化的元素所应用的动画。<br>CHANGE_DISAPPEARING：当容器中某个元素消失，其它需要变化的元素所应用的动画。</li><li><strong>Animator animator</strong>：表示当前所选范围的控件所使用的动画。</li></ul><h4 id="1-LayoutTransition-APPEARING-与-LayoutTransition-APPEARING"><a href="#1-LayoutTransition-APPEARING-与-LayoutTransition-APPEARING" class="headerlink" title="1. LayoutTransition.APPEARING 与 LayoutTransition.APPEARING"></a>1. LayoutTransition.APPEARING 与 LayoutTransition.APPEARING</h4><p>LayoutTransition.APPEARING 所对应的当一个控件出现时所对应的动画；LayoutTransition.DISAPPEARING 在一个控件被移除时所对应的动画。修改上一个示例代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">layoutTransitionGroup = findViewById(R.id.layoutTransitionGroup);</div><div class="line">findViewById(R.id.add_btn).setOnClickListener(this);</div><div class="line">findViewById(R.id.remove_btn).setOnClickListener(this);</div><div class="line"></div><div class="line">mTransitioner = new LayoutTransition();</div><div class="line">// 入场动画：view 在这个容器中出现时触发的动画</div><div class="line">ObjectAnimator animIn = ObjectAnimator.ofFloat(null, &quot;rotationY&quot;, 0f, 360f,0f);</div><div class="line">mTransitioner.setAnimator(LayoutTransition.APPEARING, animIn);</div><div class="line"></div><div class="line">// 出场动画：view 在这个容器中消失时触发的动画</div><div class="line">ObjectAnimator animOut = ObjectAnimator.ofFloat(null, &quot;rotation&quot;, 0f, 90f, 0f);</div><div class="line">mTransitioner.setAnimator(LayoutTransition.DISAPPEARING, animOut);</div><div class="line"></div><div class="line">layoutTransitionGroup.setLayoutTransition(mTransitioner);</div></pre></td></tr></table></figure></p><p>同时要删除 XML 中的 android:animateLayoutChanges=”true” 设置。</p><h4 id="2-LayoutTransition-CHANGE-APPEARING"><a href="#2-LayoutTransition-CHANGE-APPEARING" class="headerlink" title="2. LayoutTransition.CHANGE_APPEARING"></a>2. LayoutTransition.CHANGE_APPEARING</h4><p>在添加控件时，除了被添加控件本身的入场动画以外，其它需要移动位置的控件，在移动位置时，也被添加上了动画（left 点位移动画），这些除了被添加控件以外的其它需要移动位置的控件组合，所对应的动画就是 LayoutTransition.CHANGE_APPEARING。同样，在移除一个控件时，其它所有需要改变位置的控件组合所对应的动画就是 LayoutTransition.CHANGE_DISAPPEARING。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    setContentView(R.layout.act_main);</div><div class="line"> </div><div class="line">    layoutTransitionGroup = (LinearLayout) findViewById(R.id.layoutTransitionGroup);</div><div class="line">    findViewById(R.id.add_btn).setOnClickListener(this);</div><div class="line">    findViewById(R.id.remove_btn).setOnClickListener(this);</div><div class="line"> </div><div class="line">    mTransitioner = new LayoutTransition();</div><div class="line">    // 入场动画：view 在这个容器中出现时触发的动画</div><div class="line">    ObjectAnimator animIn = ObjectAnimator.ofFloat(null, &quot;rotationY&quot;, 0f, 360f,0f);</div><div class="line">    mTransitioner.setAnimator(LayoutTransition.APPEARING, animIn);</div><div class="line"> </div><div class="line">    // 出场动画：view 在这个容器中消失时触发的动画</div><div class="line">    ObjectAnimator animOut = ObjectAnimator.ofFloat(null, &quot;rotation&quot;, 0f, 90f, 0f);</div><div class="line">    mTransitioner.setAnimator(LayoutTransition.DISAPPEARING, animOut);</div><div class="line"> </div><div class="line">    PropertyValuesHolder pvhLeft = PropertyValuesHolder.ofInt(&quot;left&quot;,0,100,0);</div><div class="line">    PropertyValuesHolder pvhTop = PropertyValuesHolder.ofInt(&quot;top&quot;,1,1);</div><div class="line">    Animator changeAppearAnimator = ObjectAnimator.ofPropertyValuesHolder(</div><div class="line">        layoutTransitionGroup, pvhLeft,pvhBottom,pvhTop,pvhRight);</div><div class="line">    mTransitioner.setAnimator(LayoutTransition.CHANGE_APPEARING,changeAppearAnimator);</div><div class="line"> </div><div class="line">    layoutTransitionGroup.setLayoutTransition(mTransitioner);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>注意：<br>1、LayoutTransition.CHANGE_APPEARING 和 LayoutTransition.CHANGE_DISAPPEARING 必须使用 PropertyValuesHolder 所构造的动画才会有效果，不然无效！也就是说使用 ObjectAnimator 构造的动画，在这里是不会有效果的！<br>2、在构造 PropertyValuesHolder 动画时，“left”、“top” 属性的变动是必写的。如果不需要变动，则直接写为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">PropertyValuesHolder pvhLeft = PropertyValuesHolder.ofInt(&quot;left&quot;,0,0);</div><div class="line">PropertyValuesHolder pvhTop = PropertyValuesHolder.ofInt(&quot;top&quot;,0,0);</div></pre></td></tr></table></figure></p><p>3、在构造 PropertyValuesHolder 时，所使用的 ofInt、ofFloat 中的参数值，第一个值和最后一个值必须相同，不然此属性所对应的的动画将被放弃，在此属性值上将不会有效果。<br>4、在构造 PropertyValuesHolder 时，所使用的 ofInt，ofFloat 中，如果所有参数值都相同，也将不会有动画效果。</p><h4 id="3-LayoutTransition-CHANGE-DISAPPEARING"><a href="#3-LayoutTransition-CHANGE-DISAPPEARING" class="headerlink" title="3. LayoutTransition.CHANGE_DISAPPEARING"></a>3. LayoutTransition.CHANGE_DISAPPEARING</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">PropertyValuesHolder outLeft = PropertyValuesHolder.ofInt(&quot;left&quot;,0,0);</div><div class="line">PropertyValuesHolder outTop = PropertyValuesHolder.ofInt(&quot;top&quot;,0,0);</div><div class="line"> </div><div class="line">Keyframe frame0 = Keyframe.ofFloat(0f, 0);</div><div class="line">Keyframe frame1 = Keyframe.ofFloat(0.1f, -20f);</div><div class="line">Keyframe frame2 = Keyframe.ofFloat(0.2f, 20f);</div><div class="line">Keyframe frame3 = Keyframe.ofFloat(0.3f, -20f);</div><div class="line">Keyframe frame4 = Keyframe.ofFloat(0.4f, 20f);</div><div class="line">Keyframe frame5 = Keyframe.ofFloat(0.5f, -20f);</div><div class="line">Keyframe frame6 = Keyframe.ofFloat(0.6f, 20f);</div><div class="line">Keyframe frame7 = Keyframe.ofFloat(0.7f, -20f);</div><div class="line">Keyframe frame8 = Keyframe.ofFloat(0.8f, 20f);</div><div class="line">Keyframe frame9 = Keyframe.ofFloat(0.9f, -20f);</div><div class="line">Keyframe frame10 = Keyframe.ofFloat(1, 0);</div><div class="line">PropertyValuesHolder mPropertyValuesHolder = PropertyValuesHolder.ofKeyframe(</div><div class="line">        &quot;rotation&quot;,frame0,frame1,frame2,frame3,frame4,</div><div class="line">        frame5,frame6,frame7,frame8,frame9,frame10);</div><div class="line"> </div><div class="line">ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(</div><div class="line">        this, outLeft,outTop,mPropertyValuesHolder);</div><div class="line">mTransitioner.setAnimator(LayoutTransition.CHANGE_DISAPPEARING, animator);</div></pre></td></tr></table></figure><p>第一步：由于 left、top 属性是必须的，但我们做响铃效果时，是不需要 left，top 变动的，所有给他们设置为无效值。<br>第二步：用 KeyFrame 构造 PropertyValuesHolder。<br>第三步：设置 LayoutTransition.CHANGE_DISAPPEARING 动画。</p><p><div id="jump3"></div></p><h3 id="4-3-3-其他函数"><a href="#4-3-3-其他函数" class="headerlink" title="4.3.3 其他函数"></a>4.3.3 其他函数</h3><h4 id="1-基本设置"><a href="#1-基本设置" class="headerlink" title="1. 基本设置"></a>1. 基本设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 设置所有动画完成所需要的时长</div><div class="line"> */</div><div class="line">public void setDuration(long duration)</div><div class="line">/**</div><div class="line"> * 针对单个type，设置动画时长；</div><div class="line"> * transitionType取值为：APPEARING、DISAPPEARING、CHANGE_APPEARING、CHANGE_DISAPPEARING</div><div class="line"> */</div><div class="line">public void setDuration(int transitionType, long duration) </div><div class="line">/**</div><div class="line"> * 针对单个type设置插值器</div><div class="line"> * transitionType取值为：APPEARING、DISAPPEARING、CHANGE_APPEARING、CHANGE_DISAPPEARING</div><div class="line"> */</div><div class="line">public void setInterpolator(int transitionType, TimeInterpolator interpolator)</div><div class="line">/**</div><div class="line"> * 针对单个type设置动画延时</div><div class="line"> * transitionType取值为：APPEARING、DISAPPEARING、CHANGE_APPEARING、CHANGE_DISAPPEARING</div><div class="line"> */</div><div class="line">public void setStartDelay(int transitionType, long delay)</div><div class="line">/**</div><div class="line"> * 针对单个type设置，每个子item动画的时间间隔</div><div class="line"> */</div><div class="line">public void setStagger(int transitionType, long duration)</div></pre></td></tr></table></figure><h4 id="2-LayoutTransition-设置监听"><a href="#2-LayoutTransition-设置监听" class="headerlink" title="2. LayoutTransition 设置监听"></a>2. LayoutTransition 设置监听</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public void addTransitionListener(TransitionListener listener)</div><div class="line">public interface TransitionListener &#123;</div><div class="line">    public void startTransition(LayoutTransition transition, ViewGroup container,View view, int transitionType);</div><div class="line">    public void endTransition(LayoutTransition transition, ViewGroup container,View view, int transitionType);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 TransitionListener 中总共有四个参数：</p><ul><li>LayoutTransition transition：当前的 LayoutTransition 实例。</li><li>ViewGroup container：当前应用 LayoutTransition 的 container。</li><li>View view：当前在做动画的 View 对象。</li><li>int transitionType：当前的 LayoutTransition 类型，取值有：APPEARING、DISAPPEARING、CHANGE_APPEARING、CHANGE_DISAPPEARING。</li></ul><p>在添加控件时，先是 start 回调，再是 end 回调；APPEARING 事件所对应的 View 是控件，而 CHANGE_APPEARING 所对应的控件是容器。删除控件时，原理相同。</p><p>这是因为，在添加控件时，APPEARING 事件只针对当前被添加的控件做动画，所以返回的 View 是当前被添加的控件。而 CHANGE_APPEARING 是对容器中所有已存在的控件做动画，所以返回的 View 是容器。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.2 精通自定义 View 之属性动画进阶——ViewPropertyAnimator</title>
      <link href="/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/"/>
      <url>/2019/07/04/Custom%20View/04.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94ViewPropertyAnimator/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="4-2-1-概述"><a href="#4-2-1-概述" class="headerlink" title="4.2.1 概述"></a>4.2.1 概述</h3><p>使用 ObjectAnimator：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(mView, &quot;alpha&quot;, 0f);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><p>使用 ViewPropertyAnimator：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mView.animate().alpha(0f);</div></pre></td></tr></table></figure></p><p>除此之外，还可以非常容易地将多个动画结合起来。比如：将控件移动到点 (50, 100) 且完全透明。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mView.animate().x(50).y(100).alpha(0f);</div></pre></td></tr></table></figure></p><p>此类事专门针对 View 对象动画而操作的类：链式调用，自动 start， 简化流程，提高效率： </p><ul><li>提供了更简洁的链式调用设置多个属性动画，这些动画可以同时进行的。</li><li>拥有更好的性能，多个属性动画是一次同时变化，只执行一次 UI 刷新（也就是只调用一次 invalidate，而 n 个 ObjectAnimator 就会进行 n 次属性变化，就有 n 次 invalidate）。</li><li>每个属性提供两种类型方法设置。如：scaleX()、scaleXBy()。</li><li>该类只能通过 View 的 animate() 获取其实例对象的引用。</li></ul><p><div id="jump2"></div></p><h3 id="4-2-2-常用函数"><a href="#4-2-2-常用函数" class="headerlink" title="4.2.2 常用函数"></a>4.2.2 常用函数</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div></pre></td><td class="code"><pre><div class="line">view.animate()                  // 获取ViewPropertyAnimator对象</div><div class="line">        // 位移</div><div class="line">        .translationX(100)</div><div class="line">        .translationXBy(100)</div><div class="line">        .translationY(100)</div><div class="line">        .translationYBy(100)</div><div class="line">        .translationZ(100)      // Z 轴移动，API 21 添加</div><div class="line">        .translationZBy(100)    // API 21 添加</div><div class="line">        // 改变坐标</div><div class="line">        .x(100)</div><div class="line">        .xBy(100)</div><div class="line">        .y(100)</div><div class="line">        .yBy(100)</div><div class="line">        // 改变透明度</div><div class="line">        .alpha(0.1f)</div><div class="line">        .alphaBy(0.1f)</div><div class="line">        // 改变透明度</div><div class="line">        .scaleX(0.1f)</div><div class="line">        .scaleXBy(0.1f)</div><div class="line">        .scaleY(0.1f)</div><div class="line">        .scaleYBy(0.1f)</div><div class="line">        // 旋转</div><div class="line">        .rotation(180)</div><div class="line">        .rotationX(180)</div><div class="line">        .rotationBy(180)</div><div class="line">        .rotationY(180)</div><div class="line">        .rotationYBy(180)</div><div class="line">        // 持续时间</div><div class="line">        .setDuration(1000)</div><div class="line">        // 动画开始时执行 runnable，API 16 添加</div><div class="line">        .withStartAction(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        // 动画结束时执行 runnable，API 16 添加</div><div class="line">        .withEndAction(new Runnable() &#123;</div><div class="line">            @Override</div><div class="line">            public void run() &#123;</div><div class="line"></div><div class="line">            &#125;</div><div class="line">        &#125;)</div><div class="line">        .withLayer()            // 硬件加速,API 16添加</div><div class="line">        .setStartDelay(1000)    // 执行延迟</div><div class="line">        // 设置插值器</div><div class="line">        .setInterpolator(new LinearInterpolator())</div><div class="line">        // 设置更新监听</div><div class="line">        .setUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;&#125;</div><div class="line">        &#125;)</div><div class="line">        // 动画监听</div><div class="line">        .setListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;&#125;</div><div class="line">        &#125;)</div><div class="line">        .start();</div></pre></td></tr></table></figure><p>举例说明一下 xxxX() 和 xxxXBy() 函数之间的区别。如 scaleY(2f) 和 scaleYBy(2f)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private TextView tv1, tv2;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        Button startBtn = findViewById(R.id.start_btn);</div><div class="line">        tv1 = findViewById(R.id.tv1);</div><div class="line">        tv2 = findViewById(R.id.tv2);</div><div class="line"></div><div class="line">        startBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                tv1.animate().scaleX(2f);</div><div class="line">                tv2.animate().scaleXBy(2f);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>原图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-4c85d0f46e0e3cea.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>第一次点击开始动画按钮，效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f744e1aa04b08df1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>第二次点击开始动画按钮，效果图如下所示：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aa7a1ac92a785e49.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04.1 精通自定义 View 之属性动画进阶——PropertyValuesHolder 与 Keyframe</title>
      <link href="/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/"/>
      <url>/2019/07/04/Custom%20View/04.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E8%BF%9B%E9%98%B6%E2%80%94%E2%80%94PropertyValuesHolder%20%E4%B8%8E%20Keyframe/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>ValueAnimator、ObjectAnimator 除了 ofInt()、ofFloat()、ofObject() 函数创建 Animator 实例的方法以外，都还有一个方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// valueAnimator 的</div><div class="line">public static ValueAnimator ofPropertyValuesHolder (</div><div class="line">    PropertyValuesHolder... values) </div><div class="line">// ObjectAnimator的</div><div class="line">public static ObjectAnimator ofPropertyValuesHolder (</div><div class="line">    Object target,PropertyValuesHolder... values)</div></pre></td></tr></table></figure></p><p><div id="jump1"></div></p><h3 id="4-1-1-PropertyValuesHolder"><a href="#4-1-1-PropertyValuesHolder" class="headerlink" title="4.1.1 PropertyValuesHolder"></a>4.1.1 PropertyValuesHolder</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>PropertyValuesHolder 这个类的意义就是，它其中保存了动画过程中所需要操作的属性和对应的值。我们通过 ofFloat(Object target, String propertyName, float… values) 构造的动画，ofFloat() 的内部实现其实就是将传进来的参数封装成 PropertyValuesHolder 实例来保存动画状态。在封装成 PropertyValuesHolder 实例以后，后期的各种操作也是以 PropertyValuesHolder 为主的。</p><p>PropertyValuesHolder 中有很多函数，有些函数的 api 等级是11，有些函数的 api 等级是 14 和 21，具体参考文档<a href="http://developer.android.com/reference/android/animation/PropertyValuesHolder.html" target="_blank" rel="external">《Google：PropertyValuesHolder》</a></p><p>首先，我们来看看创建实例的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static PropertyValuesHolder ofFloat(String propertyName, float... values)</div><div class="line">public static PropertyValuesHolder ofInt(String propertyName, int... values) </div><div class="line">public static PropertyValuesHolder ofObject(String propertyName, TypeEvaluator evaluator, Object... values)</div><div class="line">public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values)</div></pre></td></tr></table></figure></p><h4 id="2-PropertyValuesHolder-之-ofFloat-、ofInt"><a href="#2-PropertyValuesHolder-之-ofFloat-、ofInt" class="headerlink" title="2. PropertyValuesHolder 之 ofFloat()、ofInt()"></a>2. PropertyValuesHolder 之 ofFloat()、ofInt()</h4><p>1）ofFloat()、ofInt()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static PropertyValuesHolder ofFloat(String propertyName, float... values)</div><div class="line">public static PropertyValuesHolder ofInt(String propertyName, int... values)</div></pre></td></tr></table></figure></p><ul><li><strong>propertyName</strong>：表示 ObjectAnimator 需要操作的属性名。即 ObjectAnimator 需要通过反射查找对应属性的 setProperty() 函数的那个 property.</li><li><strong>values</strong>：属性所对应的参数，同样是可变长参数，可以指定多个，还记得我们在 ObjectAnimator 中讲过，如果只指定了一个，那么 ObjectAnimator 会通过查找 getProperty() 方法来获得初始值。</li></ul><p>2）ObjectAnimator.ofPropertyValuesHolder()<br>ObjectAnimator 提供了一个方法，构造 PropertyValuesHolder 来构造动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static ObjectAnimator ofPropertyValuesHolder(Object target, </div><div class="line">        PropertyValuesHolder... values)</div></pre></td></tr></table></figure></p><ul><li><strong>target</strong>：指需要执行动画的控件。</li><li><strong>values</strong>：是一个可变长参数，可以传进去多个PropertyValuesHolder 实例，由于每个 PropertyValuesHolder 实例都会针对一个属性做动画，所以如果传进去多个 PropertyValuesHolder 实例，将会对控件的多个属性同时做动画操作。 </li></ul><p>3）示例</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f17b350f2aa6422b.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private TextView mTv;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        Button startBtn = findViewById(R.id.start_btn);</div><div class="line">        mTv = findViewById(R.id.tv);</div><div class="line"></div><div class="line">        startBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                startAnim();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void startAnim() &#123;</div><div class="line">        PropertyValuesHolder rotationHolder = PropertyValuesHolder.ofFloat(&quot;rotation&quot;,</div><div class="line">                60f, -60f, 40f, -40f, 20f, -20f, 10f, -10f, 0f);</div><div class="line">        PropertyValuesHolder alphaHolder = PropertyValuesHolder.ofFloat(&quot;alpha&quot;,</div><div class="line">                0.1f, 1f, 0.1f, 1f);</div><div class="line">        ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(mTv, rotationHolder, alphaHolder);</div><div class="line">        animator.setDuration(3000);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3-PropertyValuesHolder-之-ofObject"><a href="#3-PropertyValuesHolder-之-ofObject" class="headerlink" title="3. PropertyValuesHolder 之 ofObject()"></a>3. PropertyValuesHolder 之 ofObject()</h4><p>1）概述<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static PropertyValuesHolder ofObject(String propertyName, </div><div class="line">        TypeEvaluator evaluator, Object... values)</div></pre></td></tr></table></figure></p><ul><li><strong>propertyName</strong>：ObjectAnimator 动画操作的属性名。</li><li><strong>evaluator</strong>：Evaluator 实例，Evaluator 是将当前动画进度计算出当前值的类，可以使用系统自带的 IntEvaluator、FloatEvaluator 也可以自定义。</li><li><strong>values</strong>：可变长参数，表示操作动画属性的值。</li></ul><p>2）示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-db0243fadce74f39.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private TextView mTv;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        Button startBtn = findViewById(R.id.start_btn);</div><div class="line">        mTv = findViewById(R.id.tv);</div><div class="line"></div><div class="line">        startBtn.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                startAnim();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void startAnim() &#123;</div><div class="line">        PropertyValuesHolder charHolder = PropertyValuesHolder.ofObject(&quot;CharText&quot;,</div><div class="line">                new CharEvaluator(), Character.valueOf(&apos;A&apos;), Character.valueOf(&apos;Z&apos;));</div><div class="line">        ObjectAnimator animator = ObjectAnimator.ofPropertyValuesHolder(mTv, charHolder);</div><div class="line">        animator.setDuration(3000);</div><div class="line">        animator.setInterpolator(new AccelerateInterpolator());</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>自定义 View 和 Evaluator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class MyTextView extends AppCompatTextView &#123;</div><div class="line">    private Character charText;</div><div class="line"></div><div class="line">    public MyTextView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setCharText(Character charText) &#123;</div><div class="line">        setText(String.valueOf(charText));</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class CharEvaluator implements TypeEvaluator&lt;Character&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public Character evaluate(float fraction, Character startValue, Character endValue) &#123;</div><div class="line">        int startInt = (int) startValue;</div><div class="line">        int endInt = (int) endValue;</div><div class="line">        int result = (int) (startInt + fraction * (endInt - startInt));</div><div class="line">        return (char) result;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="4-1-2-Keyframe"><a href="#4-1-2-Keyframe" class="headerlink" title="4.1.2 Keyframe"></a>4.1.2 Keyframe</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>如果要控制动画速率的变化，可以通过自定义插值器，也可以通过自定义 Evaluator 来实现。但需要足够的数学知识。 为了解决方便的控制动画速率的问题，谷歌为了我们定义了一个 KeyFrame 的类，KeyFrame 直译过来就是关键帧。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static Keyframe ofFloat(float fraction, float value)</div></pre></td></tr></table></figure></p><ul><li><strong>fraction</strong>：表示当前的显示进度，即从加速器中 getInterpolation() 函数的返回值。</li><li><strong>value</strong>：表示当前应该在的位置。</li></ul><p>比如 Keyframe.ofFloat(0, 0) 表示动画进度为 0 时，动画所在的数值位置为 0；Keyframe.ofFloat(0.25f, -20f) 表示动画进度为 25% 时，动画所在的数值位置为 -20；Keyframe.ofFloat(1f, 0) 表示动画结束时，动画所在的数值位置为 0。</p><p>PropertyValuesHolder 是这样使用 KeyFrame 对象的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static PropertyValuesHolder ofKeyframe(String propertyName, Keyframe... values)</div></pre></td></tr></table></figure></p><ul><li><strong>propertyName</strong>：动画所要操作的属性名。</li><li><strong>values</strong>：Keyframe 的列表，PropertyValuesHolder 会根据每个 Keyframe 的设定，定时将指定的值输出给动画。</li></ul><p>所以完整的 KeyFrame 的使用代码应该是这样的：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Keyframe frame0 = Keyframe.ofFloat(0f, 0);</div><div class="line">Keyframe frame1 = Keyframe.ofFloat(0.1f, -20f);</div><div class="line">Keyframe frame2 = Keyframe.ofFloat(1, 0);</div><div class="line">PropertyValuesHolder frameHolder = PropertyValuesHolder.ofKeyframe(</div><div class="line">        &quot;rotation&quot;,frame0,frame1,frame2);</div><div class="line">Animator animator = ObjectAnimator.ofPropertyValuesHolder(mImage,frameHolder);</div><div class="line">animator.setDuration(1000);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-29d2aa9f6df19102.gif?imageMogr2/auto-orient/strip" alt=""></p><p>1）布局文件 act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:padding=&quot;20dp&quot;&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/start_btn&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:text=&quot;start animation&quot;/&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/tel_img&quot;</div><div class="line">        android:layout_width=&quot;70dp&quot;</div><div class="line">        android:layout_height=&quot;70dp&quot;</div><div class="line">        android:layout_margin=&quot;30dp&quot;</div><div class="line">        android:src=&quot;@drawable/icon_tel&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>2）MainActivity.java 核心代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">Keyframe frame0 = Keyframe.ofFloat(0f, 0);</div><div class="line">Keyframe frame1 = Keyframe.ofFloat(0.1f, -20f);</div><div class="line">Keyframe frame2 = Keyframe.ofFloat(0.2f, 20f);</div><div class="line">Keyframe frame3 = Keyframe.ofFloat(0.3f, -20f);</div><div class="line">Keyframe frame4 = Keyframe.ofFloat(0.4f, 20f);</div><div class="line">Keyframe frame5 = Keyframe.ofFloat(0.5f, -20f);</div><div class="line">Keyframe frame6 = Keyframe.ofFloat(0.6f, 20f);</div><div class="line">Keyframe frame7 = Keyframe.ofFloat(0.7f, -20f);</div><div class="line">Keyframe frame8 = Keyframe.ofFloat(0.8f, 20f);</div><div class="line">Keyframe frame9 = Keyframe.ofFloat(0.9f, -20f);</div><div class="line">Keyframe frame10 = Keyframe.ofFloat(1f, 0);</div><div class="line">PropertyValuesHolder frameHolder = PropertyValuesHolder.ofKeyframe(&quot;rotation&quot;,</div><div class="line">        frame0, frame1, frame2, frame3, frame4, frame5,</div><div class="line">        frame6, frame7, frame8, frame9, frame10);</div><div class="line">Animator animator = ObjectAnimator.ofPropertyValuesHolder(mView, frameHolder);</div><div class="line">animator.setDuration(2000);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><h4 id="3-ofInt-和-ofFloat"><a href="#3-ofInt-和-ofFloat" class="headerlink" title="3. ofInt 和 ofFloat"></a>3. ofInt 和 ofFloat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// ofFloat</div><div class="line">public static Keyframe ofFloat(float fraction) </div><div class="line">public static Keyframe ofFloat(float fraction, float value)</div><div class="line">// ofInt</div><div class="line">public static Keyframe ofInt(float fraction)</div><div class="line">public static Keyframe ofInt(float fraction, int value)</div></pre></td></tr></table></figure><p>fraction 表示当前关键帧所在的动画进度位置，value 表示当前位置所对应的值。</p><p>Keyframe 还有一些常用函数来设置 fraction，value 和 interpolator，定义如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 设置fraction参数，即Keyframe所对应的进度</div><div class="line">public void setFraction(float fraction) </div><div class="line">// 设置当前Keyframe所对应的值</div><div class="line">public void setValue(Object value)</div><div class="line">// 设置Keyframe动作期间所对应的插值器</div><div class="line">public void setInterpolator(TimeInterpolator interpolator)</div></pre></td></tr></table></figure></p><p>如果使用 ofFloat(float fraction) 来构造，也必须使用 setValue(Object value) 来设置这个关键帧所对应的值。</p><h4 id="4-插值器"><a href="#4-插值器" class="headerlink" title="4. 插值器"></a>4. 插值器</h4><p>如果给某个 Keyframe 设置上插值器，那么这个插值器就是从上一个 Keyframe 开始到当前设置插值器的 Keyframe 时，这个过程值的计算是利用这个插值器的，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">Keyframe frame0 = Keyframe.ofFloat(0f, 0);</div><div class="line">Keyframe frame1 = Keyframe.ofFloat(0.1f, -20f);</div><div class="line">frame1.setInterpolator(new BounceInterpolator());</div><div class="line">Keyframe frame2 = Keyframe.ofFloat(1f, 20f);</div><div class="line">frame2.setInterpolator(new LinearInterpolator());</div></pre></td></tr></table></figure></p><p>在上面的代码中，我们给 frame1 设置了插值器 BounceInterpolator，那么在 frame0 到 frame1 的中间值计算过程中，就是用的就是回弹插值器；同样，我们给 frame2 设置了线性插值器 LinearInterpolator，所以在 frame1 到 frame2 的中间值计算过程中，使用的就是线性插值器。很显然，给 Keyframe.ofFloat(0f, 0) 设置插值器是无效的，因为它是第一帧。</p><h4 id="5-Keyframe-之-ofObject"><a href="#5-Keyframe-之-ofObject" class="headerlink" title="5. Keyframe 之 ofObject"></a>5. Keyframe 之 ofObject</h4><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f02d1264fbae982f.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static Keyframe ofObject(float fraction)</div><div class="line">public static Keyframe ofObject(float fraction, Object value)</div></pre></td></tr></table></figure><p>同样，如果使用 ofObject(float fraction) 来构造，也必须使用 setValue(Object value) 来设置这个关键帧所对应的值。</p><p>还以 TextView 更改字母的例子来使用下 Keyframe.ofObject：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Keyframe frame0 = Keyframe.ofObject(0f, Character.valueOf(&apos;A&apos;));</div><div class="line">Keyframe frame1 = Keyframe.ofObject(0.1f, Character.valueOf(&apos;L&apos;));</div><div class="line">Keyframe frame2 = Keyframe.ofObject(1f, Character.valueOf(&apos;Z&apos;));</div><div class="line">PropertyValuesHolder frameHolder = PropertyValuesHolder.ofKeyframe(&quot;CharText&quot;,</div><div class="line">        frame0, frame1, frame2);</div><div class="line">frameHolder.setEvaluator(new CharEvaluator());</div><div class="line">Animator animator = ObjectAnimator.ofPropertyValuesHolder(mView, frameHolder);</div><div class="line">animator.setDuration(2000);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><h4 id="6-疑问：如果没有设置进度为0或者进度为1时的关键帧，展示是怎样的？"><a href="#6-疑问：如果没有设置进度为0或者进度为1时的关键帧，展示是怎样的？" class="headerlink" title="6. 疑问：如果没有设置进度为0或者进度为1时的关键帧，展示是怎样的？"></a>6. 疑问：如果没有设置进度为0或者进度为1时的关键帧，展示是怎样的？</h4><ul><li>如果去掉第 0 帧，将以第一个关键帧为起始位置。</li><li>如果去掉结束帧，将以最后一个关键帧为结束位置。</li><li>使用 Keyframe 来构建动画，至少要有两个或两个以上帧，否则奔溃。</li></ul><p><div id="jump3"></div></p><h3 id="4-1-3-PropertyValuesHolder-其他函数"><a href="#4-1-3-PropertyValuesHolder-其他函数" class="headerlink" title="4.1.3 PropertyValuesHolder 其他函数"></a>4.1.3 PropertyValuesHolder 其他函数</h3><p>PropertyValuesHolder 除了上面的讲到的 ofInt、ofFloat、ofObject、ofKeyframe 以外，API 11 的还有几个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">// 设置动画的Evaluator</div><div class="line">public void setEvaluator(TypeEvaluator evaluator)</div><div class="line">// 用于设置ofFloat所对应的动画值列表</div><div class="line">public void setFloatValues(float... values)</div><div class="line">// 用于设置ofInt所对应的动画值列表</div><div class="line">public void setIntValues(int... values)</div><div class="line">// 用于设置ofKeyframe所对应的动画值列表</div><div class="line">public void setKeyframes(Keyframe... values)</div><div class="line">// 用于设置ofObject所对应的动画值列表</div><div class="line">public void setObjectValues(Object... values)</div><div class="line">// 设置动画属性名</div><div class="line">public void setPropertyName(String propertyName)</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="4-1-4-示例：电话响铃效果"><a href="#4-1-4-示例：电话响铃效果" class="headerlink" title="4.1.4 示例：电话响铃效果"></a>4.1.4 示例：电话响铃效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-81f9947638db226f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>核心代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">// 左右晃动</div><div class="line">Keyframe frame0 = Keyframe.ofFloat(0f, 0);</div><div class="line">Keyframe frame1 = Keyframe.ofFloat(0.1f, -20f);</div><div class="line">Keyframe frame2 = Keyframe.ofFloat(0.2f, 20f);</div><div class="line">Keyframe frame3 = Keyframe.ofFloat(0.3f, -20f);</div><div class="line">Keyframe frame4 = Keyframe.ofFloat(0.4f, 20f);</div><div class="line">Keyframe frame5 = Keyframe.ofFloat(0.5f, -20f);</div><div class="line">Keyframe frame6 = Keyframe.ofFloat(0.6f, 20f);</div><div class="line">Keyframe frame7 = Keyframe.ofFloat(0.7f, -20f);</div><div class="line">Keyframe frame8 = Keyframe.ofFloat(0.8f, 20f);</div><div class="line">Keyframe frame9 = Keyframe.ofFloat(0.9f, -20f);</div><div class="line">Keyframe frame10 = Keyframe.ofFloat(1f, 0);</div><div class="line">PropertyValuesHolder frameHolder = PropertyValuesHolder.ofKeyframe(&quot;rotation&quot;,</div><div class="line">        frame0, frame1, frame2, frame3, frame4, frame5,</div><div class="line">        frame6, frame7, frame8, frame9, frame10);</div><div class="line">// X 轴缩放</div><div class="line">Keyframe scaleXFrame0 = Keyframe.ofFloat(0f, 1);</div><div class="line">Keyframe scaleXFrame1 = Keyframe.ofFloat(0.1f, 1.2f);</div><div class="line">Keyframe scaleXFrame9 = Keyframe.ofFloat(0.9f, 1.2f);</div><div class="line">Keyframe scaleXFrame10 = Keyframe.ofFloat(1f, 1);</div><div class="line">PropertyValuesHolder scaleXholder = PropertyValuesHolder.ofKeyframe(&quot;scaleX&quot;,</div><div class="line">        scaleXFrame0, scaleXFrame1, scaleXFrame9, scaleXFrame10);</div><div class="line">// Y 轴缩放</div><div class="line">Keyframe scaleYFrame0 = Keyframe.ofFloat(0f, 1);</div><div class="line">Keyframe scaleYFrame1 = Keyframe.ofFloat(0.1f, 1.2f);</div><div class="line">Keyframe scaleYFrame9 = Keyframe.ofFloat(0.9f, 1.2f);</div><div class="line">Keyframe scaleYFrame10 = Keyframe.ofFloat(1f, 1);</div><div class="line">PropertyValuesHolder scaleYholder = PropertyValuesHolder.ofKeyframe(&quot;scaleY&quot;,</div><div class="line">        scaleYFrame0, scaleYFrame1, scaleYFrame9, scaleYFrame10);</div><div class="line"></div><div class="line">Animator animator = ObjectAnimator.ofPropertyValuesHolder(mView,</div><div class="line">        frameHolder, scaleXholder, scaleYholder);</div><div class="line">animator.setDuration(2000);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.6 精通自定义 View 之属性动画——Animator 动画的 XML 实现</title>
      <link href="/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/03/Custom%20View/03.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94Animator%20%E5%8A%A8%E7%94%BB%E7%9A%84%20XML%20%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>在 xml 中对应 animator 总共有三个标签，分别是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;animator /&gt;: 对应ValueAnimator</div><div class="line">&lt;objectAnimator /&gt;: 对应ObjectAnimator</div><div class="line">&lt;set /&gt;: 对应AnimatorSet</div></pre></td></tr></table></figure></p><p><div id="jump1"></div></p><h3 id="3-6-1-animator-标签"><a href="#3-6-1-animator-标签" class="headerlink" title="3.6.1 animator 标签"></a>3.6.1 animator 标签</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>下面是完整的 animator 所有的字段及取值范围：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;animator</div><div class="line">    android:duration=&quot;int&quot;</div><div class="line">    android:valueFrom=&quot;float | int | color&quot;</div><div class="line">    android:valueTo=&quot;float | int | color&quot;</div><div class="line">    android:startOffset=&quot;int&quot;</div><div class="line">    android:repeatCount=&quot;int&quot;</div><div class="line">    android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]</div><div class="line">    android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]</div><div class="line">    android:interpolator=[&quot;@android:interpolator/XXX&quot;]/&gt;</div></pre></td></tr></table></figure></p><ul><li><strong>android:duration</strong>：每次动画播放的时长。</li><li><strong>android:valueFrom</strong>：初始动化值；取值范围为 float、int 和 color，如果取值为 float 对应的值样式应该为 89.0，取值为 Int 时，对应的值样式为：89；当取值为 clolor 时，对应的值样式为 #333333。</li><li><strong>android:valueTo</strong>：动画结束值；取值范围同样是 float、int 和 color 这三种类型的值。</li><li><strong>android:startOffset</strong>：动画激活延时；对应代码中的 startDelay(long delay) 函数；</li><li><strong>android:repeatCount</strong>：动画重复次数</li><li><strong>android:repeatMode</strong>：动画重复模式，取值为 repeat 和 reverse；repeat 表示正序重播，reverse 表示倒序重播</li><li><strong>android:valueType</strong>：表示参数值类型，取值为 intType 和 floatType；与 android:valueFrom、android:valueTo 相对应。如果这里的取值为 intType，那么 android:valueFrom、android:valueTo 的值也就要对应的是 int 类型的数值。如果这里的数值是 floatType，那么 android:valueFrom、android:valueTo 的值也要对应的设置为 float 类型的值。非常注意的是，如果 android:valueFrom、android:valueTo 的值设置为 color 类型的值，那么不需要设置这个参数。</li><li><strong>android:interpolator</strong>：设置加速器；有关系统加速器所对应的 xml 值对照表如下：</li></ul><p><img src="https://upload-images.jianshu.io/upload_images/14186083-cf80cc3cfd34b03a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>加载 XML 文件到程序中的方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ValueAnimator valueAnimator = (ValueAnimator) AnimatorInflater.loadAnimator(</div><div class="line">    MainActivity.this,R.animator.animator);</div><div class="line">valueAnimator.start();</div></pre></td></tr></table></figure></p><h4 id="2-示例"><a href="#2-示例" class="headerlink" title="2. 示例"></a>2. 示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">          android:valueFrom=&quot;0&quot;</div><div class="line">          android:valueTo=&quot;300&quot;</div><div class="line">          android:duration=&quot;1000&quot;</div><div class="line">          android:valueType=&quot;intType&quot;</div><div class="line">          android:interpolator=&quot;@android:anim/bounce_interpolator&quot;/&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ValueAnimator valueAnimator = (ValueAnimator) AnimatorInflater.loadAnimator(</div><div class="line">        MainActivity.this, R.animator.animator);</div><div class="line">valueAnimator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">   @Override</div><div class="line">   public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">       int offset = (int)animation.getAnimatedValue();</div><div class="line">       mTv1.layout(offset, offset, mTv1.getWidth() + offset,</div><div class="line">                   mTv1.getHeight() + offset);</div><div class="line">   &#125;</div><div class="line">&#125;);</div><div class="line">valueAnimator.start();</div></pre></td></tr></table></figure><p><div id="jump2"></div></p><h3 id="3-6-2-objectAnimator-标签"><a href="#3-6-2-objectAnimator-标签" class="headerlink" title="3.6.2 objectAnimator 标签"></a>3.6.2 objectAnimator 标签</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;objectAnimator</div><div class="line">    android:propertyName=&quot;string&quot;</div><div class="line">    android:duration=&quot;int&quot;</div><div class="line">    android:valueFrom=&quot;float | int | color&quot;</div><div class="line">    android:valueTo=&quot;float | int | color&quot;</div><div class="line">    android:startOffset=&quot;int&quot;</div><div class="line">    android:repeatCount=&quot;int&quot;</div><div class="line">    android:repeatMode=[&quot;repeat&quot; | &quot;reverse&quot;]</div><div class="line">    android:valueType=[&quot;intType&quot; | &quot;floatType&quot;]</div><div class="line">    android:interpolator=[&quot;@android:interpolator/XXX&quot;]/&gt;</div></pre></td></tr></table></figure><ul><li><strong>android:propertyName</strong>：对应属性名，即 ObjectAnimator 所需要操作的属性名。其它字段的意义与 animator 的意义与取值是一样的，下面再重新列举一下。</li></ul><h4 id="2-示例-1"><a href="#2-示例-1" class="headerlink" title="2. 示例"></a>2. 示例</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:propertyName=&quot;TranslationY&quot;</div><div class="line">    android:duration=&quot;2000&quot;</div><div class="line">    android:valueFrom=&quot;0.0&quot;</div><div class="line">    android:valueTo=&quot;400.0&quot;</div><div class="line">    android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;</div><div class="line">    android:valueType=&quot;floatType&quot;</div><div class="line">    android:repeatCount=&quot;1&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;</div><div class="line">    android:startOffset=&quot;2000&quot;/&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = (ObjectAnimator) AnimatorInflater.loadAnimator(</div><div class="line">        MainActivity.this, R.animator.object_animator);</div><div class="line">animator.setTarget(mTv1);</div><div class="line">animator.start();</div></pre></td></tr></table></figure><h4 id="3-color"><a href="#3-color" class="headerlink" title="3. color"></a>3. color</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;objectAnimator xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:propertyName=&quot;BackgroundColor&quot;</div><div class="line">    android:duration=&quot;5000&quot;</div><div class="line">    android:valueFrom=&quot;#ffff00ff&quot;</div><div class="line">    android:valueTo=&quot;#ffffff00&quot;/&gt;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = (ObjectAnimator) AnimatorInflater.loadAnimator(</div><div class="line">        MainActivity.this, R.animator.color_animator);</div><div class="line">animator.setTarget(mTv1);</div><div class="line">animator.start();</div></pre></td></tr></table></figure><p><div id="jump3"></div></p><h3 id="3-6-3-set-标签"><a href="#3-6-3-set-标签" class="headerlink" title="3.6.3 set 标签"></a>3.6.3 set 标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;set android:ordering=[&quot;together&quot; | &quot;sequentially&quot;]&gt;</div></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:ordering=&quot;together&quot;&gt;</div><div class="line">    &lt;objectAnimator</div><div class="line">        android:propertyName=&quot;x&quot;</div><div class="line">        android:duration=&quot;500&quot;</div><div class="line">        android:valueFrom=&quot;0&quot;</div><div class="line">        android:valueTo=&quot;400&quot;</div><div class="line">        android:valueType=&quot;floatType&quot;/&gt;</div><div class="line">    &lt;objectAnimator</div><div class="line">        android:propertyName=&quot;y&quot;</div><div class="line">        android:duration=&quot;500&quot;</div><div class="line">        android:valueFrom=&quot;0&quot;</div><div class="line">        android:valueTo=&quot;300&quot;</div><div class="line">        android:valueType=&quot;floatType&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p><p>加载：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">AnimatorSet set = (AnimatorSet) AnimatorInflater.loadAnimator(</div><div class="line">        MainActivity.this, R.animator.set_animator);</div><div class="line">set.setTarget(mTv1);</div><div class="line">set.start();</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.5 精通自定义 View 之属性动画——AnimatorSet</title>
      <link href="/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/"/>
      <url>/2019/07/03/Custom%20View/03.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94AnimatorSet/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>ValueAnimator 和 ObjectAnimator 都只能单单实现一个动画，那如果我们想要使用一个组合动画，就需要用到 AnimatorSet。</p><p>AnimatorSet 针对 ValueAnimator 和 ObjectAnimator 都是适用的，但一般而言，我们不会用到 ValueAnimator 的组合动画，所以我们这篇仅讲解 ObjectAnimator 下的组合动画实现。</p><p>在 AnimatorSet 中直接给为我们提供了两个方法 playSequentially 和 playTogether，playSequentially 表示所有动画依次播放，playTogether 表示所有动画一起开始。</p><p><div id="jump1"></div></p><h3 id="3-5-1-playSequentially-与-playTogether-函数"><a href="#3-5-1-playSequentially-与-playTogether-函数" class="headerlink" title="3.5.1 playSequentially() 与 playTogether() 函数"></a>3.5.1 playSequentially() 与 playTogether() 函数</h3><h4 id="1-playSequentially"><a href="#1-playSequentially" class="headerlink" title="1. playSequentially()"></a>1. playSequentially()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public void playSequentially(Animator... items);</div><div class="line">public void playSequentially(List&lt;Animator&gt; items);</div></pre></td></tr></table></figure><p>这里有两种声明，第一个是我们最常用的，它的参数是可变长参数，也就是说我们可以传进去任意多个 Animator 对象。这些对象的动画会逐个播放。第二个构造函数，是传进去一个 List&lt; Animator&gt; 的列表。原理一样，也是逐个去取 List 中的动画对象，然后逐个播放。</p><p>示例：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5e9f4c01a7c476e3.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private Button mButton;</div><div class="line">    private TextView mTv1, mTv2;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mButton =  findViewById(R.id.btn);</div><div class="line">        mTv1 =  findViewById(R.id.tv_1);</div><div class="line">        mTv2 =  findViewById(R.id.tv_2);</div><div class="line"></div><div class="line">        mButton.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                doPlaySequentiallyAnimator();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void doPlaySequentiallyAnimator() &#123;</div><div class="line">        ObjectAnimator tv1BgAnimator = ObjectAnimator.ofInt(mTv1, </div><div class="line">                &quot;BackgroundColor&quot;, 0xffff00ff, 0xffffff00, 0xffff00ff);</div><div class="line">        ObjectAnimator tv1TranslateY = ObjectAnimator.ofFloat(mTv1, </div><div class="line">                &quot;translationY&quot;, 0, 300, 0);</div><div class="line">        ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2, </div><div class="line">                &quot;translationY&quot;, 0, 400, 0);</div><div class="line"></div><div class="line">        AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.playSequentially(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div><div class="line">        animatorSet.setDuration(1000);</div><div class="line">        animatorSet.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>布局 act_main.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/btn&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:padding=&quot;10dp&quot;</div><div class="line">        android:text=&quot;start anim&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv_2&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_alignParentRight=&quot;true&quot;</div><div class="line">        android:layout_marginRight=&quot;30dp&quot;</div><div class="line">        android:background=&quot;#ff00ff&quot;</div><div class="line">        android:padding=&quot;10dp&quot;</div><div class="line">        android:text=&quot;TextView-2&quot; /&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:id=&quot;@+id/tv_1&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_toLeftOf=&quot;@id/tv_2&quot;</div><div class="line">        android:layout_marginRight=&quot;30dp&quot;</div><div class="line">        android:background=&quot;#ffff00&quot;</div><div class="line">        android:padding=&quot;10dp&quot;</div><div class="line">        android:text=&quot;TextView-1&quot; /&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p><h4 id="2-playTogether"><a href="#2-playTogether" class="headerlink" title="2. playTogether()"></a>2. playTogether()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public void playTogether(Animator... items);</div><div class="line">public void playTogether(Collection&lt;Animator&gt; items);</div></pre></td></tr></table></figure><p>将上例中的代码更改为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// animatorSet.playSequentially(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div><div class="line">animatorSet.playTogether(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-75a764faeec10d66.gif?imageMogr2/auto-orient/strip" alt=""></p><p>即三个动画同时播放。</p><h4 id="3、playSequentially-和-playTogether-函数的真正意义"><a href="#3、playSequentially-和-playTogether-函数的真正意义" class="headerlink" title="3、playSequentially 和 playTogether 函数的真正意义"></a>3、playSequentially 和 playTogether 函数的真正意义</h4><p>想必大家都看到赛马，在赛马开始前，每个马都会被放在起点的小门后面，到点了，门打开，马开始一起往前跑。而假如我们把每匹马看做是一个动画，那我们的 playTogether 就相当于赛马场里每个赛道上门的意义（当比赛开始时，每个赛道上的门会打开，马就可以开始比赛了）；也就是说，playTogether 只是一个时间点上的一起开始，对于开始后，各个动画怎么操作就是他们自己的事了，至于各个动画结不结束也是他们自已的事了。所以最恰当的描述就是门只负责打开，打开之后马咋跑，门也管不着，最后，马回不回来跟门也没啥关系。门的责任只是到点就打开而已。放在动画上，就是在激活动画之后，动画开始后的操作只是动画自己来负责。至于动画结不结束，也只有动画自己知道。</p><p>而 playSequentially 的意义就是当一匹马回来以后，再放另一匹。那如果上匹马永远没回来，那下一匹马也永远不会被放出来。<br>放到动画上，就是把激活一个动画之后，动画之后的操作就是动画自己来负责了，这个动画结束之后，再激活下一个动画。如果上一个动画没有结束，那下一个动画就永远也不会被激活。</p><p>首先用 playTogether 来看个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator tv1BgAnimator = ObjectAnimator.ofInt(mTv1,</div><div class="line">        &quot;BackgroundColor&quot;, 0xffff00ff, 0xffffff00, 0xffff00ff);</div><div class="line">ObjectAnimator tv1TranslateY = ObjectAnimator.ofFloat(mTv1,</div><div class="line">        &quot;translationY&quot;, 0, 300, 0);</div><div class="line">tv1TranslateY.setStartDelay(1000);</div><div class="line">tv1TranslateY.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2,</div><div class="line">        &quot;translationY&quot;, 0, 400, 0);</div><div class="line">tv2TranslateY.setStartDelay(1000);</div><div class="line"></div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">animatorSet.playTogether(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div><div class="line">animatorSet.setDuration(1000);</div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure></p><p>在这个例子中，我们将 tv1TranslateY 开始延迟 1000 毫秒开始，并设为无限循环。tv2TranslateY 设为开始延迟 1000 毫秒。而tv1BgAnimator 则是没有任何设置，所以是默认直接开始。我们来看效果图：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-aa0dd7dac5a3a77b.gif?imageMogr2/auto-orient/strip" alt=""></p><p>将上述例子做如下更改：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// animatorSet.playTogether(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div><div class="line">animatorSet.playSequentially(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div></pre></td></tr></table></figure></p><p>使用 playSequentially 来逐个播放这三个动画，首先是tv1BgAnimator，动画结束之后，激活 tv1TranslateY。不过由于设置了延时，故 1000 毫秒再开始，而且该动画会无限循环。无限循环也就是说它永远也不会结束。那么第三个动画 tv2TranslateY 也永远不会开始。效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a7a097fbfc347421.gif?imageMogr2/auto-orient/strip" alt=""></p><p>总结：</p><ul><li>playTogether 和 playSequentially 在激活动画后，控件的动画情况与它们无关，他们只负责定时激活控件动画。</li><li>playSequentially 只有上一个控件做完动画以后，才会激活下一个控件的动画，如果上一控件的动画是无限循环，那下一个控件就别再指望能做动画了。</li></ul><h4 id="4-实现无限循环动画"><a href="#4-实现无限循环动画" class="headerlink" title="4. 实现无限循环动画"></a>4. 实现无限循环动画</h4><p>因为 AnimatorSet 中没有设置循环次数的函数，所以得为每个动画设置了无限循环，并且只能用 playTogether() 函数。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator tv1BgAnimator = ObjectAnimator.ofInt(mTv1,</div><div class="line">        &quot;BackgroundColor&quot;, 0xffff00ff, 0xffffff00, 0xffff00ff);</div><div class="line">tv1BgAnimator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">ObjectAnimator tv1TranslateY = ObjectAnimator.ofFloat(mTv1,</div><div class="line">        &quot;translationY&quot;, 0, 300, 0);</div><div class="line">tv1TranslateY.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2,</div><div class="line">        &quot;translationY&quot;, 0, 400, 0);</div><div class="line">tv2TranslateY.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line"></div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">animatorSet.playTogether(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div><div class="line">animatorSet.setDuration(1000);</div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-d38d7f24f286dbca.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump2"></div></p><h3 id="3-5-2-AnimatorSet-Builder"><a href="#3-5-2-AnimatorSet-Builder" class="headerlink" title="3.5.2 AnimatorSet.Builder"></a>3.5.2 AnimatorSet.Builder</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>playTogether 和 playSequentially，分别能实现一起开始动画和逐个开始动画。但并不是非常自由的组合动画，比如我们有三个动画 A、B、C 我们想先播放 C 然后同时播放 A 和 B。利用 playTogether 和 playSequentially 是没办法实现的，所以为了更方便的组合动画，谷歌的开发人员另外给我们提供一个类 AnimatorSet.Builder。</p><p>我们这里使用 AnimatorSet.Builder 实现两个控件一同开始动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator tv1BgAnimator = ObjectAnimator.ofInt(mTv1,</div><div class="line">        &quot;BackgroundColor&quot;, 0xffff00ff, 0xffffff00, 0xffff00ff);</div><div class="line">ObjectAnimator tv1TranslateY = ObjectAnimator.ofFloat(mTv1,</div><div class="line">        &quot;translationY&quot;, 0, 300, 0);</div><div class="line">ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2,</div><div class="line">        &quot;translationY&quot;, 0, 400, 0);</div><div class="line"></div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">AnimatorSet.Builder builder = animatorSet.play(tv1BgAnimator);</div><div class="line">builder.with(tv1TranslateY).with(tv2TranslateY);</div><div class="line">// animatorSet.playTogether(tv1BgAnimator, tv1TranslateY, tv2TranslateY);</div><div class="line">animatorSet.setDuration(1000);</div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e31f09c7c1458d53.gif?imageMogr2/auto-orient/strip" alt=""></p><h4 id="2-AnimatorSet-Builder-的函数"><a href="#2-AnimatorSet-Builder-的函数" class="headerlink" title="2. AnimatorSet.Builder 的函数"></a>2. AnimatorSet.Builder 的函数</h4><p>从上面的代码中，我们可以看到 AnimatorSet.Builder 是通过 animatorSet.play(tv1BgAnimator) 生成的，这是生成AnimatorSet.Builder对象的唯一途径！<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 表示要播放哪个动画</div><div class="line">public Builder play(Animator anim)</div><div class="line">// 和前面动画一起执行</div><div class="line">public Builder with(Animator anim)</div><div class="line">// 执行前面的动画后才执行该动画</div><div class="line">public Builder before(Animator anim)</div><div class="line">// 执行先执行这个动画再执行前面动画</div><div class="line">public Builder after(Animator anim)</div><div class="line">// 延迟 n 毫秒之后执行动画</div><div class="line">public Builder after(long delay)</div></pre></td></tr></table></figure></p><p>play(Animator anim) 表示当前在播放哪个动画，另外的 with(Animator anim)、before(Animator anim)、after(Animator anim) 都是以 play 中的当前所播放的动画为基准的。</p><p>比如，当 play(playAnim) 与 before(beforeAnim) 共用，则表示在播放 beforeAnim 之前，先播放 playAnim 动画；同样，当 play(playAnim) 与 after(afterAnim) 共用时，则表示在在播放 afterAnim 动画之后，再播放 playAnim 动画。</p><p>每个函数的返回值都是 Builder 对象，于是可以使用串行方式使用它们：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animatorSet.play(tv1BgAnimator).with(tv1TranslateY).with(tv2TranslateY);</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="3-5-3-AnimatorSet-监听器"><a href="#3-5-3-AnimatorSet-监听器" class="headerlink" title="3.5.3 AnimatorSet 监听器"></a>3.5.3 AnimatorSet 监听器</h3><p>在 AnimatorSet 中也可以添加监听器，对应的监听器为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public static interface AnimatorListener &#123;</div><div class="line">    // 当AnimatorSet开始时调用</div><div class="line">    void onAnimationStart(Animator animation);</div><div class="line">    // 当AnimatorSet结束时调用</div><div class="line">    void onAnimationEnd(Animator animation);</div><div class="line">    // 当AnimatorSet被取消时调用</div><div class="line">    void onAnimationCancel(Animator animation);</div><div class="line">    /**</div><div class="line">     * 当 AnimatorSet 重复时调用，由于 AnimatorSet 没有设置 </div><div class="line">     * repeat 的函数，所以这个方法永远不会被调用。</div><div class="line">     */</div><div class="line">    void onAnimationRepeat(Animator animation);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private AnimatorSet mAnimatorSet;</div><div class="line">    private TextView mTv1, mTv2;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mTv1 =  findViewById(R.id.tv_1);</div><div class="line">        mTv2 =  findViewById(R.id.tv_2);</div><div class="line"></div><div class="line">        findViewById(R.id.start_btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                mAnimatorSet = doPlayAnimatorSet();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        findViewById(R.id.cancel_btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                if (mAnimatorSet != null) &#123;</div><div class="line">                    mAnimatorSet.cancel();</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private AnimatorSet doPlayAnimatorSet() &#123;</div><div class="line">        ObjectAnimator tv1TranslateY = ObjectAnimator.ofFloat(mTv1,</div><div class="line">                &quot;translationY&quot;, 0, 400, 0);</div><div class="line">        ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2,</div><div class="line">                &quot;translationY&quot;, 0, 400, 0);</div><div class="line">        tv2TranslateY.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line"></div><div class="line">        AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.play(tv1TranslateY).with(tv2TranslateY);</div><div class="line">        animatorSet.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                Log.e(&quot;xian&quot;, &quot;animator start&quot;);</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;</div><div class="line">                Log.e(&quot;xian&quot;, &quot;animator end&quot;);</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;</div><div class="line">                Log.e(&quot;xian&quot;, &quot;animator cancel&quot;);</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                Log.e(&quot;xian&quot;, &quot;animator repeat&quot;);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animatorSet.setDuration(1000);</div><div class="line">        animatorSet.start();</div><div class="line"></div><div class="line">        return animatorSet;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-165bcafa582d0d1e.gif?imageMogr2/auto-orient/strip" alt=""></p><p>日志输出如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-41da58e3c9eab1e0.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>总结一下 AnimatorSet 的监听：<br>1、AnimatorSet 的监听函数也只是用来监听 AnimatorSet 的状态的，与其中的动画无关。<br>2、AnimatorSet 中没有设置循环的函数，所以 AnimatorSet 监听器中永远无法运行到 onAnimationRepeat() 中。</p></blockquote><p><div id="jump4"></div></p><h3 id="3-5-4-常用函数"><a href="#3-5-4-常用函数" class="headerlink" title="3.5.4 常用函数"></a>3.5.4 常用函数</h3><h4 id="1-概述-1"><a href="#1-概述-1" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>在 AnimatorSet 中还有几个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 设置单次动画时长</div><div class="line">public AnimatorSet setDuration(long duration);</div><div class="line">// 设置加速器</div><div class="line">public void setInterpolator(TimeInterpolator interpolator)</div><div class="line">// 设置ObjectAnimator动画目标控件</div><div class="line">public void setTarget(Object target)</div></pre></td></tr></table></figure></p><p>在 AnimatorSet 中设置以后，会覆盖单个 ObjectAnimator 中的设置；即如果 AnimatorSet 中没有设置，那么就以 ObjectAnimator 中的设置为准。如果 AnimatorSet 中设置以后，ObjectAnimator 中的设置就会无效。</p><p>下面我们简单举个例子来看下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator tv1TranslateY = ObjectAnimator.ofFloat(mTv1, &quot;translationY&quot;, 0, 400, 0);</div><div class="line">tv1TranslateY.setDuration(500000000);</div><div class="line">tv1TranslateY.setInterpolator(new BounceInterpolator());</div><div class="line"></div><div class="line">ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2, &quot;translationY&quot;, 0, 400, 0);</div><div class="line">tv2TranslateY.setInterpolator(new AccelerateDecelerateInterpolator());</div><div class="line"></div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">animatorSet.play(tv2TranslateY).with(tv1TranslateY);</div><div class="line">animatorSet.setDuration(2000);</div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure></p><p>在第这个例子中，我们通过 animatorSet.setDuration(2000); 设置为所有动画单词运动时长为 2000 毫秒，虽然我们给 tv1TranslateY 设置了单次动画时长为 tv1TranslateY.setDuration(500000000); 但由于 AnimatorSet 设置了 setDuration(2000) 这个参数以后，单个动画的时长设置将无效。所以每个动画的时长为 2000 毫秒。</p><p>但我们这里还分别给 tv1 和 tv2 设置了加速器，但并没有给 AnimatorSet 设置加速器，那么 tv1、tv2 将按各自加速器的表现形式做动画。同样，如果我们给 AnimatorSet 设置上了加速器，那么单个动画中所设置的加速器都将无效，以 AnimatorSet 中的加速器为准。</p><h4 id="2-setTarget-Object-target-函数"><a href="#2-setTarget-Object-target-函数" class="headerlink" title="2. setTarget(Object target) 函数"></a>2. setTarget(Object target) 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置 ObjectAnimator 动画目标控件</div><div class="line">public void setTarget(Object target)</div></pre></td></tr></table></figure><p>这个函数是用来设置目标控件的，也就是说，只要通过 AnimatorSet 的 setTartget 函数设置了目标控件，那么单个动画中的目标控件都以 AnimatorSet 设置的为准。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator tv1BgAnimator = ObjectAnimator.ofInt(mTv1, &quot;BackgroundColor&quot;, 0xffff00ff, 0xffffff00, 0xffff00ff);</div><div class="line">ObjectAnimator tv2TranslateY = ObjectAnimator.ofFloat(mTv2, &quot;translationY&quot;, 0, 400, 0);</div><div class="line"></div><div class="line">AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">animatorSet.playTogether(tv1BgAnimator,tv2TranslateY);</div><div class="line">animatorSet.setDuration(2000);</div><div class="line">animatorSet.setTarget(mTv2);</div><div class="line">animatorSet.start();</div></pre></td></tr></table></figure></p><p>在这段代码中，我们给 tv1 设置了改变背景色，给 tv2 设置了上下移动。但由于我们通过 animatorSet.setTarget(mTv2); 将各个动画的目标控件设置为 mTv2，所以 tv1 将不会有任何动画，所有的动画都会发生在 tv2 上。</p><h4 id="3-setStartDelay-long-startDelay-函数"><a href="#3-setStartDelay-long-startDelay-函数" class="headerlink" title="3. setStartDelay(long startDelay) 函数"></a>3. setStartDelay(long startDelay) 函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 设置延时开始动画时长</div><div class="line">public void setStartDelay(long startDelay)</div></pre></td></tr></table></figure><p>上面我们讲了，当 AnimatorSet 所拥有的函数与单个动画所拥有的函数冲突时，就以 AnimatorSet 设置为准。但唯一的例外就是 setStartDelay。</p><ul><li>AnimatorSet 的延时是仅针对性的延长 AnimatorSet 激活时间的，对单个动画的延时设置没有影响。</li><li>AnimatorSet 真正激活延时 = AnimatorSet.startDelay + 第一个动画.startDelay</li><li>在 AnimatorSet 激活之后，第一个动画绝对是会开始运行的，后面的动画则根据自己是否延时自行处理。</li></ul><p><div id="jump5"></div></p><h3 id="3-5-5-示例：路径动画"><a href="#3-5-5-示例：路径动画" class="headerlink" title="3.5.5 示例：路径动画"></a>3.5.5 示例：路径动画</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-669df7152448f16f.gif?imageMogr2/auto-orient/strip" alt=""></p><p>代码 MainActivity.java：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private Button btn1, btn2, btn3, btn4, btn5;</div><div class="line">    private boolean mIsMenuOpen = false;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        Button menu = findViewById(R.id.menu);</div><div class="line">        btn1 = findViewById(R.id.btn1);</div><div class="line">        btn2 = findViewById(R.id.btn2);</div><div class="line">        btn3 = findViewById(R.id.btn3);</div><div class="line">        btn4 = findViewById(R.id.btn4);</div><div class="line">        btn5 = findViewById(R.id.btn5);</div><div class="line"></div><div class="line">        menu.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                if (mIsMenuOpen) &#123;</div><div class="line">                    closeMenu();</div><div class="line">                    mIsMenuOpen = false;</div><div class="line">                &#125; else &#123;</div><div class="line">                    openMenu();</div><div class="line">                    mIsMenuOpen = true;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void openMenu() &#123;</div><div class="line">        doAnimateOpen(btn1, 0, 5, 600);</div><div class="line">        doAnimateOpen(btn2, 1, 5, 600);</div><div class="line">        doAnimateOpen(btn3, 2, 5, 600);</div><div class="line">        doAnimateOpen(btn4, 3, 5, 600);</div><div class="line">        doAnimateOpen(btn5, 4, 5, 600);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void closeMenu() &#123;</div><div class="line">        doAnimatColse(btn1, 0, 5, 600);</div><div class="line">        doAnimatColse(btn2, 1, 5, 600);</div><div class="line">        doAnimatColse(btn3, 2, 5, 600);</div><div class="line">        doAnimatColse(btn4, 3, 5, 600);</div><div class="line">        doAnimatColse(btn5, 4, 5, 600);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void doAnimateOpen(View view, int index, int total, int radius) &#123;</div><div class="line">        double degree = Math.toRadians(90) / (total - 1) * index;</div><div class="line">        int translationX = -(int) (Math.sin(degree) * radius);</div><div class="line">        int translationY = -(int) (Math.cos(degree) * radius);</div><div class="line">        AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.playTogether(</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;translationX&quot;, 0, translationX),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;translationY&quot;, 0, translationY),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;scaleX&quot;, 0f, 1f),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;scaleY&quot;, 0f, 1f),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;alpha&quot;, 0f, 1f));</div><div class="line">        animatorSet.setDuration(500);</div><div class="line">        animatorSet.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void doAnimatColse(View view, int index, int total, int radius) &#123;</div><div class="line">        double degree = Math.toRadians(90) / (total - 1) * index;</div><div class="line">        int translationX = -(int) (Math.sin(degree) * radius);</div><div class="line">        int translationY = -(int) (Math.cos(degree) * radius);</div><div class="line">        AnimatorSet animatorSet = new AnimatorSet();</div><div class="line">        animatorSet.playTogether(</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;translationX&quot;, translationX, 0),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;translationY&quot;, translationY, 0),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;scaleX&quot;, 1f, 0f),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;scaleY&quot;, 1f, 0f),</div><div class="line">                ObjectAnimator.ofFloat(view, &quot;alpha&quot;, 1f, 0f));</div><div class="line">        animatorSet.setDuration(500);</div><div class="line">        animatorSet.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>布局文件 act_main：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;FrameLayout xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:padding=&quot;20dp&quot;&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/btn1&quot;</div><div class="line">        style=&quot;@style/MenuItemStyle&quot;</div><div class="line">        android:background=&quot;@drawable/circle1&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/btn2&quot;</div><div class="line">        style=&quot;@style/MenuItemStyle&quot;</div><div class="line">        android:background=&quot;@drawable/circle2&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/btn3&quot;</div><div class="line">        style=&quot;@style/MenuItemStyle&quot;</div><div class="line">        android:background=&quot;@drawable/circle3&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/btn4&quot;</div><div class="line">        style=&quot;@style/MenuItemStyle&quot;</div><div class="line">        android:background=&quot;@drawable/circle4&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/btn5&quot;</div><div class="line">        style=&quot;@style/MenuItemStyle&quot;</div><div class="line">        android:background=&quot;@drawable/circle5&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/menu&quot;</div><div class="line">        style=&quot;@style/MenuStyle&quot;</div><div class="line">        android:background=&quot;@drawable/circle&quot;/&gt;</div><div class="line">&lt;/FrameLayout&gt;</div></pre></td></tr></table></figure></p><p>引用资源 circle.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;oval&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;@color/colorAccent&quot;/&gt;</div><div class="line">    &lt;solid android:color=&quot;#983B90&quot;/&gt;</div><div class="line">    &lt;solid android:color=&quot;#785B90&quot;/&gt;</div><div class="line">    &lt;solid android:color=&quot;#587BA0&quot;/&gt;</div><div class="line">    &lt;solid android:color=&quot;#389BF0&quot;/&gt;</div><div class="line">    &lt;solid android:color=&quot;#18DB00&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p>主题样式 style.xml：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line">    ...</div><div class="line">    &lt;style name=&quot;MenuStyle&quot; &gt;</div><div class="line">        &lt;item name=&quot;android:layout_width&quot;&gt;50dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_height&quot;&gt;50dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_gravity&quot;&gt;right|bottom&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line">    &lt;style name=&quot;MenuItemStyle&quot; &gt;</div><div class="line">        &lt;item name=&quot;android:layout_width&quot;&gt;40dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_height&quot;&gt;40dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_margin&quot;&gt;5dp&lt;/item&gt;</div><div class="line">        &lt;item name=&quot;android:layout_gravity&quot;&gt;right|bottom&lt;/item&gt;</div><div class="line">    &lt;/style&gt;</div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.4 精通自定义 View 之属性动画——ObjectAnimator</title>
      <link href="/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/"/>
      <url>/2019/07/03/Custom%20View/03.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ObjectAnimator/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="3-4-1-概述"><a href="#3-4-1-概述" class="headerlink" title="3.4.1 概述"></a>3.4.1 概述</h3><h4 id="1-引入"><a href="#1-引入" class="headerlink" title="1. 引入"></a>1. 引入</h4><p>ObjectAnimator 派生自 ValueAnimator，所以 ValueAnimator 能用的方法，ObjectAnimator 都能用，ObjectAnimator 是 ValueAnimator 的子类。</p><p>ObjectAnimator 重载了几个方法，例如 ofInt()，ofFloat() 等，这里我以 ofFloat() 做个例子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(mView, &quot;alpha&quot;, 1, 0, 1);</div><div class="line">animator.setDuration(2000);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><p>其构造函数如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static ObjectAnimator ofFloat(Object target, String propertyName,  float... values)</div></pre></td></tr></table></figure></p><ul><li>第一个参数用于指定这个动画要操作的是哪个控件。</li><li>第二个参数用于指定这个动画要操作这个控件的哪个属性。</li><li>第三个参数是可变长参数，是指这个属性值如何变化。</li></ul><h4 id="2-set-函数"><a href="#2-set-函数" class="headerlink" title="2. set 函数"></a>2. set 函数</h4><p>ObjectAnimator 做动画，是通过指定属性所对应的 set 方法来改变的。比如，我们上面指定的改变 alpha 的属性值，ObjectAnimator 在做动画时就会到指定控件（TextView）中去找对应的 setAlpha() 方法来改变控件中对应的值。在 View 中有关动画，总共有下面几组 set 方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">// 1. 透明度：alpha  </div><div class="line">public void setAlpha(float alpha)  </div><div class="line">  </div><div class="line">// 2. 旋转度数：rotation、rotationX、rotationY  </div><div class="line">public void setRotation(float rotation)  </div><div class="line">public void setRotationX(float rotationX)  </div><div class="line">public void setRotationY(float rotationY)  </div><div class="line">  </div><div class="line">// 3. 平移：translationX、translationY  </div><div class="line">public void setTranslationX(float translationX)   </div><div class="line">public void setTranslationY(float translationY)  </div><div class="line">  </div><div class="line">// 4. 缩放：scaleX、scaleY  </div><div class="line">public void setScaleX(float scaleX)  </div><div class="line">public void setScaleY(float scaleY)</div></pre></td></tr></table></figure></p><p>注意：</p><ul><li>要使用 ObjectAnimator 来构造对画，要操作的控件中，必须存在对应的属性的 set 方法，而且参数类型必须与构造所使用的ofFloat() 或者 ofInt() 函数一致。</li><li>set 方法的命名必须以骆驼拼写法命名，即 set 后每个单词首字母大写，其余字母小写，即类似于 setPropertyName 所对应的属性为propertyName。</li></ul><p>1）改变旋转度数 rotation、rotationX、rotationY</p><ul><li>float rotationX：表示围绕 X 轴旋转，rotationX 表示旋转度数</li><li>float rotationY：表示围绕 Y 轴旋转，rotationY 表示旋转度数</li><li>float rotation：表示围绕 Z 轴（垂直于屏幕）旋转，rotation 表示旋转度数</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofFloat(mView, &quot;rotationX&quot;, 0, 270, 0);</div><div class="line">// ObjectAnimator animator = ObjectAnimator.ofFloat(mView, &quot;rotationY&quot;, 0, 180, 0);</div><div class="line">// ObjectAnimator animator = ObjectAnimator.ofFloat(mView, &quot;rotation&quot;, 0, 270, 0);</div><div class="line">animator.setDuration(2000);</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><p>2）移动 translationX、translationY</p><ul><li>float translationX：表示在 X 轴上的平移距离，以当前控件为原点，向右为正方向，参数 translationX 表示移动的距离。</li><li>float translationY：表示在 Y 轴上的平移距离，以当前控件为原点，向下为正方向，参数 translationY 表示移动的距离。</li></ul><p>3）缩放 scaleX、scaleY</p><ul><li>float scaleX：在 X 轴上缩放，scaleX 表示缩放倍数</li><li>float scaleY：在 Y 轴上缩放，scaleY 表示缩放倍数</li></ul><p>4）改变透明度 alpha</p><ul><li>float alpha：改变透明度</li></ul><p><div id="jump2"></div></p><h3 id="3-4-2-ObjectAnimator-动画原理"><a href="#3-4-2-ObjectAnimator-动画原理" class="headerlink" title="3.4.2 ObjectAnimator 动画原理"></a>3.4.2 ObjectAnimator 动画原理</h3><p><img src="https://upload-images.jianshu.io/upload_images/3983615-03594160fc705404?imageMogr2/auto-orient/strip|imageView2/2/w/1187/format/webp" alt=""></p><p>与 ValueAnimator 不同的是最后一步，在 ValueAnimator 中，我们要通过添加监听器来监听当前数字值。而在 ObjectAnimator 中，则是先根据属性值拼装成对应的 set 函数的名字，比如这里的 scaleY 的拼装方法就是将属性的第一个字母强制大写后，与 set 拼接，所以就是 setScaleY 。然后通过反射找到对应控件的 setScaleY(float scaleY) 函数，将当前数字值做为 setScaleY(float scale) 的参数将其传入。</p><p>如果我们要自定义 ObjectAnimator 属性就要注意以下几个点：</p><ul><li>在命名时 set 之后的名字就是属性的名字。同时属性名字第一个字母不区分大小写，后面的名字必须与属性的名字相同。</li><li>在知道参数类型后我们才能确定我们是调用 ofFloat 还是 ofInt，这个参数是根据 setXXX 方法中的参数类型决定的。例如：setAlpha(float alpha) 其中参数类型是 float 所以上面我们使用的是 ofFloat，当然 ObjectAnimator 继承 ValueAnimatior 也有。ofObject()支持任意类型，不过和前面我们讲到的一样这里我们就要自定义自己的估值器了。</li></ul><p><div id="jump3"></div></p><h3 id="3-4-3-自定义-ObjectAnimator-属性"><a href="#3-4-3-自定义-ObjectAnimator-属性" class="headerlink" title="3.4.3 自定义 ObjectAnimator 属性"></a>3.4.3 自定义 ObjectAnimator 属性</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7e772b9076b48c45.gif?imageMogr2/auto-orient/strip" alt=""></p><p>自定义 FallingBallImageView 和 Evaluator<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">public class FallingBallImageView extends AppCompatImageView &#123;</div><div class="line">    public FallingBallImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void setFallingPos(Point pos) &#123;</div><div class="line">        layout(pos.x, pos.y, pos.x + getWidth(), pos.y + getHeight());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static class FallingBallEvaluator implements TypeEvaluator&lt;Point&gt; &#123;</div><div class="line">        private Point point = new Point();</div><div class="line">        @Override</div><div class="line">        public Point evaluate(float fraction, Point startValue, Point endValue) &#123;</div><div class="line">            point.x = (int)(startValue.x + fraction * (endValue.x - startValue.x));</div><div class="line">            if (fraction * 2 &lt; 1) &#123;</div><div class="line">                point.y = (int) (startValue.y + fraction * 2 * (endValue.y - startValue.y));</div><div class="line">            &#125; else &#123;</div><div class="line">                point.y = endValue.y;</div><div class="line">            &#125;</div><div class="line">            return point;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在代码中，开始动画：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        final FallingBallImageView view = findViewById(R.id.ball_img);</div><div class="line">        findViewById(R.id.start_btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                ObjectAnimator animator = ObjectAnimator.ofObject(view, &quot;fallingPos&quot;,</div><div class="line">                        new FallingBallImageView.FallingBallEvaluator(),</div><div class="line">                        new Point(0, 0), new Point(500, 500));</div><div class="line">                animator.setDuration(2000);</div><div class="line">                animator.start();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>布局文件 act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">    android:orientation=&quot;horizontal&quot;&gt;</div><div class="line"></div><div class="line">    &lt;com.xxt.xtest.FallingBallImageView</div><div class="line">        android:id=&quot;@+id/ball_img&quot;</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:src=&quot;@drawable/circle&quot;/&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:id=&quot;@+id/start_btn&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_marginLeft=&quot;30dp&quot;</div><div class="line">        android:text=&quot;开启动画&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>其中，drawable/circle.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;oval&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;#FF0000&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="3-4-4-何时需要实现对应的-get-函数"><a href="#3-4-4-何时需要实现对应的-get-函数" class="headerlink" title="3.4.4 何时需要实现对应的 get 函数"></a>3.4.4 何时需要实现对应的 get 函数</h3><p>ObjectAnimator 有三个构造函数：ofInt()、ofFloat() 和 ofObject()，它们的最后一个参数都是可变长参数，用于指定动画值的变化区间。如果我们只定义一个值，如上例中改成：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ObjectAnimator animator = ObjectAnimator.ofObject(view, &quot;fallingPos&quot;,</div><div class="line">                        new FallingBallImageView.FallingBallEvaluator(),</div><div class="line">                        new Point(500, 500));</div></pre></td></tr></table></figure></p><p>则会发生异常，信息如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e4d89fda63bedd35.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>当且仅当我们只给动画一个值时，程序才会调用属性对应的 get 函数来得到动画初始值。如果没有初始值，就会使用系统默认值。比如 ofInt() 函数中使用的参数类型是 int 类型，而 int 类型的默认值是 0，动画就会从 0 开始。所以上述自定义控件 FallingBallImageView 设置 get 函数，那么将会以 get 函数的返回值作为初始值。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class FallingBallImageView extends AppCompatImageView &#123;</div><div class="line">    ...</div><div class="line">    public Point getFallingPos() &#123;</div><div class="line">        return new Point(0, 0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>总结：当且仅当动画只有一个过渡值时，系统才会调用属性对应的 get 函数来得到动画的初始值。当不存在 get 函数时，则会去动画参数类型的默认值作为初始值；当无法取得动画参数类型的默认值时，则会直接奔溃。</p></blockquote><p><div id="jump5"></div></p><h3 id="3-4-5-常用函数"><a href="#3-4-5-常用函数" class="headerlink" title="3.4.5 常用函数"></a>3.4.5 常用函数</h3><p>用法和效果与 ValueAnimator 的函数是完全一样的。</p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.3 精通自定义 View 之属性动画——ofObject</title>
      <link href="/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/"/>
      <url>/2019/07/03/Custom%20View/03.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ofObject/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public static ValueAnimator ofObject(TypeEvaluator evaluator, Object... values)</div></pre></td></tr></table></figure><p><div id="jump1"></div></p><h3 id="3-3-1-示例：字母从-A-变化到-Z"><a href="#3-3-1-示例：字母从-A-变化到-Z" class="headerlink" title="3.3.1 示例：字母从 A 变化到 Z"></a>3.3.1 示例：字母从 A 变化到 Z</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7be4c63a0f016955.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">private void startAnim() &#123;</div><div class="line">    ValueAnimator animator = ValueAnimator.ofObject(new CharEvaluator(),</div><div class="line">            Character.valueOf(&apos;A&apos;), Character.valueOf(&apos;Z&apos;));</div><div class="line">    animator.setDuration(3000);</div><div class="line">    animator.setInterpolator(new AccelerateInterpolator());</div><div class="line">    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            char text = (Character) animation.getAnimatedValue();</div><div class="line">            mView.setText(String.valueOf(text));</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class CharEvaluator implements TypeEvaluator&lt;Character&gt; &#123;</div><div class="line">    @Override</div><div class="line">    public Character evaluate(float fraction, Character startValue, Character endValue) &#123;</div><div class="line">        int startInt = (int) startValue;</div><div class="line">        int endInt = (int) endValue;</div><div class="line">        int value = (int) (startInt + fraction * (endInt - startInt));</div><div class="line">        return (char) value;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p><div id="jump2"></div></p><h3 id="3-3-2-示例：抛物动画"><a href="#3-3-2-示例：抛物动画" class="headerlink" title="3.3.2 示例：抛物动画"></a>3.3.2 示例：抛物动画</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3e1482dc4d082b7f.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">private void startAnim() &#123;</div><div class="line">    ValueAnimator animator = ValueAnimator.ofObject(new FallingBallEvaluator(),</div><div class="line">            new Point(0, mTop), new Point(500, 500));</div><div class="line">    animator.setDuration(3000);</div><div class="line">    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            Point p = (Point) animation.getAnimatedValue();</div><div class="line">            mView.layout(p.x, p.y, p.x + mView.getWidth(), p.y + mView.getHeight());</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.start();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class FallingBallEvaluator implements TypeEvaluator&lt;Point&gt; &#123;</div><div class="line">    private Point point = new Point();</div><div class="line">    @Override</div><div class="line">    public Point evaluate(float fraction, Point startValue, Point endValue) &#123;</div><div class="line">        point.x = (int)(startValue.x + fraction * (endValue.x - startValue.x));</div><div class="line">        if (fraction * 2 &lt; 1) &#123;</div><div class="line">            point.y = (int) (startValue.y + fraction * 2 * (endValue.y - startValue.y));</div><div class="line">        &#125; else &#123;</div><div class="line">            point.y = endValue.y;</div><div class="line">        &#125;</div><div class="line">        return point;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.2 精通自定义 View 之属性动画——自定义插值器与 Evaluator</title>
      <link href="/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/"/>
      <url>/2019/07/03/Custom%20View/03.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%87%AA%E5%AE%9A%E4%B9%89%E6%8F%92%E5%80%BC%E5%99%A8%E4%B8%8E%20Evaluator/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>视图动画，只能设置插值器；但对于 Animator 而言，不仅可以设置插值器，还可以设置 Evaluator。</p><p><div id="jump1"></div></p><h3 id="3-2-1-自定义插值器"><a href="#3-2-1-自定义插值器" class="headerlink" title="3.2.1 自定义插值器"></a>3.2.1 自定义插值器</h3><p>插值器就是用来控制动画的区间值如何被计算出来的。</p><h4 id="1、系统自带插值器"><a href="#1、系统自带插值器" class="headerlink" title="1、系统自带插值器"></a>1、系统自带插值器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class AccelerateDecelerateInterpolator extends BaseInterpolator  &#123;</div><div class="line">    public AccelerateDecelerateInterpolator() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings(&#123;&quot;UnusedDeclaration&quot;&#125;)</div><div class="line">    public AccelerateDecelerateInterpolator(Context context, AttributeSet attrs) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getInterpolation(float input) &#123;</div><div class="line">        return (float)(Math.cos((input + 1) * Math.PI) / 2.0f) + 0.5f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">// 最终实现的接口：TimeInterpolator</div><div class="line">public interface TimeInterpolator &#123;</div><div class="line">    float getInterpolation(float input);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在 TimeInterpolator 的代码里，它只有一个函数 float getInterpolation(float input)。</p><ul><li>参数 input：input 是 Float 类型的，它的取值范围是 0 ~ 1，表示当前动画的进度。取 0 时表示动画刚开始，取 1 时表示动画结束，取 0.5 时表示动画中间的位置，其他以此类推。它是时间概念。</li><li>返回值：表示当前实际想要显示的进度。取值可以超过 ，也可以小于 0。超过 1 表示已经超过目标值，小于 0 表示小于开始位置。</li></ul><p>而 AccelerateDecelerateInterpolator 返回的显示进度值为：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">return (float)(Math.cos((input + 1) * Math.PI) / 2.0f) + 0.5f;</div></pre></td></tr></table></figure></p><p>input 是从 0 到 1，即cos(π) 到 cos(2π) 的结果值是从 -1 到 1。最终返回结果还是从 0 到 1，但是由于 Math.cos() 导致速率变化了，先加速后减速。</p><h4 id="2、自定义插值器示例"><a href="#2、自定义插值器示例" class="headerlink" title="2、自定义插值器示例"></a>2、自定义插值器示例</h4><p>想要先减速后加速的效果，可以重写 getInterpolation 方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">float x = (-1 + input * 2.0f) / 4f; // -0.25 ~ 0.25</div><div class="line">float y = (float) Math.tan(x * Math.PI);</div><div class="line">return y / 2f + 0.5f;</div></pre></td></tr></table></figure></p><p>由于 tan 函数曲线变化不明显，导致加速减速效果也不明显，趋向于匀速。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">class DecelerateAccelerateInterpolator implements TimeInterpolator &#123;</div><div class="line">    public DecelerateAccelerateInterpolator() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @SuppressWarnings(&#123;&quot;UnusedDeclaration&quot;&#125;)</div><div class="line">    public DecelerateAccelerateInterpolator(Context context, AttributeSet attrs) &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public float getInterpolation(float input) &#123;</div><div class="line">        float x = (-1 + input * 2.0f) / 4f; // -0.25 ~ 0.25</div><div class="line">        float y = (float) Math.tan(x * Math.PI);</div><div class="line">        return y / 2f + 0.5f;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">animator.setInterpolator(new DecelerateAccelerateInterpolator());</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="3-2-2-Evaluator"><a href="#3-2-2-Evaluator" class="headerlink" title="3.2.2 Evaluator"></a>3.2.2 Evaluator</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p><img src="https://upload-images.jianshu.io/upload_images/9125154-ce9829a138c8d3c5.png?imageMogr2/auto-orient/strip|imageView2/2/w/949/format/webp" alt=""></p><p>上图所述的 4 个步骤的具体含义是：<br>1）ofInt（0，400）：表示指定动画的数值区间，从0运动到400。<br>2）插值器：在动画开始后通过插值器会返回当前动画进度所对应的数值进度，这个数值进度是以小数表示的，如0.2。<br>3）Evaluator：我们通过监听器拿到的是当前动画所对应的具体数值，而不是用小数表示的数值。那么必须有一个地方会根据当前的数值进度将其转换为对应的数值，这个地方就是Evaluator。Evaluator用于将从插值器返回的数值进度（小数，0 - 1.0）转换成对应的数值。<br>4）监听器返回：在 AnimatorUpdateListener 监听器中使用 animation.getAnimatedValue() 函数拿到 Evaluator 中返回的数值。</p><h4 id="2-各种-Evaluator"><a href="#2-各种-Evaluator" class="headerlink" title="2. 各种 Evaluator"></a>2. 各种 Evaluator</h4><p>插值器返回的小数值表示的是当前动画的数值进度，这对于无论是使用 ofFloat() 函数还是使用 ofInt() 函数定义的动画都是适用的。因为无论是什么动画，它的进度必然在 0～1 之间。0 表示还没开始，1 表示动画结束，这对于任何动画都是适用的。</p><p>而 Evaluator 则不一样，它把插值器返回的小数进度转换成当前数值进度所对应的值。如果使用 ofInt() 函数来定义动画，动画中的值应该都是 Integer 类型的，所对应的 Evaluator 在返回值时，必然返回 Integer 类型的值；如果使用 ofFloat() 函数来定义动画，动画中的值都是 Float 类型的，Evaluator 在返回值时，必然返回 Float 类型的值。</p><p>所以，每种定义方式所对应的 Evaluator 必然是它专用的。Evaluator 专用的原因在于动画数值类型不一样，在通过 Evaluator 返回时会报强转错误，所以只有在动画数值类型一样时，所对应的 Evaluator 才能通用。ofInt() 函数对应的 Evaluator 类名为 IntEvaluator，而 ofFloat() 函数对应的 Evaluator 类名为 FloatEvaluator。</p><p>通过 animator.setEvaluator() 函数来设置 Evaluator，比如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">private void startAnimationArgbEvaluator() &#123;</div><div class="line">    ValueAnimator animator =  ValueAnimator.ofInt(0xffffff00, 0xff0000ff);</div><div class="line">    // 设置Evaluator</div><div class="line">    animator.setEvaluator(new ArgbEvaluator());</div><div class="line">    animator.setDuration(3000);</div><div class="line"></div><div class="line">    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            int curValue = (Integer) animation.getAnimatedValue();</div><div class="line">            tv_text.setBackgroundColor(curValue);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ofInt() 函数的默认 Evaluator 是 IntEvaluator，而 ofFloat() 函数的默认 Evaluator 则是 FloatEvaluator。</p><p>可以继续看下 IntEvaluator 的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class IntEvaluator implements TypeEvaluator&lt;Integer&gt; &#123;</div><div class="line">    public Integer evaluate(float fraction, Integer startValue, </div><div class="line">                Integer endValue) &#123;</div><div class="line">        int startInt = startValue;</div><div class="line">        // 当前的值 = 100 + (400 - 100) * 显示进度</div><div class="line">        return (int)(startInt + fraction * (endValue - startInt));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在 IntEvaluator 中只有一个函数 evaluate(float fraction, Integer startValue, Integer endValue)：</p><ul><li>fraction 参数就是插值器中的返回值，表示当前动画的数值进度，以百分制的小数表示。</li><li>startValue 和 endValue 分别对应 ofInt(int start，int end) 函数中 start 和 end 的数值。假设当我们定义的动画 ofInt(100，400) 进行到数值进度 20% 的时候，那么此时在 evaluate() 函数中，fraction 的值就是 0.2，startValue 的值是 100，endValue 的值是 400。</li><li>返回值就是当前数值进度所对应的具体数值，这个数值就是我们在 AnimatorUpdateListener 监听器中通过 animation.getAnimatedValue() 函数得到的数值。</li></ul><p>总之：既可以通过重写插值器改变数值进度来改变数值位置，也可以通过改变 Evaluator 中数值进度所对应的具体数值来改变数值位置。</p><h4 id="3-简单实现-Evaluator"><a href="#3-简单实现-Evaluator" class="headerlink" title="3. 简单实现 Evaluator"></a>3. 简单实现 Evaluator</h4><p>自定义 MyEvaluator，并设定一个位移量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class MyEvaluator implements TypeEvaluator&lt;Integer&gt; &#123;</div><div class="line">    private int offset;</div><div class="line">    public MyEvaluator(int offset) &#123;</div><div class="line">        this.offset = offset;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Integer evaluate(float fraction, Integer startValue, Integer endValue) &#123;</div><div class="line">        int startInt = startValue;</div><div class="line">        return (int) (startInt + (endValue - startInt) * fraction + offset);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>使用：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">mView = findViewById(R.id.tv);</div><div class="line">ValueAnimator animator = ValueAnimator.ofInt(0, 400);</div><div class="line">animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">        int curValue = (Integer) animation.getAnimatedValue();</div><div class="line">        mView.layout(curValue, curValue,</div><div class="line">                curValue + mView.getWidth(),</div><div class="line">                curValue + mView.getHeight());</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line">animator.setDuration(1000);</div><div class="line">animator.setEvaluator(new MyEvaluator(200));</div><div class="line">animator.start();</div></pre></td></tr></table></figure></p><h4 id="4-自定义-Evaluator-实现倒序输出"><a href="#4-自定义-Evaluator-实现倒序输出" class="headerlink" title="4. 自定义 Evaluator 实现倒序输出"></a>4. 自定义 Evaluator 实现倒序输出</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class ReverseEvaluator implements TypeEvaluator&lt;Integer&gt; &#123;</div><div class="line">    private boolean isReverse = true;</div><div class="line">    public MyEvaluator() &#123;</div><div class="line">    &#125;</div><div class="line">    public MyEvaluator(boolean isReverse) &#123;</div><div class="line">        this.isReverse = isReverse;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public Integer evaluate(float fraction, Integer startValue, Integer endValue) &#123;</div><div class="line">        int startInt = startValue;</div><div class="line">        if (isReverse) &#123;</div><div class="line">            return (int) (endValue - (endValue - startInt) * fraction);</div><div class="line">        &#125; else &#123;</div><div class="line">            return (int) (startInt + (endValue - startInt) * fraction);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5-ArgbEvaluator"><a href="#5-ArgbEvaluator" class="headerlink" title="5. ArgbEvaluator"></a>5. ArgbEvaluator</h4><p>除 IntEvaluator 和 FloatEvaluator 外，在 android.animation 包下还有另一个 Evaluator，名为 ArgbEvaluator，它是用来实现颜色值过渡转换的。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2e9430c61cdc0015.gif?imageMogr2/auto-orient/strip" alt=""></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">public void startAnim(View v) &#123;</div><div class="line">    ValueAnimator animator = ValueAnimator.ofInt(0xFFFFFF00, 0xFF0000FF);</div><div class="line">    animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">        @Override</div><div class="line">        public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">            int curValue = (Integer) animation.getAnimatedValue();</div><div class="line">            mView.setBackgroundColor(curValue);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">    animator.setDuration(3000);</div><div class="line">    animator.setEvaluator(new ArgbEvaluator());</div><div class="line">    animator.start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实现原理：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">public class ArgbEvaluator implements TypeEvaluator &#123;</div><div class="line">    public Object evaluate(float fraction, Object startValue, Object endValue) &#123;</div><div class="line">        int startInt = (Integer) startValue;</div><div class="line">        float startA = ((startInt &gt;&gt; 24) &amp; 0xff) / 255.0f;</div><div class="line">        float startR = ((startInt &gt;&gt; 16) &amp; 0xff) / 255.0f;</div><div class="line">        float startG = ((startInt &gt;&gt;  8) &amp; 0xff) / 255.0f;</div><div class="line">        float startB = ( startInt        &amp; 0xff) / 255.0f;</div><div class="line"></div><div class="line">        int endInt = (Integer) endValue;</div><div class="line">        float endA = ((endInt &gt;&gt; 24) &amp; 0xff) / 255.0f;</div><div class="line">        float endR = ((endInt &gt;&gt; 16) &amp; 0xff) / 255.0f;</div><div class="line">        float endG = ((endInt &gt;&gt;  8) &amp; 0xff) / 255.0f;</div><div class="line">        float endB = ( endInt        &amp; 0xff) / 255.0f;</div><div class="line"></div><div class="line">        // convert from sRGB to linear</div><div class="line">        startR = (float) Math.pow(startR, 2.2);</div><div class="line">        startG = (float) Math.pow(startG, 2.2);</div><div class="line">        startB = (float) Math.pow(startB, 2.2);</div><div class="line"></div><div class="line">        endR = (float) Math.pow(endR, 2.2);</div><div class="line">        endG = (float) Math.pow(endG, 2.2);</div><div class="line">        endB = (float) Math.pow(endB, 2.2);</div><div class="line"></div><div class="line">        // compute the interpolated color in linear space</div><div class="line">        float a = startA + fraction * (endA - startA);</div><div class="line">        float r = startR + fraction * (endR - startR);</div><div class="line">        float g = startG + fraction * (endG - startG);</div><div class="line">        float b = startB + fraction * (endB - startB);</div><div class="line"></div><div class="line">        // convert back to sRGB in the [0..255] range</div><div class="line">        a = a * 255.0f;</div><div class="line">        r = (float) Math.pow(r, 1.0 / 2.2) * 255.0f;</div><div class="line">        g = (float) Math.pow(g, 1.0 / 2.2) * 255.0f;</div><div class="line">        b = (float) Math.pow(b, 1.0 / 2.2) * 255.0f;</div><div class="line"></div><div class="line">        return Math.round(a) &lt;&lt; 24 | Math.round(r) &lt;&lt; 16 | Math.round(g) &lt;&lt; 8 | Math.round(b);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03.1 精通自定义 View 之属性动画——ValueAnimator 的基本使用</title>
      <link href="/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
      <url>/2019/07/03/Custom%20View/03.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E5%B1%9E%E6%80%A7%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94ValueAnimator%20%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="3-1-1-概述"><a href="#3-1-1-概述" class="headerlink" title="3.1.1 概述"></a>3.1.1 概述</h3><p>Animation：</p><ul><li>View Animation（视图动画，API Level 1）<br>|—- Tween Animation（补间动画）<br>|—- Frame Animation（逐帧动画）</li><li>Property Animation（属性动画，API Level 11）<br>|—- ValueAnimator<br>|—- ObjectAnimator</li></ul><p>视图动画仅能对指定的控件做动画，而属性动画是通过改变控件的某一属性值来做动画的。视图动画还有一个缺陷，就是只能点击原始区域才能响应事件。</p><p><div id="jump2"></div></p><h3 id="3-1-2-ValueAnimator-的简单使用"><a href="#3-1-2-ValueAnimator-的简单使用" class="headerlink" title="3.1.2 ValueAnimator 的简单使用"></a>3.1.2 ValueAnimator 的简单使用</h3><p>ValueAnimator 不会对控件执行任何操作，我们可以给它设定从哪个值运动到哪个值，通过监听这些值的渐变过程来使自己操作控件。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-17e5c9ef09ea60ec.gif?imageMogr2/auto-orient/strip" alt=""></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private TextView mView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        mView = findViewById(R.id.tv);</div><div class="line">        findViewById(R.id.start_btn).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                doAnimation();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        mView.setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Toast.makeText(MainActivity.this, &quot;你逮到我了&quot;, Toast.LENGTH_SHORT).show();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void doAnimation() &#123;</div><div class="line">        final int left, top;</div><div class="line">        left = mView.getLeft();</div><div class="line">        top = mView.getTop();</div><div class="line"></div><div class="line">        ValueAnimator animator = ValueAnimator.ofInt(0, 400, 200);</div><div class="line">        animator.setDuration(2000);</div><div class="line">        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                int curValue = (Integer) animation.getAnimatedValue();</div><div class="line">                mView.layout(curValue + left, curValue + top,</div><div class="line">                        curValue + left + mView.getWidth(),</div><div class="line">                        curValue + top + mView.getHeight());</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>ValueAnimator 只负责对指定值区间进行动画运算，我们需要对运算过程进行监听，然后自己对控件执行动画操作；动画结束后，控件仍然可以响应单击事件。</p></blockquote><p><div id="jump3"></div></p><h3 id="3-1-3-常用函数"><a href="#3-1-3-常用函数" class="headerlink" title="3.1.3 常用函数"></a>3.1.3 常用函数</h3><h4 id="1-ofInt-与-ofFloat"><a href="#1-ofInt-与-ofFloat" class="headerlink" title="1. ofInt 与 ofFloat"></a>1. ofInt 与 ofFloat</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public static ValueAnimator ofInt(int... values)</div><div class="line">public static ValueAnimator ofFloat(float... values)</div></pre></td></tr></table></figure><p>参数类型都是可变长参数，如上例中的 ofInt(0, 400, 200) 就表示从数字 0 变化到数字 400 再变化到 200。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public Object getAnimatedValue()</div></pre></td></tr></table></figure></p><p>上例中可以强转为 Integer 是因为使用的是 ofInt 方法设定动画初始值。当使用 ofFloat 函数设定初始值后，则需要强转为 Float 类型。后面介绍的 ofObject 函数也是如此。</p><h4 id="2-常用函数"><a href="#2-常用函数" class="headerlink" title="2. 常用函数"></a>2. 常用函数</h4><table><thead><tr><th style="text-align:left">方法</th><th style="text-align:left">描述</th></tr></thead><tbody><tr><td style="text-align:left">ValueAnimator setDuration(long duration)</td><td style="text-align:left">设置动画时长，单位是毫秒</td></tr><tr><td style="text-align:left">Object getAnimatedValue()</td><td style="text-align:left">获取 ValueAnimator 在运动时当前运动点的值</td></tr><tr><td style="text-align:left">void start()</td><td style="text-align:left">开始动画</td></tr><tr><td style="text-align:left">void cancel()</td><td style="text-align:left">取消动画</td></tr><tr><td style="text-align:left">void setRepeatCount(int value)</td><td style="text-align:left">循环次数，ValueAnimator.INFINITE 表示无线循环</td></tr><tr><td style="text-align:left">void setRepeatMode(int value)</td><td style="text-align:left">循环模式：ValueAnimator.RESTART、REVERSE</td></tr><tr><td style="text-align:left">void setStartDelay(long startDelay)</td><td style="text-align:left">延时多久开始，毫秒</td></tr><tr><td style="text-align:left">ValueAnimator clone()</td><td style="text-align:left">完全克隆一个 ValueAnimator 示例，包括所有设置和对监听器代码的处理。</td></tr></tbody></table><h4 id="3-监听器"><a href="#3-监听器" class="headerlink" title="3. 监听器"></a>3. 监听器</h4><p>1）添加监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 监听器一：监听动画过程中值的实时变化</div><div class="line">animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">        // doSomething</div><div class="line">    &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">// 监听器二：监听动画变化时的 4 个状态</div><div class="line">animator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onAnimationStart(Animator animation) &#123;&#125;</div><div class="line">    @Override</div><div class="line">    public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">    @Override</div><div class="line">    public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">    @Override</div><div class="line">    public void onAnimationRepeat(Animator animation) &#123;&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>2）移除监听器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 移除 AnimatorUpdateListener</div><div class="line">void removeUpdateListener(AnimatorUpdateListener listener);</div><div class="line">void removeAllUpdateListeners();</div><div class="line"></div><div class="line">// 移除 AnimatorListener</div><div class="line">void removeListener(AnimatorListener listener);</div><div class="line">void removeAllListeners();</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="3-1-4-示例：弹跳加载中效果"><a href="#3-1-4-示例：弹跳加载中效果" class="headerlink" title="3.1.4 示例：弹跳加载中效果"></a>3.1.4 示例：弹跳加载中效果</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b02f17acf6a8f20a.gif?imageMogr2/auto-orient/strip" alt=""></p><p>自定义 LoadingImageView.java<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div></pre></td><td class="code"><pre><div class="line">public class LoadingImageView extends AppCompatImageView &#123;</div><div class="line"></div><div class="line">    private int mTop;</div><div class="line">    // 当前动画图片索引</div><div class="line">    private int mCurImgIndex = 0;</div><div class="line">    // 动画图片总张数</div><div class="line">    private static int mImgCount = 3;</div><div class="line"></div><div class="line">    public LoadingImageView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        ValueAnimator animator = ValueAnimator.ofInt(0, 200, 0);</div><div class="line">        animator.setRepeatCount(ValueAnimator.INFINITE);</div><div class="line">        animator.setRepeatMode(ValueAnimator.RESTART);</div><div class="line">        animator.setDuration(2000);</div><div class="line">        animator.setInterpolator(new AccelerateDecelerateInterpolator());</div><div class="line">        animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationUpdate(ValueAnimator animation) &#123;</div><div class="line">                int dx = (Integer) animation.getAnimatedValue();</div><div class="line">                setTop(mTop - dx);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">        animator.addListener(new Animator.AnimatorListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onAnimationStart(Animator animation) &#123;</div><div class="line">                setImageDrawable(getResources().getDrawable(R.drawable.pic_1));</div><div class="line">            &#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationEnd(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationCancel(Animator animation) &#123;&#125;</div><div class="line">            @Override</div><div class="line">            public void onAnimationRepeat(Animator animation) &#123;</div><div class="line">                mCurImgIndex++;</div><div class="line">                                switch (mCurImgIndex % mImgCount) &#123;</div><div class="line">                    case 0:</div><div class="line">                        // setImageDrawable(getResources().getDrawable(R.drawable.pic_1));</div><div class="line">                        setImageDrawable(ResourcesCompat.getDrawable(</div><div class="line">                                getResources(), R.drawable.pic_1, null));</div><div class="line">                        break;</div><div class="line">                    case 1:</div><div class="line">                        setImageDrawable(ResourcesCompat.getDrawable(</div><div class="line">                                getResources(), R.drawable.pic_2, null));</div><div class="line">                        break;</div><div class="line">                    case 2:</div><div class="line">                        setImageDrawable(ResourcesCompat.getDrawable(</div><div class="line">                                getResources(), R.drawable.pic_3, null));</div><div class="line">                        break;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        animator.start();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int left, int top, int right, int bottom) &#123;</div><div class="line">        super.onLayout(changed, left, top, right, bottom);</div><div class="line">        mTop = top;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.LoadingImageView</div><div class="line">        android:layout_width=&quot;50dp&quot;</div><div class="line">        android:layout_height=&quot;50dp&quot;</div><div class="line">        android:layout_marginTop=&quot;100dp&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">        android:src=&quot;@drawable/pic_1&quot;/&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_gravity=&quot;center_horizontal&quot;</div><div class="line">        android:layout_marginTop=&quot;10dp&quot;</div><div class="line">        android:gravity=&quot;center&quot;</div><div class="line">        android:text=&quot;加载中...&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.5 精通自定义 View 之视图动画——逐帧动画</title>
      <link href="/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/"/>
      <url>/2019/07/02/Custom%20View/02.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E9%80%90%E5%B8%A7%E5%8A%A8%E7%94%BB/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="2-5-1-XML-实现"><a href="#2-5-1-XML-实现" class="headerlink" title="2.5.1 XML 实现"></a>2.5.1 XML 实现</h3><p>新建一个动画 XML 文件，在文件中使用 <animation-list> 标签来定义动画帧序列，使用 <item> 标签来定义动画的每一帧，并在其中指定帧的持续时间等属性。</item></animation-list></p><h4 id="1）定义-XML-动画文件"><a href="#1）定义-XML-动画文件" class="headerlink" title="1）定义 XML 动画文件"></a>1）定义 XML 动画文件</h4><p>res/drawable/playing_anim.xml 或 res/anim/playing_anim.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;animation-list xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:oneshot=&quot;false&quot;&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img00&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img01&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img02&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img03&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img04&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img05&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img06&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img07&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img08&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img10&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img11&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img12&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img13&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img14&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img15&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img16&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img17&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img18&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img19&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img20&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img21&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img22&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img23&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">    &lt;item android:drawable=&quot;@mipmap/img24&quot; android:duration=&quot;120&quot; /&gt;</div><div class="line">&lt;/animation-list&gt;</div></pre></td></tr></table></figure></p><blockquote><p>oneshot 用来控制动画是否循环播放，如果取值为 true，表示动画不会循环播放，否则动画会循环播放；duration 用来指定每一帧的持续播放时间。</p></blockquote><h4 id="2）设置-ImageView"><a href="#2）设置-ImageView" class="headerlink" title="2）设置 ImageView"></a>2）设置 ImageView</h4><p>设置动画资源有两种方式：android:src、android:background。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;ImageView</div><div class="line">    android:id=&quot;@+id/frame_image&quot;</div><div class="line">    android:layout_width=&quot;wrap_content&quot;</div><div class="line">    android:layout_height=&quot;wrap_content&quot;</div><div class="line">    android:src=&quot;@drawable/playing_anim&quot;/&gt;</div></pre></td></tr></table></figure></p><h4 id="3）AnimationDrawable-开始动画"><a href="#3）AnimationDrawable-开始动画" class="headerlink" title="3）AnimationDrawable 开始动画"></a>3）AnimationDrawable 开始动画</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ImageView image = findViewById(R.id.frame_image);</div><div class="line">AnimationDrawable anim = (AnimationDrawable) image.getDrawable();</div><div class="line">anim.start();</div></pre></td></tr></table></figure><blockquote><p>注意：<br>android:src 对应 image.getDrawable()；<br>android:background 对应 image.getBackground();</p></blockquote><p><div id="jump2"></div></p><h3 id="2-5-2-代码实现"><a href="#2-5-2-代码实现" class="headerlink" title="2.5.2 代码实现"></a>2.5.2 代码实现</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">AnimationDrawable animationDrawable = new AnimationDrawable();</div><div class="line">int id = 0;</div><div class="line">for (int i = 0; i &lt; 24; i++) &#123;</div><div class="line">    if (i &lt; 10) &#123;</div><div class="line">        id = getResources().getIdentifier(&quot;img0&quot; + i, &quot;mipmap&quot;, </div><div class="line">                getPackageName());</div><div class="line">    &#125; else  &#123;</div><div class="line">        id = getResources().getIdentifier(&quot;img&quot; + i, &quot;mipmap&quot;, </div><div class="line">                getPackageName());</div><div class="line">    &#125;</div><div class="line">    Drawable drawable = getResources().getDrawable(id);</div><div class="line">    animationDrawable.addFrame(drawable, 120);</div><div class="line">&#125;</div><div class="line">image.setImageDrawable(animationDrawable);</div><div class="line">animationDrawable.setOneShot(false);</div><div class="line">animationDrawable.start();</div></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/6770217-058c430641bcb12d.gif?imageMogr2/auto-orient/strip|imageView2/2/w/360/format/webp" alt=""></p><blockquote><p>帧动画使用比较简单，但是容易引起 OOM，在使用帧动画时应该尽量避免使用过多尺寸较大的图片。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.4 精通自定义 View 之视图动画——动画示例</title>
      <link href="/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/"/>
      <url>/2019/07/02/Custom%20View/02.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E5%8A%A8%E7%94%BB%E7%A4%BA%E4%BE%8B/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="2-4-1-镜头由远及近效果"><a href="#2-4-1-镜头由远及近效果" class="headerlink" title="2.4.1 镜头由远及近效果"></a>2.4.1 镜头由远及近效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        ScaleAnimation scaleAnim = new ScaleAnimation(1.0f, 3f, 1.0f, 3f,</div><div class="line">                Animation.RELATIVE_TO_SELF, 0.4f,</div><div class="line">                Animation.RELATIVE_TO_PARENT, 0.8f);</div><div class="line">        scaleAnim.setDuration(6000);</div><div class="line">        scaleAnim.setFillAfter(true);</div><div class="line">        scaleAnim.setInterpolator(new BounceInterpolator());</div><div class="line">        findViewById(R.id.image).startAnimation(scaleAnim);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;</div><div class="line">    android:orientation=&quot;vertical&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/image&quot;</div><div class="line">        android:layout_width=&quot;match_parent&quot;</div><div class="line">        android:layout_height=&quot;match_parent&quot;</div><div class="line">        android:scaleType=&quot;fitXY&quot;</div><div class="line">        android:src=&quot;@drawable/meinv&quot;/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b65cc033055b387b.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump2"></div></p><h3 id="2-4-2-加载框效果"><a href="#2-4-2-加载框效果" class="headerlink" title="2.4.2 加载框效果"></a>2.4.2 加载框效果</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        RotateAnimation rotateAnim = new RotateAnimation(0, 360,</div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f, </div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">        rotateAnim.setRepeatCount(Animation.INFINITE);</div><div class="line">        rotateAnim.setDuration(2000);</div><div class="line">        rotateAnim.setInterpolator(new LinearInterpolator());</div><div class="line">        findViewById(R.id.loading).startAnimation(rotateAnim);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/loading&quot;</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        android:layout_marginTop=&quot;50dp&quot;</div><div class="line">        android:src=&quot;@drawable/loading&quot;/&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure><p>效果图如下：</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-97840b9e023e724a.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump3"></div></p><h3 id="2-4-3-扫描动画"><a href="#2-4-3-扫描动画" class="headerlink" title="2.4.3 扫描动画"></a>2.4.3 扫描动画</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dda8bf5509252728.gif?imageMogr2/auto-orient/strip" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        setContentView(R.layout.act_main);</div><div class="line"></div><div class="line">        final Animation anim1 = AnimationUtils.loadAnimation(MainActivity.this, R.anim.scale_alpha_anim);</div><div class="line">        final Animation anim2 = AnimationUtils.loadAnimation(MainActivity.this, R.anim.scale_alpha_anim);</div><div class="line">        final Animation anim3 = AnimationUtils.loadAnimation(MainActivity.this, R.anim.scale_alpha_anim);</div><div class="line">        final Animation anim4 = AnimationUtils.loadAnimation(MainActivity.this, R.anim.scale_alpha_anim);</div><div class="line"></div><div class="line">        findViewById(R.id.start_can).setOnClickListener(new View.OnClickListener() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                findViewById(R.id.circle1).startAnimation(anim1);</div><div class="line">                anim2.setStartOffset(500);</div><div class="line">                findViewById(R.id.circle2).startAnimation(anim2);</div><div class="line">                anim3.setStartOffset(1000);</div><div class="line">                findViewById(R.id.circle3).startAnimation(anim3);</div><div class="line">                anim4.setStartOffset(1500);</div><div class="line">                findViewById(R.id.circle4).startAnimation(anim4);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>act_main.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;RelativeLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;View</div><div class="line">        android:id=&quot;@+id/circle1&quot;</div><div class="line">        android:layout_width=&quot;130dp&quot;</div><div class="line">        android:layout_height=&quot;130dp&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        android:layout_marginTop=&quot;70dp&quot;</div><div class="line">        android:background=&quot;@drawable/scan_circle&quot;/&gt;</div><div class="line">    &lt;View</div><div class="line">        android:id=&quot;@+id/circle2&quot;</div><div class="line">        android:layout_width=&quot;130dp&quot;</div><div class="line">        android:layout_height=&quot;130dp&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        android:layout_marginTop=&quot;70dp&quot;</div><div class="line">        android:background=&quot;@drawable/scan_circle&quot;/&gt;</div><div class="line">    &lt;View</div><div class="line">        android:id=&quot;@+id/circle3&quot;</div><div class="line">        android:layout_width=&quot;130dp&quot;</div><div class="line">        android:layout_height=&quot;130dp&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        android:layout_marginTop=&quot;70dp&quot;</div><div class="line">        android:background=&quot;@drawable/scan_circle&quot;/&gt;</div><div class="line">    &lt;View</div><div class="line">        android:id=&quot;@+id/circle4&quot;</div><div class="line">        android:layout_width=&quot;130dp&quot;</div><div class="line">        android:layout_height=&quot;130dp&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        android:layout_marginTop=&quot;70dp&quot;</div><div class="line">        android:background=&quot;@drawable/scan_circle&quot;/&gt;</div><div class="line">    &lt;ImageView</div><div class="line">        android:id=&quot;@+id/start_can&quot;</div><div class="line">        android:layout_width=&quot;130dp&quot;</div><div class="line">        android:layout_height=&quot;130dp&quot;</div><div class="line">        android:layout_centerHorizontal=&quot;true&quot;</div><div class="line">        android:layout_marginTop=&quot;70dp&quot;</div><div class="line">        android:src=&quot;@drawable/music&quot;/&gt;</div><div class="line">&lt;/RelativeLayout&gt;</div></pre></td></tr></table></figure></p><p>scan_circle.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;shape xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:shape=&quot;oval&quot;&gt;</div><div class="line">    &lt;solid android:color=&quot;#FF6C2F&quot;/&gt;</div><div class="line">&lt;/shape&gt;</div></pre></td></tr></table></figure></p><p>scale_alpha_anim.xml<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;2000&quot;&gt;</div><div class="line">    &lt;alpha</div><div class="line">        android:repeatCount=&quot;infinite&quot;</div><div class="line">        android:fromAlpha=&quot;0.4&quot;</div><div class="line">        android:toAlpha=&quot;0&quot;/&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:repeatCount=&quot;infinite&quot;</div><div class="line">        android:fromXScale=&quot;1.0&quot;</div><div class="line">        android:fromYScale=&quot;1.0&quot;</div><div class="line">        android:toXScale=&quot;3&quot;</div><div class="line">        android:toYScale=&quot;3&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot; /&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.3 精通自定义 View 之视图动画——插值器初探</title>
      <link href="/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/"/>
      <url>/2019/07/02/Custom%20View/02.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E6%8F%92%E5%80%BC%E5%99%A8%E5%88%9D%E6%8E%A2/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump0"></div></p><h3 id="2-3-0-概述"><a href="#2-3-0-概述" class="headerlink" title="2.3.0 概述"></a>2.3.0 概述</h3><p>有关动画的变化速率的问题是由 Interpolator 类来决定的。Interpolator 叫插值器，也叫加速器，是用来指定动画如何变化的变量。它只是一个接口，通过实现这个接口就可以自定义动画的变化速率。系统提供了如下几个实现了插值器的类：</p><table><thead><tr><th style="text-align:left">nterpolator class</th><th style="text-align:left">Resource ID</th></tr></thead><tbody><tr><td style="text-align:left">AccelerateDecelerateInterpolator</td><td style="text-align:left">@android:anim/accelerate_decelerate_interpolator</td></tr><tr><td style="text-align:left">AccelerateInterpolator</td><td style="text-align:left">@android:anim/accelerate_interpolator</td></tr><tr><td style="text-align:left">DecelerateInterpolator</td><td style="text-align:left">@android:anim/decelerate_interpolator</td></tr><tr><td style="text-align:left">LinearInterpolator</td><td style="text-align:left">@android:anim/linear_interpolator</td></tr><tr><td style="text-align:left">BounceInterpolator</td><td style="text-align:left">@android:anim/bounce_interpolator</td></tr><tr><td style="text-align:left">AnticipateInterpolator</td><td style="text-align:left">@android:anim/anticipate_interpolator</td></tr><tr><td style="text-align:left">OvershootInterpolator</td><td style="text-align:left">@android:anim/overshoot_interpolator</td></tr><tr><td style="text-align:left">AnticipateOvershootInterpolator</td><td style="text-align:left">@android:anim/anticipate_overshoot_interpolator</td></tr><tr><td style="text-align:left">CycleInterpolator</td><td style="text-align:left">@android:anim/cycle_interpolator</td></tr></tbody></table><p>关于插值器，有两种使用方法。</p><h4 id="方法一、在-XML-文件中引用插值器"><a href="#方法一、在-XML-文件中引用插值器" class="headerlink" title="方法一、在 XML 文件中引用插值器"></a>方法一、在 XML 文件中引用插值器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromAlpha=&quot;1.0&quot;</div><div class="line">    android:toAlpha=&quot;0.1&quot;</div><div class="line">    android:duration=&quot;3000&quot;</div><div class="line">    android:interpolator=&quot;@android:anim/accelerate_interpolator&quot;/&gt;</div></pre></td></tr></table></figure><h4 id="方法二、通过-setInterpolator-函数设置插值器"><a href="#方法二、通过-setInterpolator-函数设置插值器" class="headerlink" title="方法二、通过 setInterpolator() 函数设置插值器"></a>方法二、通过 setInterpolator() 函数设置插值器</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AlphaAnimation alphaAnim = new AlphaAnimation(1.0f, 0.1f);</div><div class="line">alphaAnim.setDuration(3000);</div><div class="line">alphaAnim.setInterpolator(new LinearInterpolator());</div></pre></td></tr></table></figure><p><div id="jump1"></div></p><h3 id="2-3-1-AccelerateDecelerateInterpolator"><a href="#2-3-1-AccelerateDecelerateInterpolator" class="headerlink" title="2.3.1 AccelerateDecelerateInterpolator"></a>2.3.1 AccelerateDecelerateInterpolator</h3><p>加速减速插值器，表示在开始与结束的地方速率改变比较慢，在中间的时候加速。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">TranslateAnimation alphaAnim = new TranslateAnimation(</div><div class="line">        Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_PARENT, 0.5f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_PARENT, 0.5f);</div><div class="line">alphaAnim.setDuration(2000);</div><div class="line">alphaAnim.setFillAfter(true);</div><div class="line">alphaAnim.setInterpolator(new AccelerateDecelerateInterpolator());</div><div class="line">view.startAnimation(alphaAnim);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1a5e986db80513d8.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump2"></div></p><h3 id="2-3-2-AccelerateInterpolator"><a href="#2-3-2-AccelerateInterpolator" class="headerlink" title="2.3.2 AccelerateInterpolator"></a>2.3.2 AccelerateInterpolator</h3><p>加速插值器，表示在动画开始的地方速率比较慢，然后开始加速。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new AccelerateInterpolator());</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-908e70cfe467c264.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump3"></div></p><h3 id="2-3-3-DecelerateInterpolator"><a href="#2-3-3-DecelerateInterpolator" class="headerlink" title="2.3.3 DecelerateInterpolator"></a>2.3.3 DecelerateInterpolator</h3><p>减速插值器，表示在动画开始的一瞬间加速到最大值，然后逐渐变慢。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new DecelerateInterpolator());</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-6d0ff5568b75446f.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump4"></div></p><h3 id="2-3-4-LinearInterpolator"><a href="#2-3-4-LinearInterpolator" class="headerlink" title="2.3.4 LinearInterpolator"></a>2.3.4 LinearInterpolator</h3><p>线性插值器，也称匀速插值器，显然，它的速率是保持恒定的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new LinearInterpolator());</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-377ec8feea0f4d15.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump5"></div></p><h3 id="2-3-5-BounceInterpolator"><a href="#2-3-5-BounceInterpolator" class="headerlink" title="2.3.5 BounceInterpolator"></a>2.3.5 BounceInterpolator</h3><p>弹跳插值器，模拟了控件自由落地后回弹的效果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new BounceInterpolator());</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-41e10e83f1b030b5.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump6"></div></p><h3 id="2-3-6-AnticipateInterpolator"><a href="#2-3-6-AnticipateInterpolator" class="headerlink" title="2.3.6 AnticipateInterpolator"></a>2.3.6 AnticipateInterpolator</h3><p>初始偏移插值器，表示在动画开始的时候向前偏移一段距离，然后应用动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public AnticipateInterpolator()</div><div class="line">public AnticipateInterpolator(float tension)</div></pre></td></tr></table></figure></p><p>参数 float tension 对应的 XML 属性为 android:tension，表示张力值，默认值为 2。值越大，初始的偏移量越大，而且速度越快。0 表示不偏移。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new AnticipateInterpolator(4));</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-238aad363372258f.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump7"></div></p><h3 id="2-3-7-OvershootInterpolator"><a href="#2-3-7-OvershootInterpolator" class="headerlink" title="2.3.7 OvershootInterpolator"></a>2.3.7 OvershootInterpolator</h3><p>结束偏移插值器，表示在动画结束的时候沿动画方向继续运动一段距离后再结束动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public OvershootInterpolator()</div><div class="line">public OvershootInterpolator(float tension)</div></pre></td></tr></table></figure></p><p>参数 float tension 对应的 XML 属性为 android:tension，表示张力值，默认值为 2。值越大，结束时的偏移量越大。0 表示不偏移。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new OvershootInterpolator());</div></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f1c535299a35ee11.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump8"></div></p><h3 id="2-3-8-AnticipateOvershootInterpolator"><a href="#2-3-8-AnticipateOvershootInterpolator" class="headerlink" title="2.3.8 AnticipateOvershootInterpolator"></a>2.3.8 AnticipateOvershootInterpolator</h3><p>是 AnticipateInterpolator 和 OvershootInterpolator 的合体，即在动画开始时向前偏移一段距离后，在动画结束的时候沿动画方向继续运动一段距离后再结束动画。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public AnticipateOvershootInterpolator()</div><div class="line">public AnticipateOvershootInterpolator(float tension)</div><div class="line">public AnticipateOvershootInterpolator(float tension, float extraTension)</div></pre></td></tr></table></figure></p><ul><li>参数 float tension 对应的 XML 属性为 android:tension，表示张力值，默认值为 2。值越大，初始和结束的偏移量越大。0 表示不偏移。</li><li>参数 float extraTension 对应的 XML 属性为 android:extraTension，表示额外张力值，默认值为 1.5。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">alphaAnim.setInterpolator(new AnticipateOvershootInterpolator());</div></pre></td></tr></table></figure><p><img src="https://upload-images.jianshu.io/upload_images/14186083-c3efadfe7e3bb00a.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump9"></div></p><h3 id="2-3-9-CycleInterpolator"><a href="#2-3-9-CycleInterpolator" class="headerlink" title="2.3.9 CycleInterpolator"></a>2.3.9 CycleInterpolator</h3><p>循环插值器，表示动画循环播放特定的次数，速率沿正弦曲线改变。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TranslateAnimation alphaAnim = new TranslateAnimation(</div><div class="line">        Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_PARENT, 0.5f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0, Animation.RELATIVE_TO_PARENT, 0.5f);</div><div class="line">alphaAnim.setDuration(2000);</div><div class="line">alphaAnim.setFillAfter(true);</div><div class="line">alphaAnim.setInterpolator(new CycleInterpolator());</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5eb085b89d61c217.gif?imageMogr2/auto-orient/strip" alt=""></p><blockquote><p>虽然设置了 setFillAfter(true)，但对于 CycleInterpolator 而言并没有什么影响，动画结束后，视图还原到初始位置。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.2 精通自定义 View 之视图动画——视图动画的代码实现</title>
      <link href="/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/"/>
      <url>/2019/07/02/Custom%20View/02.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E7%9A%84%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="2-2-1-概述"><a href="#2-2-1-概述" class="headerlink" title="2.2.1 概述"></a>2.2.1 概述</h3><p>使用 XML 来添加动画可以很大限度地提高代码复用性，但有时只需要临时使用一个动画，就没有必要单独写一个XML动画文件了，可以使用代码的方法生成一个动画操作。</p><table><thead><tr><th style="text-align:center">标签</th><th style="text-align:center">类</th></tr></thead><tbody><tr><td style="text-align:center">scale</td><td style="text-align:center">ScaleAnimation</td></tr><tr><td style="text-align:center">alpha</td><td style="text-align:center">AlphaAnimation</td></tr><tr><td style="text-align:center">rotate</td><td style="text-align:center">RotateAnimation</td></tr><tr><td style="text-align:center">translate</td><td style="text-align:center">TranslateAnimation</td></tr><tr><td style="text-align:center">set</td><td style="text-align:center">AnimationSet</td></tr></tbody></table><p>Animation 类中共用的属性方法：</p><table><thead><tr><th style="text-align:left">标签属性</th><th style="text-align:left">方 法</th><th style="text-align:right">说明</th></tr></thead><tbody><tr><td style="text-align:left">android:duration</td><td style="text-align:left">setDuration(long)</td><td style="text-align:right">动画的运行时间(以毫秒为单位)；必须设置</td></tr><tr><td style="text-align:left">android:fillAfter</td><td style="text-align:left">setFillAfter(boolean)</td><td style="text-align:right">动画结束时是否保持动画最后的状态；默认为false，优先于fillBefore</td></tr><tr><td style="text-align:left">android:fillBefore</td><td style="text-align:left">setFillBefore(boolean)</td><td style="text-align:right">动画结束时是否还原到开始动画前的状态；默认为true</td></tr><tr><td style="text-align:left">android:fillEnabled</td><td style="text-align:left">setFillEnabled(boolean)</td><td style="text-align:right">是否应用fillBefore的值，对fillAfter无影响；默认为true</td></tr><tr><td style="text-align:left">android:repeatCount</td><td style="text-align:left">setRepeatCount(int)</td><td style="text-align:right">重复次数，取值为整数或 Animation.INFINITE。</td></tr><tr><td style="text-align:left">android:repeatMode</td><td style="text-align:left">setRepeatMode(int)</td><td style="text-align:right">重复类型有两个值，reverse表示倒序回放，restart表示从头播放</td></tr><tr><td style="text-align:left">android:interpolator</td><td style="text-align:left">setInterpolator(Interpolator)</td><td style="text-align:right">设定插值器（指定的动画效果，譬如回弹等）</td></tr><tr><td style="text-align:left">android:detachWallpaper</td><td style="text-align:left">setDetachWallpaper(boolean)</td><td style="text-align:right"></td></tr><tr><td style="text-align:left">android:startOffset</td><td style="text-align:left">setStartOffset(long)</td><td style="text-align:right">调用start函数之后等待开始运行的时间，单位为毫秒</td></tr><tr><td style="text-align:left">android:zAdjustment</td><td style="text-align:left">setZAdjustment(int)</td><td style="text-align:right">表示被设置动画的内容运行时在Z轴上的位置（top/bottom/normal），默认为normal</td></tr></tbody></table><p><div id="jump2"></div></p><h3 id="2-2-2-ScaleAnimation"><a href="#2-2-2-ScaleAnimation" class="headerlink" title="2.2.2 ScaleAnimation"></a>2.2.2 ScaleAnimation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">ScaleAnimation(float fromX, float toX, float fromY, float toY)</div><div class="line">ScaleAnimation(float fromX, float toX, float fromY, float toY, </div><div class="line">               float pivotX, float pivotY)</div><div class="line">ScaleAnimation(float fromX, float toX, float fromY, float toY,</div><div class="line">               int pivotXType, float pivotXValue, </div><div class="line">               int pivotYType, float pivotYValue)</div></pre></td></tr></table></figure><blockquote><p>pivotXType 取值为：<br>Animation.ABSOLUTE、<br>Animation.RELATIVE_TO_SELF、Animation.RELATIVE_TO_PARENT</p></blockquote><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXScale=&quot;0.0&quot;</div><div class="line">    android:toXScale=&quot;1.4&quot;</div><div class="line">    android:fromYScale=&quot;0.0&quot;</div><div class="line">    android:toYScale=&quot;1.4&quot;</div><div class="line">    android:pivotX=&quot;50%&quot;</div><div class="line">    android:pivotY=&quot;50%&quot;</div><div class="line">    android:duration=&quot;700&quot;/&gt;</div></pre></td></tr></table></figure></p><p>对应代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ScaleAnimation scaleAnim = new ScaleAnimation(0.0f, 1.4f, 0.0f, 1.4f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">scaleAnim.setDuration(700);</div><div class="line">tv.startAnimation(scaleAnim);</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="2-2-3-AlphaAnimation"><a href="#2-2-3-AlphaAnimation" class="headerlink" title="2.2.3 AlphaAnimation"></a>2.2.3 AlphaAnimation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AlphaAnimation(float fromAlpha, float toAlpha)</div></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromAlpha=&quot;1.0&quot;</div><div class="line">    android:toAlpha=&quot;0.1&quot;</div><div class="line">    android:fillBefore=&quot;true&quot;</div><div class="line">    android:duration=&quot;3000&quot;/&gt;</div></pre></td></tr></table></figure></p><p>对应代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">AlphaAnimation alphaAnim = new AlphaAnimation(1.0f, 0.1f);</div><div class="line">alphaAnim.setDuration(3000);</div><div class="line">alphaAnim.setFillBefore(true);</div></pre></td></tr></table></figure></p><p><div id="jump4"></div></p><h3 id="2-2-4-RotateAnimation"><a href="#2-2-4-RotateAnimation" class="headerlink" title="2.2.4 RotateAnimation"></a>2.2.4 RotateAnimation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RotateAnimation(float fromDegrees, float toDegrees)</div><div class="line">RotateAnimation(float fromDegrees, float toDegrees, float pivotX, float pivotY)</div><div class="line">RotateAnimation(float fromDegrees, float toDegrees, </div><div class="line">                int pivotXType, float pivotXValue, </div><div class="line">                int pivotYType, float pivotYValue)</div></pre></td></tr></table></figure><blockquote><p>pivotXType 取值为：<br>Animation.ABSOLUTE、<br>Animation.RELATIVE_TO_SELF、Animation.RELATIVE_TO_PARENT</p></blockquote><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromDegrees=&quot;0&quot;</div><div class="line">    android:toDegrees=&quot;-650&quot;</div><div class="line">    android:pivotX=&quot;50%&quot;</div><div class="line">    android:pivotY=&quot;50%&quot;</div><div class="line">    android:duration=&quot;3000&quot;</div><div class="line">    android:fillAfter=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p><p>对应代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">RotateAnimation alphaAnim = new RotateAnimation(0, -650, </div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f, </div><div class="line">                Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">alphaAnim.setDuration(3000);</div><div class="line">alphaAnim.setFillAfter(true);</div></pre></td></tr></table></figure></p><p><div id="jump5"></div></p><h3 id="2-2-5-TranslateAnimation"><a href="#2-2-5-TranslateAnimation" class="headerlink" title="2.2.5 TranslateAnimation"></a>2.2.5 TranslateAnimation</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">TranslateAnimation(float fromXDelta,  float toXDelta, </div><div class="line">                   float fromYDelta, float toYDelta)</div><div class="line">TranslateAnimation(int fromXType, float fromXValue, </div><div class="line">                   int toXType, float toXValue,</div><div class="line">                   int fromYType, float fromYValue, </div><div class="line">                   int toYType, float toYValue)</div></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;translate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXDelta=&quot;0&quot;</div><div class="line">    android:toXDelta=&quot;-80&quot;</div><div class="line">    android:fromYDelta=&quot;0&quot;</div><div class="line">    android:toYDelta=&quot;-80&quot;</div><div class="line">    android:duration=&quot;2000&quot;</div><div class="line">    android:fillBefore=&quot;true&quot;/&gt;</div></pre></td></tr></table></figure></p><p>对应代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">TranslateAnimation alphaAnim = new TranslateAnimation(</div><div class="line">        Animation.ABSOLUTE, 0, Animation.ABSOLUTE, -80, </div><div class="line">        Animation.ABSOLUTE, 0, Animation.ABSOLUTE, -80);</div><div class="line">alphaAnim.setDuration(2000);</div><div class="line">alphaAnim.setFillBefore(true);</div></pre></td></tr></table></figure></p><p><div id="jump6"></div></p><h3 id="2-2-6-AnimationSet"><a href="#2-2-6-AnimationSet" class="headerlink" title="2.2.6 AnimationSet"></a>2.2.6 AnimationSet</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">AnimationSet(boolean shareInterpolator)</div></pre></td></tr></table></figure><p>shareInterpolator 参数取值为 true 时，用于 AnimationSet 类中定义一个插值器，其下面的所有动画共用该插值器；取值为 false，则表示其下面的动画定义各自的插值器。增加动画的函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void addAnimation(Animation a)</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;2000&quot;</div><div class="line">    android:fillAfter=&quot;true&quot;&gt;</div><div class="line">    &lt;alpha</div><div class="line">        android:fromAlpha=&quot;0.0&quot;</div><div class="line">        android:toAlpha=&quot;1.0&quot;/&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;0.0&quot;</div><div class="line">        android:toXScale=&quot;1.4&quot;</div><div class="line">        android:fromYScale=&quot;0.0&quot;</div><div class="line">        android:toYScale=&quot;1.4&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot; /&gt;</div><div class="line">    &lt;rotate</div><div class="line">        android:fromDegrees=&quot;0&quot;</div><div class="line">        android:toDegrees=&quot;720&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p><p>对应代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">Animation alphaAnim = new AlphaAnimation(0, 1.0f);</div><div class="line">Animation scaleAnim = new ScaleAnimation(0, 1.4f, 0, 1.4f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f, Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">Animation rotateAnim = new RotateAnimation(0, 720, Animation.RELATIVE_TO_SELF, </div><div class="line">        0.5f, Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line"></div><div class="line">AnimationSet setAnim = new AnimationSet(true);</div><div class="line">setAnim.addAnimation(alphaAnim);</div><div class="line">setAnim.addAnimation(scaleAnim);</div><div class="line">setAnim.addAnimation(rotateAnim);</div><div class="line"></div><div class="line">setAnim.setDuration(3000);</div><div class="line">setAnim.setFillAfter(true);</div><div class="line"></div><div class="line">view.startAnimation(setAnim);</div></pre></td></tr></table></figure></p><p><div id="jump7"></div></p><h3 id="2-2-7-Animation"><a href="#2-2-7-Animation" class="headerlink" title="2.2.7 Animation"></a>2.2.7 Animation</h3><p>Animation 还有一些比较实用的方法介绍，如下：<br>| 方法 | 说明 |<br>| :—–: | —–: |<br>| cancel() | 取消动画 |<br>| reset() | 将控件重置到动画开始前状态 |<br>| hasStarted() | 判断当前 Animation 是否开始 |<br>| hasEnded() | 判断当前 Animation 是否结束 |<br>| setAnimationListener() | 设置动画监听 |</p><p>Animation.AnimationListener：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static interface AnimationListener &#123;</div><div class="line">    // 动画开始时调用</div><div class="line">    void onAnimationStart(Animation animation);</div><div class="line">    // 动画结束时调用</div><div class="line">    void onAnimationEnd(Animation animation);</div><div class="line">    // 动画重复时调用</div><div class="line">    void onAnimationRepeat(Animation animation);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">final RotateAnimation rotateAnim = new RotateAnimation(0, 720, </div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">rotateAnim.setDuration(2000);</div><div class="line">rotateAnim.setFillAfter(true);</div><div class="line"></div><div class="line">ScaleAnimation scaleAnim = new ScaleAnimation(0, 1.4f, 0, 1.4f,</div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f, </div><div class="line">        Animation.RELATIVE_TO_SELF, 0.5f);</div><div class="line">scaleAnim.setDuration(700);</div><div class="line">scaleAnim.setAnimationListener(new Animation.AnimationListener() &#123;</div><div class="line">    @Override</div><div class="line">    public void onAnimationStart(Animation animation) &#123;&#125;</div><div class="line">    @Override</div><div class="line">    public void onAnimationEnd(Animation animation) &#123;</div><div class="line">        view.startAnimation(rotateAnim);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public void onAnimationRepeat(Animation animation) &#123; &#125;</div><div class="line">&#125;);</div><div class="line"></div><div class="line">view.startAnimation(scaleAnim);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1f482e16cf4cbca6.gif?imageMogr2/auto-orient/strip" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02.1 精通自定义 View 之视图动画——视图动画标签</title>
      <link href="/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/"/>
      <url>/2019/07/02/Custom%20View/02.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E2%80%94%E2%80%94%E8%A7%86%E5%9B%BE%E5%8A%A8%E7%94%BB%E6%A0%87%E7%AD%BE/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p>Animation：</p><ul><li>View Animation（视图动画，API Level 1）<br>|—- Tween Animation（补间动画）<br>|—- Frame Animation（逐帧动画）</li><li>Property Animation（属性动画，API Level 11）<br>|—- ValueAnimator<br>|—- ObjectAnimator</li></ul><p><div id="jump1"></div></p><h3 id="2-1-1-概述"><a href="#2-1-1-概述" class="headerlink" title="2.1.1 概述"></a>2.1.1 概述</h3><p>视图动画分为 5 种类型组成：<br>scale：渐变透明度动画效果<br>alpha：渐变尺寸伸缩动画效果<br>rotate：画面转移旋转动画效果<br>translate：画面变化位置移动动画效果<br>set：定义动画集</p><h4 id="1-配置-XML-动画文件"><a href="#1-配置-XML-动画文件" class="headerlink" title="1. 配置 XML 动画文件"></a>1. 配置 XML 动画文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;&gt;</div><div class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXScale=&quot;0.0&quot;</div><div class="line">    android:toXScale=&quot;1.4&quot;</div><div class="line">    android:fromYScale=&quot;0.0&quot;</div><div class="line">    android:toYScale=&quot;1.4&quot;</div><div class="line">    android:duration=&quot;700&quot;</div></pre></td></tr></table></figure><h4 id="2-动画文件存放位置"><a href="#2-动画文件存放位置" class="headerlink" title="2. 动画文件存放位置"></a>2. 动画文件存放位置</h4><p>存放在 res/anim 文件夹下，访问时使用 R.anim.XXX。<br>存放在 res/drawable 文件夹下，访问时使用 R.drawable.XXX。</p><h4 id="3-使用动画文件"><a href="#3-使用动画文件" class="headerlink" title="3. 使用动画文件"></a>3. 使用动画文件</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">View view = findViewById(R.id.view);</div><div class="line">Animation animation = AnimationUtils.loadAnimation(this, R.anim.scale_anim);</div><div class="line">view.startAnimation(animation);</div></pre></td></tr></table></figure><p><div id="jump2"></div></p><h3 id="2-1-2-scale-标签"><a href="#2-1-2-scale-标签" class="headerlink" title="2.1.2 scale 标签"></a>2.1.2 scale 标签</h3><p>scale 标签用于缩放动画，可以实现动态调整控件尺寸的效果：</p><ul><li>android:fromXScale：动画开始时，控件在 X 轴方向上相对自身的缩放比例，浮点值。1.0 代表自身无变化，0.5 表示缩小一倍，2.0 代表放大一倍。</li><li>android:toXScale：动画结束时，控件在 X 轴方向上相对自身的缩放比例，浮点值。</li><li>android:fromYScale：动画开始时，控件在 Y 轴方向上相对自身的缩放比例，浮点值。</li><li>android:toYScale：动画结束时，控件在 Y 轴方向上相对自身的缩放比例，浮点值。</li><li>android:pivotX：缩放起始点 X 轴坐标。是数值如 50，则表示在当前控件的左上角原点 X 轴坐标 + 50px，作为缩放起始点 X 轴坐标；是百分数如 50%，则表示在当前控件的左上角原点 X 轴坐标 + 自身宽度的 50%，作为缩放起始点 X 轴坐标；是百分数 p 如 50%p，则表示在当前控件的左上角原点 X 轴坐标 + 父控件宽度的 50%，作为缩放起始点 X 轴坐标；</li><li>android:pivotY：缩放起始点 Y 轴坐标。取值同上。</li></ul><p>示例：<br>缩放动画 scale1.xml：android:pivotX=”50”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXScale=&quot;0.0&quot;</div><div class="line">    android:toXScale=&quot;1.0&quot;</div><div class="line">    android:fromYScale=&quot;0.0&quot;</div><div class="line">    android:toYScale=&quot;1.0&quot;</div><div class="line">    android:pivotX=&quot;50&quot;</div><div class="line">    android:duration=&quot;700&quot;/&gt;</div></pre></td></tr></table></figure></p><p>缩放动画 scale2.xml：android:pivotX=”50%”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXScale=&quot;0.0&quot;</div><div class="line">    android:toXScale=&quot;1.0&quot;</div><div class="line">    android:fromYScale=&quot;0.0&quot;</div><div class="line">    android:toYScale=&quot;1.0&quot;</div><div class="line">    android:pivotX=&quot;50%&quot;</div><div class="line">    android:duration=&quot;700&quot;/&gt;</div></pre></td></tr></table></figure></p><p>缩放动画 scale3.xml：android:pivotX=”50%”<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;scale xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXScale=&quot;0.0&quot;</div><div class="line">    android:toXScale=&quot;1.0&quot;</div><div class="line">    android:fromYScale=&quot;0.0&quot;</div><div class="line">    android:toYScale=&quot;1.0&quot;</div><div class="line">    android:pivotX=&quot;50%p&quot;</div><div class="line">    android:duration=&quot;700&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7756d7b6da97fa09.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump3"></div></p><h3 id="2-1-3-Animation-继承属性"><a href="#2-1-3-Animation-继承属性" class="headerlink" title="2.1.3 Animation 继承属性"></a>2.1.3 Animation 继承属性</h3><p>所有的动画都继承自 Animation 类，它的内部实现了一些共用的动画属性：</p><ul><li>android:duration：一次动画的持续时间，单位毫秒。</li><li>android:fillAfter：为 true 表示控件动画结束时，将保持动画结束时的状态。</li><li>android:fillBefore：为 true 表示控件动画结束时，将还原到初始化状态。默认为 true。</li><li>android:fillEnabled：同 fillBefore。</li><li>android:repeatCount：指定动画的重复次数，取值为 infinite 时，表示无限循环。</li><li>android:repeatMode：设定重复的类型，有 reverse（倒序回放） 和 restart（重放） 两个值。与 repeatCount 一起使用才有效果。</li><li>android:interpolator：设定插值器，指定动画效果，比如弹跳效果。</li></ul><p><div id="jump4"></div></p><h3 id="2-1-4-alpha-标签"><a href="#2-1-4-alpha-标签" class="headerlink" title="2.1.4 alpha 标签"></a>2.1.4 alpha 标签</h3><p>alpha 标签用于实现渐变透明度动画效果。除从 Animation 类继承而来的属性外，自身所具有的属性如下：</p><ul><li>android:fromAlpha：动画开始的透明度，取值范围 0.0 ~ 1.0，0.0 表示完全透明，1.0 表示完全不透明。</li><li>android:toAlpha：动画结束的透明度，取值范围 0.0 ~ 1.0，0.0 表示完全透明，1.0 表示完全不透明。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;alpha xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromAlpha=&quot;1.0&quot;</div><div class="line">    android:toAlpha=&quot;0.5&quot;</div><div class="line">    android:repeatMode=&quot;reverse&quot;</div><div class="line">    android:repeatCount=&quot;infinite&quot;</div><div class="line">    android:duration=&quot;700&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-584dead53190f9d3.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump5"></div></p><h3 id="2-1-5-rotate-标签"><a href="#2-1-5-rotate-标签" class="headerlink" title="2.1.5 rotate 标签"></a>2.1.5 rotate 标签</h3><p>rotate 标签用于实现画面转移旋转动画效果。除从 Animation 类继承而来的属性外，自身所具有的属性如下：</p><ul><li>android:fromDegrees：动画开始旋转时的角度位置，正值代表顺时针方向的度数，负值代表逆时针方向的度数。</li><li>android:toDegrees：动画结束时旋转到的角度位置，正值代表顺时针方向的度数，负值代表逆时针方向的度数。</li><li>android:pivotX：旋转中心点 X 轴坐标，默认旋转中心点为控件的坐标原点（左上角），可以是数值、百分数、百分数p 三种样式。</li><li>android:pivotY：旋转中心点 Y 轴坐标，同上。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;rotate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromDegrees=&quot;0&quot;</div><div class="line">    android:toDegrees=&quot;180&quot;</div><div class="line">    android:pivotX=&quot;50%&quot;</div><div class="line">    android:pivotY=&quot;50%&quot;</div><div class="line">    android:repeatMode=&quot;restart&quot;</div><div class="line">    android:repeatCount=&quot;infinite&quot;</div><div class="line">    android:duration=&quot;700&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-dba6e63da35e2b0a.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump6"></div></p><h3 id="2-1-6-translate-标签"><a href="#2-1-6-translate-标签" class="headerlink" title="2.1.6 translate 标签"></a>2.1.6 translate 标签</h3><p>translate 标签用于实现画面转移旋转动画效果。除从 Animation 类继承而来的属性外，自身所具有的属性如下：</p><ul><li>android:fromXDelta：起始点 X 轴坐标，可以是数值、百分数、百分数p。</li><li>android:fromYDelta：起始点 Y 轴坐标，同上。</li><li>android:toXDelta：终点 X 轴坐标。</li><li>android:toYDelta：终点 Y 轴坐标。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;translate xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:fromXDelta=&quot;0&quot;</div><div class="line">    android:fromYDelta=&quot;0&quot;</div><div class="line">    android:toXDelta=&quot;-50%&quot;</div><div class="line">    android:toYDelta=&quot;-50%&quot;</div><div class="line">    android:duration=&quot;1500&quot;/&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a869cc5df2429999.gif?imageMogr2/auto-orient/strip" alt=""></p><p><div id="jump7"></div></p><h3 id="2-1-7-set-标签"><a href="#2-1-7-set-标签" class="headerlink" title="2.1.7 set 标签"></a>2.1.7 set 标签</h3><p>set 标签是一个容器类标签，用于定义动画集。前面的 4 个标签只能完成特定的功能，而 set 标签则可以把这些动画效果组合起来，共同完成一个动画。set 标签自身没有属性，它的属性都是从 Animation 类继承而来的。当这些属性用于 set 标签时，就会对 set 标签下的所有子控件产生作用。但 repeateCount 属性是无效的，必须对每个动画单独设置才有作用。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;set xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:duration=&quot;2000&quot;</div><div class="line">    android:fillAfter=&quot;true&quot;&gt;</div><div class="line">    &lt;alpha</div><div class="line">        android:fromAlpha=&quot;0.0&quot;</div><div class="line">        android:toAlpha=&quot;1.0&quot;/&gt;</div><div class="line">    &lt;scale</div><div class="line">        android:fromXScale=&quot;0.0&quot;</div><div class="line">        android:toXScale=&quot;1.4&quot;</div><div class="line">        android:fromYScale=&quot;0.0&quot;</div><div class="line">        android:toYScale=&quot;1.4&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot; /&gt;</div><div class="line">    &lt;rotate</div><div class="line">        android:fromDegrees=&quot;0&quot;</div><div class="line">        android:toDegrees=&quot;720&quot;</div><div class="line">        android:pivotX=&quot;50%&quot;</div><div class="line">        android:pivotY=&quot;50%&quot;/&gt;</div><div class="line">&lt;/set&gt;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bf4c19f3e714f6c4.gif?imageMogr2/auto-orient/strip" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.6 精通自定义 View 之绘图基础——控件的使用方法</title>
      <link href="/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/"/>
      <url>/2019/07/01/Custom%20View/01.6%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%8E%A7%E4%BB%B6%E7%9A%84%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="1-6-1-控件概述"><a href="#1-6-1-控件概述" class="headerlink" title="1.6.1 控件概述"></a>1.6.1 控件概述</h3><p>在自定义一个派生自 View 或 ViewGroup 类的控件时，必须实现一个构造函数。有三个构造函数供我们选择。<br> <figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class CustomView extends View &#123;</div><div class="line">    public CustomView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line">    public CustomView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line">    public CustomView(Context context, AttributeSet attrs, int defStyle) &#123; </div><div class="line">        super(context, attrs, defStyle);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其实每种构造函数都是在特定的使用情景下所必须实现的，否则将会报 inflate 错误。</p><p><div id="jump2"></div></p><h3 id="1-6-2-通过XML引入控件"><a href="#1-6-2-通过XML引入控件" class="headerlink" title="1.6.2 通过XML引入控件"></a>1.6.2 通过XML引入控件</h3><p>使用以下方式引入控件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;utf-8&quot;?&gt;</div><div class="line">&lt;LinearLayout ...&gt;</div><div class="line">    &lt;com.xxt.xtest.CustomView ... /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>就必须实现第二个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public CustomView(Context context, AttributeSet attrs) &#123;</div><div class="line">    super(context, attrs);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="1-6-3-动态添加控件"><a href="#1-6-3-动态添加控件" class="headerlink" title="1.6.3 动态添加控件"></a>1.6.3 动态添加控件</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1. 概述"></a>1. 概述</h4><p>示例如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LinearLayout rootView = (LinearLayout)findViewById(R.id.root);</div><div class="line">CustomView customView = new CustomView(this);</div><div class="line">LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams (</div><div class="line">                LinearLayout.LayoutParams.MATCH_PARENT, </div><div class="line">                LinearLayout.LayoutParams.MATCH_PARENT);</div><div class="line">rootView.addView(customView,layoutParams);</div></pre></td></tr></table></figure></p><h4 id="2-LayoutParams"><a href="#2-LayoutParams" class="headerlink" title="2. LayoutParams"></a>2. LayoutParams</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 第一个构造函数常用</div><div class="line">public LayoutParams(int width, int height)</div><div class="line">// 用于从 AttributeSet 中􏰑取出 layout_width、 layout_height 等各属性的值</div><div class="line">public LayoutParams(Context c, AttributeSet attrs)</div><div class="line">public LayoutParams(LayoutParams source)</div></pre></td></tr></table></figure><p>每个容器类控件都会实现一套 LayoutParams 类，而子类则用的是父容器的 LayoutParams 类。比如上述中父容器是 LinearLayout，所以使用 LinearLayout.LayoutParams。之所以不能共用，是因为各个容器所对应的布局属性是不一样的。</p><p>在 RelativeLayout 中，实现添加到 TextView 控件的右侧：addRule()<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">RelativeLayout rootView = (RelativeLayout) findViewById(R.id.root); </div><div class="line">CustomView customView = new CustomView(this);</div><div class="line">RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(</div><div class="line">                RelativeLayout.LayoutParams.MATCH_PARENT, </div><div class="line">                RelativeLayout.LayoutParams.MATCH_ PARENT);</div><div class="line">layoutParams.addRule(RelativeLayout.RIGHT_OF,R.id.text); </div><div class="line">rootView.addView(customView, layoutParams);</div></pre></td></tr></table></figure></p><p>1）设置 margin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(</div><div class="line">                LinearLayout. LayoutParams.WRAP_CONTENT, </div><div class="line">                LinearLayout.LayoutParams.WRAP_CONTENT);</div><div class="line">lp.setMargins(10, 20, 30, 40);</div><div class="line">imageView.setLayoutParams(lp);</div></pre></td></tr></table></figure></p><p>2）设置 layout_weight (方法一)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TextView tv_like = new TextView(this);</div><div class="line">LinearLayout.LayoutParams LP_LIKE_MW = new LinearLayout.LayoutParams (</div><div class="line">                LinearLayout.LayoutParams.MATCH_PARENT, </div><div class="line">                LinearLayout.LayoutParams.WRAP_ CONTENT, </div><div class="line">                1.0f);</div><div class="line">tv_like.setText(&quot;赞(8)&quot;); </div><div class="line">tv_like.setTextSize(16); </div><div class="line">layout_sub_Lin.addView(tv_like, LP_LIKE_MW);</div></pre></td></tr></table></figure></p><p>3）设置 layout_weight (方法二)<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(</div><div class="line">                LinearLayout.LayoutParams.MATCH_PARENT,</div><div class="line">                LinearLayout.LayoutParams.MATCH_ PARENT);</div><div class="line">layoutParams.weight = 1.0f;</div><div class="line">rootView.addView(customView, layoutParams);</div></pre></td></tr></table></figure></p><p>4）设置 layout_gravity<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">LinearLayout.LayoutParams layoutParams = new LinearLayout.LayoutParams(</div><div class="line">                LinearLayout.LayoutParams.MATCH_PARENT,</div><div class="line">                LinearLayout.LayoutParams.MATCH_ PARENT);</div><div class="line">params.gravity = Gravity.TOP;</div><div class="line">Button button = new Button(this);</div><div class="line">rootView.addView(button, layoutParams);</div></pre></td></tr></table></figure></p><p>5）设置 android:gravity<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">RelativeLayout rootView = (RelativeLayout) findViewById(R.id.root);</div><div class="line">RelativeLayout.LayoutParams layoutParams = new RelativeLayout.LayoutParams(</div><div class="line">                RelativeLayout.LayoutParams.WRAP_CONTENT,</div><div class="line">                200);</div><div class="line">layoutParams.addRule(RelativeLayout.RIGHT_OF, R.id.text);</div><div class="line"></div><div class="line">Button button = new Button(this); </div><div class="line">button.setGravity(Gravity.TOP);</div><div class="line">button.setText(&quot;btn&quot;);</div><div class="line">rootView.addView(button, layoutParams); </div><div class="line">rootView.setGravity(Gravity.TOP | Gravity.CENTER_HORIZONTAL);</div></pre></td></tr></table></figure></p><h4 id="3-addView"><a href="#3-addView" class="headerlink" title="3. addView"></a>3. addView</h4><p>动态添加控件都是通过 addView 来实现的，addView 是 ViewGroup 类中的一个函数，它有 5 个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">// 在节点末尾添加一个 View 控件，布局使用默认布局</div><div class="line">// layout_width = wrap_content、layout_height = wrap_content</div><div class="line">public void addView(View child)</div><div class="line"></div><div class="line">// 在指定位置添加一个 View 控件，index 的取值有-1、0 和正数。</div><div class="line">// -1：表示在末尾添加一个 View 控件</div><div class="line">// 0：表示在容器顶端添加一个 View 控件</div><div class="line">// 正数：表示在对应的索引位置插入一个 View 控件</div><div class="line">public void addView(View child, int index)</div><div class="line"></div><div class="line">// 使用自定义自定义布局参数，在节点末尾添加一个 View 控件</div><div class="line">public void addView(View child, LayoutParams params)</div><div class="line"></div><div class="line">// 使用自定义自定义布局参数，在指定位置添加一个 View 控件</div><div class="line">public void addView(View child, int index, LayoutParams params)</div><div class="line"></div><div class="line">// 只指定宽和高</div><div class="line">public void addView(View child, int width, int height)</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.5 精通自定义 View 之绘图基础——Canvas</title>
      <link href="/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/"/>
      <url>/2019/07/01/Custom%20View/01.5%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Canvas/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="1-5-1-Canvas变换"><a href="#1-5-1-Canvas变换" class="headerlink" title="1.5.1 Canvas变换"></a>1.5.1 Canvas变换</h3><h4 id="1-平移-Translate"><a href="#1-平移-Translate" class="headerlink" title="1. 平移(Translate)"></a>1. 平移(Translate)</h4><p>画布的原始状态是以左上角为原点，向右是X轴正方向，向下是Y轴正方向。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void translate(float dx, float dy)</div></pre></td></tr></table></figure></p><p>参数:<br>float dx：水平方向平移的距离，正数为向正方向(向右)平移的量，负数为向负方向 (向左)平移的量。<br>float dy：垂直方向平移的距离，正数为向正方向(向下)平移的量，负数为向负方向 (向上)平移的量。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">paintGreen = generatePaint(Color.GREEN, Paint.Style.STROKE, 3);</div><div class="line">paintRed = generatePaint(Color.RED, Paint.Style.STROKE, 3);</div><div class="line">rect = new Rect(20,20,400,220);</div><div class="line"></div><div class="line">canvas.drawRect(rect, paintGreen);</div><div class="line">// 画布平移</div><div class="line">canvas.translate(100, 100);</div><div class="line">canvas.drawRect(rect, paintRed);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-0c93c2d9c06d16a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>上述示例中，调用 canvas.translate(100, 100) 后，绿色矩形区域并没有随着画布移动。这是由于屏幕显示与 Canvas 根本不是一个概念！</p></blockquote><h4 id="2-屏幕显示与-Canvas-的关系"><a href="#2-屏幕显示与-Canvas-的关系" class="headerlink" title="2. 屏幕显示与 Canvas 的关系"></a>2. 屏幕显示与 Canvas 的关系</h4><p>Canvas 是一个很虚幻的概念，相当于一个透明图层。每次在 Canvas 上画图时(调用 drawXXX 系列函数)，都会先产生一个透明图层，然后在这个图层上画图，画完之后覆盖在屏幕上显示。所以，上述结果是经以下几个步骤形成的:<br>(1) 在调用 canvas.drawRect(rect1, paint_green) 时，产生一个 Canvas 透明图层，由于当时还没有对坐标系进行平移，所以坐标原点是(0,0)；在 Canvas 上画好之后，覆盖到屏幕上显示出来。过程如下图所示。<br><img src="https://upload-images.jianshu.io/upload_images/14186083-c891c073af2f3bd3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>(2) 在调用 canvas.drawRect(rect1, paint_red) 时，又会产生一个全新的 Canvas 透明图层，但此时画布坐标已经改变了，即分别向右和向下移动了 100 像素，所以此时的绘图方式如下图所示(合成视图，从上往下看的合成方式)。<br><img src="https://upload-images.jianshu.io/upload_images/14186083-21c34d62a6ad5d70.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>总结：</p><ul><li>当每次调用 drawXXX 系列函数来绘图时，都会产生一个全新的 Canvas 透明图层。</li><li>如果在调用 drawXXX 系列函数前，调用平移、旋转等函数对 Canvas 进行了操作，那么这个操作是不可逆的。每次产生的画布的最新位置都是这些操作后的位置。</li><li>在 Canvas 图层与屏幕合成时，超出屏幕范围的图像是不会显示出来的。</li></ul><h4 id="3-旋转-Rotate"><a href="#3-旋转-Rotate" class="headerlink" title="3. 旋转(Rotate)"></a>3. 旋转(Rotate)</h4><p>画布的旋转默认是围绕坐标原点来进行的。这里容易产生错觉，看起来是图片旋转了，其实我们旋转的是画布，以后在此画布上绘制的图形显示出来的时候看起来都是旋转的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void rotate(float degrees)</div><div class="line">void rotate(float degrees, float px, float py)</div></pre></td></tr></table></figure></p><p>参数：</p><ul><li>float degrees：旋转的度数，正数指顺时针旋转。旋转中心点是(0,0)。</li><li>float px, py：指定旋转的中心点坐标(px,py)。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">    super(context, attrs);</div><div class="line">    mPaint = new Paint();</div><div class="line">    mPaint.setColor(Color.BLUE);</div><div class="line">    mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">    mRect = new RectF(300,50,500,150);</div><div class="line">&#125;</div><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    canvas.drawRect(mRect, mPaint);</div><div class="line">    mPaint.setColor(Color.RED);</div><div class="line">    mPaint.setStyle(Paint.Style.FILL);</div><div class="line">    canvas.rotate(30);</div><div class="line">    canvas.drawRect(mRect, mPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b8a43538eb565d32.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="旋转"></p><p>旋转原理：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-0763f5275574be3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="第一次合成：canvas.drawRect(mRect, mPaint)"></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-7605273e69198649.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="4-缩放-Scale"><a href="#4-缩放-Scale" class="headerlink" title="4. 缩放(Scale)"></a>4. 缩放(Scale)</h4><p>变更坐标轴密度。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void scale(float sx, float sy)</div></pre></td></tr></table></figure></p><p>参数:<br>float sx：水平方向伸缩的比例。小数表示缩小，整数表示放大。<br>float sy：垂直方向伸缩的比例。小数表示缩小，整数表示放大。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mPaintBlue  = generatePaint(Color.BLUE, Paint.Style.STROKE, 5);</div><div class="line">mPaintRed = generatePaint(Color.RED, Paint.Style.STROKE, 5);</div><div class="line">mRect = new RectF(100,50,500,150);</div><div class="line"></div><div class="line">canvas.drawRect(mRect, mPaintBlue);</div><div class="line">canvas.scale(0.5f, 1);</div><div class="line">canvas.drawRect(mRect, mPaintRed);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b57178b81b5327a3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>蓝框是原坐标轴密度图形,红框是 X 轴密度缩小到 0.5 倍之后显示的图形。</p><h4 id="5-扭曲-Skew"><a href="#5-扭曲-Skew" class="headerlink" title="5. 扭曲(Skew)"></a>5. 扭曲(Skew)</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void skew(float sx, float sy)</div></pre></td></tr></table></figure><p>参数：<br>float sx：将画布在 X 轴方向上倾斜相应的角度，sx 为倾斜角度的正切值。<br>float sy：将画布在 Y 轴方向上倾斜相应的角度，sy 为倾斜角度的正切值。</p><blockquote><p>注意：这里都是倾斜角度的正切值。比如，在 X 轴方向上倾斜 60°，tan60=1.732。</p></blockquote><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mRect = new RectF(100,100,300,300);</div><div class="line"></div><div class="line">canvas.drawRect(mRect, mPaintBlue);</div><div class="line">canvas.skew(0.5f, 0.5f);</div><div class="line">canvas.drawRect(mRect, mPaintRed);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-946974bf21dd5cb2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="6-裁剪画布-clip-系列函数"><a href="#6-裁剪画布-clip-系列函数" class="headerlink" title="6. 裁剪画布(clip 系列函数)"></a>6. 裁剪画布(clip 系列函数)</h4><p>裁剪画布是指利用 clip 系列函数，通过与 Rect、Path、Region 取交、并、差等集合运算来获得最新的画布形状。除调用 save()、restore()函数以外，这个操作是不可逆的，一旦 Canvas 被裁剪，就不能恢复。</p><blockquote><p>在使用裁剪画布系列函数时，需要禁用硬件加速功能。<br>setLayerType(LAYER_TYPE_SOFTWARE, null);</p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">boolean clipPath(Path path)</div><div class="line">boolean clipPath(Path path, Region.Op op)</div><div class="line"></div><div class="line">boolean clipRect(RectF rect)</div><div class="line">boolean clipRect(Rect rect)</div><div class="line">boolean clipRect(Rect rect, Region.Op op)</div><div class="line">boolean clipRect(RectF rect, Region.Op op)</div><div class="line">boolean clipRect(int left, int top, int right, int bottom)</div><div class="line">boolean clipRect(float left, float top, float right, float bottom)</div><div class="line">boolean clipRect(float left, float top, float right, float bottom, </div><div class="line">                 Region.Op op) </div><div class="line"></div><div class="line">boolean clipRegion(Region region)</div><div class="line">boolean clipRegion(Region region, Region.Op op)</div></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.RED);</div><div class="line">canvas.clipRect(new Rect(100, 100, 200, 200));</div><div class="line">canvas.drawColor(Color.GREEN);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-289bb5e9e5ff331a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>先把背景色涂成红色，显示在屏幕上，然后裁剪画布，最后将最新的画布涂成绿色。可见，绿色部分只有一小块，而不再是整个屏幕。</p><p><div id="jump2"></div></p><h3 id="1-5-2-画布的保存与恢复"><a href="#1-5-2-画布的保存与恢复" class="headerlink" title="1.5.2 画布的保存与恢复"></a>1.5.2 画布的保存与恢复</h3><h4 id="1-save-和-restore-函数"><a href="#1-save-和-restore-函数" class="headerlink" title="1. save()和 restore()函数"></a>1. save()和 restore()函数</h4><p>前面介绍的所有对画布的操作都是不可逆的，如果要对画布的大小和状态(旋转角度、扭曲等)进行实时保存和恢复，需要借助save()和 restore() 这两个函数。</p><p>save() ：每次调用，都会先保存当前画布的状态，然后将其放入特定的栈中。<br>restore() ：每次调用，都会把栈中顶层的画布状态取出来，并按照这个状态恢复当前的画布，然后在这个画布上作画。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(Color.RED);</div><div class="line">// 保存当前画布大小,即整屏 canvas.save();</div><div class="line">canvas.clipRect(new Rect(100, 100, 800, 800));</div><div class="line">canvas.drawColor(Color.GREEN);</div><div class="line">// 恢复整屏画布 canvas.restore();</div><div class="line">canvas.drawColor(Color.BLUE);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-55913d706eaf3164.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-restoreToCount-int-saveCount-函数"><a href="#2-restoreToCount-int-saveCount-函数" class="headerlink" title="2. restoreToCount(int saveCount)函数"></a>2. restoreToCount(int saveCount)函数</h4><p>我们可以多次调用 save()函数，但每次调用 restore()函数，只会将顶层的画布状态出栈。有时可能只需要用到特定的画布，这就需要多次 出栈。为了解决这个问题，Google 提供了另一个出栈函数 restoreToCount(int saveCount)。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public int save();</div></pre></td></tr></table></figure></p><p>在利用 save()函数保存画布时，会有一个 int 类型的返回值。该返回值是当前所保存的画布所在栈的索引。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void restoreToCount(int saveCount);</div></pre></td></tr></table></figure></p><p>而 restoreToCount()函数的用法就是一直出栈，直到指定索引的画布出栈为止，即将指定索引的画布作为当前画布。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line">    canvas.drawColor(Color.RED); </div><div class="line">    // 保存的画布大小为全屏幕大小</div><div class="line">    int c1 = canvas.save();</div><div class="line">    canvas.clipRect(new Rect(100, 100, 800, 800));</div><div class="line">    canvas.drawColor(Color.GREEN); </div><div class="line">    // 保存的画布大小为Rect(100, 100, 800, 800)</div><div class="line">    int c2 = canvas.save();</div><div class="line"></div><div class="line">    canvas.clipRect(new Rect(200, 200, 700, 700));</div><div class="line">    canvas.drawColor(Color.BLUE); </div><div class="line">    // 保存的画布大小为Rect(200, 200, 700, 700)</div><div class="line">    int c3 = canvas.save();</div><div class="line"></div><div class="line">    canvas.clipRect(new Rect(300, 300, 600, 600));</div><div class="line">    canvas.drawColor(Color.BLACK); </div><div class="line">    // 保存的画布大小为Rect(300, 300, 600, 600)</div><div class="line">    int c4 = canvas.save();</div><div class="line"></div><div class="line">    canvas.clipRect(new Rect(400, 400, 500, 500));</div><div class="line">    canvas.drawColor(Color.WHITE);</div><div class="line"></div><div class="line"></div><div class="line">    // 连续三次出栈，将最后一次出栈的画布状态</div><div class="line">    // 作为当前画布，并填充为黄色 </div><div class="line">    // canvas.restore();</div><div class="line">    // canvas.restore();</div><div class="line">    // canvas.restore();</div><div class="line">    canvas.restoreToCount(c2); </div><div class="line">    canvas.drawColor(Color.YELLOW);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><div id="jump3"></div></p><h3 id="1-5-3-示例一-圆形头像"><a href="#1-5-3-示例一-圆形头像" class="headerlink" title="1.5.3 示例一:圆形头像"></a>1.5.3 示例一:圆形头像</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-e72dba62b99c9ddf.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mPath;</div><div class="line">    private Bitmap mBmp;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        // 禁用硬件加速</div><div class="line">        // setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPath = new Path();</div><div class="line">        mBmp = BitmapFactory.decodeResource(getResources(), R.drawable.image);</div><div class="line">        int x = mBmp.getWidth() / 2;</div><div class="line">        int y = mBmp.getHeight() / 2;</div><div class="line">        int r = Math.min(x, y);</div><div class="line">        mPath.addCircle(x, y, r, Path.Direction.CCW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        canvas.save();</div><div class="line">        canvas.clipPath(mPath);</div><div class="line">        canvas.drawBitmap(mBmp, 0, 0, mPaint);</div><div class="line">        canvas.restore();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>前面说过，在使用 clip 系列函数时，要禁用硬件加速功能。 setLayerType(LAYER_TYPE_SOFTWARE,null);<br>然而在手机型号 Pixel XL 上测试，是否禁用硬件加速功能并不影响 clip 函数。</p></blockquote><p><div id="jump4"></div></p><h3 id="1-5-4-示例二：裁剪动画"><a href="#1-5-4-示例二：裁剪动画" class="headerlink" title="1.5.4 示例二：裁剪动画"></a>1.5.4 示例二：裁剪动画</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-31634c0bd9bd9969.gif?imageMogr2/auto-orient/strip" alt=""></p><h4 id="1-原理"><a href="#1-原理" class="headerlink" title="1. 原理"></a>1. 原理</h4><p>动画原理就是每次将裁剪区域变大，在裁剪区域内的图像就会显示出来，而裁剪区域之外的图像不会显示。而关键问题在于如何计算裁剪区域。</p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-a07fbe9ca6c6be10.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>这里很容易给大家造成错觉，以为黑色条是裁剪区域。其实不然，裁剪画布，在裁剪画布内的区域都是显示出来的，所以显示出来的区域才是裁剪区域。从图示中可以看出，有两个裁剪区域。</p><p>裁剪区域一：从左向右，逐渐变大。假设宽度是 clipWidth，高度是 CLIP_HEIGHT，那么裁剪区域一所对应的 Rect 对象如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rect(0, 0, clipWidth, CLIP_HEIGHT);</div></pre></td></tr></table></figure></p><p>裁剪区域二：从右向左，同样逐渐变大，它的宽度、高度都与裁剪区域一相同。但它是从右向左变化的，假设图片的宽度是 width，那么裁剪区域二所对应的 Rect 对象如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Rect(width - clipWidth, CLIP_HEIGHT, width, 2* CLIP_HEIGHT);</div></pre></td></tr></table></figure></p><h4 id="2-示例代码"><a href="#2-示例代码" class="headerlink" title="2. 示例代码"></a>2. 示例代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Bitmap mBitmap;</div><div class="line">    private int clipWidth = 0;</div><div class="line">    private int width;</div><div class="line">    private int height;</div><div class="line">    private static final int CLIP_HEIGHT = 30;</div><div class="line">    private Path mPath;</div><div class="line">    private RectF mRect;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        setLayerType(LAYER_TYPE_SOFTWARE, null);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mBitmap = BitmapFactory.decodeResource(getResources(), R.drawable.bg);</div><div class="line">        width = mBitmap.getWidth();</div><div class="line">        height = mBitmap.getHeight();</div><div class="line">        mPath = new Path();</div><div class="line">        mRect = new RectF();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        int i = 0;</div><div class="line">        while (i * CLIP_HEIGHT &lt;= height) &#123;</div><div class="line">            if (i % 2 == 0) &#123;</div><div class="line">                mRect.set(0, i * CLIP_HEIGHT, clipWidth, (i+1) * CLIP_HEIGHT);</div><div class="line">            &#125; else &#123;</div><div class="line">                mRect.set(width - clipWidth, i * CLIP_HEIGHT, width, (i+1) * CLIP_HEIGHT);</div><div class="line">            &#125;</div><div class="line">            // 替换 Region.union 方法</div><div class="line">            mPath.addRect(mRect, Path.Direction.CCW);</div><div class="line">            i++;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // 替换 canvas.clipRegion 方法</div><div class="line">        canvas.clipPath(mPath);</div><div class="line">        canvas.drawBitmap(mBitmap, 0, 0, mPaint);</div><div class="line">        if (clipWidth &gt; width) &#123;</div><div class="line">            return;</div><div class="line">        &#125;</div><div class="line">        clipWidth += 5;</div><div class="line">        invalidate();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.4 精通自定义 View 之绘图基础——Region</title>
      <link href="/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/"/>
      <url>/2019/07/01/Custom%20View/01.4%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94Region/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="1-4-1-构造Region"><a href="#1-4-1-构造Region" class="headerlink" title="1.4.1 构造Region"></a>1.4.1 构造Region</h3><h4 id="1-直接构造"><a href="#1-直接构造" class="headerlink" title="1. 直接构造"></a>1. 直接构造</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 复制一个 Region 的范围，不常用</div><div class="line">public Region(Region region) </div><div class="line">// 创建一个矩形区域</div><div class="line">public Region(Rect r) </div><div class="line">// 创建一个矩形区域</div><div class="line">public Region(int left, int top, int right, int bottom)</div></pre></td></tr></table></figure><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Region region = new Region(new Rect(50,50,200,100));</div><div class="line">drawRegion(canvas,region,paint);</div><div class="line"></div><div class="line">private void drawRegion (Canvas canvas, Region rgn, Paint paint) &#123;</div><div class="line">    RegionIterator iter = new RegionIterator(rgn);</div><div class="line">    Rect r = new Rect();</div><div class="line">    while (iter.next(r)) &#123;</div><div class="line">        canvas.drawRect(r, paint);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-101edea89e88a9dc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>Canvas 并没有提供针对 Region 的绘图方法，这就说明 Region 的本意并不是用来绘图的。对于上面构造的矩形填充，我们完全可以使用 Rect 来代替。</p><h4 id="2-间接构造"><a href="#2-间接构造" class="headerlink" title="2. 间接构造"></a>2. 间接构造</h4><p>间接构造主要是通过 public Region()的空构造函数与 set 系列函数相结合来实现的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 空构造函数</div><div class="line">public Region()</div><div class="line"></div><div class="line">// set 系列</div><div class="line">public void setEmpty() // 置空</div><div class="line">public boolean set(Region region)</div><div class="line">public boolean set(Rect r)</div><div class="line">public boolean set(int left, int top, int right, int bottom) </div><div class="line">public boolean setPath(Path path, Region clip)</div></pre></td></tr></table></figure></p><blockquote><p>无论调用 set 系列函数的 Region 是不是有区域值，当调用 set 系列函数后，原来的区域值就会被替换成 set 系列函数里的区域值。</p></blockquote><p>其他函数不表，重点介绍 setPath() 函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean setPath(Path path, Region clip)</div></pre></td></tr></table></figure></p><p>参数：<br>Path path：用来构造区域的路径。<br>Region clip：与前面的 path 所构成的路径取交集，并将该交集设置为最终的区域。</p><p>由于路径有很多种构造方法，而且可以轻易构造出非矩形的路径，因而摆脱了前面的构造函数只能构造矩形区域的限制。但这里有一个问题，即需要指定另一个区域来取交集。当然，如果想显示路径构造的区域，那么 Region clip 参数可以传入一个比 Path 范围大得多的区 域，取完交集之后，当然就是 Path path 参数所对应的区域了。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">public class BaseView extends View &#123;</div><div class="line">    private Paint paint;</div><div class="line">    private Region region;</div><div class="line"></div><div class="line">    public BaseView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        paint = new Paint();</div><div class="line">        paint.setColor(Color.RED);</div><div class="line">        paint.setStyle(Paint.Style.FILL);</div><div class="line">        // 构造一条椭圆路径</div><div class="line">        Path ovalPath = new Path();</div><div class="line">        RectF rectF = new RectF(50, 50, 200, 500);</div><div class="line">        ovalPath.addOval(rectF, Path.Direction.CCW);</div><div class="line">        // 在 setPath 中传入一个比椭圆区域小的矩形区域，让其取交集</div><div class="line">        region = new Region();</div><div class="line">        region.setPath(ovalPath, new Region(50, 50, 200, 200));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        drawRegion(canvas, region, paint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawRegion(Canvas canvas, Region region, Paint paint) &#123;</div><div class="line">        RegionIterator iterator = new RegionIterator(region);</div><div class="line">        Rect rect = new Rect();</div><div class="line"></div><div class="line">        while (iterator.next(rect)) &#123;</div><div class="line">            canvas.drawRect(rect, paint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-660aa4a3d927e4e7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>左侧分别画出了所构造的椭圆和矩形，二者相交之后，所画出的 Region 对象是如右侧图 像所示的椭圆上部分。</p><p><div id="jump2"></div></p><h3 id="1-4-2-枚举区域——RegionIterator类"><a href="#1-4-2-枚举区域——RegionIterator类" class="headerlink" title="1.4.2 枚举区域——RegionIterator类"></a>1.4.2 枚举区域——RegionIterator类</h3><p>对于特定的区域，可以使用多个矩形来表示其大致形状。事实上，如果矩形足够小，一定数量的矩形就能够精确表示区域的形状。也就是说，一定数量的矩形所合成的形状也可以代表区域的形状。RegionIterator 类就实现了获取组成区域的矩形集的功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 构造函数：根据区域构建对应的矩形集。</div><div class="line">RegionIterator(Region region)</div><div class="line">// 获取下一个矩形,将结果保存在参数 Rect r 中。</div><div class="line">boolean next(Rect r)</div></pre></td></tr></table></figure></p><p>前面提到，由于在 Canvas 中没有直接绘制 Region 的函数，想要绘制一个区域，就只能通过 RegionIterator 类构造矩形集来逼近显示区域，所以 drawRegion()函数的具体实现如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private void drawRegion (Canvas canvas, Region rgn, Paint paint) &#123;</div><div class="line">    RegionIterator iter = new RegionIterator(rgn);</div><div class="line">    Rect r = new Rect();</div><div class="line">    while (iter.next(r)) &#123;</div><div class="line">        canvas.drawRect(r, paint);</div><div class="line">    &#125; </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先根据区域构造一个矩形集，然后利用next(Rect r)函数来逐个获取所有矩形并绘制出来，最终得到的就是整个区域。如果我们想画一个椭圆区域，并且把画笔样式从 FILL 改为 STROKE，则效果更清楚。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">Paint paint = new Paint();</div><div class="line">paint.setColor(Color.RED);</div><div class="line">paint.setStyle(Paint.Style.STROKE);</div><div class="line">// 构造一条椭圆路径</div><div class="line">Path ovalPath = new Path();</div><div class="line">RectF rect = new RectF(50, 50, 200, 500); </div><div class="line">ovalPath.addOval(rect, Path.Direction.CCW);</div><div class="line">// 构造椭圆区域</div><div class="line">Region rgn = new Region();</div><div class="line">rgn.setPath(ovalPath, new Region(50, 50, 200, 500)); </div><div class="line">drawRegion(canvas,rgn,paint);</div></pre></td></tr></table></figure></p><p>在代码中，同样先构造了一条椭圆路径，然后在形成 Region 时传入一个与构造的椭圆区域相同大小的矩形，所以取交集之后的结果就是椭圆路径所对应的区域。效果如下图所示：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-3701ef81c0abbaab.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>从效果图中可以明显看出，在绘制 Region 对象时，其实就是先将其转换成矩形集，然后利用画笔将每个矩形画出来而已。</p><p><div id="jump3"></div></p><h3 id="1-4-3-区域相交"><a href="#1-4-3-区域相交" class="headerlink" title="1.4.3 区域相交"></a>1.4.3 区域相交</h3><p>Region 不是用来绘图的，而是在区域的相交操作中。</p><h4 id="1-union-函数"><a href="#1-union-函数" class="headerlink" title="1. union()函数"></a>1. union()函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean union(Rect r)</div></pre></td></tr></table></figure><p>该函数用于与指定矩形取并集，即将 Rect 所指定的矩形加入当前区域中。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">paint = new Paint();</div><div class="line">paint.setColor(Color.RED);</div><div class="line">paint.setStyle(Paint.Style.FILL);</div><div class="line">region = new Region(20, 20, 200, 100);</div><div class="line">region.union(new Rect(20, 20, 50, 300));</div><div class="line"></div><div class="line">drawRegion(canvas, region, paint);</div></pre></td></tr></table></figure></p><p>将横向、竖向两个矩形区域合并，效果图如下：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-b3ceac258f472065.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-区域操作"><a href="#2-区域操作" class="headerlink" title="2. 区域操作"></a>2. 区域操作</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">boolean op(Rect rect, Op op)</div><div class="line">boolean op(int left, int top, int right, int bottom, Op op)</div><div class="line">boolean op(Region, Op)</div></pre></td></tr></table></figure><p>操作结果赋给当前的 Region 对象。如果计算成功，返回 true；否则返回 false。</p><p>Op 参数值及含义：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public enum Op &#123;</div><div class="line">    DIFFERENCE(0), // 最终区域为 region1 与 region2 不同的区域</div><div class="line">    INTERSECT(1), // 最终区域为 region1 与 region2 相交的区域</div><div class="line">    UNION(2), // 最终区域为 region1 与 region2 组合在一起的区域</div><div class="line">    XOR(3), // 最终区域为 region1 与 region2 相交之外的区域</div><div class="line">    REVERSE_DIFFERENCE(4), // 最终区域为 region2 与 region1 不同的区域</div><div class="line">    REPLACE(5); // 最终区域为 region2 的区域</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div></pre></td><td class="code"><pre><div class="line">public class BaseView extends View &#123;</div><div class="line">    private Paint paint, paintFill;</div><div class="line">    private Region region1,region2,region3,region4,region5,region6,region7,region8,region9,region10,region11,region12;</div><div class="line">    private Rect rect1,rect2,rect3,rect4,rect5,rect6,rect7,rect8,rect9,rect10,rect11,rect12;</div><div class="line"></div><div class="line">    public BaseView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        paint = generatePaint(Color.RED, Paint.Style.STROKE, 2);</div><div class="line">        paintFill = generatePaint(Color.GREEN, Paint.Style.FILL, 0);</div><div class="line"></div><div class="line">        rect1 = new Rect(100, 140, 400, 240);</div><div class="line">        rect2 = new Rect(200, 40, 300, 340);</div><div class="line">        rect3 = new Rect(500, 140, 800, 240);</div><div class="line">        rect4 = new Rect(600, 40, 700, 340);</div><div class="line">        rect5 = new Rect(900, 140, 1200, 240);</div><div class="line">        rect6 = new Rect(1000, 40, 1100, 340);</div><div class="line"></div><div class="line">        rect7 = new Rect(100, 540, 400, 640);</div><div class="line">        rect8 = new Rect(200, 440, 300, 740);</div><div class="line">        rect9 = new Rect(500, 540, 800, 640);</div><div class="line">        rect10 = new Rect(600, 440, 700, 740);</div><div class="line">        rect11 = new Rect(900, 540, 1200, 640);</div><div class="line">        rect12 = new Rect(1000, 440, 1100, 740);</div><div class="line"></div><div class="line">        region1 = new Region(rect1);</div><div class="line">        region2 = new Region(rect2);</div><div class="line">        region1.op(region2, Region.Op.DIFFERENCE);</div><div class="line">        region3 = new Region(rect3);</div><div class="line">        region4 = new Region(rect4);</div><div class="line">        region3.op(region4, Region.Op.INTERSECT);</div><div class="line">        region5 = new Region(rect5);</div><div class="line">        region6 = new Region(rect6);</div><div class="line">        region5.op(region6, Region.Op.UNION);</div><div class="line">        region7 = new Region(rect7);</div><div class="line">        region8 = new Region(rect8);</div><div class="line">        region7.op(region8, Region.Op.XOR);</div><div class="line">        region9 = new Region(rect9);</div><div class="line">        region10 = new Region(rect10);</div><div class="line">        region9.op(region10, Region.Op.REVERSE_DIFFERENCE);</div><div class="line">        region11 = new Region(rect11);</div><div class="line">        region12 = new Region(rect12);</div><div class="line">        region11.op(region12, Region.Op.REPLACE);</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        canvas.drawRect(rect1, paint);</div><div class="line">        canvas.drawRect(rect2, paint);</div><div class="line">        drawRegion(canvas, region1, paintFill);</div><div class="line">        canvas.drawRect(rect3, paint);</div><div class="line">        canvas.drawRect(rect4, paint);</div><div class="line">        drawRegion(canvas, region3, paintFill);</div><div class="line">        canvas.drawRect(rect5, paint);</div><div class="line">        canvas.drawRect(rect6, paint);</div><div class="line">        drawRegion(canvas, region5, paintFill);</div><div class="line">        canvas.drawRect(rect7, paint);</div><div class="line">        canvas.drawRect(rect8, paint);</div><div class="line">        drawRegion(canvas, region7, paintFill);</div><div class="line">        canvas.drawRect(rect9, paint);</div><div class="line">        canvas.drawRect(rect10, paint);</div><div class="line">        drawRegion(canvas, region9, paintFill);</div><div class="line">        canvas.drawRect(rect11, paint);</div><div class="line">        canvas.drawRect(rect12, paint);</div><div class="line">        drawRegion(canvas, region11, paintFill);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawRegion(Canvas canvas, Region region, Paint paint) &#123;</div><div class="line">        RegionIterator iterator = new RegionIterator(region);</div><div class="line">        Rect rect = new Rect();</div><div class="line"></div><div class="line">        while (iterator.next(rect)) &#123;</div><div class="line">            canvas.drawRect(rect, paint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Paint generatePaint(int color, Paint.Style style, int width) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setStrokeWidth(width);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-fced149dfa37297a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依次为：DIFFERENCE、INTERSECT、UNION、XOR、REVERSE_DIFFERENCE、REPLACE"></p><h4 id="3-op-的重载"><a href="#3-op-的重载" class="headerlink" title="3. op 的重载"></a>3. op 的重载</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">boolean op(Rect rect, Region region, Op op)</div><div class="line">boolean op(Region region1, Region region2, Region.Op op)</div></pre></td></tr></table></figure><p>这两个函数允许我们传入两个 Region 对象进行区域操作，并将操作结果赋给当前的 Region 对象。同样，当操作成功时，返回 true；否则返回 false。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Region region1 = new Region(100,100,400,200);</div><div class="line">Region region2 = new Region(200,0,300,300);</div><div class="line">Region region = new Region();</div><div class="line">region.op(region1, region2, Region.Op.INTERSECT);</div></pre></td></tr></table></figure></p><p>在这里，将 region1、region2 相交的结果赋给 Region 对象。</p><p><div id="jump4"></div></p><h3 id="1-4-4-其他函数"><a href="#1-4-4-其他函数" class="headerlink" title="1.4.4 其他函数"></a>1.4.4 其他函数</h3><h4 id="1-几个判断方法"><a href="#1-几个判断方法" class="headerlink" title="1. 几个判断方法"></a>1. 几个判断方法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 判断该区域是否为空</div><div class="line">public boolean isEmpty();</div><div class="line">// 判断该区域是否是一个矩阵</div><div class="line">public boolean isRect();</div><div class="line">// 判断该区域是否是多个矩阵的组合</div><div class="line">public boolean isComplex();</div></pre></td></tr></table></figure><h4 id="2-getBound-系列函数"><a href="#2-getBound-系列函数" class="headerlink" title="2. getBound 系列函数"></a>2. getBound 系列函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 返回能够包裹当前路径的最小矩形</div><div class="line">public Rect getBounds()</div><div class="line">public boolean getBounds(Rect r)</div><div class="line">// 返回当前矩形所对应的 Path 对象</div><div class="line">public Path getBoundaryPath()</div><div class="line">public boolean getBoundaryPath(Path path)</div></pre></td></tr></table></figure><h4 id="3-是否包含"><a href="#3-是否包含" class="headerlink" title="3. 是否包含"></a>3. 是否包含</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 判断该区域是否包含某个点</div><div class="line">public boolean contains(int x, int y);</div><div class="line">// 判断该区域是否包含某个矩形</div><div class="line">public boolean quickContains(Rect r)</div><div class="line">public boolean quickContains(int left, int top, int right,int bottom)</div></pre></td></tr></table></figure><h4 id="4-是否相交"><a href="#4-是否相交" class="headerlink" title="4. 是否相交"></a>4. 是否相交</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 判断该区域是否没有和指定矩形相交</div><div class="line">public boolean quickReject(Rect r)</div><div class="line">public boolean quickReject(int left, int top, int right, int bottom);</div><div class="line">// 判断该区域是否没有和指定区域相交</div><div class="line">public boolean quickReject(Region rgn)</div></pre></td></tr></table></figure><h4 id="5-平移变换"><a href="#5-平移变换" class="headerlink" title="5. 平移变换"></a>5. 平移变换</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 将 Region 对象向 X 轴平移 dx 距离，向 Y 轴平移 dy 距离，</div><div class="line">// 并将结果赋给当前的 Region 对象。X 轴向右是正方向，Y 轴向下是正方向。</div><div class="line">public void translate(int dx, int dy)</div><div class="line">// 将 Region 对象向 X 轴平移 dx 距离，向 Y 轴平移 dy 距离。</div><div class="line">// 与上一个函数不同的是，该函数将结果赋给 dst 对象，</div><div class="line">// 而当前 Region 对象的值保持不变。</div><div class="line">public void translate(int dx, int dy, Region dst)</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.3 精通自定义 View 之绘图基础——文字</title>
      <link href="/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/"/>
      <url>/2019/07/01/Custom%20View/01.3%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E6%96%87%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="1-3-1-Paint设置"><a href="#1-3-1-Paint设置" class="headerlink" title="1.3.1 Paint设置"></a>1.3.1 Paint设置</h3><p>Paint 与文字相关的设置方法有如下几个：</p><ul><li>普通设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// 设置画笔宽度</div><div class="line">paint.setStrokeWidth (5); </div><div class="line">// 指定是否使用抗锯齿功能。如果使用,则会使绘图速度变慢</div><div class="line">paint.setAntiAlias(true);</div><div class="line">// 绘图样式,对于文字和几何图形都有效</div><div class="line">paint.setStyle(Paint.Style.FILL);</div><div class="line">// 设置文字对齐方式： Align.CENTER、Align.LEFT、Align.RIGHT</div><div class="line">paint.setTextAlign(Align.CENTER);</div><div class="line">// 设置文字大小</div><div class="line">paint.setTextSize(12);</div></pre></td></tr></table></figure><ul><li>样式设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 设置是否为粗体文字</div><div class="line">paint.setFakeBoldText(true); </div><div class="line">// 设置下画线</div><div class="line">paint.setUnderlineText(true); </div><div class="line">// 设置字体水平倾斜度,普通斜体字设为-0.25,右为负左为正</div><div class="line">paint.setTextSkewX((float) -0.25); </div><div class="line">// 设置带有删除线效果</div><div class="line">paint.setStrikeThruText(true);</div></pre></td></tr></table></figure><ul><li>其他设置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 只会将水平方向拉伸,高度不会变</div><div class="line">paint.setTextScaleX(2);</div></pre></td></tr></table></figure><h4 id="1-填充样式的区别"><a href="#1-填充样式的区别" class="headerlink" title="1. 填充样式的区别"></a>1. 填充样式的区别</h4><p>paint.setStyle()函数对文字和几何图形都有效。下面就来看看不同的填充样式对文字的影响：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStrokeWidth(5);</div><div class="line">mPaint.setAntiAlias(true);</div><div class="line">mPaint.setTextSize(100);</div><div class="line"></div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">canvas.drawText(&quot;先小涛 STROKE&quot;, 100, 200, mPaint);</div><div class="line">mPaint.setStyle(Paint.Style.FILL);</div><div class="line">canvas.drawText(&quot;先小涛 FILL&quot;, 100, 320, mPaint);</div><div class="line">mPaint.setStyle(Paint.Style.FILL_AND_STROKE);</div><div class="line">canvas.drawText(&quot;先小涛 FILL_AND_STROKE&quot;, 100, 440, mPaint);</div></pre></td></tr></table></figure></p><p>效果图如下：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-16b11cc8b1731a0d.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体填充样式"></p><h4 id="2-setTextAlign-函数"><a href="#2-setTextAlign-函数" class="headerlink" title="2. setTextAlign()函数"></a>2. setTextAlign()函数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void setTextAlign(Align align)</div></pre></td></tr></table></figure><p>用于设置所要绘制的字符串与起始点的相对位置。参数 Align align 的取值如下：</p><ul><li>Align.LEFT：居左绘制，即通过 drawText()函数指定的起始点在最左侧，文字从起始点位置开始绘制。</li><li>Align.CENTER：居中绘制，即通过 drawText()函数指定的起始点在文字中间位置。</li><li>Align.RIGHT：居右绘制，即通过 drawText()函数指定的起始点在文字右侧位置。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mLinePaint = new Paint();</div><div class="line">mLinePaint.setColor(Color.BLUE);</div><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStrokeWidth(5);</div><div class="line">mPaint.setAntiAlias(true);</div><div class="line">mPaint.setTextSize(80);</div><div class="line"></div><div class="line">canvas.drawCircle(400, 100, 5, mLinePaint);</div><div class="line">canvas.drawLine(400, 100, 400, 300, mLinePaint);</div><div class="line">mPaint.setTextAlign(Paint.Align.LEFT);</div><div class="line">canvas.drawText(&quot;先小涛&quot;, 400, 100, mPaint);</div><div class="line">mPaint.setTextAlign(Paint.Align.CENTER);</div><div class="line">canvas.drawText(&quot;先小涛&quot;, 400, 200, mPaint);</div><div class="line">mPaint.setTextAlign(Paint.Align.RIGHT);</div><div class="line">canvas.drawText(&quot;先小涛&quot;, 400, 300, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ff624351d68401c5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="setTextAlign 效果图"></p><p>从效果图中可以看出，当居左对齐(Align.LEFT)时，整个字符串都在起始点(400,100) 的右侧，也就是说,通过 drawText()函数指定的起始点(400,100)是居左的。同样，当居右对齐(Align.RIGHT)时，起始点也是居右的，也就是说，所有文字都在起始点(400,100)的左侧。</p><h4 id="3-设置字体样式"><a href="#3-设置字体样式" class="headerlink" title="3. 设置字体样式"></a>3. 设置字体样式</h4><p>1）常规设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// 设置是否粗体。当取 true 时，表示是粗体。</div><div class="line">void setFakeBoldText(boolean fakeBoldText)</div><div class="line">// 是否显示文字下画线。当取 true 时，显示下画线。</div><div class="line">void setUnderlineText(boolean underlineText)</div><div class="line">// 是否显示中间删除线。当取 true 时，显示中间删除线。</div><div class="line">void setStrikeThruText(boolean strikeThruText)</div></pre></td></tr></table></figure></p><p>示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(&quot;先小涛 DEFAULT&quot;, 100, 200, mPaint);</div><div class="line">mPaint.setFakeBoldText(true);</div><div class="line">mPaint.setUnderlineText(true);</div><div class="line">mPaint.setStrikeThruText(true);</div><div class="line">canvas.drawText(&quot;先小涛 SETTING&quot;, 100, 300, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-16487debfb27c72b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体设置效果图"></p><p>2）字体倾斜度设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setTextSkewX(float skewX)</div></pre></td></tr></table></figure></p><p>该函数用于设置字体倾斜度。参数 float skewX 的默认值是 0，取负值时文字向右倾斜，取正值时文字向左倾斜，Word 文档中倾斜字体的倾斜度是 -0.25f。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setTextSize(80);</div><div class="line"></div><div class="line">// 正常样式</div><div class="line">canvas.drawText(mName, 100, 200, mPaint);</div><div class="line">// 向右倾斜</div><div class="line">mPaint.setTextSkewX(-0.25f);</div><div class="line">canvas.drawText(mName, 100, 300, mPaint);</div><div class="line">// 向左倾斜</div><div class="line">mPaint.setTextSkewX(0.25f);</div><div class="line">canvas.drawText(mName, 100, 400, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-5092c1c4b245d5fc.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体倾斜度设置：正常、向右、向左"></p><h4 id="4-水平拉伸"><a href="#4-水平拉伸" class="headerlink" title="4. 水平拉伸"></a>4. 水平拉伸</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setTextScaleX(float scaleX)</div></pre></td></tr></table></figure><p>该函数用于在水平方向拉伸文字。参数 float scaleX 表示拉伸倍数，当取值为 1 时，表示不拉伸。默认为不拉伸。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 正常样式</div><div class="line">canvas.drawText(mName, 100, 200, mPaint);</div><div class="line">// 拉伸两倍</div><div class="line">mPaint.setTextScaleX(2f);</div><div class="line">canvas.drawText(mName, 100, 300, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-f24aeccf2715d7a5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="字体水平拉伸"></p><p><div id="jump2"></div></p><h3 id="1-3-2-Canvas绘制文本"><a href="#1-3-2-Canvas绘制文本" class="headerlink" title="1.3.2 Canvas绘制文本"></a>1.3.2 Canvas绘制文本</h3><h4 id="1-普通绘制"><a href="#1-普通绘制" class="headerlink" title="1. 普通绘制"></a>1. 普通绘制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// 该函数可以指定起始点(x, y)来绘制文字</div><div class="line">void drawText(String text, float x, float y, Paint paint)</div><div class="line">// 通过指定字符串中字符的起始和终止位置截取字符串的一部分绘制</div><div class="line">void drawText(String text, int start, int end, float x, float y, Paint paint)</div><div class="line">void drawText(char[] text, int index, int count, float x, float y, Paint paint)</div><div class="line">void drawText(CharSequence text, int start, </div><div class="line">              int end, float x, float y, Paint paint)</div></pre></td></tr></table></figure><p>参数：<br>int start：表示起始绘制字符所在字符串中的索引。<br>int end：表示结束绘制字符所在字符串中的索引。<br>int index：指定起始绘制字符的位置。<br>int count：指定从起始绘制字符开始绘制几个字符。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">canvas.drawText(&quot;先小涛后大浪&quot;, 1, 4, 100, 200, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b6c9d809d7d02707.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-逐个指定文字位置"><a href="#2-逐个指定文字位置" class="headerlink" title="2. 逐个指定文字位置"></a>2. 逐个指定文字位置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void drawPosText(String text, float[] pos, Paint paint)</div><div class="line">void drawPosText(char[] text, int index, int count, float[] pos, Paint paint)</div></pre></td></tr></table></figure><p>参数：</p><ul><li>char[] text/String text：要绘制的字符串。</li><li>int index：第一个要绘制的文字的索引。</li><li>int count：要绘制的文字的个数，用来计算最后一个文字的位置，从第一个绘制的文字开始算起。</li><li>float[] pos：要绘制的每个文字的具体位置，同样两两一组，如{x1,y1,x2,y2,x3,y3,…}。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private String mName = &quot;先小涛后大浪&quot;;</div><div class="line">    private float[] pos = &#123;80, 180, 80, 280, 80, 380,</div><div class="line">                           200, 180, 200, 280, 200, 380&#125;;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setTextSize(80);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        canvas.drawPosText(mName, pos, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-1b7f44f3ba8837d3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="3-沿路径绘制"><a href="#3-沿路径绘制" class="headerlink" title="3. 沿路径绘制"></a>3. 沿路径绘制</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">void drawTextOnPath (String text, Path path, float hOffset, </div><div class="line">                     float vOffset, Paint paint)</div><div class="line">void drawTextOnPath (char[] text, int index, int count, Path path, </div><div class="line">                     float hOffset, float vOffset, Paint paint)</div></pre></td></tr></table></figure><ul><li>float hOffset：与路径起始点的水平偏移量。 </li><li>float vOffset：与路径中心的垂直偏移量。</li></ul><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setTextSize(50);</div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mName = &quot;先小涛后大浪&quot;;</div><div class="line">mPath1 = new Path();</div><div class="line">mPath1.addCircle(220, 300, 150, Path.Direction.CCW);</div><div class="line">mPath2 = new Path();</div><div class="line">mPath2.addCircle(600, 300, 150, Path.Direction.CCW);</div><div class="line"></div><div class="line">// 辅助中线</div><div class="line">canvas.drawLine(70, 300, 750, 300, mPaint);</div><div class="line">canvas.drawPath(mPath1, mPaint);</div><div class="line">canvas.drawPath(mPath2, mPaint);</div><div class="line">mPaint.setColor(Color.BLUE);</div><div class="line">canvas.drawTextOnPath(mName, mPath1, 0, 0, mPaint);</div><div class="line">canvas.drawTextOnPath(mName, mPath2, 80, 50, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-3b672e6d1a2b4c3e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump3"></div></p><h3 id="1-3-3-设置字体样式"><a href="#1-3-3-设置字体样式" class="headerlink" title="1.3.3 设置字体样式"></a>1.3.3 设置字体样式</h3><p>在 Paint 中有一个函数是专门用来设置字体样式的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Typeface setTypeface(Typeface typeface)</div></pre></td></tr></table></figure></p><p>Typeface 是专门用来设置字体样式的类，通过 paint.setTypeface()函数来指定即将绘制的文字的字体样式。可以指定系统中的字体样式，也可以在自定义的样式文件中获取。在构建 Typeface 类时，可以指定所用样式的正常体、斜体、粗体等。如果在指定样式中没有相关文 字的样式，就会用系统默认的样式来显示，一般默认是宋体。</p><h4 id="1-使用系统中的字体样式"><a href="#1-使用系统中的字体样式" class="headerlink" title="1. 使用系统中的字体样式"></a>1. 使用系统中的字体样式</h4><p>1）使用 Android 自带的字体样式<br>在 Typeface 类中保存着三种自带的字体样式：Typeface.SANS_SERIF、Typeface.MONOSPACE 和 Typeface.SERIF。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">// 衬线字体</div><div class="line">mPaint.setTypeface(Typeface.SERIF);</div><div class="line">canvas.drawText(mName, 100, 100, mPaint);</div><div class="line">// 设置等宽字体</div><div class="line">mPaint.setTypeface(Typeface.MONOSPACE);</div><div class="line">canvas.drawText(mName, 100, 170, mPaint);</div><div class="line">// 无衬线字体</div><div class="line">mPaint.setTypeface(Typeface.SANS_SERIF);</div><div class="line">canvas.drawText(mName, 100, 240, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-bcad462033b71603.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="系统字体样式"><br>由于这三种字体样式对中文的支持不是很好。所以，当遇到不支持的文字时，会使用系统默认的样式来写。对中国用户而言，系统默认的字体一般是 DroidSansFallback，所以用这三种样式的文字写中文时是看不到差别的，我们一般不会使用这三种字体样式。</p><p>2）defaultFromStyle()函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Typeface defaultFromStyle(int style)</div></pre></td></tr></table></figure></p><p>该函数会根据字体样式获取对应的默认字体。参数 int style 的取值如下：</p><ul><li>Typeface.NORMAL：正常字体。</li><li>Typeface.BOLD：粗体。</li><li>Typeface.ITALIC：斜体。</li><li>Typeface.BOLD_ITALIC：粗斜体。</li></ul><p>如果系统默认的字体是宋体，那么当指定defaultFromStyle(Typeface.BOLD_ITALIC)时，获取的将是粗斜体的宋体样式。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setTextSize(50);</div><div class="line">mPaint.setAntiAlias(true);</div><div class="line">mName = &quot;先小涛 xian@163.com&quot;;</div><div class="line">Typeface typeface = Typeface.defaultFromStyle(Typeface.BOLD_ITALIC);</div><div class="line">mPaint.setTypeface(typeface);</div><div class="line"></div><div class="line">canvas.drawText(mName, 100, 100, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-b07302336ad691c3.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p>3）create(String familyName, int style)函数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Typeface create(String familyName, int style)</div></pre></td></tr></table></figure></p><p>该函数直接通过指定字体名来加载系统中自带的字体样式。如果字体样式不存在，则会用系统样式替代并返回。</p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String familyName = &quot;宋体&quot;;</div><div class="line">Typeface font = Typeface.create(familyName, Typeface.NORMAL);</div><div class="line">mPaint.setTypeface(font);</div><div class="line"></div><div class="line">canvas.drawText(mName, 100, 100, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-2dc4d2f717e87dc7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><h4 id="2-自定义字体样式"><a href="#2-自定义字体样式" class="headerlink" title="2. 自定义字体样式"></a>2. 自定义字体样式</h4><p>一般而言，我们不会指定系统自带的字体样式。因为除 Android 自带的三种字体样式以外，其他字体样式并不一定在每款手机上都有预装。所以，我们一般会选择加载自定义的字体文件来绘制文字，这样才不至于在每款手机上的表现不一样。</p><p>如果要自定义字体样式，就需要从外部字体文件中加载我们所需的字形，这时所使用的 Typeface 构造函数有如下三个:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Typeface createFromAsset(AssetManager mgr, String path)</div><div class="line">Typeface createFromFile(String path)</div><div class="line">Typeface createFromFile(File path)</div></pre></td></tr></table></figure></p><p>示例：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">AssetManager manager = context.getAssets();</div><div class="line">// 加载字体文件：assets/fonts/xian.ttf</div><div class="line">Typeface typeface = Typeface.createFromAsset(manager, &quot;fonts/xian.ttf&quot;);</div><div class="line">mPaint.setTypeface(typeface);</div><div class="line"></div><div class="line">canvas.drawText(mName, 100, 200, mPaint);</div></pre></td></tr></table></figure></p><p><img src="https://upload-images.jianshu.io/upload_images/14186083-ee96a269fc0c1fe5.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><blockquote><p>加载 res/font/xian.ttf 字体文件方式：<br>Typeface typeface = ResourcesCompat.getFont(context, R.font.xian);</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.2 精通自定义 View 之绘图基础——路径</title>
      <link href="/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/"/>
      <url>/2019/07/01/Custom%20View/01.2%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E8%B7%AF%E5%BE%84/</url>
      
        <content type="html"><![CDATA[<meta name="referrer" content="no-referrer"><p><div id="jump1"></div></p><h3 id="1-2-1-概述"><a href="#1-2-1-概述" class="headerlink" title="1.2.1 概述"></a>1.2.1 概述</h3><p>画笔所画出来的一段不间断的曲线就是路径。在 Android 中，Path 类就代表路径。在 Canvas 中绘制路径的方法如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawPath(Path path, Paint paint)</div></pre></td></tr></table></figure></p><p><div id="jump2"></div></p><h3 id="1-2-2-直线路径"><a href="#1-2-2-直线路径" class="headerlink" title="1.2.2 直线路径"></a>1.2.2 直线路径</h3><p>画一条直线路径,一般涉及下面三个函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">// (x1,y1)是直线的起始点，即将直线路径的绘制点定在(x1,y1)位置</div><div class="line">void moveTo(float x1, float y1)</div><div class="line">// (x2,y2)是直线的终点，又是下一次绘制直线路径的起始点；lineTo()函数可以一直使用。</div><div class="line">void lineTo(float x2, float y2)</div><div class="line">// 如果连续画了几条直线，但没有形成闭环，</div><div class="line">// 那么调用 close()函数会将路径首尾点连接起来，形成闭环。</div><div class="line">void close()</div></pre></td></tr></table></figure></p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-8e38ddf81a7fe2a6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="闭环 &amp; 不闭环三角形"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">// 初始化</div><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mPaint.setStrokeWidth(5);</div><div class="line">mPath = new Path();</div><div class="line"></div><div class="line">// 闭环</div><div class="line">mPath.moveTo(20, 20);</div><div class="line">mPath.lineTo(20, 120);</div><div class="line">mPath.lineTo(300, 120);</div><div class="line">mPath.close();</div><div class="line">canvas.drawPath(mPath, mPaint);</div><div class="line"></div><div class="line">// 不闭环</div><div class="line">mPath.moveTo(320, 20);</div><div class="line">mPath.lineTo(320, 120);</div><div class="line">mPath.lineTo(600, 120);</div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure></p><p>闭合三角形：先沿逆时针方向画了两条直线，分别是从(20, 20)到(20, 120)和从(20, 120)到(300, 120)，然后利用 path.close()函数将路径闭合，路径的终点(300,120)就会自行向路径的起始点 (20,20)画一条闭合线，所以最终我们看到的是一个路径闭合的三角形。</p><p><div id="jump3"></div></p><h3 id="1-2-3-弧线路径"><a href="#1-2-3-弧线路径" class="headerlink" title="1.2.3 弧线路径"></a>1.2.3 弧线路径</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void arcTo(RectF oval, float startAngle, float sweepAngle)</div></pre></td></tr></table></figure><p>这是一个画弧线路径的方法，弧线是从椭圆上截取的一部分。<br>参数:</p><ul><li>RectF oval：生成椭圆的矩形。</li><li>float startAngle：弧开始的角度，以 X 轴正方向为 0°。 </li><li>float sweepAngle：弧持续的角度。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-7331c6d8b5f45ab1.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">// 初始化</div><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mPaint.setStrokeWidth(5);</div><div class="line">mRect = new RectF(100, 20, 200, 100);</div><div class="line">mPath = new Path();</div><div class="line">mPath.moveTo(20, 20);</div><div class="line">mPath.arcTo(mRect, 0, 90);</div><div class="line"></div><div class="line">// onDraw</div><div class="line">mPaint.setColor(Color.LTGRAY);</div><div class="line">canvas.drawRect(mRect, mPaint);</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure></p><p>上述示例中弧最终还是会和起始点(20,20)连接起来。因为在默认情况下路径都是连贯的，除非以下两种情况：</p><ul><li>调用 addXXX 系列函数(参见 1.2.4 节)，将直接添加固定形状的路径。</li><li>调用 moveTo()函数改变绘制起始位置。</li></ul><p>如果不想连接起来，需要使用 Path 类提供的另外两个重载方法。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void arcTo(float left, float top, float right, float bottom, </div><div class="line">           float startAngle, float sweepAngle, boolean forceMoveTo)</div><div class="line">void arcTo(RectF oval, float startAngle, float sweepAngle, boolean forceMoveTo)</div></pre></td></tr></table></figure></p><p>参数 boolean forceMoveTo 的含义是是否强制将弧的起始点作为绘制起始位置。</p><p>将上面的代码稍加改造：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// mPath.arcTo(mRect, 0, 90);</div><div class="line">mPath.arcTo(mRect, 0, 90, true);</div></pre></td></tr></table></figure></p><p>效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-df222124d40335a2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><p><div id="jump4"></div></p><h3 id="1-2-4-addXXX系列函数"><a href="#1-2-4-addXXX系列函数" class="headerlink" title="1.2.4 addXXX系列函数"></a>1.2.4 addXXX系列函数</h3><p>路径一般都是连贯的，而 addXXX 系列函数可以让我们直接往 Path 中添加一些曲线，而不必考虑连贯性。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-37511e3dbeff4d95.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mPaint.setStrokeWidth(5);</div><div class="line"></div><div class="line">mPath = new Path();</div><div class="line">mPath.moveTo(40, 40);</div><div class="line">mPath.lineTo(100, 100);</div><div class="line">mRect = new RectF(100, 100, 200, 200);</div><div class="line">mPath.addArc(mRect, 0, 90);</div><div class="line"></div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure></p><p>先绘制了从(40,40)到(100,100)的线段，但是在我们往路径中添加了一条弧线之后，弧线并没有与线段连接。除了 addArc()函数，Path 类还提供了一系列的 add 函数：</p><h4 id="1-添加矩形路径"><a href="#1-添加矩形路径" class="headerlink" title="1.添加矩形路径"></a>1.添加矩形路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void addRect(float left, float top, float right, float bottom, </div><div class="line">             Path.Direction dir)</div><div class="line">void addRect(RectF rect, Path.Direction dir)</div></pre></td></tr></table></figure><p>这里 Path 类创建矩形路径的参数与 Canvas 绘制矩形的参数差不多,唯一不同的是增加了 Path.Direction 参数。Path.Direction 参数有两个值。</p><ul><li>Path.Direction.CCW：是 counter-clockwise 的缩写，指创建逆时针方向的矩形路径。</li><li>Path.Direction.CW：是 clockwise 的缩写，指创建顺时针方向的矩形路径。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-03911176aaff56ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">    super(context, attrs);</div><div class="line"></div><div class="line">    mPaint = new Paint();</div><div class="line">    mPaint.setColor(Color.LTGRAY);</div><div class="line">    mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">    mPaint.setStrokeWidth(5);</div><div class="line"></div><div class="line">    mTextPaint = new Paint();</div><div class="line">    mTextPaint.setColor(Color.BLUE);</div><div class="line">    mTextPaint.setTextSize(35);</div><div class="line"></div><div class="line">    mStr = &quot;苦心人天不负，有志者事竟成&quot;;</div><div class="line"></div><div class="line">    // 逆时针路径</div><div class="line">    mCCWPath = new Path();</div><div class="line">    RectF rect1 = new RectF(50, 50, 240, 200);</div><div class="line">    mCCWPath.addRect(rect1, Path.Direction.CCW);</div><div class="line">    // 顺时针路径</div><div class="line">    mCWPath = new Path();</div><div class="line">    RectF rect2 = new RectF(290, 50, 480, 200);</div><div class="line">    mCWPath.addRect(rect2, Path.Direction.CW);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    canvas.drawPath(mCCWPath, mPaint);</div><div class="line">    canvas.drawPath(mCWPath, mPaint);</div><div class="line">    canvas.drawTextOnPath(mStr, mCCWPath, 0, 18, mTextPaint);</div><div class="line">    canvas.drawTextOnPath(mStr, mCWPath, 0, 18, mTextPaint);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>文字是可以依据路径排版的，文字的行走方向依据的就是路径的生成方向。</p><h4 id="2-添加圆角矩形路径"><a href="#2-添加圆角矩形路径" class="headerlink" title="2.添加圆角矩形路径"></a>2.添加圆角矩形路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void addRoundRect(RectF rect, float[] radii, Path.Direction dir)</div><div class="line">void addRoundRect(RectF rect, float rx, float ry, Path.Direction dir)</div></pre></td></tr></table></figure><p>矩形的圆角都是利用椭圆生成的。参数：</p><ul><li>RectF rect：是当前所构造路径的矩形。</li><li>Path.Direction dir：依然是指路径的生成方向，当然只对依据路径布局的文字有用。</li><li>float[] radii：必须传入 8 个数值，分 4 组，分别对应每个角所使用的椭圆的横轴半径和纵轴半径。如{x1,y1,x2,y2,x3,y3,x4,y4}，其中，x1,y1 对应第一个角(左上角)的用来生成圆角的椭圆的横轴半径和纵轴半径，其他类推……</li><li>float rx：生成统一的圆角的椭圆的横轴半径。</li><li>float ry：生成统一的圆角的椭圆的纵轴半径。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-2f1e571e526983ca.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line">    private Path mCCWPath, mCWPath;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setAntiAlias(true);</div><div class="line">        mPaint.setStrokeWidth(5);</div><div class="line"></div><div class="line">        // 逆时针路径</div><div class="line">        mCCWPath = new Path();</div><div class="line">        RectF rect1 = new RectF(50, 50, 240, 200);</div><div class="line">        mCCWPath.addRoundRect(rect1, 10, 15, Path.Direction.CCW);</div><div class="line">        // 顺时针路径</div><div class="line">        mCWPath = new Path();</div><div class="line">        RectF rect2 = new RectF(290, 50, 480, 200);</div><div class="line">        float[] radii = &#123;10,15,20,25,30,35,40,45&#125;;</div><div class="line">        mCWPath.addRoundRect(rect2, radii, Path.Direction.CW);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        canvas.drawPath(mCCWPath, mPaint);</div><div class="line">        canvas.drawPath(mCWPath, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-添加圆形路径"><a href="#3-添加圆形路径" class="headerlink" title="3.添加圆形路径"></a>3.添加圆形路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void addCircle(float x, float y, float radius, Path.Direction dir)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>float x：圆心 X 轴坐标。 </li><li>float y：圆心 Y 轴坐标。 </li><li>float radius：圆半径。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-d00e3789856b37a8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPath = new Path();</div><div class="line">mPath.addCircle(100, 100, 50, Path.Direction.CCW);</div><div class="line"></div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure><h4 id="4-添加椭圆路径"><a href="#4-添加椭圆路径" class="headerlink" title="4.添加椭圆路径"></a>4.添加椭圆路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void addOval(RectF oval, Path.Direction dir)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>RectF oval：生成椭圆的矩形。</li><li>Path.Direction：路径的生成方向。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-4c670d0f471cfd02.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPath = new Path();</div><div class="line">mPath.addOval(new RectF(100, 100, 300, 200), Path.Direction.CCW);</div><div class="line"></div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure><h4 id="5-添加弧形路径"><a href="#5-添加弧形路径" class="headerlink" title="5.添加弧形路径"></a>5.添加弧形路径</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void addArc(float left, float top, float right, float bottom, </div><div class="line">            float startAngle, float sweepAngle)</div><div class="line">void addArc(RectF oval, float startAngle, float sweepAngle)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>RectF oval：弧是椭圆的一部分，这个参数就是生成椭圆的矩形。 </li><li>float startAngle：弧开始的角度，以 X 轴正方向为 0°。</li><li>float sweepAngel：弧持续的角度。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-e199e6473c71e84a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">mPath.addArc(new RectF(100, 100, 300, 200), 0, 180);</div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure><p><div id="jump5"></div></p><h3 id="1-2-5-填充模式"><a href="#1-2-5-填充模式" class="headerlink" title="1.2.5 填充模式"></a>1.2.5 填充模式</h3><p>Path 的填充模式与 Paint 的填充模式不同。Path 的填充模式是指填充 Path 的哪部分。Path.FillType 表示 Path 的填充模式，它有 4 个枚举值。</p><ul><li>FillType.WINDING：默认值，当两个图形相交时，取相交和自身部分显示。 </li><li>FillType.EVEN_ODD：取 path 所在并不相交的区域。</li><li>FillType.INVERSE_WINDING：取 path 的外部区域。</li><li>FillType.INVERSE_EVEN_ODD：取 path 的外部和相交区域。</li></ul><p>Inverse 就是取反的意思，所以 FillType.INVERSE_WINDING 就是取 FillType.WINDING 的相反部分；同理，FillType.INVERSE_EVEN_ODD 就是取 FillType.EVEN_ODD 的相反部分。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-fa947014b8824235.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt=""><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStyle(Paint.Style.FILL);</div><div class="line">mPaint.setAntiAlias(true);</div><div class="line"></div><div class="line">mPath = new Path();</div><div class="line">mPath.addRect(100, 100, 300, 300, Path.Direction.CW);</div><div class="line">mPath.addCircle(300, 300, 100, Path.Direction.CW);</div><div class="line">mPath.setFillType(Path.FillType.INVERSE_EVEN_ODD);</div><div class="line"></div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure></p><p><div id="jump6"></div></p><h3 id="1-2-6-重置路径"><a href="#1-2-6-重置路径" class="headerlink" title="1.2.6 重置路径"></a>1.2.6 重置路径</h3><h4 id="1-概述"><a href="#1-概述" class="headerlink" title="1.概述"></a>1.概述</h4><p>当我们需要重绘一条全新的路径时，Android 开发人员为了重复利用空间，允许我们重置路径对象。路径对象一旦被重置，其中保存的所有路径都将被清空，这样我们就不需要重新定义一个路径对象了。重新定义路径对象的问题在于老对象的回收和新对象的内存分配，当然这些过程都是会消耗手机性能的。</p><p>系统提供了两个重置路径的方法，分别是：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void reset();</div><div class="line">void rewind();</div></pre></td></tr></table></figure></p><p>这两个函数的共同点是都会清空内部所保存的所有路径，但二者也有区别。</p><ul><li>rewind()函数会清除 FillType 及所有的直线、曲线、点的数据等，但是会保留数据结构。 这样可以实现快速重用，提高一定的性能。例如，重复绘制一类线段，它们的点的数量都相等，那么使用 rewind()函数可以保留装载点数据的数据结构，效率会更高。一定要注意的是，只有在重复绘制相同的路径时，这些数据结构才是可以复用的。</li><li>reset()函数类似于新建一个路径对象，它的所有数据空间都会被回收并重新分配，但不会清除 FillType。</li></ul><h4 id="2-reset-与-FillType"><a href="#2-reset-与-FillType" class="headerlink" title="2.reset()与 FillType"></a>2.reset()与 FillType</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPath.setFillType(Path.FillType.INVERSE_WINDING);</div><div class="line">mPath.reset();</div><div class="line">mPath.addCircle(100, 100, 50, Path.Direction.CW);</div><div class="line"></div><div class="line">canvas.drawPath(mPath, mPaint);</div></pre></td></tr></table></figure><p>效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-8148a61181bf97db.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="reset 不清除 FillType"></p><p>把 reset()改成 rewind()。效果如下：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-8112a78ff86dbea8.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="rewind 清除 FillType"></p><p><div id="jump7"></div></p><h3 id="1-2-7-示例：蜘蛛网状图"><a href="#1-2-7-示例：蜘蛛网状图" class="headerlink" title="1.2.7 示例：蜘蛛网状图"></a>1.2.7 示例：蜘蛛网状图</h3><p><img src="https://upload-images.jianshu.io/upload_images/14186083-69b3cadcd1005e2b.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="网游职业分析图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div></pre></td><td class="code"><pre><div class="line">package com.xxt.xtest;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.graphics.Path;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">import androidx.annotation.Nullable;</div><div class="line"></div><div class="line">public class SpiderView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mRadarPaint;                  // 蜘蛛网</div><div class="line">    private Paint mRadarLinePaint;              // 蜘蛛网辐射的六根线</div><div class="line">    private Paint mValuePaint;                  // 数据</div><div class="line"></div><div class="line">    private float radius;                       // 网格最大半径</div><div class="line">    private int centerX;                        // 中心 X</div><div class="line">    private int centerY;                        // 中心 Y</div><div class="line"></div><div class="line">    private Path mPath;</div><div class="line">    private int mRadarPaintColor = 0xFF0099CC;  // 网格默认颜色</div><div class="line"></div><div class="line">    private int count = 6;                      // 多边形，默认值为 6</div><div class="line">    private double angle = 2*Math.PI / count;   // 角度，值为 2π / count，默认</div><div class="line"></div><div class="line">    private double[] data = &#123;2,3,1,3,4,3&#125;;      // 数据</div><div class="line">    private int maxValue = 4;                   // 最大值</div><div class="line"></div><div class="line">    public SpiderView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mRadarPaint = generatePaint(mRadarPaintColor, Paint.Style.FILL);</div><div class="line">        mRadarLinePaint = generatePaint(Color.WHITE, Paint.Style.STROKE);</div><div class="line">        mValuePaint = generatePaint(0xAFFF0000, Paint.Style.FILL);</div><div class="line"></div><div class="line">        mPath = new Path();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Paint generatePaint(int color, Paint.Style style) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setAntiAlias(true);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onSizeChanged(int w, int h, int oldw, int oldh) &#123;</div><div class="line">        // 获得布局中心</div><div class="line">        centerX = w / 2;</div><div class="line">        centerY = h / 2;</div><div class="line">        radius = Math.min(w, h) / 2f * 0.8f;</div><div class="line">        postInvalidate();</div><div class="line">        super.onSizeChanged(w, h, oldw, oldh);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line">        // 绘制蜘蛛网格</div><div class="line">        drawPolygon(canvas);</div><div class="line">        // 绘制中线</div><div class="line">        drawLines(canvas);</div><div class="line">        // 画数据图</div><div class="line">        drawRegion(canvas);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawPolygon(Canvas canvas) &#123;</div><div class="line">        float r = radius / maxValue;            // r是蜘蛛丝之间的间距</div><div class="line">        for (int i = 1; i &lt;= maxValue; i++) &#123;   // 中心点不用绘制</div><div class="line">            float curR = r * i;                 // 当前半径</div><div class="line">            mPath.reset();</div><div class="line">            for (int j = 0; j &lt; count; j++) &#123;</div><div class="line">                if (j == 0) &#123;</div><div class="line">                    mPath.moveTo(centerX + curR, centerY);</div><div class="line">                &#125; else &#123;</div><div class="line">                    // 根据半径，计算出蜘蛛丝上每个点的坐标</div><div class="line">                    float x = (float) (centerX + curR * Math.cos(angle * j));</div><div class="line">                    float y = (float) (centerY + curR * Math.sin(angle * j));</div><div class="line">                    mPath.lineTo(x, y);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            mPath.close();                      // 闭合路径</div><div class="line">            mRadarPaint.setAlpha(getRadarPaintColor(i));</div><div class="line">            canvas.drawPath(mPath, mRadarPaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawLines(Canvas canvas) &#123;</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            mPath.reset();</div><div class="line">            mPath.moveTo(centerX, centerY);</div><div class="line">            float x = (float) (centerX + radius * Math.cos(angle * i));</div><div class="line">            float y = (float) (centerY + radius * Math.sin(angle * i));</div><div class="line">            mPath.lineTo(x, y);</div><div class="line">            canvas.drawPath(mPath, mRadarLinePaint);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void drawRegion(Canvas canvas) &#123;</div><div class="line">        mPath.reset();</div><div class="line">        for (int i = 0; i &lt; count; i++) &#123;</div><div class="line">            double percent = data[i] / maxValue;</div><div class="line">            float x = (float) (centerX + radius * Math.cos(angle * i) * percent);</div><div class="line">            float y = (float) (centerY + radius * Math.sin(angle * i) * percent);</div><div class="line">            if (i == 0) &#123;</div><div class="line">                mPath.moveTo(x, centerY);</div><div class="line">            &#125; else &#123;</div><div class="line">                mPath.lineTo(x, y);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        canvas.drawPath(mPath, mValuePaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 由内到外，增加透明度</div><div class="line">     * @param i 第几个网格，从中心点算起</div><div class="line">     * @return int alpha 值</div><div class="line">     */</div><div class="line">    private int getRadarPaintColor(int i) &#123;</div><div class="line">        if (i &gt; count || i &lt; 1) &#123;</div><div class="line">            return 0xFF;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        int alpha = Color.alpha(mRadarPaintColor);</div><div class="line">        int colorStep = alpha / (maxValue - 1) - 10;</div><div class="line">        alpha = alpha - colorStep * (i - 1);</div><div class="line">        return alpha;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01.1 精通自定义 View 之绘图基础——基本图形绘制</title>
      <link href="/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/"/>
      <url>/2019/07/01/Custom%20View/01.1%20%E7%B2%BE%E9%80%9A%E8%87%AA%E5%AE%9A%E4%B9%89%20View%20%E4%B9%8B%E7%BB%98%E5%9B%BE%E5%9F%BA%E7%A1%80%E2%80%94%E2%80%94%E5%9F%BA%E6%9C%AC%E5%9B%BE%E5%BD%A2%E7%BB%98%E5%88%B6/</url>
      
        <content type="html"><![CDATA[<p><meta name="referrer" content="no-referrer"></p><p><div id="jump1"></div></p><h3 id="1-1-1-概述"><a href="#1-1-1-概述" class="headerlink" title="1.1.1 概述"></a>1.1.1 概述</h3><p>画图需要两个工具：纸和笔。在 Android 中，Paint 类就是画笔，而 Canvas 类就是纸，在这里叫作画布。</p><p>凡是跟画笔设置相关的，比如画笔大小、粗细、画笔颜色、透明度、字体的样式等，都在 Paint 类里设置；同样，凡是要画出成品的东西，比如圆形、矩形、文字等，都调用 Canvas 类里的函数生成。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-feca6c269f8bed9c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        // 设置画笔</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setColor(Color.RED);</div><div class="line">        mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">        mPaint.setStrokeWidth(50);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        // 画圆</div><div class="line">        canvas.drawCircle(200, 200, 150, mPaint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>直接在主布局中使用自定义控件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=&quot;http://schemas.android.com/apk/res/android&quot;</div><div class="line">    android:layout_width=&quot;match_parent&quot;</div><div class="line">    android:layout_height=&quot;match_parent&quot;&gt;</div><div class="line">    &lt;com.xxt.xtest.TestView</div><div class="line">        android:layout_width=&quot;wrap_content&quot;</div><div class="line">        android:layout_height=&quot;wrap_content&quot; /&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><blockquote><p>在 onDraw() 函数中不能创建变量。因为当需要重绘时就会调用 onDraw() 函数，这样会导致变量一直被重复创建，会引起频繁的程序 GC (回收内存)，进而引起程序卡顿。一般在构造函数中创建变量。</p></blockquote><p><div id="jump2"></div></p><h3 id="1-1-2-画笔的基本设置"><a href="#1-1-2-画笔的基本设置" class="headerlink" title="1.1.2 画笔的基本设置"></a>1.1.2 画笔的基本设置</h3><h4 id="1-setAntiAlias"><a href="#1-setAntiAlias" class="headerlink" title="1. setAntiAlias()"></a>1. setAntiAlias()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setAntiAlias(boolean aa)</div></pre></td></tr></table></figure><p>表示是否打开抗锯齿功能。抗锯齿是依赖算法的，一般在绘制不规则的图形时使用，比如圆形、文字等。在绘制棱角分明的图像时，比如一个矩形、一张位图，是不需要打开抗锯齿功能的。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-8627a3c3392a00a4.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="Anti Alias &amp; No Anti Alias"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint1, mPaint2;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint1 = new Paint();</div><div class="line">        mPaint1.setColor(Color.RED);</div><div class="line">        mPaint1.setStyle(Paint.Style.FILL);</div><div class="line">        mPaint1.setAntiAlias(true);</div><div class="line">        mPaint1.setStrokeWidth(50);</div><div class="line"></div><div class="line">        mPaint2 = new Paint();</div><div class="line">        mPaint2.setColor(Color.RED);</div><div class="line">        mPaint2.setStyle(Paint.Style.FILL);</div><div class="line">        mPaint2.setStrokeWidth(50);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        canvas.drawCircle(200, 200, 150, mPaint1);</div><div class="line">        canvas.drawCircle(540, 200, 150, mPaint2);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2-setColor"><a href="#2-setColor" class="headerlink" title="2. setColor()"></a>2. setColor()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setColor(int color)</div></pre></td></tr></table></figure><p>设置画笔颜色。一个颜色值是由红、绿、蓝三色合成出来的，所以，参数 color 只能取 8 位的 0xAARRGGBB 样式颜色值。其中:</p><ul><li>A 代表透明度(Alpha)，取值范围是 0~255(对应十六进制的 0x00~0xFF)，取值越小，透明度越高，图像也就越透明。当取 0 时，图像完全不可见。</li><li>R 代表红色值(Red)，取值范围是 0~255(对应十六进制的 0x00~0xFF)，取值越小，红色越少。当取 0 时，表示红色完全不可见；当取 255 时，红色完全显示。</li><li>G 代表绿色值(Green)，取值范围是 0~255(对应十六进制的 0x00~0xFF)，取值越小，绿色越少。当取 0 时，表示绿色完全不可见；当取 255 时，绿色完全显示。</li><li>B 代表蓝色值(Blue)，取值范围是 0~255(对应十六进制的 0x00~0xFF)，取值越小，蓝色越少。当取 0 时，表示蓝色完全不可见；当取 255 时，蓝色完全显示。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-f74c4ebbbbb616fe.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private Paint mPaint1, mPaint2;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        mPaint1 = generatePaint(Color.RED, Paint.Style.FILL, 50);</div><div class="line">        mPaint2 = generatePaint(0x7EFFFF00, Paint.Style.FILL, 50);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        canvas.drawCircle(200, 200, 150, mPaint1);</div><div class="line">        canvas.drawCircle(200, 200, 100, mPaint2);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Paint generatePaint(int color, Paint.Style style, int strokeWidth) &#123;</div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(color);</div><div class="line">        paint.setStyle(style);</div><div class="line">        paint.setStrokeWidth(strokeWidth);</div><div class="line">        return paint;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-setStyle"><a href="#3-setStyle" class="headerlink" title="3. setStyle()"></a>3. setStyle()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStyle(Style style)</div></pre></td></tr></table></figure><p>设置填充样式，对于文字和几何图形都有效。style 的取值如下：</p><ul><li>Paint.Style.FILL：仅填充内部。</li><li>Paint.Style.FILL_AND_STROKE：填充内部和描边。 </li><li>Paint.Style.STROKE：仅描边。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-b4907639e786fbe2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="依次是 FILL、STROKE、FILL_AND_STROKE "></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">paintF = generatePaint(Color.RED, Paint.Style.FILL, 50);</div><div class="line">paintS = generatePaint(Color.RED, Paint.Style.STROKE, 50);</div><div class="line">paintFS = generatePaint(Color.RED, Paint.Style.FILL_AND_STROKE, 50);</div><div class="line">paintLine = generatePaint(Color.BLACK, Paint.Style.STROKE, 1);</div><div class="line"></div><div class="line">canvas.drawCircle(225, 300, 150, paintF);</div><div class="line">canvas.drawCircle(600, 300, 150, paintS);</div><div class="line">canvas.drawCircle(1000, 300, 150, paintFS);</div><div class="line">canvas.drawLine(225, 150, 1000, 150, paintLine);</div></pre></td></tr></table></figure><h4 id="4-setStrokeWidth"><a href="#4-setStrokeWidth" class="headerlink" title="4. setStrokeWidth()"></a>4. setStrokeWidth()</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void setStrokeWidth(float width)</div></pre></td></tr></table></figure><p>设置描边宽度值，单位是 px。当画笔的 Style 样式是 STROKE、FILL_AND_STROKE 时有效。当 Style 不起作用时，用于设置画笔宽度。</p><p><div id="jump3"></div></p><h3 id="1-1-3-Canvas使用基础"><a href="#1-1-3-Canvas使用基础" class="headerlink" title="1.1.3 Canvas使用基础"></a>1.1.3 Canvas使用基础</h3><h4 id="1-画布背景设置"><a href="#1-画布背景设置" class="headerlink" title="1. 画布背景设置"></a>1. 画布背景设置</h4><p>有三种方法可以实现画布背景设置：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void drawColor(int color)</div><div class="line">void drawARGB(int a, int r, int g, int b)</div><div class="line">void drawRGB(int r, int g, int b)</div></pre></td></tr></table></figure></p><p>drawColor() 函数中参数 color 的取值必须是 8 位的 0xAARRGGBB 样式颜色值。<br>drawARGB() 函数允许分别传入 A、R、G、B 分量，每个颜色值的取值范围都是 0~255(对应十六进制的 0x00~0xFF)，内部会通过这些颜色分量构造出对应的颜色值。 drawRGB() 函数只允许传入 R、G、B 分量，透明度 Alpha 的值取 255。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-b1bc19b811eb6ed6.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="将画布默认填充为紫色"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">canvas.drawColor(0xFFFF00FF);</div><div class="line">canvas.drawARGB(0xFF, 0xFF, 0, 0xFF);</div><div class="line">canvas.drawRGB(255, 0, 255);</div></pre></td></tr></table></figure></p><h4 id="2-画直线"><a href="#2-画直线" class="headerlink" title="2. 画直线"></a>2. 画直线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void drawLine(float startX, float startY, </div><div class="line">              float stopX, float stopY, Paint paint)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>startX：起始点 X 坐标。 </li><li>startY：起始点 Y 坐标。 </li><li>stopX：终点 X 坐标。</li><li>stopY：终点 Y 坐标。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-030dd0332aa4b222.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="分别设置 Style：FILL、STROKE、FILL_AND_STROKE"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mPaintF = generatePaint(Color.RED, Paint.Style.FILL, 50);</div><div class="line">mPaintS = generatePaint(Color.RED, Paint.Style.STROKE, 50);</div><div class="line">mPaintFS = generatePaint(Color.RED, Paint.Style.FILL_AND_STROKE, 50);</div></pre></td></tr></table></figure></p><p>从效果图中可以明显看出，直线的粗细与画笔 Style 是没有关系的。当设置不同的 StrokeWidth 时，效果如下图所示。<br><img src="https://upload-images.jianshu.io/upload_images/14186083-db784ea910444557.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="width 分别是 ：5、25、50"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">mPaintF = generatePaint(Color.RED, Paint.Style.FILL, 5);</div><div class="line">mPaintS = generatePaint(Color.RED, Paint.Style.STROKE, 25);</div><div class="line">mPaintFS = generatePaint(Color.RED, Paint.Style.FILL_AND_STROKE, 50);</div></pre></td></tr></table></figure></p><blockquote><p>可见，直线的粗细是与 paint.setStrokeWidth 有直接关系的。所以，一般而言，paint.setStrokeWidth 在 Style 起作用时，用于设置描边宽度；在 Style 不起作用时，用于设置画笔宽度。</p></blockquote><h4 id="3-多条直线"><a href="#3-多条直线" class="headerlink" title="3. 多条直线"></a>3. 多条直线</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawLines(float[] pts, Paint paint)</div></pre></td></tr></table></figure><p>参数：<br>pts：点的集合。从下面的代码中可以看到，这里不是形成连接线，而是每两个点形成一条直线，pts 的组织方式 {x1,y1,x2,y2,x3,y3,…}。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-39da8a748e08370e.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStrokeWidth(5);</div><div class="line">float []pts = &#123;10,10,100,100,200,200,400,400&#125;;</div><div class="line"></div><div class="line">// onDraw()</div><div class="line">canvas.drawLines(pts, mPaint);</div></pre></td></tr></table></figure></p><blockquote><p>上面有 4 个点，分别是(10,10)、(100,100)、(200,200)和(400,400)，两两连成一条直线。</p></blockquote><p>另一个构造函数：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawLines(float[] pts, int offset, int count, Paint paint)</div></pre></td></tr></table></figure></p><p>相比上面的构造函数，这里多了两个参数。</p><ul><li>int offset：集合中跳过的数值个数。注意不是点的个数！一个点有两个数值。</li><li>int count：参与绘制的数值个数，指 pts 数组中数值的个数，而不是点的个数，因为一个点有两个数值。</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">float[] pts = &#123;10,10,100,100,200,200,400,400&#125;;</div><div class="line">canvas.drawLines(pts, 2, 4, paint);</div></pre></td></tr></table></figure><p>表示从 pts 数组中索引为 2 的数字开始绘图，有 4 个数值参与绘图，也就是点(100,100) 和(200,200)，所以效果图就是这两个点的连线。</p><h4 id="4-点"><a href="#4-点" class="headerlink" title="4. 点"></a>4. 点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawPoint(float x, float y, Paint paint)</div></pre></td></tr></table></figure><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-ddcb9989afa74a0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStrokeWidth(15);</div><div class="line"></div><div class="line">canvas.drawPoint(100, 100, mPaint);</div></pre></td></tr></table></figure></p><p>在(100,100)位置画一个点。同样，点的大小只与 paint.setStrokeWidth(width) 有关，而与 paint.setStyle 无关。</p><h4 id="5-多个点"><a href="#5-多个点" class="headerlink" title="5. 多个点"></a>5. 多个点</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void drawPoints(@Size(multiple = 2) @NonNull float[] pts, @NonNull Paint paint)</div><div class="line">void drawPoints(@Size(multiple = 2) float[] pts, int offset, int count,</div><div class="line">                @NonNull Paint paint)</div></pre></td></tr></table></figure><p>这几个参数的含义与多条直线中的参数含义相同。</p><ul><li>float[] pts：点的合集，与上面的直线一致，样式为{x1,y1,x2,y2,x3,y3,…}。</li><li>int offset：集合中跳过的数值个数。注意不是点的个数！一个点有两个数值。</li><li>int count：参与绘制的数值个数，指 pts 数组中数值的个数，而不是点的个数。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-c592a6c5a27809f7.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private Paint mPaint;</div><div class="line">float[] pts = &#123;10,10, 100,100, 200,200, 400,400&#125;;</div><div class="line"></div><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">mPaint.setStrokeWidth(15);</div><div class="line"></div><div class="line">canvas.drawPoints(pts, 2, 4, mPaint);</div></pre></td></tr></table></figure></p><p>同样是上面的 4 个点：(10,10)、(100,100)、(200,200)和(400,400)，在 drawPoints()函数里跳过前两个数值，即第一个点的横、纵坐标，画出后面 4 个数值代表的点，即第二、三个点，第四个点没画。</p><h4 id="6-RectF-amp-Rect"><a href="#6-RectF-amp-Rect" class="headerlink" title="6. RectF &amp; Rect"></a>6. RectF &amp; Rect</h4><p>这两个类都是矩形工具类，根据 4 个点构造出一个矩形结构。RectF 与 Rect 中的方法、 成员变量完全一样，唯一不同的是：RectF 是用来保存 float 类型数值的矩形结构的；而 Rect 是用来保存 int 类型数值的矩形结构的。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">// RectF 的构造函数有如下 4 个,但最常用的还是第二个</div><div class="line">RectF()</div><div class="line">RectF(float left, float top, float right, float bottom)</div><div class="line">RectF(RectF r)</div><div class="line">RectF(Rect r)</div><div class="line"></div><div class="line">// Rect 的构造函数有如下 3 个</div><div class="line">Rect()</div><div class="line">Rect(int left, int top, int right, int bottom)</div><div class="line">Rect(Rect r)</div></pre></td></tr></table></figure></p><p>一般而言，要构造一个矩形结构,可以通过以下两种方法来实现。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">// 方法一：直接构造</div><div class="line">Rect rect = new Rect(10,10,100,100); </div><div class="line">// 方法二：间接构造</div><div class="line">Rect rect = new Rect(); </div><div class="line">rect.set(10,10,100,100);</div></pre></td></tr></table></figure></p><h4 id="7-矩形"><a href="#7-矩形" class="headerlink" title="7. 矩形"></a>7. 矩形</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">void drawRect(float left, float top, float right, float bottom, Paint paint) </div><div class="line">void drawRect(RectF rect, Paint paint)</div><div class="line">void drawRect(Rect r, Paint paint)</div></pre></td></tr></table></figure><p>第一个函数是直接传入矩形的 4 个点来绘制矩形的；第二、三个函数是根据传入 RectF 或者 Rect 的矩形变量来指定所绘制的矩形的。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-d9020d42098b847c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mPaintS = generatePaint(Color.RED, Paint.Style.STROKE, 15);</div><div class="line">mPaintF = generatePaint(Color.RED, Paint.Style.FILL, 15);</div><div class="line">mRect = new RectF(210f, 10f, 300f, 100f);</div><div class="line"></div><div class="line">// 直接构造</div><div class="line">canvas.drawRect(10, 10, 100, 100, mPaintS);</div><div class="line">// 使用 RectF 构造</div><div class="line">canvas.drawRect(mRect, mPaintF);</div></pre></td></tr></table></figure></p><h4 id="8-圆角矩形"><a href="#8-圆角矩形" class="headerlink" title="8. 圆角矩形"></a>8. 圆角矩形</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawRoundRect(RectF rect, float rx, float ry, Paint paint)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>RectF rect：要绘制的矩形。</li><li>float rx：生成圆角的椭圆的 X 轴半径。 </li><li>float ry：生成圆角的椭圆的 Y 轴半径。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-404c86eeaca6b3fa.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="圆角矩形效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">mPaintF = generatePaint(Color.RED, Paint.Style.FILL, 15);</div><div class="line">mRect = new RectF(100, 110, 300, 200);</div><div class="line"></div><div class="line">canvas.drawRoundRect(mRect, 20, 10, mPaintF);</div></pre></td></tr></table></figure></p><h4 id="9-圆形"><a href="#9-圆形" class="headerlink" title="9. 圆形"></a>9. 圆形</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawCircle(float cx, float cy, float radius, Paint paint)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>float cx：圆心点的 X 轴坐标。 </li><li>float cy：圆心点的 Y 轴坐标。 </li><li>float radius：圆的半径。</li></ul><h4 id="10-椭圆"><a href="#10-椭圆" class="headerlink" title="10. 椭圆"></a>10. 椭圆</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">void drawOval(RectF oval, Paint paint)</div></pre></td></tr></table></figure><p>参数:<br>RectF oval：用来生成椭圆的矩形。</p><p>椭圆是根据矩形生成的，以矩形的长为椭圆的 X 轴，以矩形的宽为椭圆的 Y 轴。</p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-eaaa7da91d7639af.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="使用矩形画椭圆"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">mPaintO = generatePaint(Color.RED, Paint.Style.STROKE, 5);</div><div class="line">mPaintR = generatePaint(Color.BLUE, Paint.Style.STROKE, 5);</div><div class="line">mRect = new RectF(100, 110, 300, 200);</div><div class="line"></div><div class="line">canvas.drawRect(mRect, mPaintR);    // 画矩形</div><div class="line">canvas.drawOval(mRect, mPaintO);    // 画椭圆</div></pre></td></tr></table></figure><h4 id="11-弧"><a href="#11-弧" class="headerlink" title="11. 弧"></a>11. 弧</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">void drawArc(RectF oval, float startAngle, float sweepAngle, </div><div class="line">             boolean useCenter, Paint paint)</div></pre></td></tr></table></figure><p>参数:</p><ul><li>RectF oval：生成椭圆的矩形。</li><li>float startAngle：弧开始的角度，以 X 轴正方向为 0°。</li><li>float sweepAngle：弧持续的角度。</li><li>boolean useCenter：是否有弧的两边。为 true 时，表示带有两边；为 false 时，只有一条弧。</li></ul><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-db6075c61545f92a.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="弧 效果图"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">mPaint = generatePaint(Color.RED, Paint.Style.STROKE, 5);</div><div class="line">mRect1 = new RectF(100, 100, 200, 200);</div><div class="line">mRect2 = new RectF(220, 100, 320, 200);</div><div class="line"></div><div class="line">// 带弧的两边</div><div class="line">canvas.drawArc(mRect1, 0, 90, true, mPaint);</div><div class="line">// 不带弧的两边</div><div class="line">canvas.drawArc(mRect2, 0, 90, false, mPaint);</div></pre></td></tr></table></figure></p><p>上述代码中，仅将 paint 的样式设置为 FILL 。效果图如下：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-70fd46d585c02d0c.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="填充样式的弧"></p><blockquote><p>当画笔设为填充模式时，填充区域只限于圆弧的起始点和终点所形成的区域。当带有两边时，会将两边及圆弧内部全部填充；如果没有两边，则只填充圆弧部分。</p></blockquote><p><div id="jump4"></div></p><h3 id="1-1-4-Rect与RectF"><a href="#1-1-4-Rect与RectF" class="headerlink" title="1.1.4 Rect与RectF"></a>1.1.4 Rect与RectF</h3><h4 id="1-是否包含点、矩形"><a href="#1-是否包含点、矩形" class="headerlink" title="1.是否包含点、矩形"></a>1.是否包含点、矩形</h4><p>1）判断是否包含某个点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean contains(int x, int y)</div></pre></td></tr></table></figure></p><p>该函数用于判断某个点是否在当前矩形中。如果在，则返回 true；如果不在，则返回 false。 参数(x,y)就是当前要判断的点的坐标。</p><p>示例：绘制一个灰色矩形，当手指在这个矩形区域内时，矩形变为红色。<br><img src="https://upload-images.jianshu.io/upload_images/14186083-87a0fbfd0c9002cd.gif?imageMogr2/auto-orient/strip" alt="效果图"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">public class TestView extends View &#123;</div><div class="line"></div><div class="line">    private float mX, mY;</div><div class="line">    private Paint mPaint;</div><div class="line">    private RectF mRect;</div><div class="line"></div><div class="line">    public TestView(Context context, @Nullable AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">        init();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void init() &#123;</div><div class="line">        mPaint = new Paint();</div><div class="line">        mPaint.setStyle(Paint.Style.FILL);</div><div class="line">        mRect = new RectF(100, 100, 500, 350);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        if (mRect.contains(mX, mY)) &#123;</div><div class="line">            mPaint.setColor(Color.RED);</div><div class="line">        &#125; else &#123;</div><div class="line">            mPaint.setColor(Color.GRAY);</div><div class="line">        &#125;</div><div class="line">        canvas.drawRect(mRect, mPaint);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">        mX = event.getX();</div><div class="line">        mY = event.getY();</div><div class="line">        if (event.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">            invalidate();</div><div class="line">            return true;</div><div class="line">        &#125; else if (event.getAction() == MotionEvent.ACTION_UP) &#123;</div><div class="line">            mX = -1;</div><div class="line">            mY = -1;</div><div class="line">        &#125;</div><div class="line">        invalidate();</div><div class="line">        return super.onTouchEvent(event);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述代码注意两点：</p><ul><li><p>在 MotionEvent.ACTION_DOWN 中返回 true，因为当 MotionEvent. ACTION_DOWN 消息到来时，系统会判断返回值，当返回 true 时，表示当前控件已经在拦截 (消费)这个消息了，所以后续的 ACTION_MOVE、ACTION_UP 消息仍然继续传过来。如果返回 false(系统默认返回 false)，就表示当前控件不需要这个消息，那么后续的 ACTION_MOVE、ACTION_UP 消息就不会再传到这个控件。</p></li><li><p>postInvalidate()和 invalidate()函数都是用来重绘控件的，区别是 invalidate()函数一定要在主线程中执行，否则就会报错；而 postInvalidate()函数则没有那么多讲究，它可以在任何线程中执行，而不必一定是主线程。因为在 postInvalidate()函数中就是利用 handler 给主线程发送刷新界面的消息来实现的，所以它可以在任何线程中执行而不会出错。而正因为它是通过发送消息来实现的，所以它的界面刷新速度可能没有直接调用 invalidate()函数那么快。确定当前线程是主线程的情况下，以 invalidate()函数为主。否则调用调用 postInvalidate()函数为好。因为 onTouchEvent()函数本来就是在主线程中的，所以使用 invalidate()函数更合适。</p></li></ul><p>2）判断是否包含某个矩形<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">// 根据矩形的 4 个点或者一个 Rect 矩形对象来判断这个矩形是否在当前的矩形区域内。</div><div class="line">boolean contains(float left, float top, float right, float bottom)</div><div class="line">boolean contains(RectF r)</div></pre></td></tr></table></figure></p><h4 id="2-判断两个矩形是否相交"><a href="#2-判断两个矩形是否相交" class="headerlink" title="2.判断两个矩形是否相交"></a>2.判断两个矩形是否相交</h4><p>1）静态方法判断是否相交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">static boolean intersects(Rect a, Rect b)</div></pre></td></tr></table></figure></p><p>这是 Rect 类的一个静态方法，用来判断参数中所传入的两个 Rect 矩形是否相交，如果相交则返回 true，否则返回 false。<br>2）成员方法判断是否相交<br>判断当前 Rect 对象与其他矩形是否相交。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">boolean intersects(int left, int top, int right, int bottom)</div></pre></td></tr></table></figure></p><p>使用方法：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Rect rect_1 = new Rect(10,10,200,200);</div><div class="line">boolean interset1_2 = rect_1.intersects(190, 10, 250, 200);</div></pre></td></tr></table></figure></p><p>3）判断相交并返回结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">boolean intersect(int left, int top, int right, int bottom)</div><div class="line">boolean intersect(Rect r)</div></pre></td></tr></table></figure></p><p>这两个成员方法与 intersects()方法的区别是，不仅会返回是否相交的结果，而且会把相交部分的矩形赋给当前 Rect 对象。如果两个矩形不相交，则当前 Rect 对象的值不变。</p><h4 id="3-合并"><a href="#3-合并" class="headerlink" title="3.合并"></a>3.合并</h4><p>1）合并两个矩形<br>合并两个矩形的意思就是将两个矩形合并成一个矩形，即无论这两个矩形是否相交，取两个矩形最小左上角点作为结果矩形的左上角点，取两个矩形最大右下角点作为结果矩形的右下角点。如果要合并的两个矩形有一方为空，则将有值的一方作为最终结果。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">public void union(int left, int top, int right, int bottom)</div><div class="line">public void union(Rect r)</div></pre></td></tr></table></figure></p><p>示例：<br><img src="https://upload-images.jianshu.io/upload_images/14186083-03ed1ceee71fd5c2.png?imageMogr2/auto-orient/strip%7CimageView2/2/w/1240" alt="绿色、红色矩形合并成蓝色矩形"><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">mPaint = new Paint();</div><div class="line">mPaint.setStyle(Paint.Style.STROKE);</div><div class="line">mRect1 = new RectF(200, 100, 500, 300);</div><div class="line">mRect2 = new RectF(100, 200, 300, 400);</div><div class="line"></div><div class="line">// 画出右上的红色矩形</div><div class="line">mPaint.setColor(Color.RED);</div><div class="line">canvas.drawRect(mRect1, mPaint);</div><div class="line">// 画出左下的绿色矩形</div><div class="line">mPaint.setColor(Color.GREEN);</div><div class="line">canvas.drawRect(mRect2, mPaint);</div><div class="line">// 矩形合并</div><div class="line">mRect1.union(mRect2);</div><div class="line">// 画出合并后的矩形（蓝色部分）</div><div class="line">mPaint.setColor(Color.BLUE);</div><div class="line">canvas.drawRect(mRect1, mPaint);</div></pre></td></tr></table></figure></p><p>2）合并矩形与某个点<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">public void union(int x, int y)</div></pre></td></tr></table></figure></p><p>先判断当前矩形与目标合并点的关系。如果不相交，则根据目标点(x,y)的位置，将目标点设置为当前矩形的左上角点或者右下角点。如果当前矩形是一个空矩形，则最后的结果矩形为([0,0],[x,y])，即结果矩形的左上角点为[0,0]，右下角点为[x,y]。</p><p><div id="jump5"></div></p><h3 id="1-1-5-Color"><a href="#1-1-5-Color" class="headerlink" title="1.1.5 Color"></a>1.1.5 Color</h3><p>Color 是 Android 中与颜色处理有关的类。</p><h4 id="1-常量颜色"><a href="#1-常量颜色" class="headerlink" title="1. 常量颜色"></a>1. 常量颜色</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@ColorInt public static final int BLACK       = 0xFF000000;</div><div class="line">@ColorInt public static final int DKGRAY      = 0xFF444444;</div><div class="line">@ColorInt public static final int GRAY        = 0xFF888888;</div><div class="line">@ColorInt public static final int LTGRAY      = 0xFFCCCCCC;</div><div class="line">@ColorInt public static final int WHITE       = 0xFFFFFFFF;</div><div class="line">@ColorInt public static final int RED         = 0xFFFF0000;</div><div class="line">@ColorInt public static final int GREEN       = 0xFF00FF00;</div><div class="line">@ColorInt public static final int BLUE        = 0xFF0000FF;</div><div class="line">@ColorInt public static final int YELLOW      = 0xFFFFFF00;</div><div class="line">@ColorInt public static final int CYAN        = 0xFF00FFFF;</div><div class="line">@ColorInt public static final int MAGENTA     = 0xFFFF00FF;</div><div class="line">@ColorInt public static final int TRANSPARENT = 0;</div></pre></td></tr></table></figure><p>Color.XXX 来直接使用这些颜色，比如红色：Color.RED。</p><h4 id="2-构造颜色"><a href="#2-构造颜色" class="headerlink" title="2. 构造颜色"></a>2. 构造颜色</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">// 带有透明度的颜色</div><div class="line">static int argb(int alpha, int red, int green, int blue)</div><div class="line">// 不带透明度的颜色：alpha 值取 255</div><div class="line">static int rgb(int red, int green, int blue)</div></pre></td></tr></table></figure><p>argb() 函数的源码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public static int argb(int alpha, int red, int green, int blue) &#123;</div><div class="line">    // 位运算，值得借鉴</div><div class="line">    return (alpha &lt;&lt; 24) | (red &lt;&lt; 16) | (green &lt;&lt; 8) | blue;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3-提取颜色分量"><a href="#3-提取颜色分量" class="headerlink" title="3. 提取颜色分量"></a>3. 提取颜色分量</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">static int alpha(int color)</div><div class="line">static int red(int color)</div><div class="line">static int green(int color)</div><div class="line">static int blue(int color)</div></pre></td></tr></table></figure><p>通过上面的 4 个函数提取出对应的 A、R、G、B 颜色分量。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">// 得到的结果 green 的值就是 0x0F</div><div class="line">int green = Color.green(0xFF000F00);</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> Custom View </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Custom View </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID 目录</title>
      <link href="/2017/06/03/ANDROID/00Catalog/"/>
      <url>/2017/06/03/ANDROID/00Catalog/</url>
      
        <content type="html"><![CDATA[<p>ANDROID 基础知识、中级知识结构目录…</p><h2 id="二、Android中级知识"><a href="#二、Android中级知识" class="headerlink" title="二、Android中级知识"></a>二、Android中级知识</h2><ul><li><a href="">01 Android安全系列篇一(加密、密钥、签名和证书)</a></li></ul><h2 id="一、Android基础知识"><a href="#一、Android基础知识" class="headerlink" title="一、Android基础知识"></a>一、Android基础知识</h2><ul><li><a href="https://xianxiaotao.github.io/2017/05/30/ANDROID/BASE/15%E4%BB%A3%E7%A0%81%E6%8E%A7%E5%88%B6Layout/" target="_blank" rel="external">15 代码控制Layout</a></li><li><a href="https://xianxiaotao.github.io/2017/05/29/ANDROID/BASE/14Fragment" target="_blank" rel="external">14 Fragment</a></li><li><a href="https://xianxiaotao.github.io/2017/05/28/ANDROID/BASE/13Android6.0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/" target="_blank" rel="external">13 Android6.0运行时权限处理</a></li><li><a href="https://xianxiaotao.github.io/2017/05/28/ANDROID/BASE/12%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/" target="_blank" rel="external">12 权限系统</a></li><li><a href="https://xianxiaotao.github.io/2017/05/28/ANDROID/BASE/11%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/" target="_blank" rel="external">11 日志系统</a></li><li><a href="https://xianxiaotao.github.io/2017/05/28/ANDROID/BASE/10BroadcastReceiver/" target="_blank" rel="external">10 BroadcastReceiver</a></li><li><a href="https://xianxiaotao.github.io/2017/05/26/ANDROID/BASE/09Service%E6%80%BB%E7%BB%93%E7%AF%87/" target="_blank" rel="external">09 Service总结篇</a></li><li><a href="https://xianxiaotao.github.io/2017/05/26/ANDROID/BASE/08Service%E9%80%9A%E4%BF%A1/" target="_blank" rel="external">08 Service通信</a></li><li><a href="https://xianxiaotao.github.io/2017/05/26/ANDROID/BASE/07Service/" target="_blank" rel="external">07 Service</a></li><li><a href="https://xianxiaotao.github.io/2017/05/24/ANDROID/BASE/06Context/" target="_blank" rel="external">06 Context</a></li><li><a href="https://xianxiaotao.github.io/2017/05/24/ANDROID/BASE/05Intent%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%BA%94%E7%94%A8/" target="_blank" rel="external">05 Intent概念及应用</a></li><li><a href="https://xianxiaotao.github.io/2017/05/23/ANDROID/BASE/04Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/" target="_blank" rel="external">04 Activity启动模式</a></li><li><a href="https://xianxiaotao.github.io/2017/05/23/ANDROID/BASE/03Activity%E4%B9%8B%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/" target="_blank" rel="external">03 Activity之间传递参数</a></li><li><a href="https://xianxiaotao.github.io/2017/05/23/ANDROID/BASE/02Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/" target="_blank" rel="external">02 Activity生命周期</a></li><li><a href="https://xianxiaotao.github.io/2017/05/23/ANDROID/BASE/01%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/" target="_blank" rel="external">01 环境搭建</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID 目录</title>
      <link href="/2017/06/01/ANDROID/INTERMEDIATE/01Android%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%E7%AF%87%E4%B8%80(%E5%8A%A0%E5%AF%86%E3%80%81%E5%AF%86%E9%92%A5%E3%80%81%E7%AD%BE%E5%90%8D%E4%B8%8E%E8%AF%81%E4%B9%A6)/"/>
      <url>/2017/06/01/ANDROID/INTERMEDIATE/01Android%E5%AE%89%E5%85%A8%E7%B3%BB%E5%88%97%E7%AF%87%E4%B8%80(%E5%8A%A0%E5%AF%86%E3%80%81%E5%AF%86%E9%92%A5%E3%80%81%E7%AD%BE%E5%90%8D%E4%B8%8E%E8%AF%81%E4%B9%A6)/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安全要解决什么问题"><a href="#一、安全要解决什么问题" class="headerlink" title="一、安全要解决什么问题"></a>一、安全要解决什么问题</h2><p>在典型的场景中，安全主要用于解决4类需求：</p><h4 id="保密（Security-Confidentiality）"><a href="#保密（Security-Confidentiality）" class="headerlink" title="保密（Security/Confidentiality）"></a>保密（Security/Confidentiality）</h4><p>不希望通信中的信息被第三方窥探；密码；公司机要文件等；</p><h4 id="鉴别-认证（Authentication）"><a href="#鉴别-认证（Authentication）" class="headerlink" title="鉴别/认证（Authentication）"></a>鉴别/认证（Authentication）</h4><p>明确通信对端的身份是你认为的身份。如打电话时通过声音语气等明确对方的身份；银行柜台办理业务时，银行业务员会仔细辨别身份证照片与本人相貌以及问一些能验证身份相关的问题。</p><h4 id="完整性（Integrity）"><a href="#完整性（Integrity）" class="headerlink" title="完整性（Integrity）"></a>完整性（Integrity）</h4><p>能确定信息是否被篡改或丢失。如借钱的收据一般用大写数字，或者阿拉伯数字之间没有空格等要求，防止收据被篡改。</p><h4 id="不可否认性（non-repudiation）"><a href="#不可否认性（non-repudiation）" class="headerlink" title="不可否认性（non-repudiation）"></a>不可否认性（non-repudiation）</h4><p>能明确是谁产生，且无法被“赖掉”。如手印、指纹、皇帝诏书等。</p><h4 id="二、你都会的密码术"><a href="#二、你都会的密码术" class="headerlink" title="二、你都会的密码术"></a>二、你都会的密码术</h4>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15 代码控制Layout</title>
      <link href="/2017/05/31/ANDROID/BASE/16RecyclerView/"/>
      <url>/2017/05/31/ANDROID/BASE/16RecyclerView/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15 代码控制Layout</title>
      <link href="/2017/05/30/ANDROID/BASE/15%E4%BB%A3%E7%A0%81%E6%8E%A7%E5%88%B6Layout/"/>
      <url>/2017/05/30/ANDROID/BASE/15%E4%BB%A3%E7%A0%81%E6%8E%A7%E5%88%B6Layout/</url>
      
        <content type="html"><![CDATA[<p>虽然Google官方强烈建议我们视图应该在配置文件中定义，但是我们依然得掌握使用代码来控制布局文件。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.layout;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line">import android.widget.Button;</div><div class="line">import android.widget.LinearLayout;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private LinearLayout rootView;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        rootView = new LinearLayout(this);</div><div class="line">        rootView.setOrientation(LinearLayout.VERTICAL);</div><div class="line">        <span class="built_in">set</span>ContentView(rootView);</div><div class="line"></div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; 5; i++) &#123;</div><div class="line">            Button button = new Button(this);</div><div class="line">            button.setAllCaps(<span class="literal">false</span>);</div><div class="line">            button.setText(<span class="string">"Click To Remove Me"</span>);</div><div class="line">            button.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(View v) &#123;</div><div class="line">                    rootView.removeView(v);</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line"></div><div class="line">            LinearLayout.LayoutParams lp = new LinearLayout.LayoutParams(</div><div class="line">                    LinearLayout.LayoutParams.MATCH_PARENT, LinearLayout.LayoutParams.WRAP_CONTENT );</div><div class="line">            lp.weight = 1;</div><div class="line">            rootView.addView(button, lp);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14 Fragment</title>
      <link href="/2017/05/29/ANDROID/BASE/14Fragment/"/>
      <url>/2017/05/29/ANDROID/BASE/14Fragment/</url>
      
        <content type="html"><![CDATA[<h2 id="一、使用Fragment"><a href="#一、使用Fragment" class="headerlink" title="一、使用Fragment"></a>一、使用Fragment</h2><h4 id="1、自定义SecondFragment"><a href="#1、自定义SecondFragment" class="headerlink" title="1、自定义SecondFragment"></a>1、自定义SecondFragment</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.fragment;</div><div class="line"></div><div class="line">import android.os.Bundle;</div><div class="line">import android.support.annotation.Nullable;</div><div class="line">import android.support.v4.app.Fragment;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">public class SecondFragment extends Fragment &#123;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        View root = inflater.inflate(R.layout.fragment_second, container, <span class="literal">false</span>);</div><div class="line">        root.findViewById(R.id.btnBackFirstFragment).setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                getActivity().getSupportFragmentManager().popBackStack();   // 返回</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="built_in">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、自定义FirstFragment"><a href="#2、自定义FirstFragment" class="headerlink" title="2、自定义FirstFragment"></a>2、自定义FirstFragment</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.fragment;</div><div class="line"></div><div class="line">import android.os.Bundle;</div><div class="line">import android.support.annotation.Nullable;</div><div class="line">import android.support.v4.app.Fragment;</div><div class="line">import android.view.LayoutInflater;</div><div class="line">import android.view.View;</div><div class="line">import android.view.ViewGroup;</div><div class="line"></div><div class="line">public class FirstFragment extends Fragment &#123;</div><div class="line"></div><div class="line">    @Nullable</div><div class="line">    @Override</div><div class="line">    public View onCreateView(LayoutInflater inflater, @Nullable ViewGroup container, @Nullable Bundle savedInstanceState) &#123;</div><div class="line">        View root = inflater.inflate(R.layout.fragment_first, container, <span class="literal">false</span>);</div><div class="line">        root.findViewById(R.id.btnStartSecondFragment).setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;   // SecondFragment替换当前的FirstFragment</div><div class="line">                getActivity().getSupportFragmentManager().beginTransaction()</div><div class="line">                        .addToBackStack(null)   /* 返回键返回上一个Fragment */</div><div class="line">                        .replace(R.id.container, new SecondFragment())</div><div class="line">                        .commit();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        <span class="built_in">return</span> root;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、MainActivity"><a href="#3、MainActivity" class="headerlink" title="3、MainActivity"></a>3、MainActivity</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.fragment;</div><div class="line"></div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (savedInstanceState == null) &#123;</div><div class="line">            getSupportFragmentManager().beginTransaction()</div><div class="line">                    .add(R.id.container, new FirstFragment())</div><div class="line">                    .commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4、布局文件activity-main-xml、fragment-first-xml-和-fragment-second-xml"><a href="#4、布局文件activity-main-xml、fragment-first-xml-和-fragment-second-xml" class="headerlink" title="4、布局文件activity_main.xml、fragment_first.xml 和 fragment_second.xml"></a>4、布局文件activity_main.xml、fragment_first.xml 和 fragment_second.xml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;FrameLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/container"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>/&gt;</div><div class="line"></div><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:text=<span class="string">"This is first fragment"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:text=<span class="string">"Start Second Fragment"</span></div><div class="line">        android:textAllCaps=<span class="string">"false"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/btnStartSecondFragment"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div><div class="line"></div><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span>&gt;</div><div class="line">    &lt;TextView</div><div class="line">        android:text=<span class="string">"This is second fragment"</span></div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span> /&gt;</div><div class="line">    &lt;Button</div><div class="line">        android:text=<span class="string">"Go Back"</span></div><div class="line">        android:textAllCaps=<span class="string">"false"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:id=<span class="string">"@+id/btnBackFirstFragment"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><h4 id="5、静态使用Fragment"><a href="#5、静态使用Fragment" class="headerlink" title="5、静态使用Fragment"></a>5、静态使用Fragment</h4><p>上述为动态的使用Fragment，静态的使用方式是在布局文件里指定使用哪个Fragment：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;fragment  </div><div class="line">    android:id=<span class="string">"@+id/fragment_first"</span>  </div><div class="line">    android:name=<span class="string">"com.xianxiaotao.FirstFragment"</span>  </div><div class="line">    android:layout_width=<span class="string">"match_parent"</span>  </div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure></p><h2 id="二、Fragment的生命周期"><a href="#二、Fragment的生命周期" class="headerlink" title="二、Fragment的生命周期"></a>二、Fragment的生命周期</h2><h4 id="简述"><a href="#简述" class="headerlink" title="简述"></a>简述</h4><p>Fragment必须是依存与Activity而存在的，因此Activity的生命周期会直接影响到Fragment的生命周期。官网这张图很好的说明了两者生命周期的关系：<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1fg27lza049j209g0irdgq.jpg" alt="Fragment的生命周期"><br>可以看到Fragment比Activity多了几个额外的生命周期回调方法：<br>onAttach(Activity)<br>当Fragment与Activity发生关联时调用。<br>onCreateView(LayoutInflater, ViewGroup,Bundle)<br>创建该Fragment的视图<br>onActivityCreated(Bundle)<br>当Activity的onCreate方法返回时调用<br>onDestoryView()<br>与onCreateView想对应，当该Fragment的视图被移除时调用<br>onDetach()<br>与onAttach相对应，当Fragment与Activity关联被取消时调用<br>注意：除了onCreateView，其他的所有方法如果你重写了，必须调用父类对于该方法的实现</p><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>在上述Demo中每个Fragment里重写所有的生命周期方法以及MainActivity，并输出日志信息。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onAttach(Context context) &#123;</div><div class="line">    super.onAttach(context);</div><div class="line">    System.out.println(<span class="string">"FirstFragment onAttach"</span>);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="1、启动程序，在MainActivity的onCreate方法中引用了FirstFragment。日志如下："><a href="#1、启动程序，在MainActivity的onCreate方法中引用了FirstFragment。日志如下：" class="headerlink" title="1、启动程序，在MainActivity的onCreate方法中引用了FirstFragment。日志如下："></a>1、启动程序，在MainActivity的onCreate方法中引用了FirstFragment。日志如下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">MainActivity onCreate</div><div class="line">FirstFragment onAttach</div><div class="line">FirstFragment onCreate</div><div class="line">FirstFragment onCreateView</div><div class="line">FirstFragment onActivityCreated</div><div class="line">FirstFragment onStart</div><div class="line">MainActivity onStart</div><div class="line">MainActivity onResume</div><div class="line">FirstFragment onResume</div></pre></td></tr></table></figure><h4 id="2、Start-Second-Fragment，使用SecondFragment替换FirstFragment。日志："><a href="#2、Start-Second-Fragment，使用SecondFragment替换FirstFragment。日志：" class="headerlink" title="2、Start Second Fragment，使用SecondFragment替换FirstFragment。日志："></a>2、Start Second Fragment，使用SecondFragment替换FirstFragment。日志：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SecondFragment onAttach</div><div class="line">SecondFragment onCreate</div><div class="line">FirstFragment onPause</div><div class="line">FirstFragment onStop</div><div class="line">FirstFragment onDestroyView</div><div class="line">SecondFragment onCreateView</div><div class="line">SecondFragment onActivityCreated</div><div class="line">SecondFragment onStart</div><div class="line">SecondFragment onResume</div></pre></td></tr></table></figure><h4 id="3、Go-Back，由SecondFragment返回到FirstFragment。日志："><a href="#3、Go-Back，由SecondFragment返回到FirstFragment。日志：" class="headerlink" title="3、Go Back，由SecondFragment返回到FirstFragment。日志："></a>3、Go Back，由SecondFragment返回到FirstFragment。日志：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">SecondFragment onPause</div><div class="line">SecondFragment onStop</div><div class="line">SecondFragment onDestroyView</div><div class="line">SecondFragment onDestroy</div><div class="line">SecondFragment onDetach</div><div class="line">FirstFragment onCreateView</div><div class="line">FirstFragment onActivityCreated</div><div class="line">FirstFragment onStart</div><div class="line">FirstFragment onResume</div></pre></td></tr></table></figure><h4 id="4、返回，即退出应用程序。日志："><a href="#4、返回，即退出应用程序。日志：" class="headerlink" title="4、返回，即退出应用程序。日志："></a>4、返回，即退出应用程序。日志：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">FirstFragment onPause</div><div class="line">MainActivity onPause</div><div class="line">FirstFragment onStop</div><div class="line">MainActivity onStop</div><div class="line">FirstFragment onDestroyView</div><div class="line">FirstFragment onDestroy</div><div class="line">FirstFragment onDetach</div><div class="line">MainActivity onDestroy</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13 Android6.0运行时权限处理</title>
      <link href="/2017/05/29/ANDROID/BASE/13Android6.0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/"/>
      <url>/2017/05/29/ANDROID/BASE/13Android6.0%E8%BF%90%E8%A1%8C%E6%97%B6%E6%9D%83%E9%99%90%E5%A4%84%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>参考文档：</p><ul><li><a href="http://developer.android.com/intl/zh-cn/about/versions/marshmallow/android-6.0-changes.html#behavior-runtime-permissions" target="_blank" rel="external">google官方文档</a></li><li><a href="http://blog.csdn.net/lmj623565791/article/details/50709663" target="_blank" rel="external">Android 6.0 运行时权限处理完全解析</a></li><li><a href="http://blog.csdn.net/andrexpert/article/details/53331836" target="_blank" rel="external">探讨Android 6.0及以上新权限系统的检测与处理</a></li></ul><h2 id="一、新的权限机制"><a href="#一、新的权限机制" class="headerlink" title="一、新的权限机制"></a>一、新的权限机制</h2><p>Google将权限分为两类，一类是Normal Permissions，这类权限一般不涉及用户隐私，是不需要用户进行授权的，比如手机震动、访问网络等；另一类是Dangerous Permissions,一般是涉及到用户隐私的，需要用户进行授权，比如读取sdcard、访问通讯录等。</p><h4 id="Normal-Permissions"><a href="#Normal-Permissions" class="headerlink" title="Normal Permissions"></a>Normal Permissions</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">ACCESS_LOCATION_EXTRA_COMMANDS</div><div class="line">ACCESS_NETWORK_STATE</div><div class="line">ACCESS_NOTIFICATION_POLICY</div><div class="line">ACCESS_WIFI_STATE</div><div class="line">BLUETOOTH</div><div class="line">BLUETOOTH_ADMIN</div><div class="line">BROADCAST_STICKY</div><div class="line">CHANGE_NETWORK_STATE</div><div class="line">CHANGE_WIFI_MULTICAST_STATE</div><div class="line">CHANGE_WIFI_STATE</div><div class="line">DISABLE_KEYGUARD</div><div class="line">EXPAND_STATUS_BAR</div><div class="line">GET_PACKAGE_SIZE</div><div class="line">INSTALL_SHORTCUT</div><div class="line">INTERNET</div><div class="line">KILL_BACKGROUND_PROCESSES</div><div class="line">MODIFY_AUDIO_SETTINGS</div><div class="line">NFC</div><div class="line">READ_SYNC_SETTINGS</div><div class="line">READ_SYNC_STATS</div><div class="line">RECEIVE_BOOT_COMPLETED</div><div class="line">REORDER_TASKS</div><div class="line">REQUEST_INSTALL_PACKAGES</div><div class="line">SET_ALARM</div><div class="line">SET_TIME_ZONE</div><div class="line">SET_WALLPAPER</div><div class="line">SET_WALLPAPER_HINTS</div><div class="line">TRANSMIT_IR</div><div class="line">UNINSTALL_SHORTCUT</div><div class="line">USE_FINGERPRINT</div><div class="line">VIBRATE</div><div class="line">WAKE_LOCK</div><div class="line">WRITE_SYNC_SETTINGS</div></pre></td></tr></table></figure><h4 id="Dangerous-Permissions"><a href="#Dangerous-Permissions" class="headerlink" title="Dangerous Permissions"></a>Dangerous Permissions</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div></pre></td><td class="code"><pre><div class="line">group:android.permission-group.CONTACTS</div><div class="line">    permission:android.permission.WRITE_CONTACTS</div><div class="line">    permission:android.permission.GET_ACCOUNTS</div><div class="line">    permission:android.permission.READ_CONTACTS</div><div class="line"></div><div class="line">group:android.permission-group.PHONE</div><div class="line">    permission:android.permission.READ_CALL_LOG</div><div class="line">    permission:android.permission.READ_PHONE_STATE</div><div class="line">    permission:android.permission.CALL_PHONE</div><div class="line">    permission:android.permission.WRITE_CALL_LOG</div><div class="line">    permission:android.permission.USE_SIP</div><div class="line">    permission:android.permission.PROCESS_OUTGOING_CALLS</div><div class="line">    permission:com.android.voicemail.permission.ADD_VOICEMAIL</div><div class="line"></div><div class="line">group:android.permission-group.CALENDAR</div><div class="line">    permission:android.permission.READ_CALENDAR</div><div class="line">    permission:android.permission.WRITE_CALENDAR</div><div class="line"></div><div class="line">group:android.permission-group.CAMERA</div><div class="line">    permission:android.permission.CAMERA</div><div class="line"></div><div class="line">group:android.permission-group.SENSORS</div><div class="line">    permission:android.permission.BODY_SENSORS</div><div class="line"></div><div class="line">group:android.permission-group.LOCATION</div><div class="line">    permission:android.permission.ACCESS_FINE_LOCATION</div><div class="line">    permission:android.permission.ACCESS_COARSE_LOCATION</div><div class="line"></div><div class="line">group:android.permission-group.STORAGE</div><div class="line">    permission:android.permission.READ_EXTERNAL_STORAGE</div><div class="line">    permission:android.permission.WRITE_EXTERNAL_STORAGE</div><div class="line"></div><div class="line">group:android.permission-group.MICROPHONE</div><div class="line">    permission:android.permission.RECORD_AUDIO</div><div class="line"></div><div class="line">group:android.permission-group.SMS</div><div class="line">    permission:android.permission.READ_SMS</div><div class="line">    permission:android.permission.RECEIVE_WAP_PUSH</div><div class="line">    permission:android.permission.RECEIVE_MMS</div><div class="line">    permission:android.permission.RECEIVE_SMS</div><div class="line">    permission:android.permission.SEND_SMS</div><div class="line">    permission:android.permission.READ_CELL_BROADCASTS</div></pre></td></tr></table></figure><p>Dangerous Permissions分组机制：如果你申请某个危险的权限，假设你的app早已被用户授权了同一组的某个危险权限，那么系统立即授权，而不需要用户点击授权。比如你的app对READ_CONTACTS已经授权了，当你的app申请WRITE_CONTACTS时，系统会直接授权通过。此外，对于申请时弹出的dialog上面的文本说明也是对整个权限组的说明，而不是单个权限的说明。</p><blockquote><p>不过需要注意的是，不要对权限组过多的依赖，尽可能对每个危险权限都进行正常流程的申请，因为在后期的版本中这个权限组可能会产生变化。</p></blockquote><h2 id="二、API的使用"><a href="#二、API的使用" class="headerlink" title="二、API的使用"></a>二、API的使用</h2><h4 id="1、在AndroidManifest文件中添加需要的权限："><a href="#1、在AndroidManifest文件中添加需要的权限：" class="headerlink" title="1、在AndroidManifest文件中添加需要的权限："></a>1、在AndroidManifest文件中添加需要的权限：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.READ_CONTACTS"</span>/&gt;</div></pre></td></tr></table></figure><h4 id="2、检查权限："><a href="#2、检查权限：" class="headerlink" title="2、检查权限："></a>2、检查权限：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.READ_CONTACTS) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">    // 未被授权，申请权限</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    // 已被授权</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>ContextCompat.checkSelfPermission：主要用于检测某个权限是否已经被授予，方法返回值为PackageManager.PERMISSION_DENIED或者PackageManager.PERMISSION_GRANTED。当返回DENIED就需要进行申请授权了。</p><h4 id="3、申请权限授权"><a href="#3、申请权限授权" class="headerlink" title="3、申请权限授权"></a>3、申请权限授权</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">ActivityCompat.requestPermissions(</div><div class="line">       thisActivity,   /* Context */</div><div class="line">       new String[]&#123;Manifest.permission.READ_CONTACTS&#125;,    /* 需要申请的权限的字符串数组 */</div><div class="line">       MY_PERMISSIONS_REQUEST_READ_CONTACTS    /* requestCode,用于回调时检测 */</div><div class="line">   );</div></pre></td></tr></table></figure><p>该方法是异步的，支持一次性申请多个权限授权，而系统会通过对话框逐一询问用户是否授权。</p><h4 id="4、处理申请回调"><a href="#4、处理申请回调" class="headerlink" title="4、处理申请回调"></a>4、处理申请回调</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onRequestPermissionResult(int requestCode, String[] permissions, int[] grantResult) &#123;</div><div class="line">    switch(requestCode) &#123;</div><div class="line">        // If request is cancelled, the result arrays are empty.</div><div class="line">        <span class="keyword">if</span> (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            // Permission was granted, yay! Do the contacts-related task you need to do.</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            // Permission denied, boo! Disable the functionality that depends on this permission.</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>对于权限的申请结果，首先验证requestCode定位到你的申请，然后验证grantResults对应于申请的结果，这里的数组对应于申请时的第二个权限字符串数组。如果你同时申请两个权限，那么grantResults的length就为2，分别记录你两个权限的申请结果。如果申请成功，就可以做你的事情了~</p><h4 id="5、还有个API值得提一下："><a href="#5、还有个API值得提一下：" class="headerlink" title="5、还有个API值得提一下："></a>5、还有个API值得提一下：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">// Should we show an explanation?</div><div class="line"><span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity, Manifest.permission.READ_CONTACTS)) </div><div class="line">    // Show an expanation to the user *asynchronously* -- don<span class="string">'t block</span></div><div class="line">    // this thread waiting for the user's response! After the user</div><div class="line">    // sees the explanation, try again to request the permission.</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这个API主要用于给用户一个申请权限的解释，该方法只有在用户在上一次已经拒绝过你的这个权限申请。也就是说，用户已经拒绝一次了，你又弹个授权框，你需要给用户一个解释，为什么要授权，则使用该方法。</p><h4 id="6、综合上述步骤："><a href="#6、综合上述步骤：" class="headerlink" title="6、综合上述步骤："></a>6、综合上述步骤：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">// Here, thisActivity is the current activity</div><div class="line"><span class="keyword">if</span> (ContextCompat.checkSelfPermission(thisActivity, Manifest.permission.READ_CONTACTS)</div><div class="line">        != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line"></div><div class="line">    // Should we show an explanation?</div><div class="line">    <span class="keyword">if</span> (ActivityCompat.shouldShowRequestPermissionRationale(thisActivity,</div><div class="line">            Manifest.permission.READ_CONTACTS)) &#123;</div><div class="line"></div><div class="line">        // Show an expanation to the user *asynchronously* -- don<span class="string">'t block</span></div><div class="line">        // this thread waiting for the user's response! After the user</div><div class="line">        // sees the explanation, try again to request the permission.</div><div class="line"></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line"></div><div class="line">        // No explanation needed, we can request the permission.</div><div class="line"></div><div class="line">        ActivityCompat.requestPermissions(thisActivity,</div><div class="line">                new String[]&#123;Manifest.permission.READ_CONTACTS&#125;,</div><div class="line">                MY_PERMISSIONS_REQUEST_READ_CONTACTS);</div><div class="line"></div><div class="line">        // MY_PERMISSIONS_REQUEST_READ_CONTACTS is an</div><div class="line">        // app-defined int constant. The callback method gets the</div><div class="line">        // result of the request.</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="三、Simple-Demo-：直接拨打电话"><a href="#三、Simple-Demo-：直接拨打电话" class="headerlink" title="三、Simple Demo ：直接拨打电话"></a>三、Simple Demo ：直接拨打电话</h2><h4 id="AndroidManifest-xml"><a href="#AndroidManifest-xml" class="headerlink" title="AndroidManifest.xml"></a>AndroidManifest.xml</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">          package=<span class="string">"com.xianxiaotao.callphone"</span>&gt;</div><div class="line"></div><div class="line">    &lt;uses-permission android:name=<span class="string">"android.permission.CALL_PHONE"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;application</div><div class="line">        android:allowBackup=<span class="string">"true"</span></div><div class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        android:label=<span class="string">"@string/app_name"</span></div><div class="line">        android:supportsRtl=<span class="string">"true"</span></div><div class="line">        android:theme=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        &lt;activity android:name=<span class="string">".MainActivity"</span>&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span>/&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"></div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure><h4 id="MainActivity-java"><a href="#MainActivity-java" class="headerlink" title="MainActivity.java"></a>MainActivity.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.callphone;</div><div class="line"></div><div class="line">import android.Manifest;</div><div class="line">import android.content.Intent;</div><div class="line">import android.content.pm.PackageManager;</div><div class="line">import android.net.Uri;</div><div class="line">import android.support.annotation.NonNull;</div><div class="line">import android.support.v4.app.ActivityCompat;</div><div class="line">import android.support.v4.content.ContextCompat;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line">import android.widget.Toast;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private static final int MY_PERMISSIONS_REQUEST_CALL_PHONE = 1;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void callPhone(View v) &#123;</div><div class="line">        <span class="keyword">if</span> (ContextCompat.checkSelfPermission(this, Manifest.permission.CALL_PHONE) != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            ActivityCompat.requestPermissions(this, new String[]&#123;Manifest.permission.CALL_PHONE&#125;, MY_PERMISSIONS_REQUEST_CALL_PHONE);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            call();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="function"><span class="title">call</span></span>() &#123;</div><div class="line">        Intent intent = new Intent(Intent.ACTION_CALL);</div><div class="line">        Uri data = Uri.parse(<span class="string">"tel:"</span> + 10086);</div><div class="line">        intent.setData(data);</div><div class="line">        try &#123;</div><div class="line">            startActivity(intent);</div><div class="line">        &#125; catch (SecurityException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123;</div><div class="line">        <span class="keyword">if</span> (requestCode == MY_PERMISSIONS_REQUEST_CALL_PHONE) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResults[0] == PackageManager.PERMISSION_GRANTED)</div><div class="line">                call();</div><div class="line">            <span class="keyword">else</span></div><div class="line">                Toast.makeText(MainActivity.this, <span class="string">"Permission Denied"</span>, Toast.LENGTH_SHORT).show();</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">        super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>在Android 6.x上运行是，点击testCall，即会弹出授权窗口，如何你Allow则直接拨打电话，如果Denied则Toast弹出”Permission Denied”。</p><blockquote><p>对于Intent这种方式，很多情况下是不需要授权的甚至权限都不需要的，比如以下情况就不需要申请权限：你是到拨号界面而不是直接拨打电话；打开系统图库去选择照片；调用系统相机app去拍照等。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>12 权限系统</title>
      <link href="/2017/05/28/ANDROID/BASE/12%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/"/>
      <url>/2017/05/28/ANDROID/BASE/12%E6%9D%83%E9%99%90%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h4 id="请求权限"><a href="#请求权限" class="headerlink" title="请求权限"></a>请求权限</h4><p>代码中包含这样的代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">mWebView.loadUrl(<span class="string">"https://xianxiaotao.github.io/"</span>);</div></pre></td></tr></table></figure></p><p>我们需要为它请求网络权限，在AndroidMainfest.xml文件中添加以下权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.INTERNET"</span>/&gt;</div></pre></td></tr></table></figure></p><h4 id="为代码添加权限检查"><a href="#为代码添加权限检查" class="headerlink" title="为代码添加权限检查"></a>为代码添加权限检查</h4><p>在AndroidMainfest.xml文件中声明一个自定义权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;permission android:name=<span class="string">"com.xianxiaotao.checkpermission.permission.DO_SOMETHING"</span> /&gt;</div></pre></td></tr></table></figure></p><p>当我们需要在代码中为应用添加权限检查功能时，如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class CheckPermission &#123;</div><div class="line"></div><div class="line">    public static final String PERMISSION_DO_SOMETHING = <span class="string">"com.xianxiaotao.checkpermission.permission.DO_SOMETHING"</span>;</div><div class="line"></div><div class="line">    public static void <span class="keyword">do</span>Something(Context context) &#123;</div><div class="line">        int checkResult = context.checkCallingOrSelfPermission(PERMISSION_DO_SOMETHING);</div><div class="line">        <span class="keyword">if</span> (checkResult != PackageManager.PERMISSION_GRANTED) &#123;</div><div class="line">            throw new SecurityException(<span class="string">"doSomething need permission: "</span> + PERMISSION_DO_SOMETHING);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"If allowed, do something!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        CheckPermission.doSomething(this);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>此时运行程序，发生SecurityException。为此，我们需要添加权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"com.xianxiaotao.checkpermission.permission.DO_SOMETHING"</span>/&gt;</div></pre></td></tr></table></figure></p><h4 id="为基本组件添加权限检查"><a href="#为基本组件添加权限检查" class="headerlink" title="为基本组件添加权限检查"></a>为基本组件添加权限检查</h4><p>这种自定义的权限通常是为其他应用访问本应用所设的限制。例如在AndroidMainfest.xml文件中声明一个自定义权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;permission android:name=<span class="string">"com.xianxiaotao.music.permission.PLAY_MUSIC"</span> /&gt;</div></pre></td></tr></table></figure></p><p>然后为PlayMusicActivity添加权限检查：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;activity </div><div class="line">    android:name=<span class="string">".activity.PlayMusicActivity"</span></div><div class="line">    android:permission=<span class="string">"com.xianxiaotao.music.permission.PLAY_MUSIC"</span>&gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">        &lt;action android:name=<span class="string">"com.xianxiaotao.music.intent.action.PLAY_MUSIC"</span>/&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/activity&gt;</div></pre></td></tr></table></figure></p><p>应用内部执行下列语句，则不需要做额外工作，在同一个应用内，对于四大组件来说默认拥有访问权限。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(new Intent(MainActivity.this, PlayMusicActivity.class));</div></pre></td></tr></table></figure></p><p>但是对于其他应用，如果：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">startActivity(new Intent(<span class="string">"com.xianxiaotao.music.permission.PLAY_MUSIC"</span>));</div></pre></td></tr></table></figure></p><p>就需要添加权限才能访问PlayMusicActivity：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"com.xianxiaotao.music.permission.PLAY_MUSIC"</span>/&gt;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11 日志系统</title>
      <link href="/2017/05/28/ANDROID/BASE/11%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/"/>
      <url>/2017/05/28/ANDROID/BASE/11%E6%97%A5%E5%BF%97%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h2 id="使用日志API"><a href="#使用日志API" class="headerlink" title="使用日志API"></a>使用日志API</h2><h4 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private static final String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">Log.e(TAG, <span class="string">"错误信息"</span>);</div><div class="line">Log.w(TAG, <span class="string">"警告信息"</span>);</div><div class="line">Log.i(TAG, <span class="string">"普通信息"</span>);</div><div class="line">Log.d(TAG, <span class="string">"调试信息"</span>);</div><div class="line">Log.v(TAG, <span class="string">"无用信息"</span>); // 便于程序猿唠叨</div></pre></td></tr></table></figure><p>Java日志：System.out对应Log.i；System.err对应Log.w</p><h4 id="日志分类"><a href="#日志分类" class="headerlink" title="日志分类"></a>日志分类</h4><p>在Android Studio中对日志进行分类呈现，便于开发调试：</p><ul><li>Android Monitor -&gt; 选择Log level: Verbose、Debug、Info、Warn、Error</li><li>Regex：进行搜索</li><li>Edit Filter Configuration</li></ul><h4 id="DDMS中查看日志"><a href="#DDMS中查看日志" class="headerlink" title="DDMS中查看日志"></a>DDMS中查看日志</h4><p>1) 使用Android Studio中的DDMS<br>Tools -&gt; Android -&gt; Android Device Monitor<br>2) 独立的 DDMS 查看日志<br>双击Mac电脑上文件：/xianxiaotao/Library/Android/SDK/tools/ddms</p><h2 id="日志工具类"><a href="#日志工具类" class="headerlink" title="日志工具类"></a>日志工具类</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.utils;</div><div class="line"></div><div class="line">import android.util.Log;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Log统一管理类</div><div class="line"> */</div><div class="line">public class L &#123;</div><div class="line"></div><div class="line">    private <span class="function"><span class="title">L</span></span>() &#123;</div><div class="line">        /* cannot be instantiated */</div><div class="line">        throw new UnsupportedOperationException(<span class="string">"cannot be instantiated"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static boolean isDebug = <span class="literal">true</span>;   // 是否需要打印bug，可以在application的onCreate函数里面初始化</div><div class="line">    private static final String TAG = <span class="string">"xian"</span>;</div><div class="line"></div><div class="line">    // 下面四个是默认tag的函数</div><div class="line">    public static void v(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.v(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void d(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.d(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void i(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.i(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void w(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.w(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void e(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.e(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 下面是传入自定义tag的函数</div><div class="line"></div><div class="line">    public static void v(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.v(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void d(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.d(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void i(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.i(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void w(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.w(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void e(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug)</div><div class="line">            Log.e(tag, msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="以后进阶：奔溃日志收集与上传"><a href="#以后进阶：奔溃日志收集与上传" class="headerlink" title="以后进阶：奔溃日志收集与上传"></a>以后进阶：奔溃日志收集与上传</h2>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>10 BroadcastReceiver</title>
      <link href="/2017/05/28/ANDROID/BASE/10BroadcastReceiver/"/>
      <url>/2017/05/28/ANDROID/BASE/10BroadcastReceiver/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本概念"><a href="#一、基本概念" class="headerlink" title="一、基本概念"></a>一、基本概念</h2><h4 id="广播"><a href="#广播" class="headerlink" title="广播"></a>广播</h4><ul><li>有序广播：被广播接收器接收后，可被终止，无法往下继续传达。</li><li>普通广播：发送至每一个已经注册（订阅）的广播接收器，无法被终止。</li></ul><h4 id="广播接收器"><a href="#广播接收器" class="headerlink" title="广播接收器"></a>广播接收器</h4><ul><li>静态注册广播接收器：在AndroidManifest.xml中设置，程序不用启动亦可接收。</li><li>动态注册广播接收器：代码中注册广播，程序未启动时，无法接收广播。</li></ul><h2 id="二、使用BroadcastReceiver"><a href="#二、使用BroadcastReceiver" class="headerlink" title="二、使用BroadcastReceiver"></a>二、使用BroadcastReceiver</h2><h4 id="创建MyReceiver-java"><a href="#创建MyReceiver-java" class="headerlink" title="创建MyReceiver.java"></a>创建MyReceiver.java</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.learnreceiver;</div><div class="line"></div><div class="line">import android.content.BroadcastReceiver;</div><div class="line">import android.content.Context;</div><div class="line">import android.content.Intent;</div><div class="line"></div><div class="line">public class MyReceiver extends BroadcastReceiver &#123;</div><div class="line"></div><div class="line">    private static final String ARG = <span class="string">"data"</span>;</div><div class="line"></div><div class="line">    public <span class="function"><span class="title">MyReceiver</span></span>() &#123;&#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onReceive(Context context, Intent intent) &#123;</div><div class="line">        System.out.println(<span class="string">"My Receiver : "</span> + intent.getStringExtra(ARG));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 静态注册发送广播方式</div><div class="line">     */</div><div class="line">    public static Intent newIntent(Context context, String args) &#123;</div><div class="line">        Intent intent = new Intent(context, MyReceiver.class);</div><div class="line">        intent.putExtra(ARG, args);</div><div class="line">        <span class="built_in">return</span> intent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="静态注册"><a href="#静态注册" class="headerlink" title="静态注册"></a>静态注册</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&lt;application&gt;</div><div class="line">    ...</div><div class="line"></div><div class="line">    &lt;receiver</div><div class="line">        android:name=<span class="string">".MyReceiver"</span></div><div class="line">        android:enabled=<span class="string">"true"</span></div><div class="line">        android:exported=<span class="string">"true"</span>&gt;</div><div class="line">    &lt;/receiver&gt;</div><div class="line">&lt;/application&gt;</div></pre></td></tr></table></figure><h4 id="发送广播"><a href="#发送广播" class="headerlink" title="发送广播"></a>发送广播</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sendBroadcast(MyReceiver.newIntent(this, <span class="string">"xianxiaotao"</span>));</div></pre></td></tr></table></figure><h2 id="三、动态注册和注销BroadcastReceiver"><a href="#三、动态注册和注销BroadcastReceiver" class="headerlink" title="三、动态注册和注销BroadcastReceiver"></a>三、动态注册和注销BroadcastReceiver</h2><h4 id="动态注册不需要在AndroidMainfest-xml文件中配置"><a href="#动态注册不需要在AndroidMainfest-xml文件中配置" class="headerlink" title="动态注册不需要在AndroidMainfest.xml文件中配置"></a>动态注册不需要在AndroidMainfest.xml文件中配置</h4><p>删除AndroidMainfest.xml文件中对MyReceiver的声明</p><h4 id="为MyReceiver增加动新的发送广播方式"><a href="#为MyReceiver增加动新的发送广播方式" class="headerlink" title="为MyReceiver增加动新的发送广播方式"></a>为MyReceiver增加动新的发送广播方式</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MyReceiver extends BroadcastReceiver &#123;</div><div class="line"></div><div class="line">    private static final String ARG = <span class="string">"data"</span>;</div><div class="line">    public static final String ACTION = <span class="string">"MyReceiver.intent.action"</span>;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 动态注册发送广播方式</div><div class="line">     */</div><div class="line">    public static Intent newIntent(String args) &#123;</div><div class="line">        Intent intent = new Intent(MyReceiver.ACTION);</div><div class="line">        intent.putExtra(ARG, args);</div><div class="line">        <span class="built_in">return</span> intent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="MainActivity中动态注册、发送广播和注销广播"><a href="#MainActivity中动态注册、发送广播和注销广播" class="headerlink" title="MainActivity中动态注册、发送广播和注销广播"></a>MainActivity中动态注册、发送广播和注销广播</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener &#123;</div><div class="line"></div><div class="line">    private MyReceiver mMyReceiver = null;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onClick(View v) &#123;</div><div class="line">        switch (v.getId()) &#123;</div><div class="line">            <span class="keyword">case</span> R.id.btnSendBroadcast:// 发送广播</div><div class="line">                sendBroadcast(MyReceiver.newIntent(<span class="string">"xianxiaotao"</span>));</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btnRegBroadcast:// 注册广播</div><div class="line">                <span class="keyword">if</span> (mMyReceiver == null) &#123;</div><div class="line">                    mMyReceiver = new MyReceiver();</div><div class="line">                    registerReceiver(mMyReceiver, new IntentFilter(MyReceiver.ACTION));</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> R.id.btnUnregBroadcast:// 注销广播</div><div class="line">                <span class="keyword">if</span> (mMyReceiver != null) &#123;</div><div class="line">                    unregisterReceiver(mMyReceiver);</div><div class="line">                    mMyReceiver = null;</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>实际开发中必须在onDestroy方法中注销广播，否则有内存泄漏的风险！！！</p></blockquote><h2 id="四、动态注册和静态注册的区别"><a href="#四、动态注册和静态注册的区别" class="headerlink" title="四、动态注册和静态注册的区别"></a>四、动态注册和静态注册的区别</h2><ul><li>动态注册的广播会受Activity的生命周期的影响，当Activity销毁的时候，广播就失效了。</li><li>而静态注册的广播，即使Activity销毁了，仍然可以收到广播。更牛掰的是即使杀死进程，仍然可以收到广播，关于这点不同的手机测试的结果是不同的。</li><li>静态注册的广播，必需单独成一个类，不能像动态注册那样写在某个界面里。</li></ul><blockquote><p>在Android中，有一些action是不支持静态注册的：</p><ul><li>android.intent.action.SCREEN_ON</li><li>android.intent.action.SCREEN_OFF</li><li>android.intent.action.BATTERY_CHANGED</li><li>android.intent.action.CONFIGURATION_CHANGED</li><li>android.intent.action.TIME_TICK</li></ul></blockquote><h2 id="五、BroadcastReceiver的优先级"><a href="#五、BroadcastReceiver的优先级" class="headerlink" title="五、BroadcastReceiver的优先级"></a>五、BroadcastReceiver的优先级</h2><h4 id="配置文件中可以设置优先级：android-priority-”10”"><a href="#配置文件中可以设置优先级：android-priority-”10”" class="headerlink" title="配置文件中可以设置优先级：android:priority=”10”"></a>配置文件中可以设置优先级：android:priority=”10”</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">          package=<span class="string">"com.xianxiaotao.learnreceiver"</span>&gt;</div><div class="line">    &lt;application&gt;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        &lt;receiver</div><div class="line">            android:name=<span class="string">".MyReceiver"</span></div><div class="line">            android:enabled=<span class="string">"true"</span></div><div class="line">            android:exported=<span class="string">"true"</span>&gt;</div><div class="line">            &lt;intent-filter android:priority=<span class="string">"10"</span>&gt;</div><div class="line">                &lt;action android:name=<span class="string">"com.xianxiaotao.learnreceiver.intent.action"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/receiver&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure><h4 id="发送、终止-拦截有序广播"><a href="#发送、终止-拦截有序广播" class="headerlink" title="发送、终止/拦截有序广播"></a>发送、终止/拦截有序广播</h4><ul><li>发送有序广播必须使用sendOrderedBroadcast()方法。</li><li>终止有序广播需要在onReceive()方法里使用abortBroadcast()。</li><li>终止的是普通广播则会发生RuntimeException。</li></ul><h4 id="有序广播优先级规则"><a href="#有序广播优先级规则" class="headerlink" title="有序广播优先级规则"></a>有序广播优先级规则</h4><ul><li>优先级高的先接收（数字越大，优先级越高，其范围有待研究）</li><li>同优先级的动静态广播接收器，动态优先于静态</li><li>同优先级的动态广播接收器，或者同优先级的静态广播接收器，按照注册顺序。即静态：先扫描的大于后扫描的，动态：先注册的大于后注册的。</li></ul><h4 id="普通广播优先级规则"><a href="#普通广播优先级规则" class="headerlink" title="普通广播优先级规则"></a>普通广播优先级规则</h4><ul><li>无视优先级，动态广播接收器优先于静态广播接收器。</li><li>按照注册顺序。静态：先扫描的大于后扫描的，动态：先注册的大于后注册的。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>09 Service总结篇</title>
      <link href="/2017/05/26/ANDROID/BASE/09Service%E6%80%BB%E7%BB%93%E7%AF%87/"/>
      <url>/2017/05/26/ANDROID/BASE/09Service%E6%80%BB%E7%BB%93%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<p>博客原文：<a href="http://www.cnblogs.com/lwbqqyumidi/p/4181185.html" target="_blank" rel="external">Android总结篇系列：Android Service</a></p><p>Service通常总是称之为“后台服务”，其中“后台”一词是相对于前台而言的，具体是指其本身的运行并不依赖于用户可视的UI界面，因此，从实际业务需求上来理解，Service的适用场景应该具备以下条件：<br>1.并不依赖于用户可视的UI界面（当然，这一条其实也不是绝对的，如前台Service就是与Notification界面结合使用的）；<br>2.具有较长时间的运行特性。</p><h3 id="1、Service-AndroidManifest-xml-声明"><a href="#1、Service-AndroidManifest-xml-声明" class="headerlink" title="1、Service AndroidManifest.xml 声明"></a>1、Service AndroidManifest.xml 声明</h3><p>一般而言，从Service的启动方式上，可以将Service分为Started Service和Bound Service。无论哪种具体的Service启动类型，都是通过继承Service基类自定义而来。在使用Service时，要想系统能够找到此自定义Service，无论哪种类型，都需要在AndroidManifest.xml中声明，语法格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">&lt;service android:enabled=[<span class="string">"true"</span> | <span class="string">"false"</span>]</div><div class="line">    android:exported=[<span class="string">"true"</span> | <span class="string">"false"</span>]</div><div class="line">    android:icon=<span class="string">"drawable resource"</span></div><div class="line">    android:isolatedProcess=[<span class="string">"true"</span> | <span class="string">"false"</span>]</div><div class="line">    android:label=<span class="string">"string resource"</span></div><div class="line">    android:name=<span class="string">"string"</span></div><div class="line">    android:permission=<span class="string">"string"</span></div><div class="line">    android:process=<span class="string">"string"</span> &gt;</div><div class="line">    . . .</div><div class="line">&lt;/service&gt;</div></pre></td></tr></table></figure></p><p>其中，android:name对应Service类名，android:permission是权限声明，android:process设置具体的进程名称。需要注意的是Service能否单独使用一个进程与其启动方式有关，本后下面会给出具体说明。其他的属性此处与其他组件基本相同，不再过多描述。</p><blockquote><p>如果自定义Service没有在AndroidManifest.xml中声明，当具体使用时，不会像Activity那样直接崩溃报错，对于显式Intent启动的Service，此时也会给出waring信息“IllegalArgumentException: Service not registered”，有时候不容易发现忘了声明而一时定位不到问题。</p></blockquote><h3 id="2、Started-Service"><a href="#2、Started-Service" class="headerlink" title="2、Started Service"></a>2、Started Service</h3><p>通过context.startService(Intent serviceIntent)启动Service，context.stopService(Intent serviceIntent)停止此Service。当然，在Service内部，也可以通过stopSelf(…)方式停止其本身。注意：如果服务是通过绑定服务开启的，stopSelf方法无效。<br>1) Started Service自定义<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"MyService"</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        Log.w(TAG, <span class="string">"in onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onStartCommand"</span>);</div><div class="line">        Log.w(TAG, <span class="string">"MyService:"</span> + this);</div><div class="line">        String name = intent.getStringExtra(<span class="string">"name"</span>);</div><div class="line">        Log.w(TAG, <span class="string">"name:"</span> + name);</div><div class="line">        <span class="built_in">return</span> START_STICKY;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其中，onBind(…)函数是Service基类中的唯一抽象方法，子类都必须重写实现，此函数的返回值是针对Bound Service类型的Service才有用的，在Started Service类型中，此函数直接返回 null 即可。onCreate(…)、onStartCommand(…)和onDestroy()都是Started Service相应生命周期阶段的回调函数。</p><p>2) Started Service使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"MainActivity"</span>;</div><div class="line"></div><div class="line">    private Button startServiceBtn;</div><div class="line">    private Button stopServideBtn;</div><div class="line">    private Button goBtn;</div><div class="line"></div><div class="line">    private Intent serviceIntent;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        startServiceBtn = (Button) findViewById(R.id.start_service);</div><div class="line">        stopServideBtn = (Button) findViewById(R.id.stop_service);</div><div class="line">        goBtn = (Button) findViewById(R.id.go);</div><div class="line"></div><div class="line">        startServiceBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                serviceIntent = new Intent(MainActivity.this, MyService.class);</div><div class="line">                startService(serviceIntent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        stopServideBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                stopService(serviceIntent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        goBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Intent intent = new Intent(MainActivity.this, BActivity.class);</div><div class="line">                startActivity(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当Client调用startService(Intent serviceIntent)后，如果MyService是第一次启动，首先会执行 onCreate()回调，然后再执行onStartCommand(Intent intent, int flags, int startId)，当Client再次调用startService(Intent serviceIntent)，将只执行onStartCommand(Intent intent, int flags, int startId)，因为此时Service已经创建了，无需执行onCreate()回调。无论多少次的startService，只需要一次stopService()即可将此Service终止，执行onDestroy()函数（其实很好理解，因为onDestroy()与onCreate()回调是相对的）。</p><p>下面重点关注下onStartCommand(Intent intent, int flags, int startId)方法：<br>其中参数flags默认情况下是0，对应的常量名为START_STICKY_COMPATIBILITY。startId是一个唯一的整型，用于表示此次Client执行startService(…)的请求请求标识，在多次startService(…)的情况下，呈现0,1,2….递增。另外，此函数具有一个int型的返回值，具体的可选值及含义如下：</p><ul><li>START_NOT_STICKY：当Service因为内存不足而被系统kill后，接下来未来的某个时间内，即使系统内存足够可用，系统也不会尝试重新创建此Service。除非程序中Client明确再次调用startService(…)启动此Service。</li><li>START_STICKY：当Service因为内存不足而被系统kill后，接下来未来的某个时间内，当系统内存足够可用的情况下，系统将会尝试重新创建此Service，一旦创建成功后将回调onStartCommand(…)方法，但其中的Intent将是null，pendingintent除外。</li><li>START_REDELIVER_INTENT：与START_STICKY唯一不同的是，回调onStartCommand(…)方法时，其中的Intent将是非空，将是最后一次调用startService(…)中的intent。</li><li>START_STICKY_COMPATIBILITY：compatibility version of {@link #START_STICKY} that does not guarantee that {@link #onStartCommand} will be called again after being killed。此值一般不会使用，所以注意前面三种情形就好。</li></ul><p>以上的描述中，”当Service因为内存不足而被系统kill后“一定要非常注意，因为此函数的返回值设定只是针对此种情况才有意义的，换言之，当人为的kill掉Service进程，此函数返回值无论怎么设定，接下来未来的某个时间内，即使系统内存足够可用，Service也不会重启。<br>另外，需要注意的是，小米手机针对此处做了一定的修改。在“自启动管理”中有一个自启动应用列表，默认情况下，只有少应用（如微信、QQ、YY、360等）默认是可以自启动的，其他应用默认都是禁止的。用户可以手动添加自启动应用，添加后的应用中如果Started Service onStartCommand(…)回调返回值是START_STICKY或START_REDELIVER_INTENT，当用户在小米手机上长按Home键结束App后，接下来未来的某个时间内，当系统内存足够可用时，Service依然可以按照上述规定重启。当然，如果用户在 设置 &gt;&gt; 应用 &gt;&gt; 强制kill掉App进程，此时Service是不会重启的。<br>注：以上实验结论基于小米2S亲测。</p><p>3) Started Service生命周期及进程相关<br>1.onCreate(Client首次startService(..)) &gt;&gt; onStartCommand &gt;&gt; onStartCommand - optional … &gt;&gt; onDestroy(Client调用stopService(..))<br>注：onStartCommand(..)可以多次被调用，onDestroy()与onCreate()想匹配，当用户强制kill掉进程时，onDestroy()是不会执行的。<br>2.对于同一类型的Service，Service实例一次永远只存在一个，而不管Client是否是相同的组件，也不管Client是否处于相同的进程中。<br>3.Service通过startService(..)启动Service后，此时Service的生命周期与Client本身的什么周期是没有任何关系的，只有Client调用stopService(..)或Service本身调用stopSelf(..)才能停止此Service。当然，当用户强制kill掉Service进程或系统因内存不足也可能kill掉此Service。<br>4.Client A 通过startService(..)启动Service后,可以在其他Client（如Client B、Client C）通过调用stopService(..)结束此Service。<br>5.Client调用stopService(..)时，如果当前Service没有启动，也不会出现任何报错或问题，也就是说，stopService(..)无需做当前Service是否有效的判断。<br>6.startService(Intent serviceIntent)，其中的intent既可以是显式Intent，也可以是隐式Intent，当Client与Service同处于一个App时，一般推荐使用显示Intent。当处于不同App时，只能使用隐式Intent。<br>当Service需要运行在单独的进程中，AndroidManifest.xml声明时需要通过android:process指明此进程名称，当此Service需要对其他App开放时，android:exported属性值需要设置为true(当然，在有intent-filter时默认值就是true)。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;service</div><div class="line">    android:name=<span class="string">".MyService"</span></div><div class="line">    android:exported=<span class="string">"true"</span></div><div class="line">    android:process=<span class="string">":MyCorn"</span> &gt;</div><div class="line">    &lt;intent-filter&gt;</div><div class="line">        &lt;action android:name=<span class="string">"com.example.androidtest.myservice"</span> /&gt;</div><div class="line">    &lt;/intent-filter&gt;</div><div class="line">&lt;/service&gt;</div></pre></td></tr></table></figure></p><p>4) Started Service Client与Service通信相关<br>当Client调用startService(Intent serviceIntent)启动Service时，Client可以将参数通过Intent直接传递给Service。Service执行过程中，如果需要将参数传递给Client，一般可以通过借助于发送广播的方式（此时，Client需要注册此广播）。</p><h3 id="3、Bound-Service"><a href="#3、Bound-Service" class="headerlink" title="3、Bound Service"></a>3、Bound Service</h3><p>相对于Started Service，Bound Service具有更多的知识点。Bound Service的主要特性在于Service的生命周期是依附于Client的生命周期的，当Client不存在时，Bound Service将执行onDestroy，同时通过Service中的Binder对象可以较为方便进行Client-Service通信。Bound Service一般使用过程如下：<br>1.自定义Service继承基类Service，并重写onBind(Intent intent)方法，此方法中需要返回具体的Binder对象；<br>2.Client通过实现ServiceConnection接口来自定义ServiceConnection，并通过bindService (Intent service, ServiceConnection sc, int flags)方法将Service绑定到此Client上；<br>3.自定义的ServiceConnection中实现onServiceConnected(ComponentName name, IBinder binder)方法，获取Service端Binder实例；<br>4.通过获取的Binder实例进行Service端其他公共方法的调用，以完成Client-Service通信；<br>5.当Client在恰当的生命周期（如onDestroy等）时，此时需要解绑之前已经绑定的Service，通过调用函数unbindService(ServiceConnection sc)。<br>在Bound Service具体使用过程中，根据onBind(Intent intent)方法放回的Binder对象的定义方式不同，又可以将其分为以下三种方式，且每种方式具有不同的特点和适用场景：<br>1）Extending the Binder class<br>就是上述Demo中的代码形式，这是Bound Service中最常见的一种使用方式，也是Bound Service中最简单的一种。<br>局限：Clinet与Service必须同属于同一个进程，不能实现进程间通信（IPC）。否则则会出现类似于“android.os.BinderProxy cannot be cast to xxx”错误。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div></pre></td><td class="code"><pre><div class="line">public class MyBindService extends Service &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"MyBindService"</span>;</div><div class="line"></div><div class="line">    private MyBinder mBinder = new MyBinder();</div><div class="line"></div><div class="line">    public class MyBinder extends Binder &#123;</div><div class="line">        MyBindService <span class="function"><span class="title">getService</span></span>() &#123;</div><div class="line">            <span class="built_in">return</span> MyBindService.this;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        Log.w(TAG, <span class="string">"in onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onBind"</span>);</div><div class="line">        <span class="built_in">return</span> mBinder;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onUnbind(Intent intent) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onUnbind"</span>);</div><div class="line">        <span class="built_in">return</span> super.onUnbind(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class BActivity extends Activity &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"BActivity"</span>;</div><div class="line"></div><div class="line">    private Button <span class="built_in">bind</span>ServiceBtn;</div><div class="line">    private Button unbindServiceBtn;</div><div class="line"></div><div class="line">    private Button startIntentService;</div><div class="line"></div><div class="line">    private Intent serviceIntent;</div><div class="line"></div><div class="line">    private ServiceConnection sc = new MyServiceConnection();</div><div class="line">    private MyBinder mBinder;</div><div class="line">    private MyBindService mBindService;</div><div class="line">    private boolean mBound;</div><div class="line"></div><div class="line">    private class MyServiceConnection implements ServiceConnection &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceConnected(ComponentName name, IBinder binder) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"in MyServiceConnection onServiceConnected"</span>);</div><div class="line">            mBinder = (MyBinder) binder;</div><div class="line">            mBindService = mBinder.getService();</div><div class="line"></div><div class="line">            mBound = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceDisconnected(ComponentName name) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // unexpectedly disconnected -- that is, its process crashed.</div><div class="line">            Log.w(TAG, <span class="string">"in MyServiceConnection onServiceDisconnected"</span>);</div><div class="line">            mBound = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.b);</div><div class="line"></div><div class="line">        <span class="built_in">bind</span>ServiceBtn = (Button) findViewById(R.id.bind_service);</div><div class="line">        unbindServiceBtn = (Button) findViewById(R.id.unbind_service);</div><div class="line">        startIntentService = (Button) findViewById(R.id.start_intentservice);</div><div class="line"></div><div class="line">        <span class="built_in">bind</span>ServiceBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Intent intent = new Intent(BActivity.this, MyBindService.class);</div><div class="line">                <span class="built_in">bind</span>Service(intent, sc, Context.BIND_AUTO_CREATE);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        unbindServiceBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                excuteUnbindService();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        startIntentService.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Intent intent = new Intent(BActivity.this, MyIntentService.class);</div><div class="line">                startService(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void <span class="function"><span class="title">excuteUnbindService</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (mBound) &#123;</div><div class="line">            unbindService(sc);</div><div class="line">            mBound = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">        excuteUnbindService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首次点击bindServiceBtn进行bindService(..)时，依次回调顺序如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">MyBindService(13457): <span class="keyword">in</span> onCreate</div><div class="line">MyBindService(13457): <span class="keyword">in</span> onBind</div><div class="line">BActivity(13457): <span class="keyword">in</span> MyServiceConnection onServiceConnected</div></pre></td></tr></table></figure></p><p>再次点击bindServiceBtn按钮时，发现没有任何输出，说明MyBindService没有进行任何回调。<br>点击unbindServiceBtn进行unbindService(..)时，回调顺序为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">MyBindService(13457): <span class="keyword">in</span> onUnbind</div><div class="line">MyBindService(13457): <span class="keyword">in</span> onDestroy</div></pre></td></tr></table></figure></p><p>注：在四大基本组件中，需要注意的的是BroadcastReceiver不能作为Bound Service的Client，因为BroadcastReceiver的生命周期很短，当执行完onReceive(..)回调时，BroadcastReceiver生命周期完结。而Bound Service又与Client本身的生命周期相关，因此，Android中不允许BroadcastReceiver去bindService(..)，当有此类需求时，可以考虑通过startService(..)替代。</p><p>2）Using a Messenger<br>Messenger，在此可以理解成”信使“，通过Messenger方式返回Binder对象可以不用考虑Clinet - Service是否属于同一个进程的问题，并且，可以实现Client - Service之间的双向通信。极大方便了此类业务需求的实现。<br>局限：不支持严格意义上的多线程并发处理，实际上是以队列去处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div></pre></td><td class="code"><pre><div class="line">public class MyMessengerService extends Service &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"MyMessengerService"</span>;</div><div class="line">    public static final int MSG_FROM_CLIENT_TO_SERVER = 1;</div><div class="line">    public static final int MSG_FROM_SERVER_TO_CLIENT = 2;</div><div class="line"></div><div class="line">    private Messenger mClientMessenger;</div><div class="line">    private Messenger mServerMessenger = new Messenger(new ServerHandler());</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onBind"</span>);</div><div class="line">        <span class="built_in">return</span> mServerMessenger.getBinder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class ServerHandler extends Handler &#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"thread name:"</span> + Thread.currentThread().getName());</div><div class="line">            switch (msg.what) &#123;</div><div class="line">            <span class="keyword">case</span> MSG_FROM_CLIENT_TO_SERVER:</div><div class="line">                Log.w(TAG, <span class="string">"receive msg from client"</span>);</div><div class="line">                mClientMessenger = msg.replyTo;</div><div class="line"></div><div class="line">                // service发送消息给client</div><div class="line">                Message toClientMsg = Message.obtain(null, MSG_FROM_SERVER_TO_CLIENT);</div><div class="line">                try &#123;</div><div class="line">                    Log.w(TAG, <span class="string">"server begin send msg to client"</span>);</div><div class="line">                    mClientMessenger.send(toClientMsg);</div><div class="line">                &#125; catch (RemoteException e) &#123;</div><div class="line">                    e.printStackTrace();</div><div class="line">                &#125;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            default:</div><div class="line">                super.handleMessage(msg);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean onUnbind(Intent intent) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onUnbind"</span>);</div><div class="line">        <span class="built_in">return</span> super.onUnbind(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">        super.onDestroy();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div></pre></td><td class="code"><pre><div class="line">public class CActivity extends Activity &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"CActivity"</span>;</div><div class="line"></div><div class="line">    private Button <span class="built_in">bind</span>ServiceBtn;</div><div class="line">    private Button unbindServiceBtn;</div><div class="line">    private Button sendMsgToServerBtn;</div><div class="line"></div><div class="line">    private ServiceConnection sc = new MyServiceConnection();</div><div class="line">    private boolean mBound;</div><div class="line"></div><div class="line">    private Messenger mServerMessenger;</div><div class="line"></div><div class="line">    private Handler mClientHandler = new MyClientHandler();</div><div class="line">    private Messenger mClientMessenger = new Messenger(mClientHandler);</div><div class="line"></div><div class="line">    private class MyClientHandler extends Handler &#123;</div><div class="line">        @Override</div><div class="line">        public void handleMessage(Message msg) &#123;</div><div class="line">            <span class="keyword">if</span> (msg.what == MyMessengerService.MSG_FROM_SERVER_TO_CLIENT) &#123;</div><div class="line">                Log.w(TAG, <span class="string">"reveive msg from server"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class MyServiceConnection implements ServiceConnection &#123;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceConnected(ComponentName name, IBinder binder) &#123;</div><div class="line">            Log.w(TAG, <span class="string">"in MyServiceConnection onServiceConnected"</span>);</div><div class="line">            mServerMessenger = new Messenger(binder);</div><div class="line"></div><div class="line">            mBound = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void onServiceDisconnected(ComponentName name) &#123;</div><div class="line">            // This is called when the connection with the service has been</div><div class="line">            // unexpectedly disconnected -- that is, its process crashed.</div><div class="line">            Log.w(TAG, <span class="string">"in MyServiceConnection onServiceDisconnected"</span>);</div><div class="line"></div><div class="line">            mBound = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.c);</div><div class="line"></div><div class="line">        <span class="built_in">bind</span>ServiceBtn = (Button) findViewById(R.id.bind_service);</div><div class="line">        unbindServiceBtn = (Button) findViewById(R.id.unbind_service);</div><div class="line">        sendMsgToServerBtn = (Button) findViewById(R.id.send_msg_to_server);</div><div class="line"></div><div class="line">        <span class="built_in">bind</span>ServiceBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                Intent intent = new Intent(CActivity.this, MyMessengerService.class);</div><div class="line">                <span class="built_in">bind</span>Service(intent, sc, Context.BIND_AUTO_CREATE);</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        unbindServiceBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                excuteUnbindService();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        sendMsgToServerBtn.setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                sayHello();</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        new Handler().postDelayed(new <span class="function"><span class="title">Runnable</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">                Intent intent = new Intent(CActivity.this, MyAlarmBroadcastReceiver.class);</div><div class="line">                sendBroadcast(intent);</div><div class="line">            &#125;</div><div class="line">        &#125;, 3 * 1000);</div><div class="line"></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="function"><span class="title">sayHello</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (!mBound)</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        // Create and send a message to the service, using a supported <span class="string">'what'</span> value</div><div class="line">        Message msg = Message.obtain(null, MyMessengerService.MSG_FROM_CLIENT_TO_SERVER, 0, 0);</div><div class="line">        // 通过replyTo把client端的Messenger(信使)传递给service</div><div class="line">        msg.replyTo = mClientMessenger;</div><div class="line">        try &#123;</div><div class="line">            mServerMessenger.send(msg);</div><div class="line">        &#125; catch (RemoteException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void <span class="function"><span class="title">excuteUnbindService</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (mBound) &#123;</div><div class="line">            unbindService(sc);</div><div class="line">            mBound = <span class="literal">false</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">        excuteUnbindService();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>其中，需要注意的几点是：<br>1.MyMessengerService自定中，通过new Messenger(new ServerHandler())创建Messenger对象，在onBind(..)回调中，通过调用Messenger对象的getBinder()方法，将Binder返回；<br>2.Client在ServiceConnection的onServiceConnected(..)的回调中，通过new Messenger(binder)获取到Service传递过来的mServerMessenger；<br>3.接下来，就可以通过mServerMessenger.send(msg)方法向Service发送message，Service中的Messenger构造器中的Handler即可接收到此信息，在handleMessage(..)回调中处理；<br>4.至此只是完成了从Client发送消息到Service，同样的道理，想实现Service发送消息到Client，可以在客户端定义一个Handler，并得到相应的Messenger，在Clinet发送消息给Service时，通过msg.replyTo = mClientMessenger方式将Client信使传递给Service；<br>5.Service接收到Client信使后，获取此信使，并通过mClientMessenger.send(toClientMsg)方式将Service消息发送给Client。</p><p>至此，完成了Client - Service之间的双向通信流程。</p><p>3）AIDL（Android Interface Definition Language）<br>一般情况下，Messenger这种方式都是可以满足需求的，当然，通过自定义AIDL方式相对更加灵活。<br>这种方式需要自己在项目中自定义xxx.aidl文件，然后系统会自动在gen目录下生成相应的接口类文件，接下来整个的流程与Messenger方式差别不大，网上也有不少实例，在此不再具体给出。<br>注：无论哪种方式的Bound Service，在进行unbind(..)操作时，都需要注意当前Service是否处于已经绑定状态，否则可能会因为当前Service已经解绑后继续执行unbind(..)会导致崩溃。这点与Started Service区别很大（如前文所述：stopService(..)无需做当前Service是否有效的判断）。</p><h3 id="4、Local-Service-VS-Remote-Service"><a href="#4、Local-Service-VS-Remote-Service" class="headerlink" title="4、Local Service VS Remote Service"></a>4、Local Service VS Remote Service</h3><p>Local Service：不少人又称之为”本地服务“，是指Client - Service同处于一个进程；<br>Remote Service：又称之为”远程服务“，一般是指Service处于单独的一个进程中。</p><h3 id="5、Service特性"><a href="#5、Service特性" class="headerlink" title="5、Service特性"></a>5、Service特性</h3><p>1.Service本身都是运行在其所在进程的主线程（如果Service与Clinet同属于一个进程，则是运行于UI线程），但Service一般都是需要进行”长期“操作，所以经常写法是在自定义Service中处理”长期“操作时需要新建线程，以免阻塞UI线程或导致ANR；<br>2.Service一旦创建，需要停止时都需要显示调用相应的方法（Started Service需要调用stopService(..)或Service本身调用stopSelf(..)， Bound Service需要调用unbindService(..)），否则对于Started Service将处于一直运行状态，对于Bound Service，当Client生命周期结束时也将因此问题。也就是说，Service执行完毕后，必须人为的去停止它</p><h3 id="6、IntentService"><a href="#6、IntentService" class="headerlink" title="6、IntentService"></a>6、IntentService</h3><p>IntentService是系统提供给我们的一个已经继承自Service类的特殊类，IntentService特殊性是相对于Service本身的特性而言的：<br>1.默认直接实现了onBind(..)方法，直接返回null，并定义了抽象方法onHandlerIntent(..)，用户自定义子类时，需要实现此方法；<br>2.onHandlerIntent(..)主要就是用来处于相应的”长期“任务的，并且已经自动在新的线程中，用户无需自定义新线程；<br>3.当”长期“任务执行完毕后（也就是onHandlerIntent(..)执行完毕后），此IntentService将自动结束，无需人为调用方法使其结束；<br>4.IntentService处于任务时，也是按照队列的方式一个个去处理，而非真正意义上的多线程并发方式。<br>下面是一个基本的继承自IntentService的自定义Service：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">public class MyIntentService extends IntentService &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"MyIntentService"</span>;</div><div class="line"></div><div class="line">    public <span class="function"><span class="title">MyIntentService</span></span>() &#123;</div><div class="line">        super(TAG);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public MyIntentService(String name) &#123;</div><div class="line">        super(name);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onHandleIntent(Intent intent) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onHandleIntent"</span>);</div><div class="line">        Log.w(TAG, <span class="string">"thread name:"</span> + Thread.currentThread().getName());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="7、前台Service"><a href="#7、前台Service" class="headerlink" title="7、前台Service"></a>7、前台Service</h3><p>Android中Service接口中还提供了一个称之为”前台Service“的概念。通过Service.startForeground (int id, Notification notification)方法可以将此Service设置为前台Service。在UI显示上，notification将是一个处于onGoing状态的通知，使得前台Service拥有更高的进程优先级，并且Service可以直接notification通信。<br>下面是一个简单的前台Service使用实例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line"></div><div class="line">    public static final String TAG = <span class="string">"MyService"</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        Log.w(TAG, <span class="string">"in onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">        Log.w(TAG, <span class="string">"in onStartCommand"</span>);</div><div class="line">        Log.w(TAG, <span class="string">"MyService:"</span> + this);</div><div class="line">        String name = intent.getStringExtra(<span class="string">"name"</span>);</div><div class="line">        Log.w(TAG, <span class="string">"name:"</span> + name);</div><div class="line"></div><div class="line">        </div><div class="line">        Notification notification = new Notification(R.drawable.ic_launcher, <span class="string">"test"</span>, System.currentTimeMillis());</div><div class="line">        Intent notificationIntent = new Intent(this, DActivity.class);</div><div class="line">        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, notificationIntesnt, 0);</div><div class="line">        notification.setLatestEventInfo(this, <span class="string">"title"</span>, <span class="string">"content"</span>, pendingIntent);</div><div class="line">        startForeground(1, notification);</div><div class="line">        </div><div class="line"></div><div class="line">        <span class="built_in">return</span> START_REDELIVER_INTENT;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        Log.w(TAG, <span class="string">"in onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>08 Service通信</title>
      <link href="/2017/05/26/ANDROID/BASE/08Service%E9%80%9A%E4%BF%A1/"/>
      <url>/2017/05/26/ANDROID/BASE/08Service%E9%80%9A%E4%BF%A1/</url>
      
        <content type="html"><![CDATA[<h2 id="一、应用内通信"><a href="#一、应用内通信" class="headerlink" title="一、应用内通信"></a>一、应用内通信</h2><h4 id="1、启动Service并传递数据"><a href="#1、启动Service并传递数据" class="headerlink" title="1、启动Service并传递数据"></a>1、启动Service并传递数据</h4><p>启动一个Service并且向该Service传递数据:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(this, MyService.class);</div><div class="line">intent.putExtra(<span class="string">"data"</span>, mEditText.getText().toString().trim());</div><div class="line">startService(intent);</div></pre></td></tr></table></figure></p><p>MyService接收数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private String data = <span class="string">"MyService default info"</span>;</div><div class="line"></div><div class="line">@Override</div><div class="line">public int onStartCommand(Intent intent, int flags, int startId) &#123; </div><div class="line">    data = intent.getStringExtra(<span class="string">"data"</span>);</div><div class="line">    <span class="built_in">return</span> super.onStartCommand(intent, flags, startId);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2、绑定Service进行通信——-gt"><a href="#2、绑定Service进行通信——-gt" class="headerlink" title="2、绑定Service进行通信——&gt;"></a>2、绑定Service进行通信——&gt;</h4><p>与被绑定的Service进行通信，首先自定义一个Binder的实现类，拥有setData(String data)方法，并在onBind方法中返回自定义类的对象：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line"></div><div class="line">    private String data = <span class="string">"MyService default info"</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        <span class="built_in">return</span> new MyBinder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public class MyBinder extends Binder &#123;</div><div class="line">        public void <span class="built_in">set</span>Data(String data) &#123;</div><div class="line">            MyService.this.data = data;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在ServiceConnection实现类中onServiceConnected方法里获取服务绑定成功时返回的对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements View.OnClickListener, ServiceConnection &#123;</div><div class="line"></div><div class="line">    private MyService.MyBinder mMyBinder;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</div><div class="line">        mMyBinder = (MyService.MyBinder) service;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>然后MainActivity就可以实时的想MyService同步数据了：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (mMyBinder != null)</div><div class="line">    mMyBinder.setData(mEditText.getText().toString().trim());</div></pre></td></tr></table></figure></p><p>输出日志<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onCreate</div><div class="line">I/System.out: MyService default info</div><div class="line">I/System.out: MyService default info</div><div class="line">I/System.out: MyService default info</div><div class="line">I/System.out: MyService default info</div><div class="line">I/System.out: MainActivity say something</div><div class="line">I/System.out: MainActivity say something</div><div class="line">I/System.out: MainActivity say something</div><div class="line">I/System.out: MyService onDestroy</div></pre></td></tr></table></figure></p><h4 id="3、绑定Service进行通信-lt-——"><a href="#3、绑定Service进行通信-lt-——" class="headerlink" title="3、绑定Service进行通信&lt;——"></a>3、绑定Service进行通信&lt;——</h4><p>侦听被绑定的Service的内部状态，需要借助回调接口。首先定义回调接口并设置set(callBack)方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class MyService extends Service &#123;</div><div class="line"></div><div class="line">    private CallBack mCallBack;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>CallBack(CallBack callBack) &#123;</div><div class="line">        mCallBack = callBack;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static interface CallBack &#123;</div><div class="line">        public void onDataChange(String data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>自定义类MyBinder中增加一个方法，返回当前Service的对象，以便于外部客户端调用set(callBack)方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class MyBinder extends Binder &#123;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    public MyService <span class="function"><span class="title">getService</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> MyService.this;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在Service中将状态信息通过回调接口通知外界<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">i++;</div><div class="line"><span class="keyword">if</span> (mCallBack != null)</div><div class="line">    mCallBack.onDataChange(i + <span class="string">" "</span> + data);</div></pre></td></tr></table></figure></p><p>ServiceConnection的实现类（此处为MainActivity）在onServiceConnected方法中获取Service对象，并将自定义的回调接口告知Service：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public void onServiceConnected(ComponentName name, IBinder service) &#123;</div><div class="line">    mMyBinder = (MyService.MyBinder) service;</div><div class="line">    mMyBinder.getService().setCallBack(new MyService.<span class="function"><span class="title">CallBack</span></span>() &#123;</div><div class="line">        @Override</div><div class="line">        public void onDataChange(String data) &#123;</div><div class="line">            Message msg = new Message();</div><div class="line">            Bundle bundle = new Bundle();</div><div class="line">            bundle.putString(<span class="string">"data"</span>, data);</div><div class="line">            msg.setData(bundle);</div><div class="line">            mHandler.sendMessage(msg);</div><div class="line">        &#125;</div><div class="line">    &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>借助Handler，将数据同步到TextView上：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private Handler mHandler = new <span class="function"><span class="title">Handler</span></span>() &#123;</div><div class="line">    @Override</div><div class="line">    public void handleMessage(Message msg) &#123;</div><div class="line">        super.handleMessage(msg);</div><div class="line">        mTextView.setText(msg.getData().getString(<span class="string">"data"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;;</div></pre></td></tr></table></figure></p><h2 id="二、跨应用通信——AIDL"><a href="#二、跨应用通信——AIDL" class="headerlink" title="二、跨应用通信——AIDL"></a>二、跨应用通信——AIDL</h2><h4 id="1、跨应用启动Service"><a href="#1、跨应用启动Service" class="headerlink" title="1、跨应用启动Service"></a>1、跨应用启动Service</h4><p>从Android5.0以后，只能通过显示Intent来启动服务。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.firstapp;</div><div class="line"></div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    private Intent mIntent;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line"></div><div class="line">        ...</div><div class="line"></div><div class="line">        mIntent = new Intent();</div><div class="line">        mIntent.setComponent(new ComponentName(<span class="string">"com.xianxiaotao.secondapp"</span>, <span class="string">"com.xianxiaotao.secondapp.AppService"</span>));</div><div class="line">        startService(mIntent)</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        stopService(mIntent);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2、跨应用绑定Service"><a href="#2、跨应用绑定Service" class="headerlink" title="2、跨应用绑定Service"></a>2、跨应用绑定Service</h4><p>新建AIDL文件：New -&gt; AIDL -&gt; AIDL File -&gt; IAppServiceRemoteBinder.aidl<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.secondapp;</div><div class="line"></div><div class="line">interface IAppServiceRemoteBinder &#123;</div><div class="line">    void basicTypes(int anInt, long aLong, boolean aBoolean, <span class="built_in">float</span> aFloat, double aDouble, String aString);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在Service里实现该接口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.secondapp;</div><div class="line"></div><div class="line">public class AppService extends Service &#123;</div><div class="line">    </div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        <span class="built_in">return</span> new IAppServiceRemoteBinder.<span class="function"><span class="title">Stub</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void basicTypes(int anInt, long aLong, boolean aBoolean, <span class="built_in">float</span> aFloat, double aDouble, String aString) &#123;</div><div class="line">                // TODO</div><div class="line">            &#125;</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在第一个应用中绑定服务和解除绑定服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bind</span>Service(mIntent, this, Context.BIND_AUTO_CREATE);</div><div class="line">unbindService(this);</div></pre></td></tr></table></figure></p><h4 id="3、跨应用绑定Service并通信"><a href="#3、跨应用绑定Service并通信" class="headerlink" title="3、跨应用绑定Service并通信"></a>3、跨应用绑定Service并通信</h4><p>在IAppServiceRemoteBinder接口中新增setData方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface IAppServiceRemoteBinder &#123;</div><div class="line">    void basicTypes(int anInt, long aLong, boolean aBoolean, <span class="built_in">float</span> aFloat, double aDouble, String aString);</div><div class="line">    void <span class="built_in">set</span>Data(String data);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>其子类需要实现该方法<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public IBinder onBind(Intent intent) &#123;</div><div class="line">    <span class="built_in">return</span> new IAppServiceRemoteBinder.<span class="function"><span class="title">Stub</span></span>() &#123;</div><div class="line">        @Override</div><div class="line">        public void basicTypes(int anInt, long aLong, boolean aBoolean, <span class="built_in">float</span> aFloat, double aDouble, String aString) &#123;</div><div class="line">            // TODO</div><div class="line">        &#125;</div><div class="line">        @Override</div><div class="line">        public void <span class="built_in">set</span>Data(String data) throws RemoteException &#123;</div><div class="line">            AppService.this.data = data;</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>在第一个应用里创同样的IAppServiceRemoteBinder.aidl文件，注意包名也要一致。</p><ul><li>firstApp -&gt; New -&gt; Folder -&gt; AIDL Folder</li><li>aidl -&gt; New -&gt; Package -&gt; com.xianxiaotao.secondapp -&gt; OK</li><li>在该文件夹里创建同样的IAppServiceRemoteBinder.aidl文件，测试时可以直接复制粘贴。<br>上述操作执行完毕后，该应用绑定secondapp的AppService时，可以获取到IBinder的实例了。<figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">private IAppServiceRemoteBinder binder = null;</div><div class="line"></div><div class="line">@Override</div><div class="line">public void onServiceConnected(ComponentName name, IBinder service) &#123;</div><div class="line">    // 此处不能用强制类型转换，虽然类名相同，但两个类在内存中地址不一样</div><div class="line">    binder = IAppServiceRemoteBinder.Stub.asInterface(service);</div><div class="line">&#125;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line"><span class="keyword">if</span> (binder != null) &#123;</div><div class="line">    try &#123;</div><div class="line">        binder.setData(mEditText.getText().toString().trim());</div><div class="line">    &#125; catch (RemoteException e) &#123;</div><div class="line">        e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></li></ul>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>07 Service</title>
      <link href="/2017/05/26/ANDROID/BASE/07Service/"/>
      <url>/2017/05/26/ANDROID/BASE/07Service/</url>
      
        <content type="html"><![CDATA[<h2 id="一、初识Service"><a href="#一、初识Service" class="headerlink" title="一、初识Service"></a>一、初识Service</h2><h4 id="1、启动Service和停止Service"><a href="#1、启动Service和停止Service" class="headerlink" title="1、启动Service和停止Service"></a>1、启动Service和停止Service</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">startService(new Intent(MainActivity.this, MyService.class));// 启动服务</div><div class="line">stopService(new Intent(MainActivity.this, MyService.class));// 停止服务</div></pre></td></tr></table></figure><p>服务在系统中最多只有一个实例，即使上述代码中创建了两个不同的Intent实例，但是启动和停止的服务是同一个。只创建一个Intent实例也是可以的，如下所示：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">private Intent mIntent;</div><div class="line">...</div><div class="line">mIntent = new Intent(MainActivity.this, MyService.class);</div><div class="line">...</div><div class="line">startService(mIntent);</div><div class="line">...</div><div class="line">stopService(mIntent);</div></pre></td></tr></table></figure></p><p>Service代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.learnservice;</div><div class="line"></div><div class="line">import android.app.Service;</div><div class="line">import android.content.Intent;</div><div class="line">import android.os.IBinder;</div><div class="line"></div><div class="line">public class MyService extends Service &#123;</div><div class="line">    public <span class="function"><span class="title">MyService</span></span>() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public IBinder onBind(Intent intent) &#123;</div><div class="line">        System.out.println(<span class="string">"MyService onBind"</span>);</div><div class="line">        <span class="built_in">return</span> new Binder();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onCreate</span></span>() &#123;</div><div class="line">        super.onCreate();</div><div class="line">        System.out.println(<span class="string">"MyService onCreate"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int onStartCommand(Intent intent, int flags, int startId) &#123;</div><div class="line">        System.out.println(<span class="string">"MyService onStartCommand"</span>);</div><div class="line">        <span class="built_in">return</span> super.onStartCommand(intent, flags, startId);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">onDestroy</span></span>() &#123;</div><div class="line">        super.onDestroy();</div><div class="line">        System.out.println(<span class="string">"MyService onDestroy"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2、绑定Service和解除绑定服务"><a href="#2、绑定Service和解除绑定服务" class="headerlink" title="2、绑定Service和解除绑定服务"></a>2、绑定Service和解除绑定服务</h4><p>API:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">// 绑定服务的API</div><div class="line">public boolean <span class="built_in">bind</span>Service(Intent service, ServiceConnection conn, int flags) &#123;</div><div class="line"><span class="built_in">return</span> mBase.bindService(service, conn, flags);</div><div class="line">&#125;</div><div class="line">// 解除绑定服务的API</div><div class="line">public void unbindService(ServiceConnection conn) &#123;</div><div class="line">    mBase.unbindService(conn);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>实现接口ServiceConnection：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity implements ServiceConnection &#123;</div><div class="line"></div><div class="line">private Intent mIntent;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onServiceConnected(ComponentName name, IBinder service) &#123;</div><div class="line">        System.out.println(<span class="string">"Service Connected"</span>);// 服务被成功绑定之后执行</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onServiceDisconnected(ComponentName name) &#123;</div><div class="line">        System.out.println(<span class="string">"Service Disconnected"</span>);// 服务所在的进程崩溃时或者被<span class="built_in">kill</span>时执行</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>绑定Service和解除绑定Service：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">bind</span>Service(mIntent, MainActivity.this, Context.BIND_AUTO_CREATE);</div><div class="line">unbindService(MainActivity.this);</div></pre></td></tr></table></figure></p><h2 id="二、Service生命周期"><a href="#二、Service生命周期" class="headerlink" title="二、Service生命周期"></a>二、Service生命周期</h2><h4 id="1、启动服务生命周期"><a href="#1、启动服务生命周期" class="headerlink" title="1、启动服务生命周期"></a>1、启动服务生命周期</h4><p>第一次启动服务日志如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onCreate</div><div class="line">I/System.out: MyService onStartCommand</div></pre></td></tr></table></figure></p><p>第二、三次启动服务日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onStartCommand</div><div class="line">I/System.out: MyService onStartCommand</div></pre></td></tr></table></figure></p><p>接着停止服务日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onDestroy</div></pre></td></tr></table></figure></p><h4 id="2、启动服务后并退出"><a href="#2、启动服务后并退出" class="headerlink" title="2、启动服务后并退出"></a>2、启动服务后并退出</h4><p>启动服务后并退出当前程序的日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onCreate</div><div class="line">I/System.out: MyService onStartCommand</div></pre></td></tr></table></figure></p><p>重新启动应用并停止服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onDestroy</div></pre></td></tr></table></figure></p><h4 id="3、绑定服务生命周期"><a href="#3、绑定服务生命周期" class="headerlink" title="3、绑定服务生命周期"></a>3、绑定服务生命周期</h4><p>第一次绑定服务日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onCreate</div><div class="line">I/System.out: MyService onBind</div><div class="line">I/System.out: Service Connected</div></pre></td></tr></table></figure></p><p>第二、三次绑定服务无任何日志输出<br>解除绑定服务日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onDestroy</div></pre></td></tr></table></figure></p><h4 id="4、绑定服务并退出"><a href="#4、绑定服务并退出" class="headerlink" title="4、绑定服务并退出"></a>4、绑定服务并退出</h4><p>成功绑定服务后并退出当前程序的日志：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onCreate</div><div class="line">I/System.out: MyService onBind</div><div class="line">I/System.out: Service Connected</div><div class="line">E/ActivityThread: Activity com.xianxiaotao.learnservice.MainActivity has leaked ServiceConnection com.xianxiaotao.learnservice.MainActivity@f45fa7c that was originally bound here</div><div class="line">                  android.app.ServiceConnectionLeaked: Activity com.xianxiaotao.learnservice.MainActivity has leaked ServiceConnection com.xianxiaotao.learnservice.MainActivity@f45fa7c that was originally bound here</div><div class="line">                      at android.app.LoadedApk<span class="variable">$ServiceDispatcher</span>.&lt;init&gt;(LoadedApk.java:1336)</div><div class="line">                      at android.app.LoadedApk.getServiceDispatcher(LoadedApk.java:1231)</div><div class="line">                      at android.app.ContextImpl.bindServiceCommon(ContextImpl.java:1450)</div><div class="line">                      at android.app.ContextImpl.bindService(ContextImpl.java:1422)</div><div class="line">                      at android.content.ContextWrapper.bindService(ContextWrapper.java:636)</div><div class="line">                      at com.xianxiaotao.learnservice.MainActivity<span class="variable">$3</span>.onClick(MainActivity.java:39)</div><div class="line">                      at android.view.View.performClick(View.java:5637)</div><div class="line">                      at android.view.View<span class="variable">$PerformClick</span>.run(View.java:22429)</div><div class="line">                      at android.os.Handler.handleCallback(Handler.java:751)</div><div class="line">                      at android.os.Handler.dispatchMessage(Handler.java:95)</div><div class="line">                      at android.os.Looper.loop(Looper.java:154)</div><div class="line">                      at android.app.ActivityThread.main(ActivityThread.java:6121)</div><div class="line">                      at java.lang.reflect.Method.invoke(Native Method)</div><div class="line">                      at com.android.internal.os.ZygoteInit<span class="variable">$MethodAndArgsCaller</span>.run(ZygoteInit.java:889)</div><div class="line">                      at com.android.internal.os.ZygoteInit.main(ZygoteInit.java:779)</div><div class="line">I/System.out: MyService onDestroy</div></pre></td></tr></table></figure></p><p>如果绑定服务后，请确保在异常情况下解除绑定服务。比如在Activity的onDestroy方法中解除绑定服务。</p><h4 id="5、启动服务后绑定服务"><a href="#5、启动服务后绑定服务" class="headerlink" title="5、启动服务后绑定服务"></a>5、启动服务后绑定服务</h4><p>启动服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onCreate</div><div class="line">I/System.out: MyService onStartCommand</div></pre></td></tr></table></figure></p><p>绑定服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onBind</div><div class="line">I/System.out: Service Connected</div></pre></td></tr></table></figure></p><p>解除绑定服务：无日志<br>停止服务：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">I/System.out: MyService onDestroy</div></pre></td></tr></table></figure></p><p>总结：</p><ul><li>启动服务后可以通过调用stopService()方法停止服务(也可以由其他应用程序调用、或者服务自身调用stopSelf()来停止服务）。</li><li>只有第一次启动服务时，系统会调用Service的onCreate和onStartCommand方法，其他只会调用onStartCommand方法。</li><li>绑定服务时，系统会调用Service的onCreate、onBind方法，以及ServiceConnection实现类的onServiceConnected方法。</li><li>如果绑定了服务，请在停止服务前或退出程序前必须解除服务绑定。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>06 Context</title>
      <link href="/2017/05/24/ANDROID/BASE/06Context/"/>
      <url>/2017/05/24/ANDROID/BASE/06Context/</url>
      
        <content type="html"><![CDATA[<p>本文参考阅读：<a href="http://www.jianshu.com/p/94e0f9ab3f1d" target="_blank" rel="external">Context都没弄明白，还怎么做Android开发？</a></p><h4 id="Activity-mActivity-new-Activity"><a href="#Activity-mActivity-new-Activity" class="headerlink" title="Activity mActivity = new Activity();"></a>Activity mActivity = new Activity();</h4><p>作为Android开发者，不知道你有没有思考过这个问题，Activity可以new吗？Android的应用程序开发采用JAVA语言，Activity本质上也是一个对象，那上面的写法有什么问题呢？估计很多人说不清道不明。Android程序不像Java程序一样，随便创建一个类，写个main()方法就能运行，Android应用模型是基于组件的应用设计模式，组件的运行要有一个完整的Android工程环境，在这个环境下，Activity、Service等系统组件才能够正常工作，而这些组件并不能采用普通的Java对象创建方式，new一下就能创建实例了，而是要有它们各自的上下文环境，也就是我们这里讨论的Context。可以这样讲，Context是维持Android程序中各组件能够正常工作的一个核心功能类。</p><h4 id="Context到底是什么"><a href="#Context到底是什么" class="headerlink" title="Context到底是什么"></a>Context到底是什么</h4><p>Context的中文翻译为：语境; 上下文; 背景; 环境，在开发中我们经常说称之为“上下文”，那么这个“上下文”到底是指什么意思呢？在语文中，我们可以理解为语境，在程序中，我们可以理解为当前对象在程序中所处的一个环境，一个与系统交互的过程。比如微信聊天，此时的“环境”是指聊天的界面以及相关的数据请求与传输，Context在加载资源、启动Activity、获取系统服务、创建View等操作都要参与。</p><p>那Context到底是什么呢？一个Activity就是一个Context，一个Service也是一个Context。Android程序员把“场景”抽象为Context类，他们认为用户和操作系统的每一次交互都是一个场景，比如打电话、发短信，这些都是一个有界面的场景，还有一些没有界面的场景，比如后台运行的服务（Service）。一个应用程序可以认为是一个工作环境，用户在这个环境中会切换到不同的场景，这就像一个前台秘书，她可能需要接待客人，可能要打印文件，还可能要接听客户电话，而这些就称之为不同的场景，前台秘书可以称之为一个应用程序。</p><h4 id="如何生动形象的理解Context"><a href="#如何生动形象的理解Context" class="headerlink" title="如何生动形象的理解Context"></a>如何生动形象的理解Context</h4><p>上面的概念中采用了通俗的理解方式，将Context理解为“上下文”或者“场景”，如果你仍然觉得很抽象，不好理解。在这里我给出一个可能不是很恰当的比喻，希望有助于大家的理解：一个Android应用程序，可以理解为一部电影或者一部电视剧，Activity，Service，Broadcast Receiver，Content Provider这四大组件就好比是这部戏里的四个主角：胡歌，霍建华，诗诗，Baby。他们是由剧组（系统）一开始就定好了的，整部戏就是由这四位主演领衔担纲的，所以这四位主角并不是大街上随随便便拉个人（new 一个对象）都能演的。有了演员当然也得有摄像机拍摄啊，他们必须通过镜头（Context）才能将戏传递给观众，这也就正对应说四大组件（四位主角）必须工作在Context环境下（摄像机镜头）。那Button，TextView，LinearLayout这些控件呢，就好比是这部戏里的配角或者说群众演员，他们显然没有这么重用，随便一个路人甲路人乙都能演（可以new一个对象），但是他们也必须要面对镜头（工作在Context环境下），所以Button mButton=new Button（Context）是可以的。虽然不很恰当，但还是很容易理解的，希望有帮助。</p><h4 id="源码中的Context"><a href="#源码中的Context" class="headerlink" title="源码中的Context"></a>源码中的Context</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Interface to global information about an application environment.  This is</div><div class="line"> * an abstract class whose implementation is provided by</div><div class="line"> * the Android system.  It</div><div class="line"> * allows access to application-specific resources and classes, as well as</div><div class="line"> * up-calls <span class="keyword">for</span> application-level operations such as launching activities,</div><div class="line"> * broadcasting and receiving intents, etc.</div><div class="line"> */</div><div class="line">public abstract class Context &#123;</div><div class="line">    /**</div><div class="line">     * File creation mode: the default mode, <span class="built_in">where</span> the created file can only</div><div class="line">     * be accessed by the calling application (or all applications sharing the</div><div class="line">     * same user ID).</div><div class="line">     */</div><div class="line">    public static final int MODE_PRIVATE = 0x0000;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>源码中的注释是这么来解释Context的：Context提供了关于应用环境全局信息的接口。它是一个抽象类，它的执行被Android系统所提供。它允许获取以应用为特征的资源和类型，是一个统领一些资源（应用程序环境变量等）的上下文。就是说，它描述一个应用程序环境的信息（即上下文）；是一个抽象类，Android提供了该抽象类的具体实现类；通过它我们可以获取应用程序的资源和类（包括应用级别操作，如启动Activity，发广播，接受Intent等）。既然上面Context是一个抽象类，那么肯定有他的实现类咯，我们在Context的源码中通过IDE可以查看到他的子类最终可以得到如下关系图：<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1ffwafz832kj20hg0eejrg.jpg" alt="Context继承关系图"><br>Context类本身是一个纯abstract类，它有两个具体的实现子类：ContextImpl和ContextWrapper。其中ContextWrapper类，如其名所言，这只是一个包装而已，ContextWrapper构造函数中必须包含一个真正的Context引用，同时ContextWrapper中提供了attachBaseContext（）用于给ContextWrapper对象中指定真正的Context对象，调用ContextWrapper的方法都会被转向其所包含的真正的Context对象。ContextThemeWrapper类，如其名所言，其内部包含了与主题（Theme）相关的接口，这里所说的主题就是指在AndroidManifest.xml中通过android：theme为Application元素或者Activity元素指定的主题。当然，只有Activity才需要主题，Service是不需要主题的，因为Service是没有界面的后台场景，所以Service直接继承于ContextWrapper，Application同理。而ContextImpl类则真正实现了Context中的所以函数，应用程序中所调用的各种Context类的方法，其实现均来自于该类。一句话总结：Context的两个子类分工明确，其中ContextImpl是Context的具体实现类，ContextWrapper是Context的包装类。Activity，Application，Service虽都继承自ContextWrapper（Activity继承自ContextWrapper的子类ContextThemeWrapper），但它们初始化的过程中都会创建ContextImpl对象，由ContextImpl实现Context中的方法。</p><h4 id="一个应用程序有几个Context"><a href="#一个应用程序有几个Context" class="headerlink" title="一个应用程序有几个Context"></a>一个应用程序有几个Context</h4><p>其实这个问题本身并没有什么意义，关键还是在于对Context的理解，从上面的关系图我们已经可以得出答案了，在应用程序中Context的具体实现子类就是：Activity，Service，Application。那么Context数量=Activity数量+Service数量+应用进程数量(一般为1)。当然如果你足够细心，可能会有疑问：我们常说四大组件，这里怎么只有Activity，Service持有Context，那Broadcast Receiver，Content Provider呢？Broadcast Receiver，Content Provider并不是Context的子类，他们所持有的Context都是其他地方传过去的，所以并不计入Context总数。上面的关系图也从另外一个侧面告诉我们Context类在整个Android系统中的地位是多么的崇高，因为很显然Activity，Service，Application都是其子类，其地位和作用不言而喻。</p><h4 id="Context能干什么"><a href="#Context能干什么" class="headerlink" title="Context能干什么"></a>Context能干什么</h4><p>Context到底可以实现哪些功能呢？这个就实在是太多了，弹出Toast、启动Activity、启动Service、发送广播、操作数据库等等都需要用到Context。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">TextView tv = new TextView(getContext());</div><div class="line">ListAdapter adapter = new SimpleCursorAdapter(getApplicationContext(), ...);</div><div class="line">AudioManager am = (AudioManager) getContext().getSystemService(Context.AUDIO_SERVICE);getApplicationContext().getSharedPreferences(name, mode);</div><div class="line">getApplicationContext().getContentResolver().query(uri, ...);</div><div class="line">getContext().getResources().getDisplayMetrics().widthPixels * 5 / 8;</div><div class="line">getContext().startActivity(intent);</div><div class="line">getContext().startService(intent);</div><div class="line">getContext().sendBroadcast(intent);</div></pre></td></tr></table></figure></p><h4 id="Context作用域"><a href="#Context作用域" class="headerlink" title="Context作用域"></a>Context作用域</h4><p>虽然Context神通广大，但并不是随便拿到一个Context实例就可以为所欲为，它的使用还是有一些规则限制的。由于Context的具体实例是由ContextImpl类去实现的，因此在绝大多数场景下，Activity、Service和Application这三种类型的Context都是可以通用的。不过有几种场景比较特殊，比如启动Activity，还有弹出Dialog。出于安全原因的考虑，Android是不允许Activity或Dialog凭空出现的，一个Activity的启动必须要建立在另一个Activity的基础之上，也就是以此形成的返回栈。而Dialog则必须在一个Activity上面弹出（除非是System Alert类型的Dialog），因此在这种场景下，我们只能使用Activity类型的Context，否则将会出错。<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1ffwalj4c9fj20gd0bk758.jpg" alt="Context作用域"><br>从上图我们可以发现Activity所持有的Context的作用域最广，无所不能。因为Activity继承自ContextThemeWrapper，而Application和Service继承自ContextWrapper，很显然ContextThemeWrapper在ContextWrapper的基础上又做了一些操作使得Activity变得更强大，这里我就不再贴源码给大家分析了，有兴趣的童鞋可以自己查查源码。上图中的YES和NO我也不再做过多的解释了，这里我说一下上图中Application和Service所不推荐的两种使用情况。<br>1：如果我们用ApplicationContext去启动一个LaunchMode为standard的Activity的时候会报错android.util.AndroidRuntimeException: Calling startActivity from outside of an Activity context requires the FLAG_ACTIVITY_NEW_TASK flag. Is this really what you want?这是因为非Activity类型的Context并没有所谓的任务栈，所以待启动的Activity就找不到栈了。解决这个问题的方法就是为待启动的Activity指定FLAG_ACTIVITY_NEW_TASK标记位，这样启动的时候就为它创建一个新的任务栈，而此时Activity是以singleTask模式启动的。所有这种用Application启动Activity的方式不推荐使用，Service同Application。<br>2：在Application和Service中去layout inflate也是合法的，但是会使用系统默认的主题样式，如果你自定义了某些样式可能不会被使用。所以这种方式也不推荐使用。<br>一句话总结：凡是跟UI相关的，都应该使用Activity做为Context来处理；其他的一些操作，Service,Activity,Application等实例都可以，当然了，注意Context引用的持有，防止内存泄漏。</p><h4 id="如何获取Context"><a href="#如何获取Context" class="headerlink" title="如何获取Context"></a>如何获取Context</h4><p>通常我们想要获取Context对象，主要有以下四种方法<br>1：View.getContext,返回当前View对象的Context对象，通常是当前正在展示的Activity对象。<br>2：Activity.getApplicationContext,获取当前Activity所在的(应用)进程的Context对象，通常我们使用Context对象时，要优先考虑这个全局的进程Context。<br>3：ContextWrapper.getBaseContext():用来获取一个ContextWrapper进行装饰之前的Context，可以使用这个方法，这个方法在实际开发中使用并不多，也不建议使用。<br>4：Activity.this 返回当前的Activity实例，如果是UI控件需要使用Activity作为Context对象，但是默认的Toast实际上使用ApplicationContext也可以。</p><h4 id="getApplication-和getApplicationContext"><a href="#getApplication-和getApplicationContext" class="headerlink" title="getApplication()和getApplicationContext()"></a>getApplication()和getApplicationContext()</h4><p>上面说到获取当前Application对象用getApplicationContext，不知道你有没有联想到getApplication()，这两个方法有什么区别？相信这个问题会难倒不少开发者。<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1ffwao49ze7j20gv0cxdgp.jpg" alt="getApplication()&amp;getApplicationContext()"><br>程序是不会骗人的，我们通过上面的代码，打印得出两者的内存地址都是相同的，看来它们是同一个对象。其实这个结果也很好理解，因为前面已经说过了，Application本身就是一个Context，所以这里获取getApplicationContext()得到的结果就是Application本身的实例。那么问题来了，既然这两个方法得到的结果都是相同的，那么Android为什么要提供两个功能重复的方法呢？实际上这两个方法在作用域上有比较大的区别。getApplication()方法的语义性非常强，一看就知道是用来获取Application实例的，但是这个方法只有在Activity和Service中才能调用的到。那么也许在绝大多数情况下我们都是在Activity或者Service中使用Application的，但是如果在一些其它的场景，比如BroadcastReceiver中也想获得Application的实例，这时就可以借助getApplicationContext()方法了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class MyReceiver extends BroadcastReceiver&#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    publicvoidonReceive(Contextcontext,Intentintent)&#123;</div><div class="line">        ApplicationmyApp=(Application)context.getApplicationContext();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="Context引起的内存泄露"><a href="#Context引起的内存泄露" class="headerlink" title="Context引起的内存泄露"></a>Context引起的内存泄露</h4><p>但Context并不能随便乱用，用的不好有可能会引起内存泄露的问题，下面就示例两种错误的引用方式。</p><h5 id="错误的单例模式"><a href="#错误的单例模式" class="headerlink" title="错误的单例模式:"></a>错误的单例模式:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance;</div><div class="line">    private Context mContext;</div><div class="line"></div><div class="line">    private Singleton(Context context) &#123;</div><div class="line">        this.mContext = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Singleton getInstance(Context context) &#123;</div><div class="line">        <span class="keyword">if</span> (instance == null) &#123;</div><div class="line">            instance = new Singleton(context);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>这是一个非线程安全的单例模式，instance作为静态对象，其生命周期要长于普通的对象，其中也包含Activity，假如Activity A去getInstance获得instance对象，传入this，常驻内存的Singleton保存了你传入的Activity A对象，并一直持有，即使Activity被销毁掉，但因为它的引用还存在于一个Singleton中，就不可能被GC掉，这样就导致了内存泄漏。</p><h5 id="View持有Activity引用"><a href="#View持有Activity引用" class="headerlink" title="View持有Activity引用:"></a>View持有Activity引用:</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends Activity &#123;</div><div class="line">    private static Drawable mDrawable;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle saveInstanceState) &#123;</div><div class="line">        super.onCreate(saveInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line">        ImageView iv = new ImageView(this);</div><div class="line">        mDrawable = getResources().getDrawable(R.drawable.ic_launcher);</div><div class="line">        iv.setImageDrawable(mDrawable);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>有一个静态的Drawable对象当ImageView设置这个Drawable时，ImageView保存了mDrawable的引用，而ImageView传入的this是MainActivity的mContext，因为被static修饰的mDrawable是常驻内存的，MainActivity是它的间接引用，MainActivity被销毁时，也不能被GC掉，所以造成内存泄漏。</p><h4 id="正确使用Context"><a href="#正确使用Context" class="headerlink" title="正确使用Context"></a>正确使用Context</h4><p>一般Context造成的内存泄漏，几乎都是当Context销毁的时候，却因为被引用导致销毁失败，而Application的Context对象可以理解为随着进程存在的，所以我们总结出使用Context的正确姿势：<br>1：当Application的Context能搞定的情况下，并且生命周期长的对象，优先使用Application的Context。<br>2：不要让生命周期长于Activity的对象持有到Activity的引用。<br>3：尽量不要在Activity中使用非静态内部类，因为非静态内部类会隐式持有外部类实例的引用，如果使用静态内部类，将外部实例引用作为弱引用持有。</p><h4 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h4><p>总之Context在Android系统中的地位很重要，它几乎无所不能，但它也不是你想用就能随便用的，谨防使用不当引起的内存问题。</p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>05 Intent概念及应用</title>
      <link href="/2017/05/24/ANDROID/BASE/05Intent%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%BA%94%E7%94%A8/"/>
      <url>/2017/05/24/ANDROID/BASE/05Intent%E6%A6%82%E5%BF%B5%E5%8F%8A%E5%BA%94%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<p>启动Activity分为两种，显示调用和隐式调用。显示调用通过指定Intent组件名称来实现的，它一般用在知道目标组件名称的前提下，一般是在相同的应用程序内部实现的。隐式调用通过Intent Filter来实现的，它一般用在没有明确指出目标组件名称的前提下，一般是用于在不同应用程序之间。</p><h4 id="显示调用"><a href="#显示调用" class="headerlink" title="显示调用"></a>显示调用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent=new Intent(MainActivity.this,SettingActivity.class);</div><div class="line">intent.putExtra(EXTRA,contentEditText.getText().toString());</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure><p>而Manifest文件描述为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=<span class="string">".MainActivity"</span> &gt; </div><div class="line">    &lt;intent-filter&gt; </div><div class="line">        &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt; </div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt; </div><div class="line">    &lt;/intent-filter&gt; </div><div class="line">&lt;/activity&gt; </div><div class="line">&lt;activity android:name=<span class="string">".SettingActivity"</span> /&gt;</div></pre></td></tr></table></figure></p><h4 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h4><p>隐式不明确指定启动哪个Activity，而是在Intent Filter中设置Action、Data、Category，让系统来筛选出合适的Activity。清单文件配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    package=<span class="string">"com.king.bester.myapplication"</span>&gt;</div><div class="line"></div><div class="line">    &lt;application</div><div class="line">        android:allowBackup=<span class="string">"true"</span></div><div class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        android:supportsRtl=<span class="string">"true"</span></div><div class="line">        android:theme=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        &lt;activity android:name=<span class="string">".MainActivity"</span> &gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line"></div><div class="line">        &lt;activity</div><div class="line">            android:name=<span class="string">".TargetActivity"</span></div><div class="line">            android:launchMode=<span class="string">"singleTask"</span></div><div class="line">            android:taskAffinity=<span class="string">"com.king.bester.myapplication"</span> &gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"android.intent.action.SEND"</span>/&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</div><div class="line">                &lt;data android:mimeType=<span class="string">"text/plain"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"com.king.bester.demo"</span> /&gt;</div><div class="line">                &lt;action android:name=<span class="string">"com.king.bester.DEMO"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"com.king.bester.a"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"com.king.bester.b"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</div><div class="line">                &lt;data android:mimeType=<span class="string">"text/plain"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"></div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p><p>代码调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 匹配第一组intent-filter</div><div class="line">public void startA(View view) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.setAction(<span class="string">"android.intent.action.SEND"</span>);</div><div class="line">    intent.setType(<span class="string">"text/plain"</span>);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 匹配第二组intent-filter</div><div class="line">public void startB(View view) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.setAction(<span class="string">"com.king.bester.demo"</span>);</div><div class="line">    intent.addCategory(<span class="string">"com.king.bester.a"</span>);</div><div class="line">    intent.setType(<span class="string">"text/plain"</span>);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>1、startA()中没有设置category，是因为系统在调用startActivity或者startActivityForResult的时候会默认为Intent加上“android.intent.category.DEFAULT”这个category。所以，为了我们的Activity能接收隐式调用，必须在intent-filter中指定这个category。<br>2、action区分大小写<br>3、一个Activity可以有多个intent-filter，一个intent只要能匹配任何一组intent-filter即可启动对应的Activity。</p><h4 id="浏览器启动本地App"><a href="#浏览器启动本地App" class="headerlink" title="浏览器启动本地App"></a>浏览器启动本地App</h4><p>Intent的过滤器：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;intent-filter&gt;</div><div class="line">    &lt;action android:name=<span class="string">"android.intent.action.VIEW"</span>/&gt;</div><div class="line">    &lt;category android:name=<span class="string">"android.intent.category.BROWSABLE"</span>/&gt;</div><div class="line">    &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span>/&gt;</div><div class="line">    &lt;data android:scheme=<span class="string">"app"</span>/&gt;</div><div class="line">&lt;/intent-filter&gt;</div></pre></td></tr></table></figure></p><p>网页链接：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;a href=<span class="string">"app://hello"</span>&gt;Launch My App&lt;/a&gt;</div></pre></td></tr></table></figure></p><p>代码获取网页传递过来的参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Uri uri = getIntent().getData();</div><div class="line">System.out.println(uri);</div></pre></td></tr></table></figure></p><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">app://hello</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>04 Activity启动模式</title>
      <link href="/2017/05/23/ANDROID/BASE/04Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/05/23/ANDROID/BASE/04Activity%E5%90%AF%E5%8A%A8%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>ActivityManagerService（AMS）内部维护着一个ActivityStack栈，系统会将Activity实例一一放入栈内（先进后出），默认情况下创建一个实例压入栈内。如果多次创建同一个Activity，栈内将压入多个实例。为此，Android提供了启动模式来修改系统的默认行为。目前有四种启动模式：standard、singleTop、singleTask和singleInstance。</p><h2 id="一、代码"><a href="#一、代码" class="headerlink" title="一、代码"></a>一、代码</h2><p>BaseActivity:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.launchmode;</div><div class="line"></div><div class="line">import android.content.Intent;</div><div class="line">import android.content.pm.ActivityInfo;</div><div class="line">import android.content.pm.PackageManager;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.util.Log;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Created by xianxiaotao on 17/5/23.</div><div class="line"> *</div><div class="line"> * 基类：输出Activity实例信息及所属任务栈信息</div><div class="line"> */</div><div class="line"></div><div class="line">public class BaseActivity extends AppCompatActivity &#123;</div><div class="line">    private static final String TAG = <span class="string">"Xian Xiaotao"</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        // 区别类名，区别同类名是否同实例，区别任务栈</div><div class="line">        Log.i(TAG, <span class="string">"onCreate："</span> + getClass().getSimpleName() + <span class="string">" hasCode:"</span> + this.hashCode() + <span class="string">" TaskId: "</span> + getTaskId());</div><div class="line">        // 任务栈名称，默认为包名相关</div><div class="line">        dumpTaskAffinity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onNewIntent(Intent intent) &#123;</div><div class="line">        super.onNewIntent(intent);</div><div class="line"></div><div class="line">        Log.i(TAG, <span class="string">"onNewIntent："</span> + getClass().getSimpleName() + <span class="string">" hasCode:"</span> + this.hashCode() + <span class="string">" TaskId: "</span> + getTaskId());</div><div class="line">        dumpTaskAffinity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void <span class="function"><span class="title">dumpTaskAffinity</span></span>()&#123;</div><div class="line">        try &#123;</div><div class="line">            ActivityInfo info = this.getPackageManager().getActivityInfo(getComponentName(), PackageManager.GET_META_DATA);</div><div class="line">            Log.i(TAG, <span class="string">"taskAffinity:"</span> + info.taskAffinity);</div><div class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>MainActivity:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.launchmode;</div><div class="line"></div><div class="line">import android.content.Intent;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">public class MainActivity extends BaseActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        findViewById(R.id.startMainButton).setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                startActivity(new Intent(MainActivity.this, MainActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findViewById(R.id.startOtherButton).setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                startActivity(new Intent(MainActivity.this, OtherActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>OtherActivity:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">package com.xianxiaotao.launchmode;</div><div class="line"></div><div class="line">import android.content.Intent;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">public class OtherActivity extends BaseActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_other);</div><div class="line"></div><div class="line">        findViewById(R.id.startMainButton).setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                startActivity(new Intent(OtherActivity.this, MainActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line"></div><div class="line">        findViewById(R.id.startOtherButton).setOnClickListener(new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">            @Override</div><div class="line">            public void onClick(View v) &#123;</div><div class="line">                startActivity(new Intent(OtherActivity.this, OtherActivity.class));</div><div class="line">            &#125;</div><div class="line">        &#125;);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>布局文件activity_main.xml，activity_other.xml文件与此类似<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout</div><div class="line">    xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/activity_main"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span></div><div class="line">    android:orientation=<span class="string">"vertical"</span> &gt;</div><div class="line"></div><div class="line">    &lt;TextView</div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:text=<span class="string">"This is main activity"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=<span class="string">"@+id/startMainButton"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:textAllCaps=<span class="string">"false"</span></div><div class="line">        android:text=<span class="string">"Start Main Activity"</span>/&gt;</div><div class="line"></div><div class="line">    &lt;Button</div><div class="line">        android:id=<span class="string">"@+id/startOtherButton"</span></div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:textAllCaps=<span class="string">"false"</span></div><div class="line">        android:text=<span class="string">"Start Other Activity"</span>/&gt;</div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><h2 id="二、测试"><a href="#二、测试" class="headerlink" title="二、测试"></a>二、测试</h2><h4 id="1、standard"><a href="#1、standard" class="headerlink" title="1、standard"></a>1、standard</h4><p>两个Activity都没有设置启动模式，即默认为标准模式。然后启动App，点击Start Main Activity按钮，然后再点击Start Other Activity按钮，然后再点击Start Main Activity。日志输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">I/Xian Xiaotao: onCreate：MainActivity hasCode:110059330 TaskId: 523</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onCreate：MainActivity hasCode:250944109 TaskId: 523</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onCreate：OtherActivity hasCode:39080781 TaskId: 523</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onCreate：MainActivity hasCode:42988356 TaskId: 523</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div></pre></td></tr></table></figure></p><p>上述日志中所有的hashCode都不相同，即每次启动Activity都创建一个新的实例。连续按四次返回键退出应用。<br>TaskId都相同，表明这些实例都在同一个任务栈里。</p><h4 id="2、singleTop"><a href="#2、singleTop" class="headerlink" title="2、singleTop"></a>2、singleTop</h4><p>在AndroidMainfest.xml文件中，为MainActivity添加属性：android:launchMode=”singleTop”。启动App、点击Start Main Activity按钮、再点击Start Other Activity按钮，再点击Start Main Activity。日志输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">I/Xian Xiaotao: onCreate：MainActivity hasCode:29797800 TaskId: 525</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onNewIntent：MainActivity hasCode:29797800 TaskId: 525</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onCreate：OtherActivity hasCode:42572600 TaskId: 525</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onCreate：MainActivity hasCode:97104763 TaskId: 525</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div></pre></td></tr></table></figure></p><p>第一次点击Start Main Activity按钮时，调用了onNewIntent方法，且hashCode与之前的MainActivity实例的hashCode相同，即复用实例而不是重新创建。第二次点击Start Main Activity按钮时，也就是说从OtherActivity里启动MainActivity，此时调用了onCreate方法，而且hashCode与之前的不相同，即重新创建了MainActivity的实例。连续按三次返回键退出应用。<br>TaskId都相同，表明这些实例都在同一个任务栈里。</p><h4 id="3、singleTask"><a href="#3、singleTask" class="headerlink" title="3、singleTask"></a>3、singleTask</h4><p>将MainActivity设置为singleTop，然后执行之前相同的动作。日志输出如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">I/Xian Xiaotao: onCreate：MainActivity hasCode:29797800 TaskId: 527</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onNewIntent：MainActivity hasCode:29797800 TaskId: 527</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onCreate：OtherActivity hasCode:121783201 TaskId: 527</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div><div class="line">I/Xian Xiaotao: onNewIntent：MainActivity hasCode:29797800 TaskId: 527</div><div class="line">I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode</div></pre></td></tr></table></figure></p><p>此时发现MainActivity的实例都相同，即第一次创建后，后面的都是复用实例而不是重新创建。按一次返回键退出应用。<br>TaskId都相同，表明这些实例都在同一个任务栈里。</p><h4 id="4、singleInstance"><a href="#4、singleInstance" class="headerlink" title="4、singleInstance"></a>4、singleInstance</h4><p>将MainActivity设置为singleInstance，然后执行之前相同的动作。日志输出如下：<br>I/Xian Xiaotao: onCreate：MainActivity hasCode:29797800 TaskId: 529<br>I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode<br>I/Xian Xiaotao: onNewIntent：MainActivity hasCode:29797800 TaskId: 529<br>I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode<br>I/Xian Xiaotao: onCreate：OtherActivity hasCode:42572600 TaskId: 530<br>I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode<br>I/Xian Xiaotao: onNewIntent：MainActivity hasCode:29797800 TaskId: 529<br>I/Xian Xiaotao: taskAffinity:com.xianxiaotao.launchmode<br>此时发现MainActivity的实例依然相同，即第一次创建后，后面的都是复用实例而不是重新创建。按两次返回键退出应用。<br>TaskId不同，即MainActivity与OtherActivity不在一个Activity中。</p><blockquote><p>读者可以通过多个Activity设置不同的启动模式进行复杂的测试。</p></blockquote><h2 id="三、结论"><a href="#三、结论" class="headerlink" title="三、结论"></a>三、结论</h2><h4 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h4><p>标准模式，也是系统默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。谁启动了这个Activity，那么这个Activity就运行在启动它的那个Activity所在的栈中。ABCBB</p><h4 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h4><p>栈顶复用模式。如果新Activity已经位于任务栈的栈顶，那么只调用它的onNewIntent方法实现复用，而不会创建新的实例。如果新的Activity的实例已存在但不是位于栈顶，仍然重新创建。假设目前栈内情况为ABCD（ABCD为四个Activity，A位于栈底），此时再次启动，如果D的启动模式为singleTop，那么栈内仍然是ABCD；如果D的启动模式为standard，D将被重新创建，栈内情况变为ABCDD。</p><h4 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h4><p>栈内复用模式。在同一个栈内，它是单实例模式。在这种模式下，启动一个Activity A，系统首先会寻找是否存在A想要的任务栈，如果不存在，就重新创建一个任务栈，然后创建A的实例并压入栈内；如果存在所需的任务栈，这时要看A是否在栈中有实例存在，如果有，那么系统就会把A调到栈顶并调用它的onNewIntent方法，不存在就创建并压入栈中。<br>1、目前任务栈栈S1(ABC)，此时Activity D以singleTask模式请求启动，其所需的任务栈为S2，由于S2和D的实例均不存在，所以系统先创建任务栈S2，然后再创建D的实例并将其放入栈S2中。<br>2、另外一种情况，假设D所需的任务栈为S1，上述S1已存在，所以系统会直接创建D的实例并压入栈S1内。<br>3、如果D所需的任务栈为S1，其中为ADBC，此时系统将D上面的Activity出栈，把D切换到栈顶并调用onNewIntent方法，最终S1栈内为AD。</p><h4 id="singleInstance："><a href="#singleInstance：" class="headerlink" title="singleInstance："></a>singleInstance：</h4><p>该模式具备singleTask模式的所有特性外，与它的区别就是，这种模式下的Activity会单独占用一个Task栈，具有全局唯一性，即整个系统中就这么一个实例，由于栈内复用的特性，后续的请求均不会创建新的Activity实例，除非这个特殊的任务栈被销毁了。以singleInstance模式启动的Activity在整个系统中是单例的，如果在启动这样的Activiyt时，已经存在了一个实例，那么会把它所在的任务调度到前台，重用这个实例。</p><p><a href="http://blog.csdn.net/mynameishuangshuai/article/details/51491074" target="_blank" rel="external">启动模式参考博客</a></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>03 Activity之间传递参数</title>
      <link href="/2017/05/23/ANDROID/BASE/03Activity%E4%B9%8B%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/"/>
      <url>/2017/05/23/ANDROID/BASE/03Activity%E4%B9%8B%E9%97%B4%E4%BC%A0%E9%80%92%E5%8F%82%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<h4 id="一、传递简单数据"><a href="#一、传递简单数据" class="headerlink" title="一、传递简单数据"></a>一、传递简单数据</h4><p>发送数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(MainActivity.this, OtherActivity.class);</div><div class="line">intent.putExtra(<span class="string">"data"</span>, <span class="string">"data value"</span>);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p><p>接受数据：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">String data = getIntent().getStringExtra(<span class="string">"data"</span>);</div><div class="line">textView.setText(data);</div></pre></td></tr></table></figure></p><p>优化代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div></pre></td><td class="code"><pre><div class="line">// 传递参数</div><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void sendArgs(View view) &#123;</div><div class="line">        Intent intent = OtherActivity.newIntent(this, <span class="string">"data value"</span>);</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 接受参数</div><div class="line">public class OtherActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private static final String ARG = <span class="string">"data"</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_other);</div><div class="line"></div><div class="line">        TextView textView = (TextView) findViewById(R.id.tv);</div><div class="line">        String data = getIntent().getStringExtra(ARG);</div><div class="line">        textView.setText(data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 解除参数名称<span class="string">"data"</span>带来的依赖性</div><div class="line">    public static Intent newIntent(Context context, String data) &#123;</div><div class="line">        Intent intent = new Intent(context, OtherActivity.class);</div><div class="line">        intent.putExtra(ARG, data);</div><div class="line">        <span class="built_in">return</span> intent;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="二、传递数据包Bundle"><a href="#二、传递数据包Bundle" class="headerlink" title="二、传递数据包Bundle"></a>二、传递数据包Bundle</h4><p>发送数据包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(MainActivity.this, OtherActivity.class);</div><div class="line">Bundle bundle = new Bundle();</div><div class="line">bundle.putString(<span class="string">"name"</span>, <span class="string">"xian xiaotao"</span>);</div><div class="line">bundle.putInt(<span class="string">"age"</span>, 28);</div><div class="line">intent.putExtras(bundle);</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p><p>接受数据包：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Bundle data = getIntent().getExtras();</div><div class="line">textView.setText(String.format(Locale.getDefault(), <span class="string">"name=%s,age=%d"</span>, data.getString(<span class="string">"name"</span>), data.getInt(<span class="string">"age"</span>)));</div></pre></td></tr></table></figure></p><h4 id="三、传递值对象"><a href="#三、传递值对象" class="headerlink" title="三、传递值对象"></a>三、传递值对象</h4><p>实现Parcelable<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">import android.os.Parcel;</div><div class="line">import android.os.Parcelable;</div><div class="line"></div><div class="line">public class User implements Parcelable &#123;</div><div class="line">    private String mName;</div><div class="line">    private int mAge;</div><div class="line"></div><div class="line">    public User(String name, int age) &#123;</div><div class="line">        mName = name;</div><div class="line">        mAge = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">        mName = name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int <span class="function"><span class="title">getAge</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mAge;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Age(int age) &#123;</div><div class="line">        mAge = age;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int <span class="function"><span class="title">describeContents</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void writeToParcel(Parcel dest, int flags) &#123;</div><div class="line">        // 更复杂的数据借用Bundle</div><div class="line">        dest.writeString(getName());</div><div class="line">        dest.writeInt(getAge());</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static final Creator&lt;User&gt; CREATOR = new Creator&lt;User&gt;() &#123;</div><div class="line">        @Override</div><div class="line">        public User createFromParcel(Parcel <span class="built_in">source</span>) &#123;</div><div class="line">            <span class="built_in">return</span> new User(source.readString(), source.readInt());</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public User[] newArray(int size) &#123;</div><div class="line">            <span class="built_in">return</span> new User[size];</div><div class="line">        &#125;</div><div class="line">    &#125;;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>传递参数：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent = new Intent(MainActivity.this, OtherActivity.class);</div><div class="line">intent.putExtra(<span class="string">"user"</span>, new User(<span class="string">"xian xiaotao"</span>, 28));</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure></p><p>接收参数<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">User user = getIntent().getParcelableExtra(<span class="string">"user"</span>);</div><div class="line">textView.setText(String.format(Locale.getDefault(), <span class="string">"name=%s,age=%d"</span>, user.getName(), user.getAge()));</div></pre></td></tr></table></figure></p><blockquote><p>Serializable的作用是为了保存对象的属性到本地文件、数据库、网络流、rmi以方便数据传输，当然这种传输可以是程序内的也可以是两个程序间的。而Android的Parcelable的设计初衷是因为Serializable效率过慢，为了在程序内不同组件间以及不同Android程序间(AIDL)高效的传输数据而设计，这些数据仅在内存中存在，Parcelable是通过IBinder通信的消息的载体。<br>Parcelable的性能比Serializable好，在内存开销方面较小，所以在内存间数据传输时推荐使用Parcelable，如activity间传输数据，而Serializable可将数据持久化方便保存，所以在需要保存或网络传输数据时选择Serializable，因为android不同版本Parcelable可能不同，所以不推荐使用Parcelable进行数据持久化</p></blockquote><h4 id="四、获取Activity返回参数"><a href="#四、获取Activity返回参数" class="headerlink" title="四、获取Activity返回参数"></a>四、获取Activity返回参数</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">public class QuizActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">private static final int REQUEST_CODE_CHEAT = 0;</div><div class="line"></div><div class="line">... </div><div class="line"></div><div class="line">// startActivityForResult代码</div><div class="line">Intent i = CheatActivity.newIntent(QuizActivity.this, answerIsTrue);</div><div class="line">    startActivityForResult(i, REQUEST_CODE_CHEAT);</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onActivityResult(int requestCode, int resultCode, Intent data) &#123;</div><div class="line">        <span class="keyword">if</span> (resultCode != Activity.RESULT_OK)</div><div class="line">            <span class="built_in">return</span>;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (requestCode == REQUEST_CODE_CHEAT) &#123;</div><div class="line">            <span class="keyword">if</span> (data == null)</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            mIsCheater = CheatActivity.wasAnswerShown(data);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class CheatActivity extends AppCompatActivity &#123;</div><div class="line">private static final String EXTRA_ANSWER_SHOWN = <span class="string">"com.xxtking.geoquiz.CheatActivity.answer_shown"</span>;</div><div class="line"></div><div class="line">...</div><div class="line"></div><div class="line">private void <span class="built_in">set</span>AnswerShownResult(boolean isAnswerShown) &#123;</div><div class="line">        Intent data = new Intent();</div><div class="line">        data.putExtra(EXTRA_ANSWER_SHOWN, isAnswerShown);</div><div class="line">        <span class="built_in">set</span>Result(RESULT_OK, data);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">public static boolean wasAnswerShown(Intent result) &#123;</div><div class="line">        <span class="built_in">return</span> result.getBooleanExtra(EXTRA_ANSWER_SHOWN, <span class="literal">false</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>02 Activity生命周期</title>
      <link href="/2017/05/23/ANDROID/BASE/02Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/"/>
      <url>/2017/05/23/ANDROID/BASE/02Activity%E7%94%9F%E5%91%BD%E5%91%A8%E6%9C%9F/</url>
      
        <content type="html"><![CDATA[<p>整个生命周期来说，成对出现的。onCreate和onDestroy是成对的，代表着创建与销毁；onStart和onStop表示Activity对于程序是否可见（后台）；onResume和onPause表示Activity对于用户是否可见（前台）。</p><p><img src="http://ww1.sinaimg.cn/large/adc90466gy1fcptk0wnt2j20e90ifmz4" alt=""></p><h2 id="正常生命周期"><a href="#正常生命周期" class="headerlink" title="正常生命周期"></a>正常生命周期</h2><h4 id="1、初次启动Activity"><a href="#1、初次启动Activity" class="headerlink" title="1、初次启动Activity"></a>1、初次启动Activity</h4><p>onCreate -&gt; onStart -&gt; onResume</p><h4 id="2、界面显示时按了返回键"><a href="#2、界面显示时按了返回键" class="headerlink" title="2、界面显示时按了返回键"></a>2、界面显示时按了返回键</h4><p>onPause -&gt; onStop -&gt; onDestroy</p><h4 id="3、界面显示时按了Home键"><a href="#3、界面显示时按了Home键" class="headerlink" title="3、界面显示时按了Home键"></a>3、界面显示时按了Home键</h4><p>onPause -&gt; onStop</p><h4 id="4、Home键之后再次启动"><a href="#4、Home键之后再次启动" class="headerlink" title="4、Home键之后再次启动"></a>4、Home键之后再次启动</h4><p>onRestart -&gt; onStart -&gt; onResume</p><h4 id="5、界面显示时按了锁屏键及解锁"><a href="#5、界面显示时按了锁屏键及解锁" class="headerlink" title="5、界面显示时按了锁屏键及解锁"></a>5、界面显示时按了锁屏键及解锁</h4><p>锁屏：onPause -&gt; onStop<br>解锁：onRestart -&gt; onStart -&gt; onResume</p><h4 id="6、从A-Activity启动-B-Activity"><a href="#6、从A-Activity启动-B-Activity" class="headerlink" title="6、从A Activity启动 B Activity"></a>6、从A Activity启动 B Activity</h4><p>A onPause -&gt; B onCreate -&gt; B onStart -&gt; B onResume -&gt; A onStop<br>返回：B onPause -&gt; A onRestart -&gt; A onStart -&gt; A onResume -&gt; B onStop -&gt; B onDestroy</p><h4 id="7、从A-Activity启动-B-Activity-android-theme-”-style-Base-Theme-AppCompat-Dialog”"><a href="#7、从A-Activity启动-B-Activity-android-theme-”-style-Base-Theme-AppCompat-Dialog”" class="headerlink" title="7、从A Activity启动 B Activity (android:theme=”@style/Base.Theme.AppCompat.Dialog”)"></a>7、从A Activity启动 B Activity (android:theme=”@style/Base.Theme.AppCompat.Dialog”)</h4><p>A onPause -&gt; B onCreate -&gt; B onStart -&gt; B onResume<br>返回：B onPause -&gt; A onResume -&gt; B onStop -&gt; B onDestroy</p><h2 id="切换横竖屏幕"><a href="#切换横竖屏幕" class="headerlink" title="切换横竖屏幕"></a>切换横竖屏幕</h2><p>targetSdkVersion 25，没有设置android:configChanges：<br>1、竖屏切横屏：onConfigurationChanged() -&gt; onPause() -&gt; onSaveInstanceState() -&gt; onStop() -&gt; onDestroy() -&gt; onCreate() -&gt; onStart() -&gt; onRestoreInstanceState() -&gt; onResume()<br>2、横屏切竖屏：onConfigurationChanged() -&gt; onPause() -&gt; onSaveInstanceState() -&gt; onStop() -&gt; onDestroy() -&gt; onCreate() -&gt; onStart() -&gt; onRestoreInstanceState() -&gt; onResume()</p><blockquote><p>本人使用的是模拟器（minSdkVersion 16 / targetSdkVersion 25）测试，无论是否设置Activity的android:configChanges，或者属性值设为orientation或orientation|keyboardHidden，无论是竖屏切横屏还是横屏切竖屏，流程都如上所述，当android:configChanges=”orientation|keyboardHidden|screenSize”时，只会调用onConfigurationChanged()。经过查资料，android:targetSdkVersion这个属性会影响横竖屏切换的生命周期。<a href="http://www.cnblogs.com/xiaoQLu/p/3324503.html" target="_blank" rel="external">详见xiaoQLud的博客</a></p></blockquote><h2 id="异常生命周期"><a href="#异常生命周期" class="headerlink" title="异常生命周期"></a>异常生命周期</h2><p>1、系统配置发生改变后，默认情况下Activity会被销毁然后重新创建，生命周期参考横竖屏切换。常用的系统配置只有local、orientation和keyboardHidden。<br>2、资源内存不足导致低优先级的Activity被杀死，生命周期参考横竖屏切换。<br>3、运行时发生了异常，程序直接崩溃。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int i = 10; i &gt;= 0; i++)</div><div class="line">    System.out.println(10 / i)</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>01 环境搭建</title>
      <link href="/2017/05/23/ANDROID/BASE/01%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/"/>
      <url>/2017/05/23/ANDROID/BASE/01%E7%8E%AF%E5%A2%83%E6%90%AD%E5%BB%BA/</url>
      
        <content type="html"><![CDATA[<h2 id="一、JDK"><a href="#一、JDK" class="headerlink" title="一、JDK"></a>一、JDK</h2><p>1、<a href="https://www.oracle.com/index.html" target="_blank" rel="external">https://www.oracle.com/index.html</a><br>2、Menu -&gt; Downloads -&gt; Java -&gt; All Java Downloads -&gt; Java SE Downloads<br>3、<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html" target="_blank" rel="external">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a><br>4、JDK DOWNLOAD</p><h2 id="二、Mac平台搭建集成开发环境"><a href="#二、Mac平台搭建集成开发环境" class="headerlink" title="二、Mac平台搭建集成开发环境"></a>二、Mac平台搭建集成开发环境</h2><p>1、<a href="https://www.android.com/" target="_blank" rel="external">https://www.android.com/</a><br>2、底部 -&gt; DEVELOPERS -&gt; App Developer Resources -&gt; DEVELOP<br>3、获取Android Studio （<a href="https://developer.android.com/studio/index.html）" target="_blank" rel="external">https://developer.android.com/studio/index.html）</a><br>4、下载 ANDROID STUDIO FOR MAC</p><h2 id="三、Windows平台搭建"><a href="#三、Windows平台搭建" class="headerlink" title="三、Windows平台搭建"></a>三、Windows平台搭建</h2><p>1、在Windows平台上，按照Mac平台搭建环境的步骤进行下载即可</p><h2 id="四、Linux平台搭建"><a href="#四、Linux平台搭建" class="headerlink" title="四、Linux平台搭建"></a>四、Linux平台搭建</h2><p>1、在Linux平台上，按照Mac平台搭建环境的步骤进行下载即可<br>2、解压到opt目录下：sudo mv android-studio /opt/<br>3、输入密码<br>4、命令行：cd /opt/android-studio/bin/<br>5、命令行：./studio.sh<br>6、安装失败则需要下载解压JDK文件，与上述步骤雷同<br>7、配置JDK路径：sudo nano /etc/profile<br>8、文件末尾添加：export JDK_HOME=/opt/jdk1.8.0_40<br>9、退出保存并立即生效：source /etc/profile<br>10、验证：echo $JDK_HOME<br>11、重新安装：./studio.sh</p><p><a href="http://stormzhang.com/devtools/2014/11/25/android-studio-tutorial1/" target="_blank" rel="external">大神的下载安装教程</a></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Note | 研发录之重构</title>
      <link href="/2017/04/13/ANDROID/Note%20%E7%A0%94%E5%8F%91%E5%BD%95%E4%B9%8B%E9%87%8D%E6%9E%84/"/>
      <url>/2017/04/13/ANDROID/Note%20%E7%A0%94%E5%8F%91%E5%BD%95%E4%B9%8B%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h2 id="一、重构项目结构"><a href="#一、重构项目结构" class="headerlink" title="一、重构项目结构"></a>一、重构项目结构</h2><h4 id="Step-1-自定义业务无关的基础类库"><a href="#Step-1-自定义业务无关的基础类库" class="headerlink" title="Step 1. 自定义业务无关的基础类库"></a>Step 1. 自定义业务无关的基础类库</h4><ul><li>com.baselib.activity: 封装业务无关的公用逻辑，如后面的BaseActivity代码</li><li>com.baselib.cache: 缓存数据和图片的处理</li><li>com.baselib.net: 网络底层封装库</li><li>com.baselib.ui: 自定义控件</li><li>com.baselib.utils: 业务无关的公用方法</li></ul><h4 id="Step-2-实际项目中类进行归类划分"><a href="#Step-2-实际项目中类进行归类划分" class="headerlink" title="Step 2. 实际项目中类进行归类划分"></a>Step 2. 实际项目中类进行归类划分</h4><ul><li>com.myapp.activity: 所有的Activity，其他三大组件同样如此</li><li>com.myapp.adapter: 所有的适配器</li><li>com.myapp.entity: 实体类</li><li>com.myapp.db: SQLite相关的逻辑封装</li><li>com.myapp.engine: 业务相关的类</li><li>com.myapp.ui: 自定义控件</li><li>com.myapp.utils: 工具类</li><li>com.myapp.interfaces: 接口，以I作为开头</li><li>com.myapp.listener: 基于Listener的接口，命名以On作为开头</li></ul><h2 id="二、Activity-模板"><a href="#二、Activity-模板" class="headerlink" title="二、Activity 模板"></a>二、Activity 模板</h2><h4 id="1-com-baselib-activity-BaseActivity"><a href="#1-com-baselib-activity-BaseActivity" class="headerlink" title="1. com.baselib.activity.BaseActivity"></a>1. com.baselib.activity.BaseActivity</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">public abstract class BaseActivity extends Activity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        initVariables();</div><div class="line">        initViews(savedInstanceState);</div><div class="line">        loadData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 初始化变量，包括Intent带的数据和Activity内的变量</div><div class="line">    protected abstract void initVariables();</div><div class="line">    // 加载layout布局文件，初始化控件，为控件挂上事件方法</div><div class="line">    protected abstract void initViews(Bundle savedInstanceState);</div><div class="line">    // 获取数据</div><div class="line">    protected abstract void loadData();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-com-myapp-activity-LoginActivity"><a href="#2-com-myapp-activity-LoginActivity" class="headerlink" title="2. com.myapp.activity.LoginActivity"></a>2. com.myapp.activity.LoginActivity</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">public class LoginActivity extends BaseActivity &#123;</div><div class="line">    private int loginTimes;</div><div class="line">    private String strEmail;</div><div class="line"></div><div class="line">    private EditText etPassword;</div><div class="line">    private EditText etEmail;</div><div class="line">    private Button btnLogin;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">initVariables</span></span>() &#123;</div><div class="line">        loginTimes = -1;</div><div class="line"></div><div class="line">        Bundle bundle = getIntent().getExtras();</div><div class="line">        strEmail = bundle.getString(AppConstants.Email);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void initViews(Bundle savedInstanceState) &#123;</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_login);</div><div class="line"></div><div class="line">        etEmail = (EditText) findViewById(R.id.email);</div><div class="line">        etEmail.setText(strEmail);</div><div class="line">        etPassword = (EditText) findViewById(R.id.password);</div><div class="line"></div><div class="line">        // 登录事件</div><div class="line">        btnLogin = (Button) findViewById(R.id.sign_in_button);</div><div class="line">        btnLogin.setOnClickListener(</div><div class="line">            new View.<span class="function"><span class="title">OnClickListener</span></span>() &#123;</div><div class="line">                @Override</div><div class="line">                public void onClick(View v) &#123;</div><div class="line">                    gotoLoginActivity();</div><div class="line">                &#125;</div><div class="line">            &#125;);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void <span class="function"><span class="title">gotoLoginActivity</span></span>() &#123;</div><div class="line">        startActivity(new Intent(LoginActivity.this, PersonCenterActivity.class));</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void <span class="function"><span class="title">loadData</span></span>() &#123;</div><div class="line">        loadWeatherData();</div><div class="line">        loadCityData();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="三、Adapter-模板"><a href="#三、Adapter-模板" class="headerlink" title="三、Adapter 模板"></a>三、Adapter 模板</h2><h4 id="com-myapp-adapter-WeatherAdapter"><a href="#com-myapp-adapter-WeatherAdapter" class="headerlink" title="com.myapp.adapter.WeatherAdapter"></a>com.myapp.adapter.WeatherAdapter</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div></pre></td><td class="code"><pre><div class="line">public class WeatherAdapter extends BaseAdapter &#123;</div><div class="line">    private final ArrayList&lt;WeatherInfo&gt; weatherList;</div><div class="line">    private final BaseActivity context;</div><div class="line"></div><div class="line">    public WeatherAdapter(ArrayList&lt;WeatherInfo&gt; weatherList, BaseActivity context) &#123;</div><div class="line">        this.weatherList = weatherList;</div><div class="line">        this.context = context;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int <span class="function"><span class="title">getCount</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> weatherList.size();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public WeatherInfo getItem(final int position) &#123;</div><div class="line">        <span class="built_in">return</span> weatherList.get(position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public long getItemId(final int position) &#123;</div><div class="line">        <span class="built_in">return</span> position;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public View getView(final int position, View convertView, final ViewGroup parent) &#123;</div><div class="line">        final Holder holder;</div><div class="line">        <span class="keyword">if</span> (convertView == null) &#123;</div><div class="line">            holder = new Holder();</div><div class="line">            convertView = context.getLayoutInflater().inflate(R.layout.item_weatherlist, null);</div><div class="line">            holder.tvCity = (TextView) convertView.findViewById(R.id.tvCity);</div><div class="line">            convertView.setTag(holder);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">        holder = (Holder) convertView.getTag();</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        WeatherInfo weatherInfo = weatherList.get(position);</div><div class="line">        holder.tvCity.setText(weatherInfo.getCity());</div><div class="line">        <span class="built_in">return</span> convertView;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    class Holder &#123;</div><div class="line">        TextView tvCity;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="ListDemoActivity-onCreate"><a href="#ListDemoActivity-onCreate" class="headerlink" title="ListDemoActivity.onCreate()"></a>ListDemoActivity.onCreate()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">lvWeatherList = (ListView) findViewById(R.id.lvWeatherlist);</div><div class="line">WeatherAdapter adapter = new WeatherAdapter(weatherList, ListDemoActivity.this);</div><div class="line">lvWeatherList.setAdapter(adapter);</div><div class="line">lvWeatherList.setOnItemClickListener(</div><div class="line">    new AdapterView.<span class="function"><span class="title">OnItemClickListener</span></span>() &#123;</div><div class="line">        @Override</div><div class="line">        public void onItemClick(AdapterView&lt;?&gt; parent, View view, int position, long id) &#123;</div><div class="line">            // <span class="keyword">do</span> something...</div><div class="line">        &#125;</div><div class="line">    &#125;);</div></pre></td></tr></table></figure><h2 id="四、实体化编程"><a href="#四、实体化编程" class="headerlink" title="四、实体化编程"></a>四、实体化编程</h2><h4 id="1-JSON-数据"><a href="#1-JSON-数据" class="headerlink" title="1. JSON 数据"></a>1. JSON 数据</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">&#123; <span class="string">"weatherinfo"</span>:&#123;</div><div class="line">    <span class="string">"city"</span>:<span class="string">"北京"</span>,</div><div class="line">    <span class="string">"cityid"</span>:<span class="string">"101010100"</span>,</div><div class="line">    <span class="string">"temp"</span>:<span class="string">"24"</span>,</div><div class="line">    <span class="string">"WD"</span>:<span class="string">"南风"</span>,</div><div class="line">    <span class="string">"SD"</span>:<span class="string">"74%"</span>,</div><div class="line">    <span class="string">"time"</span>:<span class="string">"17:45"</span></div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2-生成实体类"><a href="#2-生成实体类" class="headerlink" title="2. 生成实体类"></a>2. 生成实体类</h4><p>可以使用插件，也可以使用公开的工具，如<a href="http://files.cnblogs.com/Jax/EntityGenerator.zip" target="_blank" rel="external">包建强提供的实体生成器下载地址</a><br><img src="http://ww1.sinaimg.cn/large/adc90466ly1fel1oooznaj20qh0hw74g.jpg" alt=""></p><h4 id="3-序列化"><a href="#3-序列化" class="headerlink" title="3. 序列化"></a>3. 序列化</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class Weatherinfo implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line"></div><div class="line">    private String city;</div><div class="line">    private String cityid;</div><div class="line">    private String temp;</div><div class="line">    private String WD;</div><div class="line">    private String SD;</div><div class="line">    private String time;</div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getCity</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>City(String city) &#123;</div><div class="line">        this.city = city;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4-fastJSON"><a href="#4-fastJSON" class="headerlink" title="4. fastJSON"></a>4. fastJSON</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">WeatherEntity weatherEntity = JSON.parseObject(jsonContent, WeatherEntity.class);</div><div class="line">WeatherInfor weatherInfor = weatherEntity.getWeatherInfo();</div><div class="line"><span class="keyword">if</span> (weatherInfor != null) &#123;</div><div class="line">    tvCity.setText(weatherInfo.getCity());</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>如果使用崩溃，试下在混淆文件中加以下两行:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">-keepattributes Signature     // 避免混淆泛型</div><div class="line">-keepattributes *Annotation*  // 不混淆注解</div></pre></td></tr></table></figure></p><h4 id="5-传递"><a href="#5-传递" class="headerlink" title="5. 传递"></a>5. 传递</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">intent.putExtra(AppContants.Weather, weatherInfo);</div></pre></td></tr></table></figure><h2 id="五、类型安全转换函数"><a href="#五、类型安全转换函数" class="headerlink" title="五、类型安全转换函数"></a>五、类型安全转换函数</h2><h4 id="valueOf-NaN"><a href="#valueOf-NaN" class="headerlink" title="valueOf"></a>valueOf</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public final static int convertToInt(Object value, int defaultValue) &#123;</div><div class="line">    <span class="keyword">if</span> (value == null || <span class="string">""</span>.equals(value.toString().trim())) &#123;</div><div class="line">        <span class="built_in">return</span> defaultValue;</div><div class="line">    &#125;</div><div class="line">    try &#123;</div><div class="line">        <span class="built_in">return</span> Integer.valueOf(value.toString());</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">        try &#123;</div><div class="line">            <span class="built_in">return</span> Double.valueOf(value.toString()).intValue();</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            <span class="built_in">return</span> defaultValue;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="substring"><a href="#substring" class="headerlink" title="substring"></a>substring</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">String cityName = <span class="string">"T"</span>;</div><div class="line">String firstLetter = <span class="string">""</span>;</div><div class="line"><span class="keyword">if</span> (cityName.length() &gt; 1) &#123;</div><div class="line">    firstLetter = cityName.substring(1, 2);</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
            <tag> 研发录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID | 使用Fragment兼容平板与手机</title>
      <link href="/2017/04/10/ANDROID/ANDROID%20Building%20a%20Dynamic%20UI%20with%20Fragments/"/>
      <url>/2017/04/10/ANDROID/ANDROID%20Building%20a%20Dynamic%20UI%20with%20Fragments/</url>
      
        <content type="html"><![CDATA[<h2 id="界面效果"><a href="#界面效果" class="headerlink" title="界面效果"></a>界面效果</h2><p>在手机设备上，由于采用单窗格用户界面，因此可能更适合一次只显示一个片段。 相反，由于平板电脑屏幕尺寸较大，可以为用户显示更多信息，因此最好将片段设计为并排显示。<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1fehnmn669ej20ga06djsm.jpg" alt=""></p><h2 id="布局文件"><a href="#布局文件" class="headerlink" title="布局文件"></a>布局文件</h2><h4 id="小屏布局文件，如手机"><a href="#小屏布局文件，如手机" class="headerlink" title="小屏布局文件，如手机"></a>小屏布局文件，如手机</h4><p>res/layout/news_articles.xml:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;FrameLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:id=<span class="string">"@+id/fragment_container"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span> /&gt;</div></pre></td></tr></table></figure></p><h4 id="大屏布局文件，如平板电脑"><a href="#大屏布局文件，如平板电脑" class="headerlink" title="大屏布局文件，如平板电脑"></a>大屏布局文件，如平板电脑</h4><p>res/layout-large/news_articles.xml:<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line"></div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    android:orientation=<span class="string">"horizontal"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;fragment android:name=<span class="string">"com.king.demo.fragment.HeadlinesFragment"</span></div><div class="line">        android:id=<span class="string">"@+id/headlines_fragment"</span></div><div class="line">        android:layout_weight=<span class="string">"1"</span></div><div class="line">        android:layout_width=<span class="string">"0dp"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">    &lt;fragment android:name=<span class="string">"com.king.demo.fragment.ArticleFragment"</span></div><div class="line">        android:id=<span class="string">"@+id/article_fragment"</span></div><div class="line">        android:layout_weight=<span class="string">"2"</span></div><div class="line">        android:layout_width=<span class="string">"0dp"</span></div><div class="line">        android:layout_height=<span class="string">"match_parent"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><h4 id="判断加载哪个布局文件"><a href="#判断加载哪个布局文件" class="headerlink" title="判断加载哪个布局文件"></a>判断加载哪个布局文件</h4><p>当设备屏幕尺寸小于large时加载第一个布局文件，否则加载第二个布局文件，是否large则由系统判断，而我们可以通过以下方法判断加载的是哪个布局：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (findViewById(R.id.fragment_container) != null) &#123;</div><div class="line">    // 此处加载了第一个布局文件</div><div class="line">&#125;</div><div class="line"></div><div class="line">ArticleFragment articleFrag = (ArticleFragment) getSupportFragmentManager().findFragmentById(R.id.article_fragment);</div><div class="line"><span class="keyword">if</span> (articleFrag != null) &#123;</div><div class="line">    // 此处加载了第二个布局</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="片段处理"><a href="#片段处理" class="headerlink" title="片段处理"></a>片段处理</h2><p>FragmentManager类提供的方法让您可以在运行时为 Activity 添加、移除和替换片段，从而营造出动态的用户体验。</p><h4 id="在运行时为-Activity-添加片段"><a href="#在运行时为-Activity-添加片段" class="headerlink" title="在运行时为 Activity 添加片段"></a>在运行时为 Activity 添加片段</h4><p>在您的 Activity 内，使用 Support Library API 调用 getSupportFragmentManager() 以获取 FragmentManager。然后，调用 beginTransaction() 创建一个 FragmentTransaction，并调用 add() 添加一个片段。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">import android.support.v4.app.FragmentActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.support.v4.app.FragmentTransaction;</div><div class="line"></div><div class="line">import com.king.demo.R;</div><div class="line"></div><div class="line">public class DynamicFragmentsActivity extends FragmentActivity &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.news_articles);</div><div class="line"></div><div class="line">        // Check whether the activity is using the layout version with</div><div class="line">        // the fragment_container FrameLayout. If so, we must add the first fragment</div><div class="line">        <span class="keyword">if</span> (findViewById(R.id.fragment_container) != null) &#123;</div><div class="line"></div><div class="line">            // However, <span class="keyword">if</span> we<span class="string">'re being restored from a previous state,</span></div><div class="line">            // then we don't need to <span class="keyword">do</span> anything and should <span class="built_in">return</span> or <span class="keyword">else</span></div><div class="line">            // we could end up with overlapping fragments.</div><div class="line">            <span class="keyword">if</span> (savedInstanceState != null) &#123;</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // Create an instance of ExampleFragment</div><div class="line">            HeadlinesFragment firstFragment = new HeadlinesFragment();</div><div class="line"></div><div class="line">            // In <span class="keyword">case</span> this activity was started with special instructions from an Intent,</div><div class="line">            // pass the Intent<span class="string">'s extras to the fragment as arguments</span></div><div class="line">            firstFragment.setArguments(getIntent().getExtras());</div><div class="line"></div><div class="line">            // Add the fragment to the 'fragment_container<span class="string">' FrameLayout</span></div><div class="line">            getSupportFragmentManager().beginTransaction()</div><div class="line">                    .add(R.id.fragment_container, firstFragment).commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="替换片段"><a href="#替换片段" class="headerlink" title="替换片段"></a>替换片段</h4><p>替换片段的步骤与添加片段类似，只不过调用的方法从 add() 改为 replace()。<br>请谨记，当您执行替换或移除片段等片段事务时，通常最好让用户能够回退并“撤消”更改。 要让用户回退所执行的片段事务，您必须先调用 addToBackStack()，然后再提交 FragmentTransaction。<br>片段替换示例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">// Capture the article fragment from the activity layout</div><div class="line">ArticleFragment articleFrag = (ArticleFragment)</div><div class="line">        getSupportFragmentManager().findFragmentById(R.id.article_fragment);</div><div class="line"></div><div class="line"><span class="keyword">if</span> (articleFrag != null) &#123;</div><div class="line">    // If article frag is available, we<span class="string">'re in two-pane layout...</span></div><div class="line"></div><div class="line">    // Call a method in the ArticleFragment to update its content</div><div class="line">    articleFrag.updateArticleView(position);</div><div class="line">&#125; else &#123;</div><div class="line">    // If the frag is not available, we're <span class="keyword">in</span> the one-pane layout and must swap frags...</div><div class="line"></div><div class="line">    // Create fragment and give it an argument <span class="keyword">for</span> the selected article</div><div class="line">    ArticleFragment newFragment = new ArticleFragment();</div><div class="line">    Bundle args = new Bundle();</div><div class="line">    args.putInt(ArticleFragment.ARG_POSITION, position);</div><div class="line">    newFragment.setArguments(args);</div><div class="line">    FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();</div><div class="line"></div><div class="line">    // Replace whatever is <span class="keyword">in</span> the fragment_container view with this fragment,</div><div class="line">    // and add the transaction to the back stack so the user can navigate back</div><div class="line">    transaction.replace(R.id.fragment_container, newFragment);</div><div class="line">    transaction.addToBackStack(null);</div><div class="line"></div><div class="line">    // Commit the transaction</div><div class="line">    transaction.commit();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="片段通信"><a href="#片段通信" class="headerlink" title="片段通信"></a>片段通信</h2><p>通常您希望一个片段与另一个片段进行通信，例如根据用户事件更改内容。所有片段到片段的通信是通过Activity完成的。两个片段不应该直接交流。若要允许片段与其Activity进行通信，您可以在片段类中定义接口并在Activity中实现它。片段捕捉接口实现其onattach()生命周期方法中可以调用接口的方法以进行交流活动。</p><h4 id="1、声明接口"><a href="#1、声明接口" class="headerlink" title="1、声明接口"></a>1、声明接口</h4><p>在HeadlinesFragment声明接口OnHeadlineSelectedListener：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class HeadlinesFragment extends ListFragment &#123;</div><div class="line">    OnHeadlineSelectedListener mCallback;</div><div class="line"></div><div class="line">    // Container Activity must implement this interface</div><div class="line">    public interface OnHeadlineSelectedListener &#123;</div><div class="line">        public void onArticleSelected(int position);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onAttach(Activity activity) &#123;</div><div class="line">        super.onAttach(activity);</div><div class="line"></div><div class="line">        // This makes sure that the container activity has implemented</div><div class="line">        // the callback interface. If not, it throws an exception</div><div class="line">        try &#123;</div><div class="line">            mCallback = (OnHeadlineSelectedListener) activity;</div><div class="line">        &#125; catch (ClassCastException e) &#123;</div><div class="line">            throw new ClassCastException(activity.toString()</div><div class="line">                    + <span class="string">" must implement OnHeadlineSelectedListener"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    ...</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="2、实现接口"><a href="#2、实现接口" class="headerlink" title="2、实现接口"></a>2、实现接口</h4><p>在DynamicFragmentsActivity中实现接口：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">public static class DynamicFragmentsActivity extends Activity</div><div class="line">        implements HeadlinesFragment.OnHeadlineSelectedListener&#123;</div><div class="line">    ...</div><div class="line"></div><div class="line">    public void onArticleSelected(int position) &#123;</div><div class="line">        // The user selected the headline of an article from the HeadlinesFragment</div><div class="line">        // Do something here to display that article</div><div class="line"></div><div class="line">        ArticleFragment articleFrag = (ArticleFragment)</div><div class="line">                getSupportFragmentManager().findFragmentById(R.id.article_fragment);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (articleFrag != null) &#123;</div><div class="line">            // If article frag is available, we<span class="string">'re in two-pane layout...</span></div><div class="line"></div><div class="line">            // Call a method in the ArticleFragment to update its content</div><div class="line">            articleFrag.updateArticleView(position);</div><div class="line">        &#125; else &#123;</div><div class="line">            // Otherwise, we're <span class="keyword">in</span> the one-pane layout and must swap frags...</div><div class="line"></div><div class="line">            // Create fragment and give it an argument <span class="keyword">for</span> the selected article</div><div class="line">            ArticleFragment newFragment = new ArticleFragment();</div><div class="line">            Bundle args = new Bundle();</div><div class="line">            args.putInt(ArticleFragment.ARG_POSITION, position);</div><div class="line">            newFragment.setArguments(args);</div><div class="line"></div><div class="line">            FragmentTransaction transaction = getSupportFragmentManager().beginTransaction();</div><div class="line"></div><div class="line">            // Replace whatever is <span class="keyword">in</span> the fragment_container view with this fragment,</div><div class="line">            // and add the transaction to the back stack so the user can navigate back</div><div class="line">            transaction.replace(R.id.fragment_container, newFragment);</div><div class="line">            transaction.addToBackStack(null);</div><div class="line"></div><div class="line">            // Commit the transaction</div><div class="line">            transaction.commit();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="3、回调"><a href="#3、回调" class="headerlink" title="3、回调"></a>3、回调</h4><p>在HeadlinesFragment回调接口中的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">public class HeadlinesFragment extends ListFragment &#123;</div><div class="line">    OnHeadlineSelectedListener mCallback;</div><div class="line"></div><div class="line">    ...</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void onListItemClick(ListView l, View v, int position, long id) &#123;</div><div class="line">        // Notify the parent activity of selected item</div><div class="line">        mCallback.onArticleSelected(position);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p><a href="https://developer.android.com/training/basics/fragments/index.html" target="_blank" rel="external">参考文档链接</a><br><a href="https://github.com/xianxiaotao/AndroidDemo" target="_blank" rel="external">全部源码链接</a></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID | 源码分析事件分发</title>
      <link href="/2017/03/28/ANDROID/ANDROID%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/"/>
      <url>/2017/03/28/ANDROID/ANDROID%20%E6%BA%90%E7%A0%81%E5%88%86%E6%9E%90%E4%BA%8B%E4%BB%B6%E5%88%86%E5%8F%91/</url>
      
        <content type="html"><![CDATA[<h2 id="源码分析"><a href="#源码分析" class="headerlink" title="源码分析"></a>源码分析</h2><h4 id="1、Activity-——-gt-Window"><a href="#1、Activity-——-gt-Window" class="headerlink" title="1、Activity ——&gt; Window"></a>1、Activity ——&gt; Window</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Called to process touch screen events.  You can override this to</div><div class="line"> * intercept all touch screen events before they are dispatched to the</div><div class="line"> * window.  Be sure to call this implementation <span class="keyword">for</span> touch screen events</div><div class="line"> * that should be handled normally.</div><div class="line"> *</div><div class="line"> * @param ev The touch screen event.</div><div class="line"> * @<span class="built_in">return</span> boolean Return <span class="literal">true</span> <span class="keyword">if</span> this event was consumed.</div><div class="line"> */</div><div class="line">public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">    <span class="keyword">if</span> (ev.getAction() == MotionEvent.ACTION_DOWN) &#123;</div><div class="line">        onUserInteraction();    // Empty method</div><div class="line">    &#125;</div><div class="line">    <span class="keyword">if</span> (getWindow().superDispatchTouchEvent(ev)) &#123;</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> onTouchEvent(ev);</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>首先事件开始交给Activity所附属的Window进行分发，如果返回true，整个事件循环就结束了，返回false意味着没人处理，所有View的onTouchEvent都返回了false，此时就会调用Activity的onTouchEvent。</p><h4 id="2、Window-——-gt-PhoneWindow"><a href="#2、Window-——-gt-PhoneWindow" class="headerlink" title="2、Window ——&gt; PhoneWindow"></a>2、Window ——&gt; PhoneWindow</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Abstract base class <span class="keyword">for</span> a top-level window look and behavior policy.  An</div><div class="line"> * instance of this class should be used as the top-level view added to the</div><div class="line"> * window manager. It provides standard UI policies such as a background, title</div><div class="line"> * area, default key processing, etc.</div><div class="line"> *</div><div class="line"> * &lt;p&gt;The only existing implementation of this abstract class is</div><div class="line"> * android.view.PhoneWindow, <span class="built_in">which</span> you should instantiate when needing a</div><div class="line"> * Window.</div><div class="line"> */</div><div class="line">public abstract class Window &#123;</div><div class="line">    /**</div><div class="line">     * Used by custom windows, such as Dialog, to pass the touch screen event</div><div class="line">     * further down the view hierarchy. Application developers should</div><div class="line">     * not need to implement or call this.</div><div class="line">     */</div><div class="line">    public abstract boolean superDispatchTouchEvent(MotionEvent event);</div><div class="line"></div><div class="line">    // other code ... </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>Window为抽象类，superDispatchTouchEvent为抽象方法，而注释告知我们唯一实现类是PhoneWindow。</p><h4 id="3、PhoneWindow-——-gt-DecorView"><a href="#3、PhoneWindow-——-gt-DecorView" class="headerlink" title="3、PhoneWindow ——&gt; DecorView"></a>3、PhoneWindow ——&gt; DecorView</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class PhoneWindow extends Window implements MenuBuilder.Callback &#123;</div><div class="line"></div><div class="line">    // This is the top-level view of the window, containing the window decor.  </div><div class="line">    private DecorView mDecor;  </div><div class="line"></div><div class="line">    @Override  </div><div class="line">    public boolean superDispatchTouchEvent(MotionEvent event) &#123;  </div><div class="line">        <span class="built_in">return</span> mDecor.superDispatchTouchEvent(event);  </div><div class="line">    &#125; </div><div class="line"></div><div class="line">    // other code ... </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>PhoneWindow将事件直接传递给了DecorView，那这个DecorView是什么呢？DecorView is the top-level view of the window, containing the window decor.</p><h4 id="4、DecorView-——-gt-ViewGroup"><a href="#4、DecorView-——-gt-ViewGroup" class="headerlink" title="4、DecorView ——&gt; ViewGroup"></a>4、DecorView ——&gt; ViewGroup</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">/** @hide */</div><div class="line">public class DecorView extends FrameLayout implements RootViewSurfaceTaker, WindowCallbacks &#123;</div><div class="line">    public boolean superDispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">        <span class="built_in">return</span> super.dispatchTouchEvent(event);     // ViewGroup.</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // other code ... </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>DecorView是一个顶级View，也叫根View，继承FrameLayout，也就是说DecorView是一个ViewGroup。接下来就是将事件分发到ViewGroup的Child。</p><h4 id="5、ViewGroup-——-gt-Children"><a href="#5、ViewGroup-——-gt-Children" class="headerlink" title="5、ViewGroup ——&gt; Children"></a>5、ViewGroup ——&gt; Children</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div></pre></td><td class="code"><pre><div class="line">public abstract class ViewGroup extends View implements ViewParent, ViewManager &#123;</div><div class="line">    @Override</div><div class="line">    public boolean dispatchTouchEvent(MotionEvent ev) &#123;</div><div class="line">        // other code ...</div><div class="line"></div><div class="line">        // Check <span class="keyword">for</span> interception.</div><div class="line">        final boolean intercepted;</div><div class="line">        <span class="keyword">if</span> (actionMasked == MotionEvent.ACTION_DOWN || mFirstTouchTarget != null) &#123;</div><div class="line">            final boolean disallowIntercept = (mGroupFlags &amp; FLAG_DISALLOW_INTERCEPT) != 0;</div><div class="line">            <span class="keyword">if</span> (!disallowIntercept) &#123;</div><div class="line">                intercepted = onInterceptTouchEvent(ev);</div><div class="line">                ev.setAction(action); // restore action <span class="keyword">in</span> <span class="keyword">case</span> it was changed</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                intercepted = <span class="literal">false</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        // other code ...</div><div class="line"></div><div class="line">        final View[] children = mChildren;</div><div class="line">        <span class="keyword">for</span> (int i = childrenCount - 1; i &gt;= 0; i--) &#123;</div><div class="line">            final int childIndex = getAndVerifyPreorderedIndex(childrenCount, i, customOrder);</div><div class="line">            final View child = getAndVerifyPreorderedView(preorderedList, children, childIndex);</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (!canViewReceivePointerEvents(child) || !isTransformedTouchPointInView(x, y, child, null)) &#123;</div><div class="line">                ev.setTargetAccessibilityFocus(<span class="literal">false</span>);</div><div class="line">                <span class="built_in">continue</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            newTouchTarget = getTouchTarget(child);</div><div class="line">            <span class="keyword">if</span> (newTouchTarget != null) &#123;</div><div class="line">                // Child is already receiving touch within its bounds.</div><div class="line">                // Give it the new pointer <span class="keyword">in</span> addition to the ones it is handling.</div><div class="line">                newTouchTarget.pointerIdBits |= idBitsToAssign;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            resetCancelNextUpFlag(child);</div><div class="line">            <span class="keyword">if</span> (dispatchTransformedTouchEvent(ev, <span class="literal">false</span>, child, idBitsToAssign)) &#123;</div><div class="line">                // Child wants to receive touch within its bounds.</div><div class="line">                mLastTouchDownTime = ev.getDownTime();</div><div class="line">                <span class="keyword">if</span> (preorderedList != null) &#123;</div><div class="line">                    // childIndex points into presorted list, find original index</div><div class="line">                    <span class="keyword">for</span> (int j = 0; j &lt; childrenCount; j++) &#123;</div><div class="line">                        <span class="keyword">if</span> (children[childIndex] == mChildren[j]) &#123;</div><div class="line">                            mLastTouchDownIndex = j;</div><div class="line">                            <span class="built_in">break</span>;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line">                &#125; <span class="keyword">else</span> &#123;</div><div class="line">                    mLastTouchDownIndex = childIndex;</div><div class="line">                &#125;</div><div class="line">                mLastTouchDownX = ev.getX();</div><div class="line">                mLastTouchDownY = ev.getY();</div><div class="line">                newTouchTarget = addTouchTarget(child, idBitsToAssign);</div><div class="line">                alreadyDispatchedToNewTouchTarget = <span class="literal">true</span>;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">    // other code ... </div><div class="line">&#125;</div></pre></td></tr></table></figure><p>上述代码是ViewGroup中dispatchTouchEvent方法的主要分发代码：首先调用onInterceptTouchEvent()判断是否要拦截，如果是false则遍历ViewGroup的所有子元素，判断子元素是否能够接受点击事件以及事件坐标是否落在子元素的区域内；如果某个子元素满足这个条件，那么事件就会传递给它来处理；dispatchTransformedTouchEvent方法中有如下一段代码，即child不是null，就会调用子类的dispatchTouchEvent方法，就交给子元素处理，从而完成一轮事件分发。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (child == null) &#123;</div><div class="line">    handled = super.dispatchTouchEvent(event);</div><div class="line">&#125; <span class="keyword">else</span> &#123;</div><div class="line">    handled = child.dispatchTouchEvent(event);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ViewGroup分发事件时，自带记忆功能，即如果某个子元素消耗了ACTION_DOWN事件，那么同一事件序列中的其他事件都会交给它来处理，否则将事件交给它的父类来处理（同样带记忆）。</p><h4 id="6、View"><a href="#6、View" class="headerlink" title="6、View"></a>6、View</h4><p>如果ViewGroup分发的子元素还是ViewGroup，则重复5，直到分发到的子元素是一个View。因为它没有子元素可以向下传递事件，所以只能自己处理。以下是View中的dispatchTouchEvent方法中核心代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Pass the touch screen motion event down to the target view, or this</div><div class="line"> * view <span class="keyword">if</span> it is the target.</div><div class="line"> *</div><div class="line"> * @param event The motion event to be dispatched.</div><div class="line"> * @<span class="built_in">return</span> True <span class="keyword">if</span> the event was handled by the view, <span class="literal">false</span> otherwise.</div><div class="line"> */</div><div class="line">public boolean dispatchTouchEvent(MotionEvent event) &#123;</div><div class="line">    // other code ...</div><div class="line"></div><div class="line">    boolean result = <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (onFilterTouchEventForSecurity(event)) &#123;</div><div class="line">        <span class="keyword">if</span> ((mViewFlags &amp; ENABLED_MASK) == ENABLED &amp;&amp; handleScrollBarDragging(event)) &#123;</div><div class="line">            result = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">        //noinspection SimplifiableIfStatement</div><div class="line">        ListenerInfo li = mListenerInfo;</div><div class="line">        <span class="keyword">if</span> (li != null &amp;&amp; li.mOnTouchListener != null</div><div class="line">                &amp;&amp; (mViewFlags &amp; ENABLED_MASK) == ENABLED</div><div class="line">                &amp;&amp; li.mOnTouchListener.onTouch(this, event)) &#123;</div><div class="line">            result = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (!result &amp;&amp; onTouchEvent(event)) &#123;</div><div class="line">            result = <span class="literal">true</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="built_in">return</span> result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先判断有没有设置OnTouchListener，如果没有设置或其中的onTouch方法返回false，就会调用onTouchEvent()方法了。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Implement this method to handle touch screen motion events.</div><div class="line"> * &lt;p&gt;</div><div class="line"> * If this method is used to detect click actions, it is recommended that</div><div class="line"> * the actions be performed by implementing and calling</div><div class="line"> * &#123;@link <span class="comment">#performClick()&#125;. This will ensure consistent system behavior,</span></div><div class="line"> * including:</div><div class="line"> * &lt;ul&gt;</div><div class="line"> * &lt;li&gt;obeying click sound preferences</div><div class="line"> * &lt;li&gt;dispatching OnClickListener calls</div><div class="line"> * &lt;li&gt;handling &#123;@link AccessibilityNodeInfo<span class="comment">#ACTION_CLICK ACTION_CLICK&#125; when</span></div><div class="line"> * accessibility features are enabled</div><div class="line"> * &lt;/ul&gt;</div><div class="line"> *</div><div class="line"> * @param event The motion event.</div><div class="line"> * @<span class="built_in">return</span> True <span class="keyword">if</span> the event was handled, <span class="literal">false</span> otherwise.</div><div class="line"> */</div><div class="line">public boolean onTouchEvent(MotionEvent event) &#123;</div><div class="line">    final <span class="built_in">float</span> x = event.getX();</div><div class="line">    final <span class="built_in">float</span> y = event.getY();</div><div class="line">    final int viewFlags = mViewFlags;</div><div class="line">    final int action = event.getAction();</div><div class="line"></div><div class="line">    <span class="keyword">if</span> ((viewFlags &amp; ENABLED_MASK) == DISABLED) &#123;</div><div class="line">        <span class="keyword">if</span> (action == MotionEvent.ACTION_UP &amp;&amp; (mPrivateFlags &amp; PFLAG_PRESSED) != 0) &#123;</div><div class="line">            <span class="built_in">set</span>Pressed(<span class="literal">false</span>);</div><div class="line">        &#125;</div><div class="line">        // A disabled view that is clickable still consumes the touch</div><div class="line">        // events, it just doesn<span class="string">'t respond to them.</span></div><div class="line">        return (((viewFlags &amp; CLICKABLE) == CLICKABLE</div><div class="line">                || (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE)</div><div class="line">                || (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE);</div><div class="line">    &#125;</div><div class="line">    if (mTouchDelegate != null) &#123;</div><div class="line">        if (mTouchDelegate.onTouchEvent(event)) &#123;</div><div class="line">            return true;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    if (((viewFlags &amp; CLICKABLE) == CLICKABLE ||</div><div class="line">            (viewFlags &amp; LONG_CLICKABLE) == LONG_CLICKABLE) ||</div><div class="line">            (viewFlags &amp; CONTEXT_CLICKABLE) == CONTEXT_CLICKABLE) &#123;</div><div class="line">        switch (action) &#123;</div><div class="line">            case MotionEvent.ACTION_UP:</div><div class="line">                boolean prepressed = (mPrivateFlags &amp; PFLAG_PREPRESSED) != 0;</div><div class="line">                if ((mPrivateFlags &amp; PFLAG_PRESSED) != 0 || prepressed) &#123;</div><div class="line">                    // take focus if we don't have it already and we should <span class="keyword">in</span></div><div class="line">                    // touch mode.</div><div class="line">                    boolean focusTaken = <span class="literal">false</span>;</div><div class="line">                    <span class="keyword">if</span> (isFocusable() &amp;&amp; isFocusableInTouchMode() &amp;&amp; !isFocused()) &#123;</div><div class="line">                        focusTaken = requestFocus();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                        // The button is being released before we actually</div><div class="line">                        // showed it as pressed.  Make it show the pressed</div><div class="line">                        // state now (before scheduling the click) to ensure</div><div class="line">                        // the user sees it.</div><div class="line">                        <span class="built_in">set</span>Pressed(<span class="literal">true</span>, x, y);</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (!mHasPerformedLongPress &amp;&amp; !mIgnoreNextUpEvent) &#123;</div><div class="line">                        // This is a tap, so remove the longpress check</div><div class="line">                        removeLongPressCallback();</div><div class="line"></div><div class="line">                        // Only perform take click actions <span class="keyword">if</span> we were <span class="keyword">in</span> the pressed state</div><div class="line">                        <span class="keyword">if</span> (!focusTaken) &#123;</div><div class="line">                            // Use a Runnable and post this rather than calling</div><div class="line">                            // performClick directly. This lets other visual state</div><div class="line">                            // of the view update before click actions start.</div><div class="line">                            <span class="keyword">if</span> (mPerformClick == null) &#123;</div><div class="line">                                mPerformClick = new PerformClick();</div><div class="line">                            &#125;</div><div class="line">                            <span class="keyword">if</span> (!post(mPerformClick)) &#123;</div><div class="line">                                performClick();</div><div class="line">                            &#125;</div><div class="line">                        &#125;</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (mUnsetPressedState == null) &#123;</div><div class="line">                        mUnsetPressedState = new UnsetPressedState();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    <span class="keyword">if</span> (prepressed) &#123;</div><div class="line">                        postDelayed(mUnsetPressedState,</div><div class="line">                                ViewConfiguration.getPressedStateDuration());</div><div class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (!post(mUnsetPressedState)) &#123;</div><div class="line">                        // If the post failed, unpress right now</div><div class="line">                        mUnsetPressedState.run();</div><div class="line">                    &#125;</div><div class="line"></div><div class="line">                    removeTapCallback();</div><div class="line">                &#125;</div><div class="line">                mIgnoreNextUpEvent = <span class="literal">false</span>;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_DOWN:</div><div class="line">                // ...</div><div class="line">                <span class="built_in">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_CANCEL:</div><div class="line">                // ...</div><div class="line">                <span class="built_in">break</span>;</div><div class="line"></div><div class="line">            <span class="keyword">case</span> MotionEvent.ACTION_MOVE:</div><div class="line">                // ...</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>首先不可用状态下的View照样会消耗点击事件并返回；接着，如果View设置了代理，那么还会执行TouchDelegate的onTouchEvent方法（机制与OnTouchListener类似）；然后具体处理点击事件：只要View的CLICKABLE、LONG_CLICKABLE和CONTEXT_CLICKABLE有一个为true，那么它就会消耗事件，即onTouchEvent方法返回true，不管它是不是DISABLE状态如何；然后当ACTION_UP事件发生时，会调用performClick方法，如果View设置了OnClickListener，那么performClick方法内部会调用它的onClick方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Call this view<span class="string">'s OnClickListener, if it is defined.  Performs all normal</span></div><div class="line"> * actions associated with clicking: reporting accessibility event, playing</div><div class="line"> * a sound, etc.</div><div class="line"> *</div><div class="line"> * @return True there was an assigned OnClickListener that was called, false</div><div class="line"> *         otherwise is returned.</div><div class="line"> */</div><div class="line">public boolean performClick() &#123;</div><div class="line">    final boolean result;</div><div class="line">    final ListenerInfo li = mListenerInfo;</div><div class="line">    if (li != null &amp;&amp; li.mOnClickListener != null) &#123;</div><div class="line">        playSoundEffect(SoundEffectConstants.CLICK);</div><div class="line">        li.mOnClickListener.onClick(this);          // 调用OnClickListener.onClick</div><div class="line">        result = true;</div><div class="line">    &#125; else &#123;</div><div class="line">        result = false;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    sendAccessibilityEvent(AccessibilityEvent.TYPE_VIEW_CLICKED);</div><div class="line">    return result;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="传递规则"><a href="#传递规则" class="headerlink" title="传递规则"></a>传递规则</h2><ul><li>同一个事件序列是指从手指触摸屏幕那一刻开始，中间包含数量不定的 move 事件到手指离开屏幕那一刻（down-&gt;move…move-&gt;up)。</li><li>正常情况下一个事件序列只能被一个 View 拦截且消耗，每个 View 一旦决定拦截，同一个事件序列所有事件都会直接交给它处理，并且它的 onInterceptTouchEvent 不会再被调用。</li><li>某个View一旦开始处理事件，如果它不消耗ACTION_DOWN（onTouchEvent返回了false），那么同一事件序列中其他事件都不会再交给它来处理，事件将重新交给他的父元素处理，即父元素的 onTouchEvent 会被调用。</li><li>如果某个View不消耗除ACTION_DOWN以外的其他事件，那么这个点击事件会消失，此时父元素的onTouchEvent并不会被调用，并且当前View可以收到后续事件，最终这些消失的点击事件会传递给Activity 处理。</li><li>View没有onInterceptTouchEvent方法，一旦有事件传递给它，那么它的onTouchEvent方法就会被调用。</li><li>View的onTouchEvent 方法默认消耗事件（返回true），除非他是不可点击的（clickable、longClickable和contextClickable同时为false）。View的longClickable 属性默认都为false，clickable属性分情况，Button默认为true，TextView默认为false。</li><li>onClick发生的前提是View可点击，并且它收到了down和up事件。</li><li>事件传递过程是由外而内，事件总是先传递给父元素，然后在由父元素分发给子View，通过requestDisallowInterceptTouchEvent方法可以在子元素干预父元素的事件分发过程，但ACTION_DOWN事件除外。</li></ul>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID | 工具类</title>
      <link href="/2017/03/27/ANDROID/ANDROID%20Activity/"/>
      <url>/2017/03/27/ANDROID/ANDROID%20Activity/</url>
      
        <content type="html"><![CDATA[<h2 id="一、生命周期"><a href="#一、生命周期" class="headerlink" title="一、生命周期"></a>一、生命周期</h2><p><img src="http://ww1.sinaimg.cn/large/adc90466gy1fcptk0wnt2j20e90ifmz4" alt=""><br>整个生命周期来说，成对出现的。onCreate和onDestroy是成对的，代表着创建与销毁；onStart和onStop表示Activity对于程序是否可见（后台）；onResume和onPause表示Activity对于用户是否可见（前台）。</p><h4 id="正常生命周期"><a href="#正常生命周期" class="headerlink" title="正常生命周期"></a>正常生命周期</h4><p>1、启动ActivityA：onCreate() -&gt; onStart() -&gt; onResume()<br>2、按了back键返回：onPause() -&gt; onStop() -&gt; onDestroy()<br>3、用户按了Home键：onPause() -&gt; onStop()<br>4、启动ActivityB：A.onPause() -&gt; B.onCreate() -&gt; B.onStart() -&gt; B.onResume() -&gt; A.onStop()<br>5、ActivityB返回：B.onPause() -&gt; A.onRestart() -&gt; A.onStart() -&gt; A.onResume() -&gt; B.onStop()<br>-&gt; B.onDestroy()</p><h4 id="切换横竖屏幕"><a href="#切换横竖屏幕" class="headerlink" title="切换横竖屏幕"></a>切换横竖屏幕</h4><p>targetSdkVersion 25，没有设置android:configChanges：<br>1、竖屏切横屏：onConfigurationChanged() -&gt; onPause() -&gt; onSaveInstanceState() -&gt; onStop() -&gt; onDestroy() -&gt; onCreate() -&gt; onStart() -&gt; onRestoreInstanceState() -&gt; onResume()<br>2、横屏切竖屏：onConfigurationChanged() -&gt; onPause() -&gt; onSaveInstanceState() -&gt; onStop() -&gt; onDestroy() -&gt; onCreate() -&gt; onStart() -&gt; onRestoreInstanceState() -&gt; onResume()</p><p>本人使用的是模拟器（minSdkVersion 16 / targetSdkVersion 25）测试，无论是否设置Activity的android:configChanges，或者属性值设为orientation或orientation|keyboardHidden，无论是竖屏切横屏还是横屏切竖屏，流程都如上所述，当android:configChanges=”orientation|keyboardHidden|screenSize”时，只会调用onConfigurationChanged()。经过查资料，android:targetSdkVersion这个属性会影响横竖屏切换的生命周期。<a href="http://www.cnblogs.com/xiaoQLu/p/3324503.html" target="_blank" rel="external">详见xiaoQLud的博客</a></p><h4 id="异常生命周期"><a href="#异常生命周期" class="headerlink" title="异常生命周期"></a>异常生命周期</h4><p>1、系统配置发生改变后，默认情况下Activity会被销毁然后重新创建，生命周期参考横竖屏切换。常用的系统配置只有local、orientation和keyboardHidden。<br>2、资源内存不足导致低优先级的Activity被杀死，生命周期参考横竖屏切换。<br>3、运行时发生了异常，程序直接崩溃。例如：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span> (int i = 10; i &gt;= 0; i++)</div><div class="line">    System.out.println(10 / i)</div></pre></td></tr></table></figure></p><h2 id="二、数据存储"><a href="#二、数据存储" class="headerlink" title="二、数据存储"></a>二、数据存储</h2><p>当Activity在异常情况下被终止，在onStop之前，系统会调用onSaveInstanceState方法，来保存当前Activity状态。当Activity被重新创建后，系统会调用onRestoreInstanceState，并且把Activity销毁时onSaveInstanceState方法所保存的Bundle对象作为参数同时传递给onRestoreInstanceState和onCreate方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">    super.onCreate(savedInstanceState);</div><div class="line">    <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line">    <span class="keyword">if</span> (savedInstanceState != null) &#123;</div><div class="line">        String name = savedInstanceState.getString(<span class="string">"name"</span>);</div><div class="line">        Log.i(tag, <span class="string">"onCreate() name : "</span> + name);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onSaveInstanceState(Bundle outState) &#123;</div><div class="line">    super.onSaveInstanceState(outState);</div><div class="line">    Log.i(tag, <span class="string">"onSaveInstanceState()"</span>);</div><div class="line">    outState.putString(<span class="string">"name"</span>, <span class="string">"xianxiaotao"</span>);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">protected void onRestoreInstanceState(Bundle savedInstanceState) &#123;</div><div class="line">    super.onRestoreInstanceState(savedInstanceState);</div><div class="line">    String name = savedInstanceState.getString(<span class="string">"name"</span>);</div><div class="line">    Log.i(tag, <span class="string">"onRestoreInstanceState() name : "</span> + name);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>android提供的一些控件也实现了onSaveInstanceState和onRestoreInstanceState方法，如TextView。</p></blockquote><h2 id="三、启动模式"><a href="#三、启动模式" class="headerlink" title="三、启动模式"></a>三、启动模式</h2><p>ActivityManagerService（AMS）内部维护着一个ActivityStack栈，系统会将Activity实例一一放入栈内（先进后出），默认情况下创建一个实例压入栈内。如果多次创建同一个Activity，栈内将压入多个实例。为此，Android提供了启动模式来修改系统的默认行为。目前有四种启动模式：standard、singleTop、singleTask和singleInstance：</p><h4 id="standard"><a href="#standard" class="headerlink" title="standard"></a>standard</h4><p>标准模式，也是系统默认模式。每次启动一个Activity都会重新创建一个新的实例，不管这个实例是否已经存在。谁启动了这个Activity，那么这个Activity就运行在启动它的那个Activity所在的栈中。ABCBB</p><h4 id="singleTop"><a href="#singleTop" class="headerlink" title="singleTop"></a>singleTop</h4><p>栈顶复用模式。如果新Activity已经位于任务栈的栈顶，那么只调用它的onNewIntent方法实现复用，而不会创建新的实例。如果新的Activity的实例已存在但不是位于栈顶，仍然重新创建。假设目前栈内情况为ABCD（ABCD为四个Activity，A位于栈底），此时再次启动，如果D的启动模式为singleTop，那么栈内仍然是ABCD；如果D的启动模式为standard，D将被重新创建，栈内情况变为ABCDD。</p><h4 id="singleTask"><a href="#singleTask" class="headerlink" title="singleTask"></a>singleTask</h4><p>栈内复用模式。在同一个栈内，它是单实例模式。在这种模式下，启动一个Activity A，系统首先会寻找是否存在A想要的任务栈，如果不存在，就重新创建一个任务栈，然后创建A的实例并压入栈内；如果存在所需的任务栈，这时要看A是否在栈中有实例存在，如果有，那么系统就会把A调到栈顶并调用它的onNewIntent方法，不存在就创建并压入栈中。<br>1、目前任务栈栈S1(ABC)，此时Activity D以singleTask模式请求启动，其所需的任务栈为S2，由于S2和D的实例均不存在，所以系统先创建任务栈S2，然后再创建D的实例并将其放入栈S2中。<br>2、另外一种情况，假设D所需的任务栈为S1，上述S1已存在，所以系统会直接创建D的实例并压入栈S1内。<br>3、如果D所需的任务栈为S1，其中为ADBC，此时系统将D上面的Activity出栈，把D切换到栈顶并调用onNewIntent方法，最终S1栈内为AD。</p><h4 id="singleInstance："><a href="#singleInstance：" class="headerlink" title="singleInstance："></a>singleInstance：</h4><p>该模式具备singleTask模式的所有特性外，与它的区别就是，这种模式下的Activity会单独占用一个Task栈，具有全局唯一性，即整个系统中就这么一个实例，由于栈内复用的特性，后续的请求均不会创建新的Activity实例，除非这个特殊的任务栈被销毁了。以singleInstance模式启动的Activity在整个系统中是单例的，如果在启动这样的Activiyt时，已经存在了一个实例，那么会把它所在的任务调度到前台，重用这个实例。<br>以下代码是用于测试启动模式的BaseActivity，具体的Activity继承BaseActivity：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">package com.king.bester.demo;</div><div class="line"></div><div class="line">import android.content.Intent;</div><div class="line">import android.content.pm.ActivityInfo;</div><div class="line">import android.content.pm.PackageManager;</div><div class="line">import android.support.v7.app.AppCompatActivity;</div><div class="line">import android.os.Bundle;</div><div class="line">import android.util.Log;</div><div class="line"></div><div class="line">public class BaseActivity extends AppCompatActivity &#123;</div><div class="line">    private static final String TAG = <span class="string">"Xian Xiaotao"</span>;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line"></div><div class="line">        // 区别类名，区别同类名是否同实例，区别任务栈</div><div class="line">        Log.i(TAG, <span class="string">"onCreate："</span> + getClass().getSimpleName() + <span class="string">" hasCode:"</span> + this.hashCode() + <span class="string">" TaskId: "</span> + getTaskId());</div><div class="line">        // 任务栈名称，默认为包名相关</div><div class="line">        dumpTaskAffinity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onNewIntent(Intent intent) &#123;</div><div class="line">        super.onNewIntent(intent);</div><div class="line"></div><div class="line">        Log.i(TAG, <span class="string">"onNewIntent："</span> + getClass().getSimpleName() + <span class="string">" hasCode:"</span> + this.hashCode() + <span class="string">" TaskId: "</span> + getTaskId());</div><div class="line">        dumpTaskAffinity();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    protected void <span class="function"><span class="title">dumpTaskAffinity</span></span>()&#123;</div><div class="line">        try &#123;</div><div class="line">            ActivityInfo info = this.getPackageManager().getActivityInfo(getComponentName(), PackageManager.GET_META_DATA);</div><div class="line">            Log.i(TAG, <span class="string">"taskAffinity:"</span> + info.taskAffinity);</div><div class="line">        &#125; catch (PackageManager.NameNotFoundException e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>配置形式：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">&lt;activity </div><div class="line">    android:name=<span class="string">".ActivitySingleTop"</span> </div><div class="line">    android:launchMode=<span class="string">"singleTop"</span> </div><div class="line">    android:taskAffinity=<span class="string">"com.king.bester.demo"</span>/&gt;</div></pre></td></tr></table></figure></p><p><a href="http://blog.csdn.net/mynameishuangshuai/article/details/51491074" target="_blank" rel="external">启动模式参考博客</a></p><h2 id="四、意图调用"><a href="#四、意图调用" class="headerlink" title="四、意图调用"></a>四、意图调用</h2><p>启动Activity分为两种，显示调用和隐式调用。显示调用通过指定Intent组件名称来实现的，它一般用在知道目标组件名称的前提下，一般是在相同的应用程序内部实现的。隐式调用通过Intent Filter来实现的，它一般用在没有明确指出目标组件名称的前提下，一般是用于在不同应用程序之间。</p><h4 id="显示调用"><a href="#显示调用" class="headerlink" title="显示调用"></a>显示调用</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Intent intent=new Intent(MainActivity.this,SettingActivity.class);</div><div class="line">intent.putExtra(EXTRA,contentEditText.getText().toString());</div><div class="line">startActivity(intent);</div></pre></td></tr></table></figure><p>而Manifest文件描述为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">&lt;activity android:name=<span class="string">".MainActivity"</span> &gt; </div><div class="line">    &lt;intent-filter&gt; </div><div class="line">        &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt; </div><div class="line">        &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt; </div><div class="line">    &lt;/intent-filter&gt; </div><div class="line">&lt;/activity&gt; </div><div class="line">&lt;activity android:name=<span class="string">".SettingActivity"</span> /&gt;</div></pre></td></tr></table></figure></p><h4 id="隐式调用"><a href="#隐式调用" class="headerlink" title="隐式调用"></a>隐式调用</h4><p>隐式不明确指定启动哪个Activity，而是在Intent Filter中设置Action、Data、Category，让系统来筛选出合适的Activity。清单文件配置如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;manifest xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    package=<span class="string">"com.king.bester.myapplication"</span>&gt;</div><div class="line"></div><div class="line">    &lt;application</div><div class="line">        android:allowBackup=<span class="string">"true"</span></div><div class="line">        android:icon=<span class="string">"@mipmap/ic_launcher"</span></div><div class="line">        android:supportsRtl=<span class="string">"true"</span></div><div class="line">        android:theme=<span class="string">"@style/AppTheme"</span>&gt;</div><div class="line">        &lt;activity android:name=<span class="string">".MainActivity"</span> &gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"android.intent.action.MAIN"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.LAUNCHER"</span> /&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line"></div><div class="line">        &lt;activity</div><div class="line">            android:name=<span class="string">".TargetActivity"</span></div><div class="line">            android:launchMode=<span class="string">"singleTask"</span></div><div class="line">            android:taskAffinity=<span class="string">"com.king.bester.myapplication"</span> &gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"android.intent.action.SEND"</span>/&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</div><div class="line">                &lt;data android:mimeType=<span class="string">"text/plain"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">            &lt;intent-filter&gt;</div><div class="line">                &lt;action android:name=<span class="string">"com.king.bester.demo"</span> /&gt;</div><div class="line">                &lt;action android:name=<span class="string">"com.king.bester.DEMO"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"com.king.bester.a"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"com.king.bester.b"</span> /&gt;</div><div class="line">                &lt;category android:name=<span class="string">"android.intent.category.DEFAULT"</span> /&gt;</div><div class="line">                &lt;data android:mimeType=<span class="string">"text/plain"</span>/&gt;</div><div class="line">            &lt;/intent-filter&gt;</div><div class="line">        &lt;/activity&gt;</div><div class="line">    &lt;/application&gt;</div><div class="line"></div><div class="line">&lt;/manifest&gt;</div></pre></td></tr></table></figure></p><p>代码调用：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">// 匹配第一组intent-filter</div><div class="line">public void startA(View view) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.setAction(<span class="string">"android.intent.action.SEND"</span>);</div><div class="line">    intent.setType(<span class="string">"text/plain"</span>);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 匹配第二组intent-filter</div><div class="line">public void startB(View view) &#123;</div><div class="line">    Intent intent = new Intent();</div><div class="line">    intent.setAction(<span class="string">"com.king.bester.demo"</span>);</div><div class="line">    intent.addCategory(<span class="string">"com.king.bester.a"</span>);</div><div class="line">    intent.setType(<span class="string">"text/plain"</span>);</div><div class="line">    startActivity(intent);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>1、startA()中没有设置category，是因为系统在调用startActivity或者startActivityForResult的时候会默认为Intent加上“android.intent.category.DEFAULT”这个category。所以，为了我们的Activity能接收隐式调用，必须在intent-filter中指定这个category。<br>2、action区分大小写<br>3、一个Activity可以有多个intent-filter，一个intent只要能匹配任何一组intent-filter即可启动对应的Activity。</p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
            <tag> util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | java8之Lambda</title>
      <link href="/2017/03/26/JAVA/JAVA%208%20Lambda/"/>
      <url>/2017/03/26/JAVA/JAVA%208%20Lambda/</url>
      
        <content type="html"><![CDATA[<h2 id="一、基本语法"><a href="#一、基本语法" class="headerlink" title="一、基本语法"></a>一、基本语法</h2><p>Java是一种面向对象语言，所以必须构造一个对象，这个对象的类需要有一个方法能包含所需的代码。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">class LengthComparator implements Comparator&lt;String&gt; &#123;</div><div class="line">    public int compare(String first, String second) &#123;</div><div class="line">        <span class="built_in">return</span> first.length - second.first;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// uses</div><div class="line">Arrays.sort(strings, new LengthComparator());</div></pre></td></tr></table></figure></p><p>如果使用Lambda表达式，则使用代码更改为：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(strings, (String first, String second) -&gt; &#123; <span class="built_in">return</span> first.length - second.first; &#125;));</div></pre></td></tr></table></figure></p><h4 id="简化"><a href="#简化" class="headerlink" title="简化"></a>简化</h4><p>在这里，编译器可以推导出first和second必然是字符串，参数类型可以省略不写；方法体里只有一行，亦可简化。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(strings, (first, second) -&gt; first.length() - second.length());</div></pre></td></tr></table></figure></p><h4 id="无参"><a href="#无参" class="headerlink" title="无参"></a>无参</h4><p>即使lambda表达式没有参数，仍然要提供括号，就像无参数方法一样：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">() -&gt; &#123; <span class="keyword">for</span> (int i = 100; i &gt;= 0; i--) System.out.println(i); &#125;</div></pre></td></tr></table></figure></p><h4 id="一参"><a href="#一参" class="headerlink" title="一参"></a>一参</h4><p>如果方法只有一个参数，而且这个参数的类型可以推导得出，那么甚至还可以省略小括号：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">ActionListener listener = event -&gt; System.out.println(<span class="string">"The time is "</span> + new Date());</div></pre></td></tr></table></figure></p><h4 id="注意"><a href="#注意" class="headerlink" title="注意"></a>注意</h4><p>1）无需指定lambda表达式的返回类型，因为返回类型总是会由上下文推导得出。<br>2）如果一个lambda表达式只在某些分支返回一个值，而在另外一些分支不返回值，这是不合法的。例如，(int x) -&gt; { if (x &gt;= 0) return 1; }就不合法。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div></pre></td><td class="code"><pre><div class="line">package com.xian.lambda;</div><div class="line"></div><div class="line">import java.util.Arrays;</div><div class="line">import java.util.Date;</div><div class="line"></div><div class="line">import javax.swing.JOptionPane;</div><div class="line">import javax.swing.Timer;</div><div class="line"></div><div class="line">public class LambdaTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        String[] masters = &#123;<span class="string">"liyao"</span>, <span class="string">"zhaoyu"</span>, <span class="string">"hufeng"</span>, <span class="string">"xianxiaotao"</span>, <span class="string">"cuihongquan"</span>&#125;;</div><div class="line">        System.out.println(Arrays.toString(masters));</div><div class="line">        System.out.println(<span class="string">"Sorted in dictionary order:"</span>);</div><div class="line">        Arrays.sort(masters);</div><div class="line">        System.out.println(Arrays.toString(masters));</div><div class="line">        System.out.println(<span class="string">"Sorted by length:"</span>);</div><div class="line">        Arrays.sort(masters, (first, second) -&gt; first.length() - second.length());</div><div class="line">        System.out.println(Arrays.toString(masters));</div><div class="line">        </div><div class="line">        Timer t = new Timer(10000, event -&gt; System.out.println(<span class="string">"The time is"</span> + new Date()));</div><div class="line">        t.start();</div><div class="line">        JOptionPane.showMessageDialog(null, <span class="string">"Quit program?"</span>);</div><div class="line">        System.exit(0);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二、函数式接口"><a href="#二、函数式接口" class="headerlink" title="二、函数式接口"></a>二、函数式接口</h2><p>对于只有一个抽象方法的接口，需要这种接口的对象时，就可以提供一个lambda表达式。这个接口称为函数式接口。如上例中的Comparator接口，或者java.util.function包中的接口Predicate：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">public interface Predicate&lt;T&gt; &#123;</div><div class="line">    boolean <span class="built_in">test</span>(T t);</div><div class="line">    // Additional default and static methods</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>ArrayList类有一个removeIf方法它的参数就是一个Predicate。这个接口专门用来传递lambda表达式。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">list.removeIf(e -&gt; e == null);</div></pre></td></tr></table></figure></p><h2 id="三、方法引用"><a href="#三、方法引用" class="headerlink" title="三、方法引用"></a>三、方法引用</h2><p>表达式System.out::println是一个方法引用，等价于lambda表达式x -&gt; System.out.println(x)。又如下列两行代码等同：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Timer t = new Timer(1000, event -&gt; System.out.println(event));</div><div class="line">Timer t = new Timer(1000, System.out::println);</div></pre></td></tr></table></figure></p><p>操作符 “::” 用来分割方法名与对象或类名。主要分为三种情况：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">objcet::instanceMethod    如：System.out::println             x -&gt; System.out.println(x)</div><div class="line">Class::staticMethod       如：Math::pow                       (x, y) -&gt; Math.pow(x, y)</div><div class="line">Class::instanceMethod     如：String::compareToIgnoreCase     (x, y) -&gt; x.compareToIgnoreCase(y)</div></pre></td></tr></table></figure></p><p>对于第三种情况，第一个参数会成为方法的目标。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Arrays.sort(masters, String::compareToIgnoreCase);</div><div class="line">Arrays.sort(masters, (first, second) -&gt; first.compareToIgnoreCase(second));</div></pre></td></tr></table></figure></p><blockquote><p>注意：对于重载方法，编译器会尝试从上下文中找出你指的那一个方法；方法引用不能独立存在，总是会转换为函数式接口的实例；方法引用中可以使用this和super参数，例如this::equals等同于x -&gt; this.equals(x)；使用super作为目标，会调用方法的超类版本，格式为super::instanceMethod；this是指创建lambda表达式的方法所属的对象，super同理。</p></blockquote><h2 id="四、构造器引用"><a href="#四、构造器引用" class="headerlink" title="四、构造器引用"></a>四、构造器引用</h2><p>构造器引用与方法引用类似，只不过方法名为new。例如，Person::new是Person构造器的一个引用。至于哪一个构造器，这取决于上下文。假如你有一个字符串列表，并把它转换为Person对象数组，其如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">ArrayList&lt;String&gt; names = ...;</div><div class="line">Stream&lt;Person&gt; stream = names.stream().map(Person::new);</div><div class="line">List&lt;Person&gt; people = stream.collect(Collectors.toList());</div></pre></td></tr></table></figure></p><p>根据上下文，编译器会选择一个String参数的构造器。可以用数组类型建立构造器引用。例如，int[]::new，这等价于lambda表达式x -&gt; new int[x]。</p><h2 id="五、变量"><a href="#五、变量" class="headerlink" title="五、变量"></a>五、变量</h2><p>lambda表达式中捕获的变量必须实际上是最终变量，即这个变量初始化之后就不会再为它赋新值。如下例中的text总是指示同一个String对象，所以此处合法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class LambdaTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        repeatMessage(<span class="string">"hello"</span>, 1000);</div><div class="line">        JOptionPane.showMessageDialog(null, <span class="string">"Quit program?"</span>);</div><div class="line">        System.exit(0);        </div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void repeatMessage(String text, int delay) &#123;</div><div class="line">        ActionListener listener = event -&gt; System.out.println(text);</div><div class="line">        new Timer(delay, listener).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>当lambda表达式捕获外围作用域中变量的，无论是外部改变还是内部改变都不合法的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 外部改变：</div><div class="line">public static void repeat(String text, int count) &#123;</div><div class="line">    <span class="keyword">for</span> (int i = 1; i &lt;= count; i++) &#123;</div><div class="line">        ActionListener listener = event -&gt; &#123;</div><div class="line">            System.out.println(i + <span class="string">": "</span> + text);    // Error: Cannot refer to changing i</div><div class="line">        &#125;;</div><div class="line">        new Timer(1000, listener).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">// 内部改变：</div><div class="line">public static void countDown(int start, int delay) &#123;</div><div class="line">    ActionListener listener = event -&gt; &#123;</div><div class="line">            start--;                                // Error: Cannot mutate captured variable</div><div class="line">            System.out.println(start); </div><div class="line">        &#125;;</div><div class="line">        new Timer(delay, listener).start();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | java8之Interface</title>
      <link href="/2017/03/26/JAVA/JAVA%208%20Interface/"/>
      <url>/2017/03/26/JAVA/JAVA%208%20Interface/</url>
      
        <content type="html"><![CDATA[<h2 id="静态方法"><a href="#静态方法" class="headerlink" title="静态方法"></a>静态方法</h2><p>目前为止，通常的做法都是将静态方法放在伴随类中。在标准库中，你会看到成对出现的接口和使用工具类，如Collection/Collections或Path/Paths。在Java SE 8中，允许在接口中增加静态方法，节省一个伴随类，只是这有违于将接口作为抽象规范的初衷。示例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">interface MyComparable&lt;T&gt; &#123;</div><div class="line">    public static &lt;T&gt; int compare(java.lang.Comparable&lt;T&gt; t1, T t2) &#123; <span class="built_in">return</span> t1.compareTo(t2); &#125;</div><div class="line">    int compareTo(T t);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="默认方法"><a href="#默认方法" class="headerlink" title="默认方法"></a>默认方法</h2><p>可以为接口方法提供一个默认实现。必须用default修饰符标记这样一个方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public interface Collection &#123;</div><div class="line">    int size();// An abstract method</div><div class="line">    default boolean <span class="function"><span class="title">isEmpty</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> size() == 0;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="解决默认方法冲突"><a href="#解决默认方法冲突" class="headerlink" title="解决默认方法冲突"></a>解决默认方法冲突</h2><p>如果先在一个接口中将一个方法定义为默认方法，然后又在超类或另一个接口中定义了同样的方法，会发生什么情况？Java的相应规则如下：<br>1）超类优先。如果超类提供了一个具体方法，同名而且有相同参数类型的默认方法会被忽略。确保与Java SE 7兼容。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">interface Named &#123;</div><div class="line">    default String <span class="function"><span class="title">getName</span></span>() &#123; <span class="built_in">return</span> getClass().getName() + <span class="string">"_"</span> + <span class="built_in">hash</span>Code(); &#125;</div><div class="line">&#125;</div><div class="line">class Person &#123;</div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123; <span class="built_in">return</span> getClass().getName(); &#125;</div><div class="line">&#125;</div><div class="line">class Student extends Person implements Named &#123; // super.getName() &#125;</div></pre></td></tr></table></figure></p><p>2）接口冲突。如果两个接口都提供了同名同参的默认方法，实现类必须覆盖这个方法类解决冲突。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">interface Named &#123;</div><div class="line">    default String <span class="function"><span class="title">getName</span></span>() &#123; <span class="built_in">return</span> <span class="string">"Named:"</span> + getClass().getName() + <span class="string">"_"</span> + <span class="built_in">hash</span>Code(); &#125;</div><div class="line">&#125;</div><div class="line">interface Called &#123;</div><div class="line">    default String <span class="function"><span class="title">getName</span></span>() &#123; <span class="built_in">return</span> <span class="string">"Called:"</span> + getClass().getName() + <span class="string">"_"</span> + <span class="built_in">hash</span>Code(); &#125;</div><div class="line">&#125;</div><div class="line">class Student implements Named, Called &#123; </div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123; <span class="built_in">return</span> Named.super.getName(); &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | java8之LocalDate</title>
      <link href="/2017/03/25/JAVA/JAVA%208%20LocalDate/"/>
      <url>/2017/03/25/JAVA/JAVA%208%20LocalDate/</url>
      
        <content type="html"><![CDATA[<h2 id="java-time-LocalDate-8"><a href="#java-time-LocalDate-8" class="headerlink" title="java.time.LocalDate 8"></a>java.time.LocalDate 8</h2><ul><li>static LocalDate now()<br>构造一个表示当前日期的对象。</li><li>static LocalDate of(int year, int month, int day)<br>构造一个表示给定日期的对象。</li><li>int getYear()</li><li>int getMonthValue()</li><li>int getDayOfMonth()<br>得到当前日期的年、月和日。</li><li>DayOfWeek getDayOfWeek()<br>得到当前日期是星期几，作为DayOfWeek类的一个实例返回。调用getValue来得到1 ~ 7之间的一个数，表示这是星期几，1表示星期一，7表示星期日。</li><li>LocalDate plusDays(int n)</li><li>LocalDate minusDays(int n)<br>生成当前日期之后或之前n天的日期。</li></ul><h2 id="使用LocalDate输出日历"><a href="#使用LocalDate输出日历" class="headerlink" title="使用LocalDate输出日历"></a>使用LocalDate输出日历</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div></pre></td><td class="code"><pre><div class="line">package com.xian.date18;</div><div class="line"></div><div class="line">import java.time.DayOfWeek;</div><div class="line">import java.time.LocalDate;</div><div class="line"></div><div class="line">public class LocalDateDemo &#123;</div><div class="line">    public static void <span class="built_in">print</span>Calendar(LocalDate date) &#123;</div><div class="line">        int month = date.getMonthValue();</div><div class="line">        int today = date.getDayOfMonth();</div><div class="line"></div><div class="line">        date = date.minusDays(today - 1);        // <span class="built_in">set</span> to start of month</div><div class="line">        DayOfWeek weekday = date.getDayOfWeek();</div><div class="line">        int value = weekday.getValue();          // 1 = Monday, ... 7 = Sunday</div><div class="line"></div><div class="line">        System.out.println(<span class="string">"Mon Tue Wed Thu Fri Sat Sun"</span>);</div><div class="line">        <span class="keyword">for</span> (int i = 1; i &lt; value; i++)</div><div class="line">            System.out.print(<span class="string">"    "</span>);</div><div class="line">        <span class="keyword">while</span> (date.getMonthValue() == month) &#123;</div><div class="line">            System.out.printf(<span class="string">"%3d"</span>, date.getDayOfMonth());</div><div class="line">            <span class="keyword">if</span> (date.getDayOfMonth() == today)</div><div class="line">                System.out.print(<span class="string">"*"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                System.out.print(<span class="string">" "</span>);</div><div class="line">            date = date.plusDays(1);</div><div class="line">            <span class="keyword">if</span> (date.getDayOfWeek().getValue() == 1)</div><div class="line">                System.out.println();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        <span class="built_in">print</span>Calendar(LocalDate.now());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><pre>输出：Mon Tue Wed Thu Fri Sat Sun          1   2   3   4   5   6   7   8   9  10  11  12  13  14  15  16  17  18  19* 20  21  22  23  24  25  26  27  28  29  30  31 </pre>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID | 自定义VIEW入门</title>
      <link href="/2017/02/01/ANDROID/ANDROID%20%E8%87%AA%E5%AE%9A%E4%B9%89View%20%E5%85%A5%E9%97%A8/"/>
      <url>/2017/02/01/ANDROID/ANDROID%20%E8%87%AA%E5%AE%9A%E4%B9%89View%20%E5%85%A5%E9%97%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、自定义View"><a href="#一、自定义View" class="headerlink" title="一、自定义View"></a>一、自定义View</h2><p>Android系统内置的View无法满足业务需求，需要自定义。</p><h4 id="Step-1-继承View"><a href="#Step-1-继承View" class="headerlink" title="Step 1 : 继承View"></a>Step 1 : 继承View</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class CustomView extends View &#123;</div><div class="line">    public CustomView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CustomView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>至少写2个构造函数</p></blockquote><h4 id="Step-2-自定义属性"><a href="#Step-2-自定义属性" class="headerlink" title="Step 2 : 自定义属性"></a>Step 2 : 自定义属性</h4><p>有些属性希望由用户指定，只有当用户不指定的时候才用我们硬编码的值，比如默认的宽高，在res/values/styles.xml文件里声明：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">&lt;resources&gt;</div><div class="line"></div><div class="line">    &lt;!-- suggestion：the name is the class name --&gt;</div><div class="line">    &lt;<span class="built_in">declare</span>-styleable name=<span class="string">"CustomView"</span>&gt;</div><div class="line">        &lt;attr name=<span class="string">"default_size"</span> format=<span class="string">"dimension"</span> /&gt;</div><div class="line">    &lt;/<span class="built_in">declare</span>-styleable&gt;</div><div class="line"></div><div class="line">&lt;/resources&gt;</div></pre></td></tr></table></figure></p><p>布局文件activity_main.xml中使用自定义的属性<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"utf-8"</span>?&gt;</div><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:xian=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;!-- xian为命名空间，名称随便定义，其值固定为<span class="string">"http://schemas.android.com/apk/res-auto"</span> --&gt;</div><div class="line">    &lt;com.king.demo.customview.CustomView</div><div class="line">        android:layout_width=<span class="string">"match_parent"</span></div><div class="line">        android:layout_height=<span class="string">"100dp"</span></div><div class="line">        xian:default_size=<span class="string">"100dp"</span> /&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure></p><p>构造器中读取配置信息并初始化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">private int defaultSize;</div><div class="line">public CustomView(Context context, AttributeSet attrs) &#123;</div><div class="line">    super(context, attrs);</div><div class="line"></div><div class="line">    TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CustomView);</div><div class="line">    defaultSize = a.getDimensionPixelSize(R.styleable.CustomView_default_size, 100);</div><div class="line">    a.recycle();        // 回收TypedArray对象</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="Step-3-重写onMeasure"><a href="#Step-3-重写onMeasure" class="headerlink" title="Step 3 : 重写onMeasure()"></a>Step 3 : 重写onMeasure()</h4><p>测量宽高尺寸并设置需要的值。如果不需要制定自定义控件的宽高，无需重写此方法。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">    // 重构控件宽高，此处设宽高相等</div><div class="line">    int width = getMySize(100, widthMeasureSpec);</div><div class="line">    int height = getMySize(100, heightMeasureSpec);</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (width &lt; height) </div><div class="line">        height = width;</div><div class="line">    <span class="keyword">else</span></div><div class="line">        width = height;</div><div class="line"></div><div class="line">    <span class="built_in">set</span>MeasuredDimension(width, height);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 辅助方法，计算宽高</div><div class="line"> * @param defaultSize 设置宽高默认的值</div><div class="line"> * @param measureSpec </div><div class="line"> * @<span class="built_in">return</span></div><div class="line"> */</div><div class="line">private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">    int mySize = defaultSize;</div><div class="line"></div><div class="line">    int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">    int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">    switch (mode) &#123;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:   // 如果没有指定大小，就设置为默认大小</div><div class="line">            mySize = defaultSize;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        <span class="keyword">case</span> MeasureSpec.AT_MOST:       // 如果测量模式是最大取值为size</div><div class="line">        <span class="keyword">case</span> MeasureSpec.EXACTLY:       // 如果是固定的大小，那就不要去改变它</div><div class="line">            mySize = size;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">return</span> mySize;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><ul><li>onMeasure()至少会被调用两次，第一次读取xml文件中的参数layout_width和layout_width，它们可以不用指定具体的尺寸，如值为wrap_content或match_parent。为了更好的适配各种尺寸的屏幕，需要根据父类布局或子类控件宽高动态计算实际宽高，而不是在xml中指定具体的数值。</li><li>widthMeasureSpec和heightMeasureSpec都是int，前面2个bit用于区分不同的测量模式，后面30个bit存放的是尺寸的数据。测量模式分三种：UNSPECIFIED（父容器没有对当前View有任何限制，当前View可以任意取尺寸）、EXACTLY（当前的尺寸就是当前View应该取的尺寸，对应match_parent和固定值）、AT_MOST（当前尺寸是当前View能取的最大尺寸，对应wrap_content）</li></ul></blockquote><h4 id="Step-4-重写onDraw"><a href="#Step-4-重写onDraw" class="headerlink" title="Step 4 : 重写onDraw()"></a>Step 4 : 重写onDraw()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onDraw(Canvas canvas) &#123;</div><div class="line">    super.onDraw(canvas);</div><div class="line"></div><div class="line">    int r = getMeasuredWidth() / 2;</div><div class="line">    int centerX = getLeft() + r;</div><div class="line">    int centerY = getTop() + r;</div><div class="line"></div><div class="line">    Paint paint = new Paint();</div><div class="line">    paint.setColor(Color.RED);</div><div class="line">    canvas.drawCircle(centerX, centerY, r, paint);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h4><p><img src="http://ww1.sinaimg.cn/large/adc90466ly1fdhnwpy6pgj206o0b4wek" alt=""></p><h4 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div></pre></td><td class="code"><pre><div class="line">package com.king.demo.customview;</div><div class="line"></div><div class="line">import android.content.Context;</div><div class="line">import android.content.res.TypedArray;</div><div class="line">import android.graphics.Canvas;</div><div class="line">import android.graphics.Color;</div><div class="line">import android.graphics.Paint;</div><div class="line">import android.util.AttributeSet;</div><div class="line">import android.view.View;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 继承View，至少写2个构造函数</div><div class="line"> */</div><div class="line">public class CustomView extends View &#123;</div><div class="line">    private int defaultSize;</div><div class="line"></div><div class="line">    public CustomView(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public CustomView(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line"></div><div class="line">        TypedArray a = context.obtainStyledAttributes(attrs, R.styleable.CustomView);</div><div class="line">        defaultSize = a.getDimensionPixelSize(R.styleable.CustomView_default_size, 100);</div><div class="line">        a.recycle();        // 回收TypedArray对象</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 辅助方法，计算宽高</div><div class="line">     * @param defaultSize 设置宽高默认的值</div><div class="line">     * @param measureSpec</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    private int getMySize(int defaultSize, int measureSpec) &#123;</div><div class="line">        int mySize = defaultSize;</div><div class="line"></div><div class="line">        int mode = MeasureSpec.getMode(measureSpec);</div><div class="line">        int size = MeasureSpec.getSize(measureSpec);</div><div class="line"></div><div class="line">        switch (mode) &#123;</div><div class="line">            <span class="keyword">case</span> MeasureSpec.UNSPECIFIED:   // 如果没有指定大小，就设置为默认大小</div><div class="line">                mySize = defaultSize;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> MeasureSpec.AT_MOST:</div><div class="line">            <span class="keyword">case</span> MeasureSpec.EXACTLY:       // 如果是固定的大小，那就不要去改变它</div><div class="line">                mySize = size;</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> mySize;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">        super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line"></div><div class="line">        // 重构控件宽高</div><div class="line">        int width = getMySize(defaultSize, widthMeasureSpec);</div><div class="line">        int height = getMySize(defaultSize, heightMeasureSpec);</div><div class="line"></div><div class="line">        <span class="keyword">if</span> (width &lt; height) &#123;</div><div class="line">            height = width;</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            width = height;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        <span class="built_in">set</span>MeasuredDimension(width, height);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onDraw(Canvas canvas) &#123;</div><div class="line">        super.onDraw(canvas);</div><div class="line"></div><div class="line">        int r = getMeasuredWidth() / 2;</div><div class="line">        int centerX = getLeft() + r;</div><div class="line">        int centerY = getTop() + r;</div><div class="line"></div><div class="line">        Paint paint = new Paint();</div><div class="line">        paint.setColor(Color.RED);</div><div class="line">        canvas.drawCircle(centerX, centerY, r, paint);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h2 id="二、自定义ViewGroup"><a href="#二、自定义ViewGroup" class="headerlink" title="二、自定义ViewGroup"></a>二、自定义ViewGroup</h2><p>模拟一个简易垂直布局，详情可参考Android内置的LinearLayout源码。</p><h4 id="Step-1-继承ViewGroup"><a href="#Step-1-继承ViewGroup" class="headerlink" title="Step 1 : 继承ViewGroup"></a>Step 1 : 继承ViewGroup</h4><p>必须实现onLayout(boolean changed, int left, int top, int right, int bottom)方法，用于“摆放”各个子View。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * Created by xianxiaotao on 17/3/11.</div><div class="line"> */</div><div class="line">public class SimpleLinearLayout extends ViewGroup &#123;</div><div class="line"></div><div class="line">    public SimpleLinearLayout(Context context) &#123;</div><div class="line">        super(context);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public SimpleLinearLayout(Context context, AttributeSet attrs) &#123;</div><div class="line">        super(context, attrs);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    // TODO</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h4 id="Step-2-自定义属性（同上）"><a href="#Step-2-自定义属性（同上）" class="headerlink" title="Step 2 : 自定义属性（同上）"></a>Step 2 : 自定义属性（同上）</h4><h4 id="Step-3-重写onMeasure-1"><a href="#Step-3-重写onMeasure-1" class="headerlink" title="Step 3 : 重写onMeasure()"></a>Step 3 : 重写onMeasure()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onMeasure(int widthMeasureSpec, int heightMeasureSpec) &#123;</div><div class="line">    super.onMeasure(widthMeasureSpec, heightMeasureSpec);</div><div class="line">    measureChildren(widthMeasureSpec, heightMeasureSpec);   // 触发每个子View的onMeasure方法</div><div class="line"></div><div class="line">    int count = getChildCount();</div><div class="line">    int maxWidth = 0;</div><div class="line">    int height = 0;</div><div class="line">    <span class="keyword">for</span> (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        <span class="keyword">if</span> (child == null || child.getVisibility() == View.GONE)</div><div class="line">            <span class="built_in">continue</span>;</div><div class="line"></div><div class="line">        int childWidth = child.getMeasuredWidth();</div><div class="line">        int childHeight = child.getMeasuredHeight();</div><div class="line">        maxWidth = childWidth &gt; maxWidth ? childWidth : maxWidth;</div><div class="line">        height += childHeight;  // 不考虑Margin</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (MeasureSpec.getMode(widthMeasureSpec) != MeasureSpec.AT_MOST)</div><div class="line">        maxWidth = MeasureSpec.getSize(widthMeasureSpec);</div><div class="line">    <span class="keyword">if</span> (MeasureSpec.getMode(heightMeasureSpec) != MeasureSpec.AT_MOST)</div><div class="line">        height = MeasureSpec.getSize(heightMeasureSpec);</div><div class="line"></div><div class="line">    <span class="built_in">set</span>MeasuredDimension(maxWidth, height);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="Step-4-重写onLayout"><a href="#Step-4-重写onLayout" class="headerlink" title="Step 4 : 重写onLayout()"></a>Step 4 : 重写onLayout()</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">protected void onLayout(boolean changed, int l, int t, int r, int b) &#123;</div><div class="line">    int count = getChildCount();</div><div class="line"></div><div class="line">    int curHeight = t;  // 记录当前的高度位置</div><div class="line">    <span class="keyword">for</span> (int i = 0; i &lt; count; i++) &#123;</div><div class="line">        View child = getChildAt(i);</div><div class="line">        int height = child.getMeasuredHeight();</div><div class="line">        int width = child.getMeasuredWidth();</div><div class="line">        child.layout(l, curHeight, l + width, curHeight + height);</div><div class="line">        curHeight += height;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">&lt;LinearLayout xmlns:android=<span class="string">"http://schemas.android.com/apk/res/android"</span></div><div class="line">    xmlns:xian=<span class="string">"http://schemas.android.com/apk/res-auto"</span></div><div class="line">    android:layout_width=<span class="string">"match_parent"</span></div><div class="line">    android:layout_height=<span class="string">"match_parent"</span>&gt;</div><div class="line"></div><div class="line">    &lt;com.king.demo.customview.SimpleLinearLayout</div><div class="line">        android:layout_width=<span class="string">"wrap_content"</span></div><div class="line">        android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">        android:background=<span class="string">"#00FFFF"</span>&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=<span class="string">"100dp"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:text=<span class="string">"btn"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=<span class="string">"200dp"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:text=<span class="string">"btn"</span> /&gt;</div><div class="line"></div><div class="line">        &lt;Button</div><div class="line">            android:layout_width=<span class="string">"75dp"</span></div><div class="line">            android:layout_height=<span class="string">"wrap_content"</span></div><div class="line">            android:text=<span class="string">"btn"</span> /&gt;</div><div class="line">    &lt;/com.king.demo.customview.SimpleLinearLayout&gt;</div><div class="line"></div><div class="line">&lt;/LinearLayout&gt;</div></pre></td></tr></table></figure><h4 id="效果图-1"><a href="#效果图-1" class="headerlink" title="效果图"></a>效果图</h4><p><img src="http://ww1.sinaimg.cn/large/adc90466ly1fdivvq0dpvj206o0b4aa5" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
            <tag> CUSTOM VIEW </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Strategy 策略设计模式</title>
      <link href="/2017/01/13/PATTERN/Design%20pattern%20%E7%AD%96%E7%95%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/13/PATTERN/Design%20pattern%20%E7%AD%96%E7%95%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="使用模式之前"><a href="#使用模式之前" class="headerlink" title="使用模式之前"></a>使用模式之前</h2><p>给定如下表达式：如”1+4”、”4 *2”、”9- 2”、”3/1”，计算结果并打印。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 由于java7.0的新特性，本类采用switch代替<span class="keyword">if</span>-else</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class CalculateUtil &#123;</div><div class="line">    private <span class="function"><span class="title">CalculateUtil</span></span>()&#123;&#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 计算表达式，并返回结果</div><div class="line">     * @param exp</div><div class="line">     * @param opt</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    public static int calculate(String exp, String opt) &#123;</div><div class="line">        String[] operandStrs = exp.split(opt);</div><div class="line">        int beforeOperand = Integer.parseInt(operandStrs[0].trim());</div><div class="line">        int afterOperand = Integer.parseInt(operandStrs[1].trim());</div><div class="line">        </div><div class="line">        int result = Integer.MIN_VALUE;</div><div class="line">        switch (opt) &#123;</div><div class="line">        <span class="keyword">case</span> <span class="string">"\\+"</span>:</div><div class="line">            result = beforeOperand + afterOperand;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"-"</span>:</div><div class="line">            result = beforeOperand - afterOperand;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"\\*"</span>:</div><div class="line">            result = beforeOperand * afterOperand;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        <span class="keyword">case</span> <span class="string">"/"</span>:</div><div class="line">            result = beforeOperand / afterOperand;</div><div class="line">            <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> result;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        System.out.println(calculate(<span class="string">"4 +2"</span>, <span class="string">"\\+"</span>));   // 6</div><div class="line">        System.out.println(calculate(<span class="string">"4 -2"</span>, <span class="string">"-"</span>));     // 2</div><div class="line">        System.out.println(calculate(<span class="string">"4 *2"</span>, <span class="string">"\\*"</span>));   // 8</div><div class="line">        System.out.println(calculate(<span class="string">"4 /2"</span>, <span class="string">"/"</span>));     // 2</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>对于上述代码，新增一个取余表达式与修改加法业务都要修改calculate方法，扩展性和维护性很差。可以使用策略模式规避。</p></blockquote><h2 id="使用策略模式"><a href="#使用策略模式" class="headerlink" title="使用策略模式"></a>使用策略模式</h2><p>新增一个取余表达式，则直接新增一个实现类，无需修改关联代码。使得算法可以自由切换，避免使用多重条件判断，扩展性良好。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div></pre></td><td class="code"><pre><div class="line">package com.xian.design.strategy;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 此处应该是接口，但我需要一个辅助方法spit，懒得新建一个抽象类并继承之</div><div class="line"> */</div><div class="line">abstract class Calculator &#123;</div><div class="line">    public abstract int calculate(String exp);</div><div class="line">    </div><div class="line">    public int[] split(String exp, String opt) &#123;</div><div class="line">        String array[] = exp.split(opt);</div><div class="line">        int arrayInt[] = new int[2];</div><div class="line">        arrayInt[0] = Integer.parseInt(array[0].trim());</div><div class="line">        arrayInt[1] = Integer.parseInt(array[1].trim());</div><div class="line">        <span class="built_in">return</span> arrayInt; </div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Add extends Calculator &#123;  </div><div class="line">    @Override</div><div class="line">    public int calculate(String exp) &#123;</div><div class="line">        int arrayInt[] = split(exp, <span class="string">"\\+"</span>);</div><div class="line">        <span class="built_in">return</span> arrayInt[0] + arrayInt[1];</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Sub extends Calculator &#123;  </div><div class="line">    @Override</div><div class="line">    public int calculate(String exp) &#123;</div><div class="line">        int arrayInt[] = split(exp, <span class="string">"-"</span>);</div><div class="line">        <span class="built_in">return</span> arrayInt[0] - arrayInt[1];</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">class Mul extends Calculator &#123;  </div><div class="line">    @Override</div><div class="line">    public int calculate(String exp) &#123;</div><div class="line">        int arrayInt[] = split(exp, <span class="string">"\\*"</span>);</div><div class="line">        <span class="built_in">return</span> arrayInt[0] * arrayInt[1];</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">class Div extends Calculator &#123;  </div><div class="line">    @Override</div><div class="line">    public int calculate(String exp) &#123;</div><div class="line">        int arrayInt[] = split(exp, <span class="string">"/"</span>);</div><div class="line">        <span class="built_in">return</span> arrayInt[0] / arrayInt[1];</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">class Executor &#123;</div><div class="line">    private Calculator calculator;</div><div class="line">    public Executor(Calculator calculator) &#123;</div><div class="line">        this.calculator = calculator;</div><div class="line">    &#125;</div><div class="line">    public int execute(String exp) &#123;</div><div class="line">        <span class="built_in">return</span> calculator.calculate(exp);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class StrategyTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Executor executor = new Executor(new Add());</div><div class="line">        System.out.println(<span class="string">"4 + 2 = "</span> + executor.execute(<span class="string">"4 +2"</span>));</div><div class="line">        </div><div class="line">        executor = new Executor(new Sub());</div><div class="line">        System.out.println(<span class="string">"4 - 2 = "</span> + executor.execute(<span class="string">"4 -2"</span>));</div><div class="line">        </div><div class="line">        executor = new Executor(new Mul());</div><div class="line">        System.out.println(<span class="string">"4 * 2 = "</span> + executor.execute(<span class="string">"4 * 2"</span>));</div><div class="line">        </div><div class="line">        executor = new Executor(new Div());</div><div class="line">        System.out.println(<span class="string">"4 / 2 = "</span> + executor.execute(<span class="string">"4/ 2"</span>));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>4 + 2 = 6<br>4 - 2 = 2<br>4 * 2 = 8<br>4 / 2 = 2</p><blockquote><ul><li>策略模式定义了一系列算法，并将每个算法封装起来，使他们可以相互替换，且算法的变化不会影响到使用算法的客户。需要设计一个接口，为一系列实现类提供统一的方法，多个实现类实现该接口。</li><li>如果一个系统的策略多于四个，就需要考虑使用混合模式，解决策略类膨胀的问题。</li><li>所有策略类都需要对外暴露。</li></ul></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Flyweight 享元设计模式</title>
      <link href="/2017/01/12/PATTERN/Design%20pattern%20%E4%BA%AB%E5%85%83%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/12/PATTERN/Design%20pattern%20%E4%BA%AB%E5%85%83%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="享元模式"><a href="#享元模式" class="headerlink" title="享元模式"></a>享元模式</h2><p>运用共享技术有效地支持大量细粒度的对象，减少创建对象的数量，以减少内存占用和提高性能。在有大量对象时，有可能会造成内存溢出，我们把其中共同的部分抽象出来，如果有相同的业务请求，直接返回在内存中已有的对象，避免重新创建。通常与工厂模式一起使用，而工厂类中含有共享池(HashMap)。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div></pre></td><td class="code"><pre><div class="line">package com.xian.design.flyweight;</div><div class="line"></div><div class="line">import java.util.HashMap;</div><div class="line"></div><div class="line">interface Shape &#123;</div><div class="line">    void draw();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 需要共享的元对象</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">class Circle implements Shape &#123;</div><div class="line">    private String color;</div><div class="line">    private int x;</div><div class="line">    private int y;</div><div class="line">    private int radius;</div><div class="line">    </div><div class="line">    public Circle(String color) &#123;</div><div class="line">        this.color = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>X(int x) &#123;</div><div class="line">        this.x = x;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Y(int y) &#123;</div><div class="line">        this.y = y;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Radius(int radius) &#123;</div><div class="line">        this.radius = radius;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">draw</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Circle: Draw() [Color : "</span> + color +<span class="string">", x : "</span> + x +<span class="string">", y :"</span> + y +<span class="string">", radius :"</span> + radius);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 工厂类，提供缓存池，用于控制元对象的重复利用</div><div class="line"> */</div><div class="line">class ShapeFactory &#123;</div><div class="line">    private static final HashMap&lt;String, Shape&gt; circleMap = new HashMap&lt;&gt;();</div><div class="line">    private <span class="function"><span class="title">ShapeFactory</span></span>() &#123;&#125;   // 无需实例化</div><div class="line">    public static Shape getCircle(String color) &#123;</div><div class="line">        Circle circle = (Circle) circleMap.get(color);</div><div class="line">        <span class="keyword">if</span> (null == circle) &#123;</div><div class="line">            circle = new Circle(color);</div><div class="line">            circleMap.put(color, circle);</div><div class="line">            System.out.println(<span class="string">"Creating circle of color : "</span> + color);  // 如果重复利用则不会输出这句</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> circle;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 测试</div><div class="line"> */</div><div class="line">public class FlyweightTest &#123;</div><div class="line">    private static final String[] colors = &#123;<span class="string">"Red"</span>, <span class="string">"Green"</span>, <span class="string">"Blue"</span>, <span class="string">"White"</span>, <span class="string">"Black"</span>&#125;;</div><div class="line">    private static String <span class="function"><span class="title">getRandomColor</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> colors[(int)(Math.random() * colors.length)];</div><div class="line">    &#125;</div><div class="line">    private static int <span class="function"><span class="title">getRandoms</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> (int)(Math.random() * 100);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; 20; i++) &#123;</div><div class="line">            String color = getRandomColor();</div><div class="line">            Circle circle = (Circle) ShapeFactory.getCircle(color);</div><div class="line">            circle.setX(getRandoms());</div><div class="line">            circle.setY(getRandoms());</div><div class="line">            circle.setRadius(getRandoms());</div><div class="line">            circle.draw();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>Creating circle of color : Green<br>Circle: Draw() [Color : Green, x : 69, y :5, radius :73]<br>Creating circle of color : White<br>Circle: Draw() [Color : White, x : 92, y :6, radius :17]<br>Circle: Draw() [Color : White, x : 99, y :8, radius :88]<br>Creating circle of color : Red<br>Circle: Draw() [Color : Red, x : 74, y :18, radius :28]<br>Creating circle of color : Black<br>Circle: Draw() [Color : Black, x : 35, y :47, radius :12]<br>Circle: Draw() [Color : Black, x : 59, y :73, radius :11]<br>Creating circle of color : Blue<br>Circle: Draw() [Color : Blue, x : 25, y :10, radius :52]<br>Circle: Draw() [Color : Black, x : 33, y :83, radius :19]<br>Circle: Draw() [Color : Black, x : 56, y :5, radius :45]<br>Circle: Draw() [Color : Blue, x : 83, y :13, radius :87]<br>Circle: Draw() [Color : Red, x : 49, y :43, radius :48]<br>Circle: Draw() [Color : Green, x : 91, y :33, radius :62]<br>Circle: Draw() [Color : Green, x : 84, y :62, radius :87]<br>Circle: Draw() [Color : White, x : 76, y :4, radius :85]<br>Circle: Draw() [Color : Green, x : 96, y :30, radius :0]<br>Circle: Draw() [Color : White, x : 68, y :54, radius :27]<br>Circle: Draw() [Color : Green, x : 13, y :52, radius :14]<br>Circle: Draw() [Color : Green, x : 44, y :51, radius :70]<br>Circle: Draw() [Color : Red, x : 1, y :46, radius :12]<br>Circle: Draw() [Color : Blue, x : 70, y :12, radius :66]</p><blockquote><p>不同颜色的圆都只创建了一次，其余的都是重复利用，大大减少对象的创建，降低系统的内存，使效率提高。但是重复利用对象时，需要分离出外部状态和内部状态，上述代码Circle属性color是外部状态，x、y、radius是内部状态，但是得必须保证不管内部状态如何变化都不会影响到外部状态。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Composite 组合设计模式</title>
      <link href="/2017/01/11/PATTERN/Design%20pattern%20%E7%BB%84%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/11/PATTERN/Design%20pattern%20%E7%BB%84%E5%90%88%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="组合模式"><a href="#组合模式" class="headerlink" title="组合模式"></a>组合模式</h2><p>又叫部分整体模式，用于把一组相似的对象当做一个单一的对象。依据树形结构来组合对象，以便表示部分及整体层次。</p><h4 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h4><p>1、算术表达式包括操作数、操作符和另一个操作数，其中，另一个操作符也可以是操作树、操作符和另一个操作数。<br>2、树形菜单<br>3、二叉树<br>4、文件与文件夹的管理<br>5、员工</p><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>树枝和叶子实现统一接口，树枝内部组合该接口，并且含有内部属性 List，里面放Component。定义时为具体类。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>演示类使用Employee类来添加部门层次结构，并打印所有员工。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div></pre></td><td class="code"><pre><div class="line">package com.xian.design.composite;</div><div class="line"></div><div class="line">import java.util.ArrayList;</div><div class="line">import java.util.List;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 员工类</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Employee &#123;</div><div class="line">    private String name;</div><div class="line">    private String dept;</div><div class="line">    private int salary;</div><div class="line">    private List&lt;Employee&gt; subordinates;    // 下属员工</div><div class="line">    </div><div class="line">    public Employee(String name, String dept, int salary) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.dept = dept;</div><div class="line">        this.salary = salary;</div><div class="line">        subordinates = new ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Employee&gt; <span class="function"><span class="title">getSubordinates</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> subordinates;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void add(Employee e) &#123;</div><div class="line">        subordinates.add(e);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void remove(Employee e) &#123;</div><div class="line">        subordinates.remove(e);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"Employee [name="</span> + name + <span class="string">", dept="</span> + dept + <span class="string">", salary="</span> + salary + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 组合模式测试类，打印Employee层次结构</div><div class="line"> * </div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class CompositeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Employee CEO = new Employee(<span class="string">"xianxiaotao"</span>, <span class="string">"CEO"</span>, 100000000);</div><div class="line">        </div><div class="line">        Employee headSales = new Employee(<span class="string">"Bill Gates"</span>, <span class="string">"Head Sales"</span>, 50000000);</div><div class="line">        Employee headMarketing = new Employee(<span class="string">"Michel"</span>, <span class="string">"Head Marketing"</span>, 20000000);</div><div class="line">        </div><div class="line">        Employee salesExecutive1 = new Employee(<span class="string">"Richard"</span>, <span class="string">"Sales"</span>, 10000);</div><div class="line">        Employee salesExecutive2 = new Employee(<span class="string">"Rob"</span>, <span class="string">"Sales"</span>, 10000);</div><div class="line">        </div><div class="line">        Employee clerk1 = new Employee(<span class="string">"Laura"</span>, <span class="string">"Marketing"</span>, 10000);</div><div class="line">        Employee clerk2 = new Employee(<span class="string">"Bob"</span>, <span class="string">"Marketing"</span>, 10000);</div><div class="line"></div><div class="line">        CEO.add(headSales);</div><div class="line">        CEO.add(headMarketing);</div><div class="line"></div><div class="line">        headSales.add(salesExecutive1);</div><div class="line">        headSales.add(salesExecutive2);</div><div class="line"></div><div class="line">        headMarketing.add(clerk1);</div><div class="line">        headMarketing.add(clerk2);</div><div class="line">        </div><div class="line">        <span class="built_in">print</span>Employee(CEO, 0);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 利用递归打印树形结构</div><div class="line">    public static void <span class="built_in">print</span>Employee(Employee e, int level) &#123;</div><div class="line">        System.out.print(<span class="string">""</span>);</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; level; i++)</div><div class="line">            System.out.print(<span class="string">"    "</span>);</div><div class="line">        System.out.println(e);</div><div class="line">        </div><div class="line">        List&lt;Employee&gt; employees = e.getSubordinates();</div><div class="line">        <span class="keyword">if</span> (employees.size() &gt; 0) &#123;</div><div class="line">            level++;</div><div class="line">            <span class="keyword">for</span> (Employee employee : employees)</div><div class="line">                <span class="built_in">print</span>Employee(employee, level);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1fdd2p6pkdoj20pq05ygmy" alt=""></p>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Bridge 桥接设计模式</title>
      <link href="/2017/01/10/PATTERN/Design%20pattern%20%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/10/PATTERN/Design%20pattern%20%E6%A1%A5%E6%8E%A5%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title="桥接模式"></a>桥接模式</h2><p>桥接模式就是把事物和其具体实现分开，使他们可以各自独立的变化。桥接的用意是：将抽象化与实现化解耦，使得二者可以独立变化，像我们常用的JDBC桥DriverManager一样，JDBC进行连接数据库的时候，在各个数据库之间进行切换，基本不需要动太多的代码，甚至丝毫不用动，原因就是JDBC提供统一接口，每个数据库提供各自的实现，用一个叫做数据库驱动的程序来桥接就行了。</p><blockquote><p>如果看完实例一还是不明白桥接模式，请看实例二。</p></blockquote><h2 id="实例一演示"><a href="#实例一演示" class="headerlink" title="实例一演示"></a>实例一演示</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div></pre></td><td class="code"><pre><div class="line">// 接口: 驱动，一个维度</div><div class="line">public interface Driver &#123;</div><div class="line">    public void connect();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Mysql对于驱动的具体实现</div><div class="line">public class MysqlDriver implements Driver &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">connect</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Mysql driver connect"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// Oracle对于驱动的具体实现</div><div class="line">public class OracleDriver implements Driver &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">connect</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Oracle driver connect"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 管理类，另一个维度</div><div class="line">public abstract class Manager &#123;</div><div class="line">    protected Driver driver;</div><div class="line">    protected Manager(Driver driver) &#123;</div><div class="line">        this.driver = driver;</div><div class="line">    &#125;</div><div class="line">    public abstract void connect();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 管理类的实现类</div><div class="line">public class DriverManager extends Manager &#123;</div><div class="line">    </div><div class="line">    protected DriverManager(Driver driver) &#123;</div><div class="line">        super(driver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">connect</span></span>() &#123;</div><div class="line">        driver.connect();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试类</div><div class="line">public class BridgeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Manager mysqlDriver = new DriverManager(new MysqlDriver());</div><div class="line">        Manager oracleDriver = new DriverManager(new OracleDriver());</div><div class="line">        mysqlDriver.connect();</div><div class="line">        oracleDriver.connect();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>Mysql driver connect<br>Oracle driver connect </p><p>桥接模式最主要的就是将抽象与实现分开，即将上述接口Driver的实现，实际上是由Manager子类负责实现。这样的好处就是Driver与Manager都可以独立变化，例如新增DB2对与Driver的实现，而其他类可以不做任何修改（除测试代码），就能完美切合。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class DB2Driver implements Driver &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">connect</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"DB2 driver connect"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>对于Manager的子类来说，一样可以任意扩展，比如上述DriverManager类的实现比较粗糙，现在新增一个更完善的实现类。而这样的更改对Driver的实现类没有任何影响（除测试代码）。如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public class AdvancedDriverManager extends Manager &#123;</div><div class="line">    </div><div class="line">    protected DriverManager(Driver driver) &#123;</div><div class="line">        super(driver);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">connect</span></span>() &#123;</div><div class="line">        prepare();</div><div class="line">        driver.connect();</div><div class="line">        monitor();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void <span class="function"><span class="title">prepare</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"连接前进行检查和准备工作"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void <span class="function"><span class="title">monitor</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"监听连接，并处理异常情况"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h2 id="实例二演示"><a href="#实例二演示" class="headerlink" title="实例二演示"></a>实例二演示</h2><h4 id="1、传统方式：继承"><a href="#1、传统方式：继承" class="headerlink" title="1、传统方式：继承"></a>1、传统方式：继承</h4><p>汽车上路行驶。既有小汽车又有公共汽车，它们都不但能在市区中的公路上行驶，也能在高速公路上行驶。这你会发现，对于交通工具（汽车）有不同的类型，它们所行驶的环境（路）也有不同类型，在软件系统中就要适应两个方面（不同车型，不同道路）的变化，怎样实现才能应对这种变化呢？传统做法是继承。即抽象出道路（Road），提供run方法；路分高速（SpeedWay）和街道（Street）；车有公交车和小汽车，为了能在高速公路上行驶，继承SpeedWay，即有OnSpeedWayCar、OnSpeedWayBus，为了能在街道上行驶，继承Street，即有OnStreetCar、OnStreetBus。具体代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div></pre></td><td class="code"><pre><div class="line">class Road &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"路"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 市区街道</div><div class="line">class Street extends Road &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"市区街道"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 高速公路</div><div class="line">class SpeedWay extends Road &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"高速公路"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 市区街道行驶的小汽车</div><div class="line">class OnStreetCar extends Street &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"小汽车在市区街道行驶"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 市区街道行驶的公交车</div><div class="line">class OnStreetBus extends Street &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"公交车在市区街道行驶"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 小汽车在高速公路行驶</div><div class="line">class OnSpeedWayCar extends SpeedWay &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"小汽车在高速公路行驶"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 公交车在高速公路行驶</div><div class="line">class OnSpeedWayBus extends SpeedWay &#123;</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"公交车在高速公路行驶"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">//测试</div><div class="line">public class BridgeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        OnSpeedWayCar onSpeedWayCar = new OnSpeedWayCar();  // 小汽车在高速公路行驶</div><div class="line">        onSpeedWayCar.run();</div><div class="line">        </div><div class="line">        OnStreetBus onStreetbus = new OnStreetBus();        // 公交车在市区街道行驶</div><div class="line">        onStreetbus.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>小汽车在高速公路行驶<br>公交车在市区街道行驶</p><blockquote><p>对于上述代码中，高速公路又分一级、二级、三级和四级公路，而小汽车和公交车为了能在这些高速公路衍生路中行驶，可以通过继承，但会导致类的结构过于复杂，继承关系太多，难于维护，扩展性太差。</p></blockquote><h4 id="2、设计模式：桥接"><a href="#2、设计模式：桥接" class="headerlink" title="2、设计模式：桥接"></a>2、设计模式：桥接</h4><p>可以将车当做一个维度，并抽象出run方法，将路当做另一个维度，并通过对象组合的方式，即路持有车，从而把两个角色之间的继承关系改为了耦合的关系，从而使这两者可以从容自若的各自独立的变化，这也是Bridge模式的本意。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div></pre></td><td class="code"><pre><div class="line">package com.design.bridge;</div><div class="line"></div><div class="line">// 汽车维度的父类（抽象类或接口）</div><div class="line">abstract class AbstractCar &#123;</div><div class="line">    abstract void run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 汽车维度的子类或实现类Car</div><div class="line">class Car extends AbstractCar &#123;</div><div class="line">    @Override</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Car running"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 汽车维度的子类或实现类Bus</div><div class="line">class Bus extends AbstractCar &#123;</div><div class="line">    @Override</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Bus running"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 路维度的父类（抽象类或接口）</div><div class="line">abstract class AbstractRoad &#123;</div><div class="line">    protected AbstractCar abstractCar; // 利用组合，持有对象</div><div class="line"></div><div class="line">    protected AbstractRoad(AbstractCar abstractCar) &#123;</div><div class="line">        this.abstractCar = abstractCar;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    abstract void run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 路维度的子类或实现类Street，供车行驶</div><div class="line">class Street extends AbstractRoad &#123;</div><div class="line">    protected Street(AbstractCar abstractCar) &#123;</div><div class="line">        super(abstractCar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.print(<span class="string">"Street : "</span>);</div><div class="line">        abstractCar.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 路维度的子类或实现类Street，供车行驶</div><div class="line">class SpeedWay extends AbstractRoad &#123;</div><div class="line">    protected SpeedWay(AbstractCar abstractCar) &#123;</div><div class="line">        super(abstractCar);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.print(<span class="string">"SpeedWay : "</span>);</div><div class="line">        abstractCar.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 人维度的父类（抽象类或接口）</div><div class="line">abstract class AbstractPerson &#123;</div><div class="line">    protected AbstractRoad abstractRoad;</div><div class="line">    </div><div class="line">    protected AbstractPerson(AbstractRoad abstractRoad) &#123;</div><div class="line">        this.abstractRoad = abstractRoad;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    abstract void run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试</div><div class="line">public class BridgeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        SpeedWay carOnSpeedWay = new SpeedWay(new Car());</div><div class="line">        SpeedWay busOnSpeedWay = new SpeedWay(new Bus());</div><div class="line">        Street carOnStreet = new Street(new Car());</div><div class="line">        Street busOnStreet = new Street(new Bus());</div><div class="line">        carOnSpeedWay.run();</div><div class="line">        busOnSpeedWay.run();</div><div class="line">        carOnStreet.run();</div><div class="line">        busOnStreet.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>SpeedWay : Car running<br>SpeedWay : Bus running<br>Street : Car running<br>Street : Bus running</p><blockquote><p>无论公路分几级，或者汽车分几厢，2个维度各自独立变化衍生，都互不影响。不仅如此，还可以轻易新增一个维度，比如人，即不同的人在不同的道路上驾驶不同的汽车。</p></blockquote><h4 id="3、新增维度：人"><a href="#3、新增维度：人" class="headerlink" title="3、新增维度：人"></a>3、新增维度：人</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div></pre></td><td class="code"><pre><div class="line">// 人维度的父类（抽象类或接口）</div><div class="line">abstract class AbstractPerson &#123;</div><div class="line">    protected AbstractRoad abstractRoad;</div><div class="line">    </div><div class="line">    protected AbstractPerson(AbstractRoad abstractRoad) &#123;</div><div class="line">        this.abstractRoad = abstractRoad;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    abstract void run();</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 人维度的子类或实现类Man</div><div class="line">class Man extends AbstractPerson &#123;</div><div class="line">    protected Man(AbstractRoad abstractRoad) &#123;</div><div class="line">        super(abstractRoad);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.print(<span class="string">"Man : "</span>);</div><div class="line">        abstractRoad.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 人维度的子类或实现类Man</div><div class="line">class Woman extends AbstractPerson &#123;</div><div class="line">    protected Woman(AbstractRoad abstractRoad) &#123;</div><div class="line">        super(abstractRoad);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        System.out.print(<span class="string">"Woman : "</span>);</div><div class="line">        abstractRoad.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">// 测试</div><div class="line">public class BridgeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        AbstractPerson person = new Man(new Street(new Car()));</div><div class="line">        person.run();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>Man : Street : Car running</p><blockquote><p>人持有路、路持有车，因为演示桥接模式的优点，所以导致设计不合理，读者可以自行更改成路持有车、车持有人。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Facade 外观设计模式</title>
      <link href="/2017/01/09/PATTERN/Design%20pattern%20%E5%A4%96%E8%A7%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/09/PATTERN/Design%20pattern%20%E5%A4%96%E8%A7%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="外观模式"><a href="#外观模式" class="headerlink" title="外观模式"></a>外观模式</h2><p>为子系统中的一组接口提供一个一致的界面，外观模式定义了一个高层接口，这个接口使得这一子系统更加容易使用。外观模式是解决了类与类之家的依赖关系，提高了系统的灵活性、安全性，但不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>用户一键开启电脑，而电脑则启动CPU、Memory、Disk等，这些操作及顺序是用户无需知道的。</p><h4 id="1、电脑中的各个组件"><a href="#1、电脑中的各个组件" class="headerlink" title="1、电脑中的各个组件"></a>1、电脑中的各个组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">public class CPU &#123;</div><div class="line">    public void <span class="function"><span class="title">startup</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"cpu startup!"</span>);</div><div class="line">    &#125;</div><div class="line">    public void <span class="function"><span class="title">shutdown</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"cpu shutdown!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Memory &#123;</div><div class="line">    public void <span class="function"><span class="title">startup</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"memory startup!"</span>);</div><div class="line">    &#125;</div><div class="line">    public void <span class="function"><span class="title">shutdown</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"memory shutdown!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Disk &#123;</div><div class="line">    public void <span class="function"><span class="title">startup</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"disk startup!"</span>);</div><div class="line">    &#125;</div><div class="line">    public void <span class="function"><span class="title">shutdown</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"disk shutdown!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、对外提供一个一致的界面"><a href="#2、对外提供一个一致的界面" class="headerlink" title="2、对外提供一个一致的界面"></a>2、对外提供一个一致的界面</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">public class Computer &#123;</div><div class="line">    private CPU cpu;</div><div class="line">    private Memory memory;</div><div class="line">    private Disk disk;</div><div class="line">    </div><div class="line">    public <span class="function"><span class="title">Computer</span></span>() &#123;</div><div class="line">        cpu = new CPU();</div><div class="line">        memory = new Memory();</div><div class="line">        disk = new Disk();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void <span class="function"><span class="title">startUp</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"start the computer!"</span>);</div><div class="line">        cpu.startUp();</div><div class="line">        memory.startUp();</div><div class="line">        disk.startUp();</div><div class="line">        System.out.println(<span class="string">"start computer finished!\n"</span>);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void <span class="function"><span class="title">shutDown</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"begin to close the computer!"</span>);</div><div class="line">        cpu.shutDown();;</div><div class="line">        memory.shutDown();</div><div class="line">        disk.shutDown();</div><div class="line">        System.out.println(<span class="string">"computer closed!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、测试及输出"><a href="#3、测试及输出" class="headerlink" title="3、测试及输出"></a>3、测试及输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">public class FacadeTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Computer computer = new Computer();</div><div class="line">        computer.startUp();</div><div class="line">        computer.shutDown();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>start the computer!<br>cpu startup!<br>memory startup!<br>disk startup!<br>start computer finished!</p><p>begin to close the computer!<br>cpu shutdown!<br>memory shutdown!<br>disk shutdown!<br>computer closed!</p><blockquote><p>如果我们没有Computer类，那么，CPU、Memory、Disk他们之间将会相互持有实例，产生关系，这样会造成严重的依赖，修改一个类，可能会带来其他类的修改，这不是我们想要看到的，有了Computer类，他们之间的关系被放在了Computer类里，这样就起到了解耦的作用，这，就是外观模式！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Proxy 代理设计模式</title>
      <link href="/2017/01/08/PATTERN/Design%20pattern%20%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/08/PATTERN/Design%20pattern%20%E4%BB%A3%E7%90%86%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="代理模式"><a href="#代理模式" class="headerlink" title="代理模式"></a>代理模式</h2><p>代理模式给某一个对象提供一个代理对象，并由代理对象控制对原对象的引用。举例说明，就是一个人或者一个机构代表另一个人或者另一个机构采取行动。在一些情况下，一个客户不想或者不能够直接引用一个对象，而代理对象可以在客户端和目标对象之前起到中介的作用。</p><blockquote><p>1、和适配器模式的区别：适配器模式主要改变所考虑对象的接口，而代理模式不能改变所代理类的接口。<br>2、和装饰器模式的区别：装饰器模式为了增强功能，而代理模式是为了加以控制。</p></blockquote><h2 id="实例一演示"><a href="#实例一演示" class="headerlink" title="实例一演示"></a>实例一演示</h2><p>通过上面的代理模式描述我们可以知道，其目的就是为了控制对象引用，生活场景中我们以买车为例，如果我们要买一辆轿车必须通过汽车4S店，汽车4s店就是充当代理角色，其目的就是控制买车客户的买车行为，必须通过汽车4S店才能从汽车厂商买一辆车。</p><h4 id="1、新建一个买车的接口"><a href="#1、新建一个买车的接口" class="headerlink" title="1、新建一个买车的接口"></a>1、新建一个买车的接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public interface IBuyCar &#123;</div><div class="line">    public void buyCar();   // 买车</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、声明一个要买车的客户，实现买车接口"><a href="#2、声明一个要买车的客户，实现买车接口" class="headerlink" title="2、声明一个要买车的客户，实现买车接口"></a>2、声明一个要买车的客户，实现买车接口</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">public class Customer implements IBuyCar &#123;</div><div class="line">    private int cash;   // 购车款</div><div class="line">    </div><div class="line">    public int <span class="function"><span class="title">getCash</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> cash;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Cash(int cash) &#123;</div><div class="line">        this.cash = cash;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">buyCar</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"买一辆车花费了"</span> + cash + <span class="string">"元"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、声明一个买车代理汽车4S店，同样也实现买车接口，必须接受客户下单"><a href="#3、声明一个买车代理汽车4S店，同样也实现买车接口，必须接受客户下单" class="headerlink" title="3、声明一个买车代理汽车4S店，同样也实现买车接口，必须接受客户下单"></a>3、声明一个买车代理汽车4S店，同样也实现买车接口，必须接受客户下单</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public class BuyCarProxy implements IBuyCar &#123;</div><div class="line">    private Customer customer;  // 接收买车客户</div><div class="line">    </div><div class="line">    public BuyCarProxy(Customer customer) &#123;</div><div class="line">        this.customer = customer;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">buyCar</span></span>() &#123;      // 实现为客户买车</div><div class="line">        customer.buyCar();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4、测试，模拟一次买车"><a href="#4、测试，模拟一次买车" class="headerlink" title="4、测试，模拟一次买车"></a>4、测试，模拟一次买车</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public class ProxyTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Customer customer = new Customer();</div><div class="line">        customer.setCash(150000);</div><div class="line">        BuyCarProxy proxy = new BuyCarProxy(customer);</div><div class="line">        proxy.buyCar();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>买一辆车花费了150000元</p><h4 id="5、通过代理模式实现权限控制"><a href="#5、通过代理模式实现权限控制" class="headerlink" title="5、通过代理模式实现权限控制"></a>5、通过代理模式实现权限控制</h4><p>通过上面的例子，我们可能有个疑问，难道就不能直接去厂家买车吗？当然可以，如果在使用场景中实现类能满足要求时，我们当然可以直接实现类，但当实现类不能满足要求，要扩展需求，根据开闭原则你又不能修改实现类代码，这时你就用代理类。比如购买一辆车我们要对客户进行一个购车款审核，如果符合条件就买车，不符合要求我们就告知客户购车款不足。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 修改后的代理类</div><div class="line"> */</div><div class="line">public class BuyCarProxy implements IBuyCar &#123;</div><div class="line">    private Customer customer;  // 接收买车客户</div><div class="line">    </div><div class="line">    public BuyCarProxy(Customer customer) &#123;</div><div class="line">        this.customer = customer;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">buyCar</span></span>() &#123;      // 实现为客户买车</div><div class="line">        int cash = customer.getCash();</div><div class="line">        <span class="keyword">if</span> (cash &lt; 100000) &#123;</div><div class="line">            System.out.println(<span class="string">"你的钱不够买一辆车"</span>);</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">        customer.buyCar();;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 测试</div><div class="line"> */</div><div class="line">public class ProxyTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Customer customer=new Customer();</div><div class="line">        customer.setCash(120000);</div><div class="line">        BuyCarProxy buyCarProxy=new BuyCarProxy(customer);</div><div class="line">        buyCarProxy.buyCar();</div><div class="line"></div><div class="line">        Customer customer1 =new Customer();</div><div class="line">        customer1.setCash(90000);</div><div class="line">        BuyCarProxy buyCarProxy1 =new BuyCarProxy(customer1);</div><div class="line">        buyCarProxy1.buyCar();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>买一辆车花费了120000元<br>你的钱不够买一辆车</p><h2 id="实例二演示"><a href="#实例二演示" class="headerlink" title="实例二演示"></a>实例二演示</h2><p>模拟一个场景：现有程序中有一个RealImage类，实现了Image接口。当创建RealImage类时就会从磁盘中加载一次，从而入驻内存。为了减少RealImage对象加载的内存占用，使用一个代理类ImageProxy，延迟加载。</p><h4 id="1、Image接口及其实现类RealImage"><a href="#1、Image接口及其实现类RealImage" class="headerlink" title="1、Image接口及其实现类RealImage"></a>1、Image接口及其实现类RealImage</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">public interface Image &#123;</div><div class="line">    public void display();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class RealImage implements Image &#123;</div><div class="line">    private String fileName;</div><div class="line">    </div><div class="line">    public RealImage(String fileName) &#123;</div><div class="line">        this.fileName = fileName;</div><div class="line">        loadFromDisk(fileName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">display</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Displaying "</span> + fileName);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void loadFromDisk(String fileName) &#123;</div><div class="line">        System.out.println(<span class="string">"Loading "</span> + fileName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、代理类，延迟加载"><a href="#2、代理类，延迟加载" class="headerlink" title="2、代理类，延迟加载"></a>2、代理类，延迟加载</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">public class ImageProxy implements Image &#123;</div><div class="line">    private String fileName;</div><div class="line">    private RealImage realImage;</div><div class="line">    </div><div class="line">    public ImageProxy(String fileName) &#123;</div><div class="line">        this.fileName = fileName;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">display</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (null == realImage) // 延迟加载</div><div class="line">            realImage = new RealImage(fileName);</div><div class="line">        realImage.display();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、测试：当被请求时，使用ProxyImage来获取RealImage类的对象"><a href="#3、测试：当被请求时，使用ProxyImage来获取RealImage类的对象" class="headerlink" title="3、测试：当被请求时，使用ProxyImage来获取RealImage类的对象"></a>3、测试：当被请求时，使用ProxyImage来获取RealImage类的对象</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class ProxyTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Image realImage = new RealImage(<span class="string">"real_image.jpg"</span>);</div><div class="line">        Image imageProxy = new ImageProxy(<span class="string">"proxy_image.jpg"</span>);</div><div class="line">        System.out.println(<span class="string">"Calling method"</span>);</div><div class="line">        realImage.display();</div><div class="line">        imageProxy.display();   // 延迟加载图像，调用时才将图像从磁盘加载</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>Loading real_image.jpg<br>Calling method…<br>Displaying real_image.jpg<br>Loading proxy_image.jpg<br>Displaying proxy_image.jpg</p>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Decorator 装饰器设计模式</title>
      <link href="/2017/01/07/PATTERN/Design%20pattern%20%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/07/PATTERN/Design%20pattern%20%E8%A3%85%E9%A5%B0%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="装饰器模式"><a href="#装饰器模式" class="headerlink" title="装饰器模式"></a>装饰器模式</h2><p>装饰器模式允许向一个现有的对象添加新的功能，同时又不改变其结构。一般的，我们为了扩展一个类经常使用继承方式实现，由于继承为类引入静态特征，并且随着扩展功能的增多，子类会很膨胀。在不想增加很多子类的情况下扩展类，此时使用装饰器模式。</p><h4 id="1、应用实例"><a href="#1、应用实例" class="headerlink" title="1、应用实例"></a>1、应用实例</h4><p>1、孙悟空有 72 变，当他变成”庙宇”后，他的根本还是一只猴子，但是他又有了庙宇的功能。<br>2、不论一幅画有没有画框都可以挂在墙上，但是通常都是有画框的，并且实际上是画框被挂在墙上。在挂在墙上之前，画可以被蒙上玻璃，装到框子里；这时画、玻璃和画框形成了一个物体。</p><h4 id="2、使用场景"><a href="#2、使用场景" class="headerlink" title="2、使用场景"></a>2、使用场景</h4><p>扩展一个类的功能，动态增加功能、动态撤销，可代替继承</p><h4 id="3、优点缺点"><a href="#3、优点缺点" class="headerlink" title="3、优点缺点"></a>3、优点缺点</h4><ul><li>装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</li><li>多层装饰比较复杂，而且产生过多相似的对象，不易排错。</li></ul><h4 id="4、关键代码"><a href="#4、关键代码" class="headerlink" title="4、关键代码"></a>4、关键代码</h4><ul><li>Component类充当抽象角色（如下案例中的Shape接口），不应该具体实现；</li><li>修饰类引用和继承Component类（如下的ShapeDecorator抽象类），具体扩展类重写父类方法（如RedShapeDecorator）</li></ul><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>一个形状接口（Shape），拥有draw方法，有2个子类（Circle、Rectangle），而现在需要为该系列的类扩展一个功能：画红边框。分以下步骤：</p><h4 id="1、创建接口及其子类"><a href="#1、创建接口及其子类" class="headerlink" title="1、创建接口及其子类"></a>1、创建接口及其子类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">public interface Shape &#123;</div><div class="line">    public void draw();</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Circle implements Shape &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">draw</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Shape: Circle"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class Rectangle implements Shape &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">draw</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"Shape: Rectangle"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、创建实现了Shape接口的抽象装饰类"><a href="#2、创建实现了Shape接口的抽象装饰类" class="headerlink" title="2、创建实现了Shape接口的抽象装饰类"></a>2、创建实现了Shape接口的抽象装饰类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">public abstract class ShapeDecorator implements Shape &#123;</div><div class="line">    protected Shape decoratedShape; // protected是为了让子类继承</div><div class="line">    </div><div class="line">    public ShapeDecorator(Shape decoratedShape) &#123;</div><div class="line">        this.decoratedShape = decoratedShape;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">draw</span></span>() &#123;</div><div class="line">        decoratedShape.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、创建扩展了ShapeDecorator类的实体装饰类"><a href="#3、创建扩展了ShapeDecorator类的实体装饰类" class="headerlink" title="3、创建扩展了ShapeDecorator类的实体装饰类"></a>3、创建扩展了ShapeDecorator类的实体装饰类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line">public class RedShapeDecorator extends ShapeDecorator &#123;</div><div class="line"></div><div class="line">    public RedShapeDecorator(Shape decoratedShape) &#123;</div><div class="line">        super(decoratedShape);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">draw</span></span>() &#123;</div><div class="line">        decoratedShape.draw();</div><div class="line">        <span class="built_in">set</span>RedBorder(decoratedShape);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 扩展的功能：边框着色</div><div class="line">     * @param decoratedShape</div><div class="line">     */</div><div class="line">    private void <span class="built_in">set</span>RedBorder(Shape decoratedShape) &#123;</div><div class="line">        System.out.println(<span class="string">"Border Color: Red"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4、测试及输出"><a href="#4、测试及输出" class="headerlink" title="4、测试及输出"></a>4、测试及输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">public class DecoratorTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Shape circle = new Circle();</div><div class="line">        Shape redCircle = new RedShapeDecorator(new Circle());</div><div class="line">        Shape redRectangle = new RedShapeDecorator(new Rectangle());</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"Circle with normal border"</span>);</div><div class="line">        circle.draw();</div><div class="line">        System.out.println(<span class="string">"\nCircle of red border"</span>);</div><div class="line">        redCircle.draw();</div><div class="line">        System.out.println(<span class="string">"\nRectangle of red border"</span>);</div><div class="line">        redRectangle.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>Circle with normal border<br>Shape: Circle</p><p>Circle of red border<br>Shape: Circle<br>Border Color: Red</p><p>Rectangle of red border<br>Shape: Rectangle<br>Border Color: Red</p><blockquote><p>ShapeDecorator作为抽象装饰类，是为了让不同的子类装饰器为Shape子类扩展不同的功能。上述代码中RedShapeDecorator扩展了setRedBorder()，也可以继续新增一个FillShapeDecorator，继承ShapeDecorator，并扩展fillShape(int color)。</p></blockquote><h4 id="5、不同的装饰器"><a href="#5、不同的装饰器" class="headerlink" title="5、不同的装饰器"></a>5、不同的装饰器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 装饰器：括展功能（填充颜色）</div><div class="line"> */</div><div class="line">public class FillShapeDecorator extends ShapeDecorator &#123;</div><div class="line">    private String color;   // 测试代码暂用String</div><div class="line"></div><div class="line">    public FillShapeDecorator(Shape decoratedShape, String color) &#123;</div><div class="line">        super(decoratedShape);</div><div class="line">        this.color = color;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">draw</span></span>() &#123;</div><div class="line">        decoratedShape.draw();</div><div class="line">        fillColor(color);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 扩展的功能：填充颜色</div><div class="line">     * @param color 实际开发中使用Color对象或int</div><div class="line">     */</div><div class="line">    private void fillColor(String color) &#123;</div><div class="line">        System.out.println(<span class="string">"filling Color: "</span> + color);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 测试</div><div class="line"> */ </div><div class="line">public class DecoratorTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Shape circle = new Circle();</div><div class="line">        Shape redCircle = new FillShapeDecorator(new Circle(), <span class="string">"red"</span>);</div><div class="line">        Shape redRectangle = new FillShapeDecorator(new Rectangle(), <span class="string">"blue"</span>);</div><div class="line">        </div><div class="line">        System.out.println(<span class="string">"Circle with normal color"</span>);</div><div class="line">        circle.draw();</div><div class="line">        System.out.println(<span class="string">"\nCircle of red background"</span>);</div><div class="line">        redCircle.draw();</div><div class="line">        System.out.println(<span class="string">"\nRectangle of blue background"</span>);</div><div class="line">        redRectangle.draw();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br>Circle with normal color<br>Shape: Circle</p><p>Circle of red background<br>Shape: Circle<br>filling Color: red</p><p>Rectangle of blue background<br>Shape: Rectangle<br>filling Color: blue</p>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Adapter 适配器设计模式</title>
      <link href="/2017/01/06/PATTERN/Design%20pattern%20%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/06/PATTERN/Design%20pattern%20%E9%80%82%E9%85%8D%E5%99%A8%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title="适配器模式"></a>适配器模式</h2><p>适配器模式将某个类的接口转换成客户端期望的另一个接口表示，这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本读取内存卡。</p><h4 id="应用实例"><a href="#应用实例" class="headerlink" title="应用实例"></a>应用实例</h4><p>1、美国电器110V，中国220V，就要有一个适配器将110V转化为220V。<br>2、JAVA JDK 1.1 提供了Enumeration接口，而在1.2中提供了Iterator接口，想要使用1.2的JDK，则要将以前系统的Enumeration接口转化为Iterator接口，这时就需要适配器模式。<br>3、在 LINUX 上运行 WINDOWS 程序。<br>4、JAVA 中的 jdbc。</p><h4 id="关键代码"><a href="#关键代码" class="headerlink" title="关键代码"></a>关键代码</h4><p>适配器继承或依赖已有的对象，实现想要的目标接口。建议使用依赖。</p><h2 id="实例演示"><a href="#实例演示" class="headerlink" title="实例演示"></a>实例演示</h2><p>实例：音频播放器设备只能播放mp3文件，通过使用一个更高级的音频播放器来播放vlc和mp4文件。<br>分析：要有一个MediaPlayer接口及其实体类AudioPlayer。默认情况下，AudioPlayer可以播放mp3格式的音频文件。另外还要有一个接口AdvancedMediaPlayer及其实体类VlcPlayer、Mp4Player，分别可以播放vlc和mp4格式的文件。现在想让AudioPlayer播放其他格式的音频文件，就需要创建一个实现了MediaPlayer接口的适配器类MediaAdapter，并使用AdvancedMediaPlayer对象来播放所需的格式。</p><h4 id="1、接口：为媒体播放器、更高级的媒体播放器"><a href="#1、接口：为媒体播放器、更高级的媒体播放器" class="headerlink" title="1、接口：为媒体播放器、更高级的媒体播放器"></a>1、接口：为媒体播放器、更高级的媒体播放器</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 接口：媒体播放器</div><div class="line"> */</div><div class="line">public interface MediaPlayer &#123;</div><div class="line">    public void play(String audioType, String fileName);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 接口：更高级的媒体播放器</div><div class="line"> */</div><div class="line">public interface AdvancedMediaPlayer &#123;</div><div class="line">    public void playVlc(String fileName);</div><div class="line">    public void playMp4(String fileName);</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、实现类：实现AdvanceMediaPlayer接口的子类（VlcPlayer、Mp4Player）"><a href="#2、实现类：实现AdvanceMediaPlayer接口的子类（VlcPlayer、Mp4Player）" class="headerlink" title="2、实现类：实现AdvanceMediaPlayer接口的子类（VlcPlayer、Mp4Player）"></a>2、实现类：实现AdvanceMediaPlayer接口的子类（VlcPlayer、Mp4Player）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 播放器：可播放Vlc格式</div><div class="line"> */</div><div class="line">public class VlcPlayer implements AdvancedMediaPlayer &#123;</div><div class="line">    @Override</div><div class="line">    public void playVlc(String fileName) &#123;</div><div class="line">        System.out.println(<span class="string">"Playing vlc file. Name: "</span>+ fileName);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void playMp4(String fileName) &#123;</div><div class="line">        // nothing to <span class="keyword">do</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 播放器：可播放Mp4格式</div><div class="line"> */</div><div class="line">public class Mp4Player implements AdvancedMediaPlayer &#123;</div><div class="line">    @Override</div><div class="line">    public void playVlc(String fileName) &#123;</div><div class="line">        // nothing to <span class="keyword">do</span></div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void playMp4(String fileName) &#123;</div><div class="line">        System.out.println(<span class="string">"Playing mp4 file. Name: "</span>+ fileName);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、创建实现了MediaPlayer接口的适配器类"><a href="#3、创建实现了MediaPlayer接口的适配器类" class="headerlink" title="3、创建实现了MediaPlayer接口的适配器类"></a>3、创建实现了MediaPlayer接口的适配器类</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 适配器：实现MediaPlayer，持有AdvancedMediaPlayer实现类，即将二者关联起来。</div><div class="line"> */</div><div class="line">public class MediaAdapter implements MediaPlayer &#123;</div><div class="line">    private AdvancedMediaPlayer advancedMusicPlayer;    // 依赖</div><div class="line">    </div><div class="line">    public MediaAdapter(String audioType) &#123;</div><div class="line">        <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"vlc"</span>)) &#123;</div><div class="line">            advancedMusicPlayer = new VlcPlayer();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"mp4"</span>)) &#123;</div><div class="line">            advancedMusicPlayer = new Mp4Player();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void play(String audioType, String fileName) &#123;</div><div class="line">        <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"vlc"</span>)) &#123;</div><div class="line">            advancedMusicPlayer.playVlc(fileName);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"mp4"</span>)) &#123;</div><div class="line">            advancedMusicPlayer.playMp4(fileName);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4、创建实现了MediaPlayer接口的实体类AudioPlayer"><a href="#4、创建实现了MediaPlayer接口的实体类AudioPlayer" class="headerlink" title="4、创建实现了MediaPlayer接口的实体类AudioPlayer"></a>4、创建实现了MediaPlayer接口的实体类AudioPlayer</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * MediaPlayer的实现类，持有适配器后扩展功能。</div><div class="line"> */</div><div class="line">public class AudioPlayer implements MediaPlayer &#123;</div><div class="line">    private MediaAdapter adapter;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void play(String audioType, String fileName) &#123;</div><div class="line">        <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"mp3"</span>)) &#123;    // 内置的可以播放mp3的功能</div><div class="line">            System.out.println(<span class="string">"Playing mp3 file. Name: "</span> + fileName);</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (audioType.equalsIgnoreCase(<span class="string">"vlc"</span>) || audioType.equalsIgnoreCase(<span class="string">"mp4"</span>)) &#123;</div><div class="line">            adapter = new MediaAdapter(audioType);  // mediaAdapter提供了播放其他文件格式的支持</div><div class="line">            adapter.play(audioType, fileName);</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"Invalid media. "</span> + audioType + <span class="string">" format not supported"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5、测试"><a href="#5、测试" class="headerlink" title="5、测试"></a>5、测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class AdapterTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        AudioPlayer audioPlayer = new AudioPlayer();</div><div class="line">        audioPlayer.play(<span class="string">"mp3"</span>, <span class="string">"beyond the horizon.mp3"</span>);</div><div class="line">        audioPlayer.play(<span class="string">"mp4"</span>, <span class="string">"alone.mp4"</span>);</div><div class="line">        audioPlayer.play(<span class="string">"vlc"</span>, <span class="string">"far far away.vlc"</span>);</div><div class="line">        audioPlayer.play(<span class="string">"avi"</span>, <span class="string">"mind me.avi"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="6、输出"><a href="#6、输出" class="headerlink" title="6、输出"></a>6、输出</h4><p>Playing mp3 file. Name: beyond the horizon.mp3<br>Playing mp4 file. Name: alone.mp4<br>Playing vlc file. Name: far far away.vlc<br>Invalid media. avi format not supported</p><h2 id="其他详解"><a href="#其他详解" class="headerlink" title="其他详解"></a>其他详解</h2><p>有人将适配器模式详细分为三种：类的适配器模式、对象的适配器模式、接口的适配器模式。</p><h4 id="1、类的适配器模式"><a href="#1、类的适配器模式" class="headerlink" title="1、类的适配器模式"></a>1、类的适配器模式</h4><p>有一个Source类，拥有一个方法，待适配，目标接口是Targetable，通过Adapter类，将Source的功能扩展到Targetable里，看代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">public class Source &#123;</div><div class="line">    public void <span class="function"><span class="title">method1</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"this is original method!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public interface Targetable &#123;    </div><div class="line">    public void method1();  // 与原类中的方法相同 </div><div class="line">    public void method2();  // 新类的方法</div><div class="line">&#125; </div><div class="line"></div><div class="line">/**</div><div class="line"> * Adapter类继承Source类，实现Targetable接口</div><div class="line"> */</div><div class="line">public class ClassAdapter extends Source implements Targetable &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">method2</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public class AdapterTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        Targetable target = new ClassAdapter();</div><div class="line">        target.method1();</div><div class="line">        target.method2();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>this is original method!<br>this is the targetable method!</p><blockquote><p>这样Targetable接口的实现类就具有了Source类的功能。</p></blockquote><h4 id="2、对象的适配器模式"><a href="#2、对象的适配器模式" class="headerlink" title="2、对象的适配器模式"></a>2、对象的适配器模式</h4><p>基本思路和类的适配器模式相同，只是将Adapter类作修改，这次不继承Source类，而是持有Source类的实例，以达到解决兼容性的问题。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * ObjectAdapter替换ClassAdapter</div><div class="line"> */</div><div class="line">public class ObjectAdapter implements Targetable &#123;</div><div class="line">    private Source <span class="built_in">source</span>;</div><div class="line">    </div><div class="line">    public ObjectAdapter(Source <span class="built_in">source</span>)&#123;</div><div class="line">        super();</div><div class="line">        this.source = <span class="built_in">source</span>;</div><div class="line">    &#125; </div><div class="line">  </div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">method1</span></span>() &#123;</div><div class="line">        source.method1();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override </div><div class="line">    public void <span class="function"><span class="title">method2</span></span>() &#123; </div><div class="line">        System.out.println(<span class="string">"this is the targetable method!"</span>);</div><div class="line">    &#125; </div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 测试代码略作修改</div><div class="line"> */</div><div class="line">public class AdapterTest &#123;  </div><div class="line">    public static void main(String[] args) &#123; </div><div class="line">        Targetable target = new ObjectAdapter(new Source());  </div><div class="line">        target.method1(); </div><div class="line">        target.method2(); </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>输出与第一种一样，只是适配的方法不同而已。</p></blockquote><h4 id="3、接口的适配器模式"><a href="#3、接口的适配器模式" class="headerlink" title="3、接口的适配器模式"></a>3、接口的适配器模式</h4><p>有时我们写的一个接口中有多个抽象方法，当我们写该接口的实现类时，必须实现该接口的所有方法，这明显有时比较浪费，因为并不是所有的方法都是我们需要的，有时只需要某一些，此处为了解决这个问题，我们引入了接口的适配器模式，借助于一个抽象类，该抽象类实现了该接口，实现了所有的方法，而我们不和原始的接口打交道，只和该抽象类取得联系，所以我们写一个类，继承该抽象类，重写我们需要的方法就行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 原始接口有很多方法</div><div class="line"> */</div><div class="line">public interface Sourceable &#123;  </div><div class="line">    public void method1();  </div><div class="line">    public void method2();</div><div class="line">    public void method3();   </div><div class="line">&#125; </div><div class="line"></div><div class="line">/**</div><div class="line"> * 借助抽象类作为适配器</div><div class="line"> */ </div><div class="line">public abstract class SourceableAdapter implements Sourceable&#123;      </div><div class="line">    public void <span class="function"><span class="title">method1</span></span>()&#123;&#125;</div><div class="line">    public void <span class="function"><span class="title">method2</span></span>()&#123;&#125;</div><div class="line">    public void <span class="function"><span class="title">method3</span></span>()&#123;&#125;</div><div class="line">&#125; </div><div class="line"></div><div class="line">/**</div><div class="line"> * 适配器将子类所需要实现的方法减少</div><div class="line"> */ </div><div class="line">public class SourceSub1 extends SourceableAdapter &#123;  </div><div class="line">    public void <span class="function"><span class="title">method1</span></span>()&#123;  </div><div class="line">        System.out.println(<span class="string">"the sourceable interface's first Sub1!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 适配器将子类所需要实现的方法减少</div><div class="line"> */ </div><div class="line">public class SourceSub2 extends SourceableAdapter &#123;  </div><div class="line">    public void <span class="function"><span class="title">method1</span></span>()&#123;  </div><div class="line">        System.out.println(<span class="string">"the sourceable interface's second Sub2!"</span>);  </div><div class="line">    &#125;  </div><div class="line">&#125;</div><div class="line"></div><div class="line">public class AdapterTest &#123;  </div><div class="line">    public static void main(String[] args) &#123;  </div><div class="line">        Sourceable <span class="built_in">source</span>1 = new SourceSub1();  </div><div class="line">        Sourceable <span class="built_in">source</span>2 = new SourceSub2();   </div><div class="line">        <span class="built_in">source</span>1.method1();  </div><div class="line">        <span class="built_in">source</span>1.method2();  </div><div class="line">        <span class="built_in">source</span>2.method1();  </div><div class="line">        <span class="built_in">source</span>2.method2();  </div><div class="line">    &#125;  </div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试输出：<br>the sourceable interface’s first Sub1!<br>the sourceable interface’s second Sub2!</p><blockquote><p>类的适配器模式：当希望将一个类转换成满足另一个新接口的类时，可以使用类的适配器模式，创建一个新类，继承原有的类，实现新的接口即可。<br>对象的适配器模式：当希望将一个对象转换成满足另一个新接口的对象时，可以创建一个Adapter类，持有原类的一个实例，在Adapter类的方法中，调用实例的方法就行。<br>接口的适配器模式：当不希望实现一个接口中所有的方法时，可以创建一个抽象类Adapter，实现所有方法，我们写别的类的时候，继承抽象类即可。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Prototype 原型设计模式</title>
      <link href="/2017/01/05/PATTERN/Design%20pattern%20%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/05/PATTERN/Design%20pattern%20%E5%8E%9F%E5%9E%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><p>该模式的思想就是将一个对象作为原型，对其进行复制、克隆，产生一个和原对象类似的新对象，同时又能保证性能。在JAVA中，复制对象是通过clone()实现的。</p><h3 id="使用场景："><a href="#使用场景：" class="headerlink" title="使用场景："></a>使用场景：</h3><p>1、资源优化场景。<br>2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。<br>3、性能和安全要求的场景。<br>4、通过 new 产生一个对象需要非常繁琐的数据准备或访问权限，则可以使用原型模式。<br>5、一个对象多个修改者的场景。<br>6、一个对象需要提供给其他对象访问，而且各个调用者可能都需要修改其值时，可以考虑使用原型模式拷贝多个对象供调用者使用。<br>7、在实际项目中，原型模式很少单独出现，一般是和工厂方法模式一起出现，通过 clone 的方法创建一个对象，然后由工厂方法提供给调用者。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 原型类，只需要实现Cloneable空接口</div><div class="line"> */</div><div class="line">public class Prototype implements Cloneable &#123;</div><div class="line">    /**</div><div class="line">     * 覆写<span class="built_in">clone</span>方法</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected Object <span class="built_in">clone</span>() throws CloneNotSupportedException &#123;</div><div class="line">        Prototype prototype = (Prototype) super.clone();</div><div class="line">        <span class="built_in">return</span> prototype;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 自定义方法，也能克隆。重点是super.clone();</div><div class="line">     */</div><div class="line">    protected Object <span class="built_in">clone</span>Prototype() throws CloneNotSupportedException &#123;</div><div class="line">        Prototype prototype = (Prototype) super.clone();</div><div class="line">        <span class="built_in">return</span> prototype;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>一个原型类，只需要实现Cloneable接口，覆写clone方法，此处clone方法可以改成任意的名称，因为Cloneable接口是个空接口，你可以任意定义实现类的方法名，如clonePrototype，因为此处的重点是super.clone()这句话，super.clone()调用的是Object的clone()方法，而在Object类中，clone()是native的，具体怎么实现暂不深究。</p></blockquote><h2 id="深浅复制。"><a href="#深浅复制。" class="headerlink" title="深浅复制。"></a>深浅复制。</h2><p>复制又分浅复制、深复制：<br>浅复制：将一个对象复制后，克隆的对象引用与原型对象引用不相同。其基本数据类型变量的值相同，而引用类型变量指向的还是原对象所指向的。<br>深复制：将一个对象复制后，克隆的对象引用与原型对象引用不相同。其基本数据类型变量的值相同，而引用类型变量指向的不是原对象所指向的。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 原型类，测试深浅复制</div><div class="line"> */</div><div class="line">public class Prototype implements Cloneable, Serializable &#123;</div><div class="line">    </div><div class="line">    private static final long serialVersionUID = 1L;</div><div class="line">    private int num;                // 基本数据类型</div><div class="line">    private SerializableObject obj; // 引用类型</div><div class="line">    </div><div class="line">    public Prototype(int num, SerializableObject obj) &#123;</div><div class="line">        this.num = num;</div><div class="line">        this.obj = obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 浅复制</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    protected Object cone() throws CloneNotSupportedException &#123;</div><div class="line">        Prototype prototype = (Prototype) super.clone();</div><div class="line">        <span class="built_in">return</span> prototype;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 深复制</div><div class="line">     * 要实现深复制，需要采用流的形式读入当前对象的二进制输入，再写出二进制数据对应的对象。（暂不考虑关闭流）</div><div class="line">     */</div><div class="line">    protected Object deepClone() throws IOException, ClassNotFoundException &#123;</div><div class="line">        /* 写入当前对象的进制流 */</div><div class="line">        ByteArrayOutputStream bos = new ByteArrayOutputStream();</div><div class="line">        ObjectOutputStream oos = new ObjectOutputStream(bos);</div><div class="line">        oos.writeObject(this);</div><div class="line">        </div><div class="line">        /* 读出二进制流产生的新对象 */</div><div class="line">        ObjectInputStream ois = new ObjectInputStream(new ByteArrayInputStream(bos.toByteArray()));</div><div class="line">        <span class="built_in">return</span> ois.readObject();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public int <span class="function"><span class="title">getNum</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Num(int num) &#123;</div><div class="line">        this.num = num;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public SerializableObject <span class="function"><span class="title">getObj</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> obj;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Obj(SerializableObject obj) &#123;</div><div class="line">        this.obj = obj;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class SerializableObject implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = 2L;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 测试原型模式中的深浅复制</div><div class="line"> */</div><div class="line">public class PrototypeTest &#123;</div><div class="line">    public static void main(String[] args) throws Exception &#123;</div><div class="line">        Prototype prototype = new Prototype(1, new SerializableObject());</div><div class="line">        Prototype shallowPrototype = (Prototype) prototype.shallowClone();  // 浅复制</div><div class="line">        Prototype deepPrototype = (Prototype) prototype.deepClone();        // 深复制</div><div class="line"></div><div class="line">        System.out.println(prototype == shallowPrototype);                  // <span class="literal">false</span> 浅复制比较克隆对象与原型对象是否指向相同地址</div><div class="line">        System.out.println(prototype.getNum() == shallowPrototype.getNum());// <span class="literal">true</span>  浅复制比较基本数据类型</div><div class="line">        System.out.println(prototype.getObj() == shallowPrototype.getObj());// <span class="literal">true</span>  浅复制比较引用数据类型</div><div class="line">        System.out.println(prototype == deepPrototype);                     // <span class="literal">false</span> 深复制比较克隆对象与原型对象是否指向相同地址</div><div class="line">        System.out.println(prototype.getNum() == deepPrototype.getNum());   // <span class="literal">true</span>  深复制比较基本数据类型</div><div class="line">        System.out.println(prototype.getObj() == deepPrototype.getObj());   // <span class="literal">false</span> 深复制比较引用数据类型</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>与通过对一个类进行实例化来构造新对象不同的是，原型模式是通过拷贝一个现有对象生成新对象的。浅拷贝实现 Cloneable，重写，深拷贝是通过实现Serializable读取二进制流。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Builder 建造者设计模式</title>
      <link href="/2017/01/04/PATTERN/Design%20pattern%20%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/04/PATTERN/Design%20pattern%20%E5%BB%BA%E9%80%A0%E8%80%85%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><p>使用多个简单的对象一步一步构建成一个复杂的对象。将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。也就是说当一些有共性的基本部件不会变，而其组合经常变化，此时使用建造者模式。</p><h2 id="现实案例"><a href="#现实案例" class="headerlink" title="现实案例"></a>现实案例</h2><p>肯德基快餐店提供一个典型的套餐：一个汉堡（Burger）和一杯冷饮（Cold drink）。汉堡（Burger）可以是素食汉堡（Veg Burger）或鸡肉汉堡（Chicken Burger），它们是包在纸盒中。冷饮（Cold drink）可以是可口可乐（Coke）或百事可乐（Pepsi），它们是装载瓶子中。使用建造者模式创建不同的套餐。</p><h2 id="代码实现"><a href="#代码实现" class="headerlink" title="代码实现"></a>代码实现</h2><p>创建一个食物条目接口Item，以及实现Item接口的实体类（汉堡和冷饮）；然后表示一个食物包装接口Packing，以及实现Packing接口的实体类，汉堡是包在纸盒中，冷饮是装在瓶子中；然后创建一个Meal（餐）类，套餐用一些实现Item接口对象的集合；最后就是负责通过不同的Item子类组合来创建不同的Meal对象的MealBuilder。下面就是演示用MealBuilder（建造者）创建一个Meal（套餐）。</p><h4 id="1、创建接口：食物包装、食物条目"><a href="#1、创建接口：食物包装、食物条目" class="headerlink" title="1、创建接口：食物包装、食物条目"></a>1、创建接口：食物包装、食物条目</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 接口：食物包装</div><div class="line"> */</div><div class="line">public interface Packing &#123;</div><div class="line">    public String pack();   // 包装方式</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 接口：食物条目</div><div class="line"> */</div><div class="line">public interface Item &#123;</div><div class="line">    public String name();       // 食物名称</div><div class="line">    public Packing packing();   // 包装方式</div><div class="line">    public <span class="built_in">float</span> price();       // 食物价格</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="2、创建实现Packing接口的实现类：纸包、瓶装"><a href="#2、创建实现Packing接口的实现类：纸包、瓶装" class="headerlink" title="2、创建实现Packing接口的实现类：纸包、瓶装"></a>2、创建实现Packing接口的实现类：纸包、瓶装</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 用纸包装</div><div class="line"> */</div><div class="line">public class Wrapper implements Packing &#123;</div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">pack</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"Wrapper"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 用瓶包装</div><div class="line"> */</div><div class="line">public class Bottle implements Packing &#123;</div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">pack</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"Bottle"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="3、创建实现Item接口的抽象类并提供默认功能：汉堡（纸包）、冷饮（瓶装）。"><a href="#3、创建实现Item接口的抽象类并提供默认功能：汉堡（纸包）、冷饮（瓶装）。" class="headerlink" title="3、创建实现Item接口的抽象类并提供默认功能：汉堡（纸包）、冷饮（瓶装）。"></a>3、创建实现Item接口的抽象类并提供默认功能：汉堡（纸包）、冷饮（瓶装）。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 抽象类汉堡，默认纸包</div><div class="line"> */</div><div class="line">public abstract class Burger implements Item &#123;</div><div class="line">    @Override</div><div class="line">    public Packing <span class="function"><span class="title">packing</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new Wrapper();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public abstract <span class="built_in">float</span> price();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 抽象类冷饮，默认瓶装</div><div class="line"> */</div><div class="line">public abstract class ColdDrink implements Item &#123;</div><div class="line">    @Override</div><div class="line">    public Packing <span class="function"><span class="title">packing</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new Bottle();</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public abstract <span class="built_in">float</span> price();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="4、创建扩展Burger和ColdDrink的实体类：VerBurger（素食汉堡）、ChickenBurger（鸡肉汉堡）、Coke（可口可乐）、Pepsi（百事可乐）"><a href="#4、创建扩展Burger和ColdDrink的实体类：VerBurger（素食汉堡）、ChickenBurger（鸡肉汉堡）、Coke（可口可乐）、Pepsi（百事可乐）" class="headerlink" title="4、创建扩展Burger和ColdDrink的实体类：VerBurger（素食汉堡）、ChickenBurger（鸡肉汉堡）、Coke（可口可乐）、Pepsi（百事可乐）"></a>4、创建扩展Burger和ColdDrink的实体类：VerBurger（素食汉堡）、ChickenBurger（鸡肉汉堡）、Coke（可口可乐）、Pepsi（百事可乐）</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 素食汉堡 </div><div class="line"> */</div><div class="line">public class VerBurger extends Burger &#123;</div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">name</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"VerBurger"</span>;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public <span class="built_in">float</span> <span class="function"><span class="title">price</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> 25.0f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 鸡肉汉堡</div><div class="line"> */</div><div class="line">public class ChickenBurger extends Burger &#123;</div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">name</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"Chicken Burger"</span>;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public <span class="built_in">float</span> <span class="function"><span class="title">price</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> 50.0f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 可口可乐</div><div class="line"> */</div><div class="line">public class Coke extends ColdDrink &#123;</div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">name</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"Coke"</span>;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public <span class="built_in">float</span> <span class="function"><span class="title">price</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> 30.0f;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 百事可乐</div><div class="line"> */</div><div class="line">public class Pepsi extends ColdDrink &#123;</div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">name</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> <span class="string">"Pepsi"</span>;</div><div class="line">    &#125;</div><div class="line">    @Override</div><div class="line">    public <span class="built_in">float</span> <span class="function"><span class="title">price</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> 35.0f;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="5、创建Meal类，包含上面定义的Item子类对象。"><a href="#5、创建Meal类，包含上面定义的Item子类对象。" class="headerlink" title="5、创建Meal类，包含上面定义的Item子类对象。"></a>5、创建Meal类，包含上面定义的Item子类对象。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 套餐</div><div class="line"> */</div><div class="line">public class Meal &#123;</div><div class="line">    private List&lt;Item&gt; items = new ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    public void addItem(Item item) &#123;    // 添加食物</div><div class="line">        items.add(item);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public <span class="built_in">float</span> <span class="function"><span class="title">getCost</span></span>() &#123;            // 套餐总价</div><div class="line">        <span class="built_in">float</span> cost = 0.0f;</div><div class="line">        <span class="keyword">for</span> (Item item : items) </div><div class="line">            cost += item.price();</div><div class="line">        <span class="built_in">return</span> cost;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void <span class="function"><span class="title">showItems</span></span>() &#123;           // 展示餐单</div><div class="line">        <span class="keyword">for</span> (Item item : items) &#123;</div><div class="line">            System.out.print(<span class="string">"Item : "</span> + item.name());</div><div class="line">            System.out.print(<span class="string">", Packing : "</span> + item.packing().pack());</div><div class="line">            System.out.println(<span class="string">", Price : "</span> + item.price());</div><div class="line">        &#125;</div><div class="line">        System.out.println(<span class="string">"Total Cost : "</span> + getCost());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="6、创建MealBuilder类，负责创建Meal对象"><a href="#6、创建MealBuilder类，负责创建Meal对象" class="headerlink" title="6、创建MealBuilder类，负责创建Meal对象"></a>6、创建MealBuilder类，负责创建Meal对象</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 创建套餐的建造者（MealBuilder）</div><div class="line"> */</div><div class="line">public class MealBuilder &#123;</div><div class="line">    public Meal <span class="function"><span class="title">prepareVegMeal</span></span>() &#123;</div><div class="line">        Meal meal = new Meal();</div><div class="line">        meal.addItem(new VerBurger());</div><div class="line">        meal.addItem(new Coke());</div><div class="line">        <span class="built_in">return</span> meal;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Meal <span class="function"><span class="title">prepareNoVegMeal</span></span>() &#123;</div><div class="line">        Meal meal = new Meal();</div><div class="line">        meal.addItem(new ChickenBurger());</div><div class="line">        meal.addItem(new Pepsi());</div><div class="line">        <span class="built_in">return</span> meal;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="7、测试"><a href="#7、测试" class="headerlink" title="7、测试"></a>7、测试</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 测试类</div><div class="line"> */</div><div class="line">public class BuilderTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        MealBuilder mealBuilder = new MealBuilder();</div><div class="line">        </div><div class="line">        Meal vegMeal = mealBuilder.prepareVegMeal();</div><div class="line">        System.out.println(<span class="string">"Veg Meal"</span>);</div><div class="line">        vegMeal.showItems();</div><div class="line">        </div><div class="line">        Meal nonVegMeal = mealBuilder.prepareNonVegMeal();</div><div class="line">        System.out.println(<span class="string">"\n\nNon-Veg Meal"</span>);</div><div class="line">        nonVegMeal.showItems();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h4 id="8、输出"><a href="#8、输出" class="headerlink" title="8、输出"></a>8、输出</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">Veg Meal</div><div class="line">Item : Ver Burger, Packing : Wrapper, Price : 25.0</div><div class="line">Item : Coke, Packing : Bottle, Price : 30.0</div><div class="line">Total Cost : 55.0</div><div class="line"></div><div class="line"></div><div class="line">Non-Veg Meal</div><div class="line">Item : Chicken Burger, Packing : Wrapper, Price : 50.0</div><div class="line">Item : Pepsi, Packing : Bottle, Price : 35.0</div><div class="line">Total Cost : 85.0</div></pre></td></tr></table></figure><blockquote><p>从这点看出，建造者模式将很多功能集成到一个类里，这个类可以创造出比较复杂的东西。所以与工厂模式的区别就是：工厂模式关注的是创建单个产品，而建造者模式则关注创建符合对象，多个部分。因此，是选择工厂模式还是建造者模式，依实际情况而定。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Singleton 单例</title>
      <link href="/2017/01/03/PATTERN/Design%20pattern%20%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/03/PATTERN/Design%20pattern%20%E5%8D%95%E4%BE%8B%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><p>最简洁的单例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 饿汉式</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance = new Singleton();</div><div class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</div><div class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>上述代码中，随着类的加载就持有对象，由于static修饰，则将常驻内存。为此，可做如下修改：</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 懒汉式</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Singleton &#123;</div><div class="line">    private static Singleton instance = null;</div><div class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</div><div class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (null == instance)</div><div class="line">            instance = new Singleton();</div><div class="line">        <span class="built_in">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>修改之后，可以减少对象入驻内存时间，但是在多线程中不能保证只创建了一个对象。我们可以使用synchronized来规避风险。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">public static synchronized Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</div><div class="line">    <span class="keyword">if</span> (null == instance)</div><div class="line">        instance = new Singleton();</div><div class="line">    <span class="built_in">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>用synchronized修饰方法，这将因每次调用getInstance()都要对对象上锁，从而导致性能下降。事实上，只有在第一次创建对象的时候需要加锁，之后就不需要了，所以，这个地方需要改进。</p></blockquote><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</div><div class="line">    <span class="keyword">if</span> (null == instance)</div><div class="line">        synchronized (Singleton.class) &#123;</div><div class="line">            <span class="keyword">if</span> (null == instance)</div><div class="line">                instance = new Singleton();</div><div class="line">        &#125;</div><div class="line">    <span class="built_in">return</span> instance;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>双重判断，即可规避每次都要加锁。然而，为了保证对象的唯一性，我们需要借助序列化与反序列化来存储对象，但这样会破坏单例。</p></blockquote><h2 id="完美单例"><a href="#完美单例" class="headerlink" title="完美单例"></a>完美单例</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 完美的单例</div><div class="line"> *     final：禁止被继承</div><div class="line"> *     <span class="built_in">read</span>Resolve：防止被序列化与反序列化破坏单例</div><div class="line"> *</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public final class Singleton implements Serializable &#123;</div><div class="line">    private static final long serialVersionUID = -7316915605453163797L;</div><div class="line">    private static Singleton instance = null;</div><div class="line"></div><div class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (null == instance)</div><div class="line">            synchronized (Singleton.class) &#123;</div><div class="line">                <span class="keyword">if</span> (null == instance)</div><div class="line">                    instance = new Singleton();</div><div class="line">            &#125;</div><div class="line">        <span class="built_in">return</span> instance;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private Object <span class="function"><span class="title">readResolve</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>完美只是相对于之前的代码，笔者对于反射破坏单例而束手无策。</p></blockquote><h2 id="饿汉式变异"><a href="#饿汉式变异" class="headerlink" title="饿汉式变异"></a>饿汉式变异</h2><p>使用一个静态内部类来维护单例<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 饿汉式</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Singleton &#123;</div><div class="line">    private static class SingletonFactory &#123;</div><div class="line">        private static final Singleton instance = new Singleton();</div><div class="line">    &#125;</div><div class="line">    private <span class="function"><span class="title">Singleton</span></span>() &#123;&#125;</div><div class="line">    public static Singleton <span class="function"><span class="title">getInstance</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> SingletonFactory.instance;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | Factory 工厂方法模式和抽象工厂模式</title>
      <link href="/2017/01/01/PATTERN/Design%20pattern%20%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2017/01/01/PATTERN/Design%20pattern%20%E5%B7%A5%E5%8E%82%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p><a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern/" target="_blank" rel="external">返回设计模式目录</a></p><h2 id="一、工厂方法模式"><a href="#一、工厂方法模式" class="headerlink" title="一、工厂方法模式"></a>一、工厂方法模式</h2><p>建立一个工厂类，对实现了同一接口的一些类进行实例的创建。可以模拟一个场景：生活中需要装载机器（Loader），载人的有汽车（Car），载货的有货车（Truck）,而这些可以由一个工厂（LoaderFactory）生产（produce）。根据订单要求（参数）来生产不同的装载机。</p><h4 id="普通工厂方法模式"><a href="#普通工厂方法模式" class="headerlink" title="普通工厂方法模式"></a>普通工厂方法模式</h4><p>1、同一的接口<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 接口：装载</div><div class="line"> */</div><div class="line">public interface Loader &#123;</div><div class="line">    public void load();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、实现装载接口的类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 实现装载接口：载人</div><div class="line"> */</div><div class="line">public class Car implements Loader &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">load</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"load person"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 实现装载接口：载货</div><div class="line"> */</div><div class="line">public class Truck implements Loader &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">load</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"load goods"</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、工厂类<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 工厂：根据订单要求（参数）来生产不同的装载机</div><div class="line"> */</div><div class="line">public class LoaderFactory &#123;</div><div class="line">    public Loader produce(String <span class="built_in">type</span>) &#123;</div><div class="line">        <span class="keyword">if</span> (<span class="string">"Car"</span>.equalsIgnoreCase(<span class="built_in">type</span>)) &#123;</div><div class="line">            <span class="built_in">return</span> new Car();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">"Truck"</span>.equalsIgnoreCase(<span class="built_in">type</span>)) &#123;</div><div class="line">            <span class="built_in">return</span> new Truck();</div><div class="line">        &#125; <span class="keyword">else</span> &#123;</div><div class="line">            System.out.println(<span class="string">"请输入正确的类型"</span>);</div><div class="line">            <span class="built_in">return</span> null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4、测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class FactoryTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        LoaderFactory factory = new LoaderFactory();</div><div class="line">        Loader carLoader = factory.produce(<span class="string">"car"</span>);</div><div class="line">        Loader truckLoader = factory.produce(<span class="string">"truck"</span>);</div><div class="line">        carLoader.load();</div><div class="line">        truckLoader.load();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>5、输出：<br>load person<br>load goods</p><h4 id="多个工厂方法模式"><a href="#多个工厂方法模式" class="headerlink" title="多个工厂方法模式"></a>多个工厂方法模式</h4><p>这是对普通工厂方法模式的改进，在普通工厂方法模式中，如果传递的字符串出错，则不能正确创建对象，而多个工厂方法模式是提供多个工厂方法，分别创建对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 工厂类，以多个方法代替字符串参数判定</div><div class="line"> */</div><div class="line">public class LoaderFactory &#123;</div><div class="line">    public Loader <span class="function"><span class="title">produceCar</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new Car();</div><div class="line">    &#125;</div><div class="line">    public Loader <span class="function"><span class="title">produceTruck</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new Truck();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">public class FactoryTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        LoaderFactory factory = new LoaderFactory();</div><div class="line">        Loader carLoader = factory.produceCar();</div><div class="line">        Loader truckLoader = factory.produceTruck();</div><div class="line">        carLoader.load();</div><div class="line">        truckLoader.load();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>load person<br>load goods</p><h4 id="静态工厂方法模式——建议使用"><a href="#静态工厂方法模式——建议使用" class="headerlink" title="静态工厂方法模式——建议使用"></a>静态工厂方法模式——建议使用</h4><p>将上面的多个工厂方法模式里的方法置为静态的，不需要创建实例，直接调用即可。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 工厂类，静态方法，禁止实例化工厂对象</div><div class="line"> */</div><div class="line">public class LoaderFactory &#123;</div><div class="line">    private <span class="function"><span class="title">LoaderFactory</span></span>() &#123;&#125;  // 禁止实例化</div><div class="line">    public static Loader <span class="function"><span class="title">produceCar</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new Car();</div><div class="line">    &#125;</div><div class="line">    public static Loader <span class="function"><span class="title">produceTruck</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new Truck();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>测试<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class FactoryTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        LoaderFactory.produceCar().load();</div><div class="line">        LoaderFactory.produceTruck().load();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>输出：<br>load person<br>load goods</p><blockquote><p>总体来说，工厂模式适合：凡是出现了大量的产品需要创建，并且具有共同的接口时，可以通过工厂方法模式进行创建。在以上的三种模式中，第一种如果传入的字符串有误，不能正确创建对象，第三种相对于第二种，不需要实例化工厂类，所以，大多数情况下，我们会选用第三种——静态工厂方法模式。</p></blockquote><h2 id="二、抽象工厂模式"><a href="#二、抽象工厂模式" class="headerlink" title="二、抽象工厂模式"></a>二、抽象工厂模式</h2><p>工厂方法模式有一个问题就是，类的创建依赖工厂类，也就是说，如果想要拓展程序，必须对工厂类进行修改，这违背了闭包原则，所以，从设计角度考虑，有一定的问题，如何解决？就用到抽象工厂模式，创建多个工厂类，这样一旦需要增加新的功能，直接增加新的工厂类就可以了，不需要修改之前的代码。可以模拟一个场景：生活中需要载货机器（Loader），陆地载货的有火车（Train），水上载货的有货轮（Ship）,而这些可以由专门的工厂（实现Provider的工厂类：TrainLoaderFactory、ShipLoaderFactory）生产（produce）不同的装载器。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">1、载货接口和工厂接口</div><div class="line">/**</div><div class="line"> * 载货接口：火车、货轮、飞机实现此接口才能载货</div><div class="line"> */</div><div class="line">public interface Loader &#123;</div><div class="line">    public void loading();</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 工厂接口：所有的工厂必须能生产载货机器，生产具体的机器由子类实现</div><div class="line"> */</div><div class="line">public interface Provider &#123;</div><div class="line">    public Loader producing();</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>2、载货的机器：火车、货轮<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 火车载货</div><div class="line"> */</div><div class="line">public class TrainLoader implements Loader &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">loading</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"This train conveys goods."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 货轮载货</div><div class="line"> */</div><div class="line">public class ShipLoader implements Loader &#123;</div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">loading</span></span>() &#123;</div><div class="line">        System.out.println(<span class="string">"This Ship conveys goods."</span>);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>3、专门生产不同方式载货机器的工厂<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 专门生产陆地载货的火车制造工厂</div><div class="line"> */</div><div class="line">public class TrainLoaderFactory implements Provider &#123;</div><div class="line">    @Override</div><div class="line">    public Loader <span class="function"><span class="title">producing</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new TrainLoader();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">/**</div><div class="line"> * 专门生产水上载货的货轮制造工厂</div><div class="line"> */</div><div class="line">public class ShipLoaderFactory implements Provider &#123;</div><div class="line">    @Override</div><div class="line">    public Loader <span class="function"><span class="title">producing</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> new ShipLoader();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>4、测试及输出<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">public class FactoryTest &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        new TrainLoaderFactory().producing().loading();</div><div class="line">        new ShipLoaderFactory().producing().loading();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>This train conveys goods.<br>This Ship conveys goods.</p><blockquote><p>其实这个模式的好处就是，如果你现在想增加一个功能：空中载货，则只需做一个实现类（PlaneLoader），实现Loader接口，同时做一个工厂类（PlaneLoaderFactory），实现Provider接口，就OK了，无需去改动现成的代码。这样做，拓展性较好！</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>DESIGN PATTERN | List</title>
      <link href="/2017/01/01/PATTERN/Design%20pattern/"/>
      <url>/2017/01/01/PATTERN/Design%20pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="JAVA设计模式目录（23种）"><a href="#JAVA设计模式目录（23种）" class="headerlink" title="JAVA设计模式目录（23种）"></a>JAVA设计模式目录（23种）</h3><p>创建型模式：<a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern%20工厂设计模式/" target="_blank" rel="external">工厂方法模式</a>、<a href="https://xianxiaotao.github.io/2017/01/01/Design%20pattern%20工厂设计模式/" target="_blank" rel="external">抽象工厂模式</a>、<a href="https://xianxiaotao.github.io/2017/01/03/Design%20pattern%20单例设计模式/" target="_blank" rel="external">单例模式</a>、<a href="https://xianxiaotao.github.io/2017/01/04/Design%20pattern%20建造者设计模式/" target="_blank" rel="external">建造者模式</a>、<a href="https://xianxiaotao.github.io/2017/01/05/Design%20pattern%20原型设计模式/" target="_blank" rel="external">原型模式</a>。<br>结构型模式：<a href="https://xianxiaotao.github.io/2017/01/06/Design%20pattern%20工厂设计模式/" target="_blank" rel="external">适配器模式</a>、<a href="https://xianxiaotao.github.io/2017/01/07/Design%20pattern%20工厂设计模式/" target="_blank" rel="external">装饰器模式</a>、<a href="https://xianxiaotao.github.io/2017/01/08/Design%20pattern%20代理设计模式/" target="_blank" rel="external">代理模式</a>、<a href="https://xianxiaotao.github.io/2017/01/09/Design%20pattern%20外观设计模式/" target="_blank" rel="external">外观模式</a>、<a href="https://xianxiaotao.github.io/2017/01/10/Design%20pattern%20桥接设计模式/" target="_blank" rel="external">桥接模式</a>、<a href="https://xianxiaotao.github.io/2017/01/11/Design%20pattern%20组合设计模式/" target="_blank" rel="external">组合模式</a>、<a href="https://xianxiaotao.github.io/2017/01/12/Design%20pattern%20享元设计模式/" target="_blank" rel="external">享元模式</a>。<br>行为型模式：<a href="https://xianxiaotao.github.io/2017/01/13/Design%20pattern%20策略设计模式/" target="_blank" rel="external">策略模式</a>、<a href="https://xianxiaotao.github.io/2017/01/14/Design%20pattern%20模板方法设计模式/" target="_blank" rel="external">模板方法模式</a>、<a href="https://xianxiaotao.github.io/2017/01/15/Design%20pattern%20观察者设计模式/" target="_blank" rel="external">观察者模式</a>、<a href="https://xianxiaotao.github.io/2017/01/16/Design%20pattern%20迭代子设计模式/" target="_blank" rel="external">迭代器模式</a>、<a href="https://xianxiaotao.github.io/2017/01/17/Design%20pattern%20责任链设计模式/" target="_blank" rel="external">责任链模式</a>、<a href="https://xianxiaotao.github.io/2017/01/18/Design%20pattern%20命令设计模式/" target="_blank" rel="external">命令模式</a>、<a href="https://xianxiaotao.github.io/2017/01/19/Design%20pattern%20备忘录设计模式/" target="_blank" rel="external">备忘录模式</a>、<a href="https://xianxiaotao.github.io/2017/01/19/Design%20pattern%20状态设计模式/" target="_blank" rel="external">状态模式</a>、<a href="https://xianxiaotao.github.io/2017/01/20/Design%20pattern%20访问者设计模式/" target="_blank" rel="external">访问者模式</a>、<a href="https://xianxiaotao.github.io/2017/01/21/Design%20pattern%20中介者设计模式/" target="_blank" rel="external">中介者模式</a>、<a href="https://xianxiaotao.github.io/2017/01/23/Design%20pattern%20解释器设计模式/" target="_blank" rel="external">解释器模式</a>。</p><p><a href="http://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="external">参考链接一</a><br><a href="http://www.cnblogs.com/maowang1991/archive/2013/04/15/3023236.html" target="_blank" rel="external">参考链接二</a></p>]]></content>
      
      
      <categories>
          
          <category> DESIGN PATTERN </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DESIGN PATTERN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID | 工具类</title>
      <link href="/2016/10/24/ANDROID/ANDROID%20%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2016/10/24/ANDROID/ANDROID%20%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<p>常用工具类：</p><ul><li>L.java 日志</li></ul><h3 id="一、日志工具类-L-java"><a href="#一、日志工具类-L-java" class="headerlink" title="一、日志工具类(L.java)"></a>一、日志工具类(L.java)</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div></pre></td><td class="code"><pre><div class="line">package com.xxt.util;</div><div class="line"></div><div class="line">import android.util.Log;</div><div class="line"></div><div class="line">/**</div><div class="line"> * Log统一管理类</div><div class="line"> *     isDebug  控制是否输出日志</div><div class="line"> *     level  控制输出日志等级</div><div class="line"> *     LV: VERBOSE</div><div class="line"> *     LD: DEBUG</div><div class="line"> *     LI: INFO</div><div class="line"> *     LW: WARN</div><div class="line"> *     LE: ERROR</div><div class="line"> *</div><div class="line"> * Created by xianxiaotao on 17/3/2.</div><div class="line"> */</div><div class="line">public class L &#123;</div><div class="line"></div><div class="line">    private static final String TAG = <span class="string">"LOG"</span>;</div><div class="line"></div><div class="line">    // 输出日志等级</div><div class="line">    public static final int LV = 1;</div><div class="line">    public static final int LD = 2;</div><div class="line">    public static final int LI = 3;</div><div class="line">    public static final int LW = 4;</div><div class="line">    public static final int LE = 5;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 输出日志总开关，可以在Application的onCreate方法中初始化</div><div class="line">     */</div><div class="line">    public static boolean isDebug = <span class="literal">true</span>;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 输出日志等级，值为LV，则输出所有日志，值为LE，则只输出Error日志</div><div class="line">     */</div><div class="line">    public static int level = LV;</div><div class="line"></div><div class="line">    private <span class="function"><span class="title">L</span></span>() &#123;&#125;  /* cannot be instantiated */</div><div class="line"></div><div class="line">    public static void v(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LV)</div><div class="line">            Log.v(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void d(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LD)</div><div class="line">            Log.d(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void i(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LI)</div><div class="line">            Log.i(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void w(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LW)</div><div class="line">            Log.w(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void e(String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LE)</div><div class="line">            Log.e(TAG, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void v(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LV)</div><div class="line">            Log.v(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void d(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LD)</div><div class="line">            Log.d(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void i(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LI)</div><div class="line">            Log.i(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void w(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LW)</div><div class="line">            Log.w(tag, msg);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void e(String tag, String msg) &#123;</div><div class="line">        <span class="keyword">if</span> (isDebug &amp;&amp; level &lt;= LE)</div><div class="line">            Log.e(tag, msg);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
            <tag> util </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ANDROID | 动态权限</title>
      <link href="/2016/10/23/ANDROID/ANDROID%206.0%20%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/"/>
      <url>/2016/10/23/ANDROID/ANDROID%206.0%20%E5%8A%A8%E6%80%81%E6%9D%83%E9%99%90/</url>
      
        <content type="html"><![CDATA[<p>在Android6.0及以上版本中，即使在AndroidManifest.xml文件里配置了如下权限：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;uses-permission android:name=<span class="string">"android.permission.CALL_PHONE"</span>/&gt;</div></pre></td></tr></table></figure></p><p>运行时会也会报错：<br>java.lang.SecurityException: Permission Denial: starting Intent { act=android.intent.action.CALL dat=tel:xxxxxx cmp=com.android.server.telecom/.components.UserCallActivity } from ProcessRecord{ece7708 3894:com.test.xianxiaotao.test/u0a79} (pid=3894, uid=10079) with revoked permission android.permission.CALL_PHONE</p><p>这是因为Android6.0及以上版本增添了<a href="https://developer.android.com/training/permissions/requesting.html" target="_blank" rel="external">动态权限</a>。在哪个页面需要这个权限只需要直接去请求就行了，而且还有了相应的监听的方法供你来判断。具体使用参考如下代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div></pre></td><td class="code"><pre><div class="line">public class MainActivity extends AppCompatActivity &#123;</div><div class="line"></div><div class="line">    private EditText editText;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    protected void onCreate(Bundle savedInstanceState) &#123;</div><div class="line">        super.onCreate(savedInstanceState);</div><div class="line">        <span class="built_in">set</span>ContentView(R.layout.activity_main);</div><div class="line"></div><div class="line">        // 动态请求权限</div><div class="line">        ActivityCompat.requestPermissions(MainActivity.this, new String[]&#123;Manifest.permission.CALL_PHONE&#125;, 0x11);</div><div class="line">        editText = (EditText) findViewById(R.id.editText);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 拨打</div><div class="line">     * @param v 触发监听事件的view</div><div class="line">     */</div><div class="line">    public void call(View v) &#123;</div><div class="line">        String number = editText.getText().toString();</div><div class="line">        <span class="keyword">if</span> (null == number || number.length() == 0)</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        Intent intent = new Intent();</div><div class="line">        intent.setAction(Intent.ACTION_CALL);</div><div class="line">        intent.setData(Uri.parse(<span class="string">"tel://"</span> + number));</div><div class="line">        startActivity(intent);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    /**</div><div class="line">     * 监听权限是否允许</div><div class="line">     * @param requestCode</div><div class="line">     * @param permissions</div><div class="line">     * @param grantResults</div><div class="line">     */</div><div class="line">    @Override</div><div class="line">    public void onRequestPermissionsResult(int requestCode, @NonNull String[] permissions, @NonNull int[] grantResults) &#123;</div><div class="line">        super.onRequestPermissionsResult(requestCode, permissions, grantResults);</div><div class="line">        <span class="keyword">if</span> (requestCode == 0x11) &#123;</div><div class="line">            <span class="keyword">if</span> (grantResults.length &gt; 0 &amp;&amp; grantResults[0] == PackageManager.PERMISSION_GRANTED)</div><div class="line">                Log.i(<span class="string">"CMCC"</span>, <span class="string">"权限被允许"</span>);</div><div class="line">            <span class="keyword">else</span></div><div class="line">                Log.i(<span class="string">"CMCC"</span>, <span class="string">"权限被拒绝"</span>);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>运行结果：<br><img src="http://ww1.sinaimg.cn/large/adc90466ly1fd7n9a1fgpj20b605q3yu" alt=""></p><blockquote><p>使用权限的页面中弹出提示框并被允许，则以后不再弹出。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> ANDROID </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ANDROID </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | Socket如何演化成Tomcat</title>
      <link href="/2016/08/02/JAVA/Socket%E5%A6%82%E4%BD%95%E6%BC%94%E5%8C%96%E6%88%90Tomcat/"/>
      <url>/2016/08/02/JAVA/Socket%E5%A6%82%E4%BD%95%E6%BC%94%E5%8C%96%E6%88%90Tomcat/</url>
      
        <content type="html"><![CDATA[<ul><li>模拟请求表单；</li><li>简易服务器代码获取请求；</li><li>HTTP协议；</li><li>抽象封装Response和Request；</li><li>将与客户端的交互封装成Servlet；</li><li>使用分发器多线程处理各种业务；</li><li>分发器使用的上下文及全局变量；</li><li>利用反射优化代码；</li><li>在配置文件中设置路径与Servlet的对应关系；</li><li>完整源码下载链接</li></ul><h3 id="一、请求表单"><a href="#一、请求表单" class="headerlink" title="一、请求表单"></a>一、请求表单</h3><p>首先在前端模拟一个注册请求表单，代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;!DOCTYPE html&gt;</div><div class="line">&lt;html&gt;</div><div class="line">&lt;head&gt;</div><div class="line">    &lt;title&gt;注册&lt;/title&gt;</div><div class="line">    &lt;meta http-equiv=<span class="string">"content-type"</span> content=<span class="string">"text/html; charset=UTF-8"</span>/&gt;</div><div class="line">&lt;/head&gt;</div><div class="line">&lt;body&gt;</div><div class="line">    &lt;form method=<span class="string">"post"</span> action=<span class="string">"http://localhost:8888/index.html"</span>&gt;</div><div class="line">        昵称：&lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"username"</span> id=<span class="string">"username"</span>/&gt;</div><div class="line">        密码：&lt;input <span class="built_in">type</span>=<span class="string">"password"</span> name=<span class="string">"password"</span> id=<span class="string">"password"</span>/&gt;</div><div class="line">        兴趣：&lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"0"</span>/&gt;篮球</div><div class="line">             &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"1"</span>/&gt;足球</div><div class="line">             &lt;input <span class="built_in">type</span>=<span class="string">"checkbox"</span> name=<span class="string">"fav"</span> value=<span class="string">"2"</span>/&gt;冰球</div><div class="line">             &lt;input <span class="built_in">type</span>=<span class="string">"submit"</span> value=<span class="string">"注册"</span>/&gt;</div><div class="line">    &lt;/form&gt;</div><div class="line">&lt;/body&gt;</div><div class="line">&lt;/html&gt;</div></pre></td></tr></table></figure></p><blockquote><p>method是请求方式，默认为get，其数据量小，安全性不高，而post量大，安全性相对高；<br>action为请求的服务器路径；id用于前端区分唯一性；<br>name用于服务器区分唯一性，如要提交数据给后台，必须声明name；<br>此处fav的值对应多个，用于测试服务器解析参数。</p></blockquote><h3 id="二、简易服务器"><a href="#二、简易服务器" class="headerlink" title="二、简易服务器"></a>二、简易服务器</h3><p>用一个简易的服务器代码输出来自浏览器的请求信息。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div></pre></td><td class="code"><pre><div class="line">public class Server &#123;</div><div class="line">    private ServerSocket server;</div><div class="line">    private boolean isRunning = <span class="literal">true</span>;</div><div class="line">    </div><div class="line">    // 开启服务</div><div class="line">    public void <span class="function"><span class="title">start</span></span>() &#123;</div><div class="line">        try &#123;</div><div class="line">            server = new ServerSocket(8888);</div><div class="line">            <span class="keyword">while</span> (isRunning) &#123;</div><div class="line">                receive();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            stop();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 处理请求并响应</div><div class="line">    private void <span class="function"><span class="title">receive</span></span>() &#123;</div><div class="line">        try &#123;</div><div class="line">            Socket client = server.accept();</div><div class="line">            </div><div class="line">            // 以下代码临时用于接受客户端的请求信息</div><div class="line">            byte[] data = new byte[1024 * 10];</div><div class="line">            int len = client.getInputStream().read(data);</div><div class="line">            String requestInfo = new String(data, 0, len).trim();</div><div class="line">            requestInfo = URLDecoder.decode(requestInfo, <span class="string">"utf-8"</span>);</div><div class="line">            System.out.println(requestInfo);</div><div class="line">            </div><div class="line">            // 以下代码为返回信息，遵从HTTP协议</div><div class="line">            // TODO</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 关闭服务</div><div class="line">    public void <span class="function"><span class="title">stop</span></span>() &#123;</div><div class="line">        isRunning = <span class="literal">true</span>;</div><div class="line">        CloseUtil.closeServerSocket(server);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>开启上述服务器，以默认或GET方式发送表单，服务端接收到的信息是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line">GET /index.html?username=先小涛&amp;password=123456&amp;fav=0&amp;fav=2 HTTP/1.1</div><div class="line">Host: localhost:8888</div><div class="line">Accept: text/html,application/xhtml xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">Accept-Language: zh-cn</div><div class="line">Connection: keep-alive</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Version/8.0.8 Safari/600.8.9</div></pre></td></tr></table></figure></p><p>以POST方式发送表单，服务端接收到的信息是：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">POST /index.html HTTP/1.1</div><div class="line">Host: localhost:8888</div><div class="line">Content-Type: application/x-www-form-urlencoded</div><div class="line">Origin: file://</div><div class="line">Connection: keep-alive</div><div class="line">Accept: text/html,application/xhtml xml,application/xml;q=0.9,*/*;q=0.8</div><div class="line">User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10_10_5) AppleWebKit/600.8.9 (KHTML, like Gecko) Version/8.0.8 Safari/600.8.9</div><div class="line">Accept-Language: zh-cn</div><div class="line">Accept-Encoding: gzip, deflate</div><div class="line">Content-Length: 102</div><div class="line"></div><div class="line">username=先小涛&amp;password=123456&amp;fav=0&amp;fav=2</div></pre></td></tr></table></figure></p><h3 id="三、HTTP协议"><a href="#三、HTTP协议" class="headerlink" title="三、HTTP协议"></a>三、HTTP协议</h3><p>上述两段请求信息由于请求方式不同导致略有差别，而这些固定格式的信息是由遵从HTTP协议的浏览器负责生成的。服务端响应的信息也要遵从HTTP协议，否则客户端无法解析返回的数据。HTTP响应格式与请求一样，由三个部分构成，分别是：<br>1、HTTP协议版本、状态代码、描述<br>2、响应头(Response Head)<br>3、响应正文(Response Content)<br>可以用代码方式拼接响应字符串：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">// 响应正文</div><div class="line">StringBuilder responseContext = new StringBuilder();</div><div class="line">responseContext.append(<span class="string">"&lt;html&gt;&lt;title&gt;HTTP响应示例&lt;/title&gt;&lt;body&gt;I defined a tomcat&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line">// 响应全文</div><div class="line">StringBuilder response = new StringBuilder();</div><div class="line">response.append(<span class="string">"HTTP/1.1"</span>).append(<span class="string">" "</span>).append(<span class="string">"200"</span>).append(<span class="string">" "</span>).append(<span class="string">"OK"</span>);</div><div class="line">response.append(<span class="string">"Server:xianxiaotao Server/0.0.1"</span>).append(<span class="string">"\r\n"</span>);</div><div class="line">response.append(<span class="string">"Date:"</span>).append(new Date()).append(<span class="string">"\r\n"</span>);</div><div class="line">response.append(<span class="string">"Content-type:text/html;charset=utf-8"</span>).append(<span class="string">"\r\n"</span>);</div><div class="line">response.append(<span class="string">"Content-Length:"</span>).append(responseContext.toString().getBytes().length).append(<span class="string">"\r\n"</span>);</div><div class="line">response.append(<span class="string">"\r\n"</span>);</div><div class="line">response.append(responseContext);</div><div class="line">// 返回数据</div><div class="line">BufferedWriter bw = new BufferedWriter(new OutputStreamWriter(client.getOutputStream()));</div><div class="line">bw.write(response.toString());</div><div class="line">bw.flush();</div><div class="line">bw.close();</div></pre></td></tr></table></figure></p><p>HTTP协议中常用的一些信息：<br>1、状态代码：<br>200 OK<br>400 Bad Request<br>404 Not Found<br>405 Method Not Allowed<br>500 Server Error</p><p>2、内容类型：<br>超文本：Content-type:text/html;charset=GBK<br>纯文本：Content-type:text/plain;charset=GBK<br>下载流：Content-type:application/octet-stream</p><blockquote><p>响应信息都是固定格式，不必每次都要拼字符串，可抽取共性封装成Response对象。Request如是。</p></blockquote><h3 id="四、Response"><a href="#四、Response" class="headerlink" title="四、Response"></a>四、Response</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div></pre></td><td class="code"><pre><div class="line">public class Response &#123;</div><div class="line">    public static final String CRLF = <span class="string">"\r\n"</span>;   // 回车符</div><div class="line">    public static final String BLANK = <span class="string">" "</span>;     // 空格符</div><div class="line">    </div><div class="line">    private StringBuilder headInfo;             // 头信息</div><div class="line">    private StringBuilder content;              // 正文</div><div class="line">    private int len;                            // 正文长度</div><div class="line">    private BufferedWriter bw;                  // 推送信息到客户端的流</div><div class="line">    </div><div class="line">    private <span class="function"><span class="title">Response</span></span>() &#123;</div><div class="line">        headInfo = new StringBuilder();</div><div class="line">        content = new StringBuilder();</div><div class="line">        len = 0;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Response(Socket socket) &#123;</div><div class="line">        this();</div><div class="line">        try &#123;</div><div class="line">            bw = new BufferedWriter(new OutputStreamWriter(socket.getOutputStream()));</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            headInfo = null;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 构建正文</div><div class="line">    public Response <span class="built_in">print</span>(String info) &#123;</div><div class="line">        content.append(info);</div><div class="line">        len += info.getBytes().length;</div><div class="line">        <span class="built_in">return</span> this;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 构建正文+回车</div><div class="line">    public Response println(String info) &#123;</div><div class="line">        content.append(info).append(CRLF);</div><div class="line">        len += (info + CRLF).getBytes().length;</div><div class="line">        <span class="built_in">return</span> this;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 生产响应头信息</div><div class="line">    private void createHeadInfo(int code) &#123;</div><div class="line">        headInfo.append(<span class="string">"HTTP/1.1"</span>).append(BLANK).append(code).append(BLANK);</div><div class="line">        switch (code) &#123;</div><div class="line">            <span class="keyword">case</span> 200:</div><div class="line">                headInfo.append(<span class="string">"OK"</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> 404:</div><div class="line">                headInfo.append(<span class="string">"NOT FOUND"</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">            <span class="keyword">case</span> 500:</div><div class="line">                headInfo.append(<span class="string">"SERVER ERROR"</span>);</div><div class="line">                <span class="built_in">break</span>;</div><div class="line">        &#125;</div><div class="line">        headInfo.append(<span class="string">"Server:xianxiaotao Server/0.0.1"</span>).append(CRLF);</div><div class="line">        headInfo.append(<span class="string">"Date:"</span>).append(new Date()).append(CRLF);</div><div class="line">        headInfo.append(<span class="string">"Content-type:text/html;charset=utf-8"</span>).append(CRLF);</div><div class="line">        headInfo.append(<span class="string">"Content-Length:"</span>).append(len).append(CRLF);</div><div class="line">        headInfo.append(CRLF);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // 推送到客户端</div><div class="line">    public void pushToClient(int code) throws IOException &#123;</div><div class="line">        <span class="keyword">if</span> (null == headInfo) </div><div class="line">            code = 500;</div><div class="line">        <span class="keyword">else</span> &#123;</div><div class="line">            createHeadInfo(code);</div><div class="line">            bw.append(headInfo.toString());</div><div class="line">            bw.append(content.toString());</div><div class="line">            bw.flush();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void <span class="function"><span class="title">close</span></span>() &#123;</div><div class="line">        CloseUtil.closeIO(bw);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="五、Request"><a href="#五、Request" class="headerlink" title="五、Request"></a>五、Request</h3><p>主要解析请求信息中的请求方式和参数，并将结果封装成Request对象。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div></pre></td><td class="code"><pre><div class="line">public class Request &#123;</div><div class="line">    public static final String CRLF = <span class="string">"\r\n"</span>;</div><div class="line">    </div><div class="line">    private String method;          // 请求方式</div><div class="line">    private String url;             // 请求资源</div><div class="line">    private Map&lt;String, List&lt;String&gt;&gt; parameterMapValues;   // 请求参数</div><div class="line">    private BufferedInputStream bis;// 流</div><div class="line">    private String requestInfo;     // 请求信息</div><div class="line">    </div><div class="line">    private <span class="function"><span class="title">Request</span></span>() &#123;</div><div class="line">        method = <span class="string">""</span>;</div><div class="line">        url = <span class="string">""</span>;</div><div class="line">        parameterMapValues = new HashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Request(Socket client) &#123;</div><div class="line">        this();</div><div class="line">        try &#123;</div><div class="line">            this.bis = new BufferedInputStream(client.getInputStream());</div><div class="line">            byte[] buf = new byte[10240];</div><div class="line">            int len = bis.read(buf);</div><div class="line">            requestInfo = new String(buf, 0, len);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        parseRequestInfo();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 解析请求信息</div><div class="line">     */</div><div class="line">    private void <span class="function"><span class="title">parseRequestInfo</span></span>() &#123;</div><div class="line">        <span class="keyword">if</span> (null == requestInfo || requestInfo.trim().length() == 0) </div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        </div><div class="line">        String paramString = <span class="string">""</span>;    // 请求参数</div><div class="line">        String firstLine = requestInfo.substring(0, requestInfo.indexOf(CRLF));</div><div class="line">        int idx = firstLine.indexOf(<span class="string">"/"</span>);</div><div class="line">        this.method = firstLine.substring(0, idx).trim();</div><div class="line">        String urlStr = firstLine.substring(idx, firstLine.indexOf(<span class="string">"HTTP/"</span>)).trim();</div><div class="line">        <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"post"</span>)) &#123;</div><div class="line">            this.url = urlStr;</div><div class="line">            paramString = requestInfo.substring(requestInfo.lastIndexOf(CRLF)).trim();</div><div class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (method.equalsIgnoreCase(<span class="string">"get"</span>)) &#123;</div><div class="line">            <span class="keyword">if</span> (urlStr.contains(<span class="string">"?"</span>)) &#123; // 是否存在参数</div><div class="line">                String[] urlArray = urlStr.split(<span class="string">"\\?"</span>);</div><div class="line">                this.url = urlArray[0];</div><div class="line">                paramString = urlArray[1];</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                this.url = urlStr;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="keyword">if</span> (paramString.equals(<span class="string">""</span>)) </div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        parseParams(paramString);   // 解析请求参数</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 解析请求信息中的参数</div><div class="line">     * @param paramString</div><div class="line">     */</div><div class="line">    private void parseParams(String paramString) &#123;</div><div class="line">        StringTokenizer token = new StringTokenizer(paramString, <span class="string">"&amp;"</span>);</div><div class="line">        <span class="keyword">while</span> (token.hasMoreTokens()) &#123;</div><div class="line">            String str = token.nextToken();</div><div class="line">            String[] keyAndVal = str.split(<span class="string">"="</span>);</div><div class="line">            <span class="keyword">if</span> (keyAndVal.length == 1) &#123;    // 只有参数没有值</div><div class="line">                keyAndVal = Arrays.copyOf(keyAndVal, 2);</div><div class="line">                keyAndVal[1] = null;</div><div class="line">            &#125;</div><div class="line">            String key = keyAndVal[0].trim();</div><div class="line">            String val = (null == keyAndVal[1] ? null : decode(keyAndVal[1].trim(), <span class="string">"utf-8"</span>));</div><div class="line">            <span class="keyword">if</span> (!parameterMapValues.containsKey(key)) &#123;</div><div class="line">                parameterMapValues.put(key, new ArrayList&lt;&gt;());</div><div class="line">            &#125;</div><div class="line">            List&lt;String&gt; values = parameterMapValues.get(key);</div><div class="line">            values.add(val);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 解决中文问题</div><div class="line">     * @param value 需要正确显示中文的字符</div><div class="line">     * @param code 字符集（gbk、utf-8等）</div><div class="line">     * @<span class="built_in">return</span> String 如异常则返回null</div><div class="line">     */</div><div class="line">    private String decode(String value, String code) &#123;</div><div class="line">        try &#123;</div><div class="line">            <span class="built_in">return</span> URLDecoder.decode(value, code);</div><div class="line">        &#125; catch (UnsupportedEncodingException e) &#123;&#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取网页对应name的多个值</div><div class="line">     * @param name</div><div class="line">     * @<span class="built_in">return</span> String[] 一个name有多个值</div><div class="line">     */</div><div class="line">    public String[] getParameterValues(String name) &#123;</div><div class="line">        List&lt;String&gt; values = parameterMapValues.get(name);</div><div class="line">        <span class="keyword">if</span> (null == values)</div><div class="line">            <span class="built_in">return</span> null;</div><div class="line">        <span class="keyword">else</span></div><div class="line">            <span class="built_in">return</span> values.toArray(new String[0]);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 获取网页对应name的值</div><div class="line">     * @param name</div><div class="line">     * @<span class="built_in">return</span> String name对应的值</div><div class="line">     */</div><div class="line">    public String getParameter(String name) &#123;</div><div class="line">        String[] values = getParameterValues(name);</div><div class="line">        <span class="built_in">return</span> (null == values) ? null : values[0];</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getUrl</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> url;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Url(String url) &#123;</div><div class="line">        this.url = url;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>需要注意参数值为中文、一参多值的情况。</p></blockquote><h3 id="六、Servlet"><a href="#六、Servlet" class="headerlink" title="六、Servlet"></a>六、Servlet</h3><p>客户端与服务器端的交互形式不定，如登录、注册、查看信息等。可抽象出一个抽象类，如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">public abstract class Servlet &#123;</div><div class="line">    public void service(Request req, Response rep) throws Exception &#123;</div><div class="line">        <span class="keyword">do</span>Get(req, rep);</div><div class="line">        <span class="keyword">do</span>Post(req, rep);</div><div class="line">    &#125;</div><div class="line">    public abstract void <span class="keyword">do</span>Get(Request req, Response rep) throws Exception;</div><div class="line">    public abstract void <span class="keyword">do</span>Post(Request req, Response rep) throws Exception;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>具体的交互业务类Servlet继承抽象类，利用JAVA的多态优化其他代码。示例如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">public class RegisterServlet extends Servlet &#123;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="keyword">do</span>Get(Request req, Response rep) throws Exception &#123;</div><div class="line">        rep.println(<span class="string">"&lt;html&gt;&lt;title&gt;HTTP响应示例&lt;/title&gt;&lt;body&gt;欢迎用户"</span> + req.getParameter(<span class="string">"username"</span>) + <span class="string">"注册成功&lt;/body&gt;&lt;/html&gt;"</span>);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="keyword">do</span>Post(Request req, Response rep) throws Exception &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="七、分发器Dispatcher"><a href="#七、分发器Dispatcher" class="headerlink" title="七、分发器Dispatcher"></a>七、分发器Dispatcher</h3><p>既然交互方式不定，同一种交互方式的交互次数不定，需要借助分发器（多线程）进行优化处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 分发器，多线程（一个请求响应，创建一个此对象）</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Dispatcher implements Runnable &#123;</div><div class="line">    private Socket client;</div><div class="line">    private Request req;</div><div class="line">    private Response rep;</div><div class="line">    private int code = 200;     // 默认200</div><div class="line">    </div><div class="line">    public Dispatcher(Socket client) &#123;</div><div class="line">        this.client = client;</div><div class="line">        try &#123;</div><div class="line">            req = new Request(client.getInputStream());</div><div class="line">            rep = new Response(client.getOutputStream());</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            code = 500;</div><div class="line">            <span class="built_in">return</span>;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        try &#123;</div><div class="line">            // 根据请求参数中的url找到对应的Servlet</div><div class="line">            Servlet servlet = WebApp.getServlet(req.getUrl());  </div><div class="line">            <span class="keyword">if</span> (null == servlet)    // 找不到处理</div><div class="line">                this.code = 404;</div><div class="line">            <span class="keyword">else</span></div><div class="line">                servlet.service(req, rep);</div><div class="line">            rep.pushToClient(code);</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            this.code = 500;</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // 再推送一次</div><div class="line">        try &#123;</div><div class="line">            rep.pushToClient(code);</div><div class="line">        &#125; catch (IOException e) &#123;&#125;</div><div class="line">        </div><div class="line">        CloseUtil.closeSocket(client);</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="八、上下文ServletContext和全局变量WebApp"><a href="#八、上下文ServletContext和全局变量WebApp" class="headerlink" title="八、上下文ServletContext和全局变量WebApp"></a>八、上下文ServletContext和全局变量WebApp</h3><p>分发器需要根据请求参数中的url，从上下文中找出对应的Servlet来做相应的处理。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 上下文</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class ServletContext &#123;</div><div class="line">    private Map&lt;String, String&gt; mapping;    // url(/register) ——&gt; 别名(register)</div><div class="line">    private Map&lt;String, Servlet&gt; servlet;   // 别名(register) ——&gt; 对应的Servlet(RegisterServlet)，后期使用反射其全类名获取对象</div><div class="line">    </div><div class="line">    public <span class="function"><span class="title">ServletContext</span></span>() &#123;</div><div class="line">        mapping = new HashMap&lt;&gt;();</div><div class="line">        servlet = new HashMap&lt;&gt;();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Map&lt;String, String&gt; <span class="function"><span class="title">getMapping</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mapping;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Mapping(Map&lt;String, String&gt; mapping) &#123;</div><div class="line">        this.mapping = mapping;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public Map&lt;String, Servlet&gt; <span class="function"><span class="title">getServlet</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> servlet;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Servlet(Map&lt;String, Servlet&gt; servlet) &#123;</div><div class="line">        this.servlet = servlet;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>创建WebApp，保存全局变量（上下文），以及对应的操作（解析、获取）<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div></pre></td><td class="code"><pre><div class="line">public class WebApp &#123;</div><div class="line">    private static ServletContext context;</div><div class="line">    </div><div class="line">    // 初始化请求资源路径与Servlet的对应关系，临时代码，后期解析配置文件获取对应关系</div><div class="line">    static &#123;</div><div class="line">        context = new ServletContext();</div><div class="line">        Map&lt;String, String&gt; mapping = context.getMapping();</div><div class="line">        mapping.put(<span class="string">"/reg"</span>, <span class="string">"register"</span>);</div><div class="line">        mapping.put(<span class="string">"/register"</span>, <span class="string">"register"</span>);</div><div class="line">        Map&lt;String, Servlet&gt; servlet = context.getServlet();</div><div class="line">        servlet.put(<span class="string">"register"</span>, new RegisterServlet());</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * 根据url获取对应的Servlet</div><div class="line">     * @param url 表单Action中的值</div><div class="line">     * @<span class="built_in">return</span> Servlet</div><div class="line">     */</div><div class="line">    public static Servlet getServlet(String url) &#123;</div><div class="line">        <span class="keyword">if</span> (null == url || url.trim().length() == 0)</div><div class="line">            <span class="built_in">return</span> null;</div><div class="line">        <span class="built_in">return</span> context.getServlet().get(context.getMapping().get(url));</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>如果将上下文中存放的Servlet对象，改成存放对象全类名字符串。需要对象时，利用JAVA中的反射技术创建对象，这将极大优化内存。</p></blockquote><h3 id="九、反射"><a href="#九、反射" class="headerlink" title="九、反射"></a>九、反射</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">Map&lt;String, String &gt; servlet = context.getServlet();</div><div class="line">servlet.put(<span class="string">"register"</span>, <span class="string">"com.xian.blog.xtomcat.RegisterServlet"</span>);</div><div class="line"></div><div class="line">public static Servlet getServlet(String url) throws InstantiationException, IllegalAccessException, ClassNotFoundException &#123;</div><div class="line">    <span class="keyword">if</span> (null == url || url.trim().length() == 0)</div><div class="line">        <span class="built_in">return</span> null;</div><div class="line">    String servletName = context.getServlet().get(context.getMapping().get(url));</div><div class="line">    <span class="built_in">return</span> (Servlet)Class.forName(servletName).newInstance();</div><div class="line">&#125;</div></pre></td></tr></table></figure><h3 id="十、Xml配置文件"><a href="#十、Xml配置文件" class="headerlink" title="十、Xml配置文件"></a>十、Xml配置文件</h3><p>将请求资源路径与Servlet的对应关系写死在程序中，不便于代码维护扩展。最好的方式将其配置的xml文件中，程序负责解析而不用经常修改代码。配置文件格式如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;?xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span> ?&gt;</div><div class="line">&lt;web-app&gt;</div><div class="line">    &lt;servlet&gt;</div><div class="line">        &lt;servlet-name&gt;register&lt;/servlet-name&gt;</div><div class="line">        &lt;servlet-class&gt;com.xian.blog.xtomcat.RegisterServlet&lt;/servlet-class&gt;</div><div class="line">    &lt;/servlet&gt;</div><div class="line">    &lt;servlet-mapping&gt;</div><div class="line">        &lt;servlet-name&gt;register&lt;/servlet-name&gt;</div><div class="line">        &lt;url-pattern&gt;/reg&lt;/url-pattern&gt;</div><div class="line">        &lt;url-pattern&gt;/register&lt;/url-pattern&gt;</div><div class="line">    &lt;/servlet-mapping&gt;</div><div class="line">&lt;/web-app&gt;</div></pre></td></tr></table></figure></p><p>从文件中抽象出2个对象<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 存放配置信息：</div><div class="line"> * &lt;servlet&gt;</div><div class="line"> *      &lt;servlet-name&gt;register&lt;/servlet-name&gt;</div><div class="line"> *      &lt;servlet-class&gt;com.xian.blog.xtomcat.RegisterServlet&lt;/servlet-class&gt;</div><div class="line"> * &lt;/servlet&gt;</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Entity &#123;</div><div class="line">    private String name;</div><div class="line">    private String clzz;</div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> name;</div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    public String <span class="function"><span class="title">getClzz</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> clzz;</div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>Clzz(String clzz) &#123;</div><div class="line">        this.clzz = clzz;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">/**</div><div class="line"> * 存放配置信息：</div><div class="line"> * &lt;servlet-mapping&gt;</div><div class="line"> *      &lt;servlet-name&gt;register&lt;/servlet-name&gt;</div><div class="line"> *      &lt;url-pattern&gt;/reg&lt;/url-pattern&gt;</div><div class="line"> *      &lt;url-pattern&gt;/register&lt;/url-pattern&gt;</div><div class="line"> * &lt;/servlet-mapping&gt;</div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Mapping &#123;</div><div class="line">    private String name;</div><div class="line">    private List&lt;String&gt; urlPattern;</div><div class="line">    public <span class="function"><span class="title">Mapping</span></span>() &#123;</div><div class="line">        urlPattern = new ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> name;</div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>Name(String name) &#123;</div><div class="line">        this.name = name;</div><div class="line">    &#125;</div><div class="line">    public List&lt;String&gt; <span class="function"><span class="title">getUrlPattern</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> urlPattern;</div><div class="line">    &#125;</div><div class="line">    public void <span class="built_in">set</span>UrlPattern(List&lt;String&gt; urlPattern) &#123;</div><div class="line">        this.urlPattern = urlPattern;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>具体子类实现DefaultHandler中的方法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div></pre></td><td class="code"><pre><div class="line">public class WebHandler extends DefaultHandler &#123;</div><div class="line">    private List&lt;Entity&gt; entityList;</div><div class="line">    private List&lt;Mapping&gt; mappingList;</div><div class="line">    private Entity entity;</div><div class="line">    private Mapping mapping;</div><div class="line">    private String beginTag;</div><div class="line">    private boolean isMapping;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void startDocument() throws SAXException &#123;</div><div class="line">        // 文档解析开始</div><div class="line">        entityList = new ArrayList&lt;&gt;();</div><div class="line">        mappingList = new ArrayList&lt;&gt;();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void startElement(String uri, String <span class="built_in">local</span>Name, String qName, Attributes attributes) throws SAXException &#123;</div><div class="line">        // 开始元素</div><div class="line">        <span class="keyword">if</span> (null != qName) &#123;</div><div class="line">            beginTag = qName;</div><div class="line">            <span class="keyword">if</span> (qName.equals(<span class="string">"servlet"</span>)) &#123;</div><div class="line">                isMapping = <span class="literal">false</span>;</div><div class="line">                entity = new Entity();</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equals(<span class="string">"servlet-mapping"</span>)) &#123;</div><div class="line">                isMapping = <span class="literal">true</span>;</div><div class="line">                mapping = new Mapping();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void characters(char[] ch, int start, int length) throws SAXException &#123;</div><div class="line">        // 处理元素</div><div class="line">        <span class="keyword">if</span> (null != beginTag) &#123;</div><div class="line">            String str = new String(ch, start, length);</div><div class="line">            <span class="keyword">if</span> (isMapping) &#123;</div><div class="line">                <span class="keyword">if</span> (beginTag.equals(<span class="string">"servlet-name"</span>)) &#123;</div><div class="line">                    mapping.setName(str);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beginTag.equals(<span class="string">"url-pattern"</span>)) &#123;</div><div class="line">                    mapping.getUrlPattern().add(str);</div><div class="line">                &#125;</div><div class="line">            &#125; <span class="keyword">else</span> &#123;</div><div class="line">                <span class="keyword">if</span> (beginTag.equals(<span class="string">"servlet-name"</span>)) &#123;</div><div class="line">                    entity.setName(str);</div><div class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span> (beginTag.equals(<span class="string">"servlet-class"</span>)) &#123;</div><div class="line">                    entity.setClzz(str);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    @Override</div><div class="line">    public void endElement(String uri, String <span class="built_in">local</span>Name, String qName) throws SAXException &#123;</div><div class="line">        // 结束元素</div><div class="line">        <span class="keyword">if</span> (null != qName) &#123;</div><div class="line">            <span class="keyword">if</span> (qName.equals(<span class="string">"servlet"</span>)) &#123;</div><div class="line">                entityList.add(entity);</div><div class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (qName.equals(<span class="string">"servlet-mapping"</span>)) &#123;</div><div class="line">                mappingList.add(mapping);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        beginTag = null;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public void endDocument() throws SAXException &#123;</div><div class="line">        // 文档解析结束</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Entity&gt; <span class="function"><span class="title">getEntityList</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> entityList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>EntityList(List&lt;Entity&gt; entityList) &#123;</div><div class="line">        this.entityList = entityList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public List&lt;Mapping&gt; <span class="function"><span class="title">getMappingList</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> mappingList;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>MappingList(List&lt;Mapping&gt; mappingList) &#123;</div><div class="line">        this.mappingList = mappingList;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>解析配置文件代码如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line">// 初始化请求资源路径与Servlet的对应关系，临时代码，后期解析配置文件获取对应关系</div><div class="line">static &#123;</div><div class="line">    try &#123;</div><div class="line">        SAXParserFactory factory = SAXParserFactory.newInstance();  // 获取解析工厂</div><div class="line">        SAXParser parser = factory.newSAXParser();</div><div class="line">        WebHandler handler = new WebHandler();</div><div class="line">        parser.parse(Thread.currentThread().getContextClassLoader().getResourceAsStream(<span class="string">"com/xian/blog/xtomcat/web.xml"</span>), handler);</div><div class="line">        </div><div class="line">        context = new ServletContext();</div><div class="line">        Map&lt;String, String &gt; servlet = context.getServlet();</div><div class="line">        <span class="keyword">for</span> (Entity entity : handler.getEntityList())</div><div class="line">            servlet.put(entity.getName(), entity.getClzz());</div><div class="line">        </div><div class="line">        Map&lt;String, String&gt; mapping = context.getMapping();</div><div class="line">        <span class="keyword">for</span> (Mapping mapp : handler.getMappingList()) &#123;</div><div class="line">            List&lt;String&gt; urlPatterns = mapp.getUrlPattern();</div><div class="line">            <span class="keyword">for</span> (String url : urlPatterns) &#123;</div><div class="line">                mapping.put(url, mapp.getName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125; catch (Exception e) &#123;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><h3 id="十一、完整代码下载链接"><a href="#十一、完整代码下载链接" class="headerlink" title="十一、完整代码下载链接"></a>十一、完整代码下载链接</h3><p><a href="https://pan.baidu.com/s/1bo3Dd0r" target="_blank" rel="external">https://pan.baidu.com/s/1bo3Dd0r</a></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | 聊天室原理</title>
      <link href="/2016/07/17/JAVA/JAVA%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%8E%9F%E7%90%86/"/>
      <url>/2016/07/17/JAVA/JAVA%E8%81%8A%E5%A4%A9%E5%AE%A4%E5%8E%9F%E7%90%86/</url>
      
        <content type="html"><![CDATA[<p>JAVA为基于TCP协议开发提供了相关API，具体代码如下。<br>客户端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">Socket client = new Socket(<span class="string">"localhost"</span>, 9876);// 创建客户端，并指定服务器端地址和端口</div><div class="line">DataOutputStream dos = new DataOutputStream(client.getOutputStream());</div><div class="line">dos.writeUTF(<span class="string">"客户端向服务器端发送数据"</span>);           // 客户端向服务器发送数据</div><div class="line"></div><div class="line">DataInputStream dis = new DataInputStream(client.getInputStream());</div><div class="line">String msg = dis.readUTF();                     // 客户端接受服务器端返回的数据</div><div class="line">System.out.println(msg);</div><div class="line">client.close();</div></pre></td></tr></table></figure></p><p>服务端：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">ServerSocket server = new ServerSocket(9876);   // 创建服务器并指定端口</div><div class="line">Socket socket = server.accept();                // 接受客户端连接（阻塞式）</div><div class="line"></div><div class="line">DataInputStream dis = new DataInputStream(socket.getInputStream());</div><div class="line">String msg = dis.readUTF();                     // 读取客户端请求数据</div><div class="line"></div><div class="line">DataOutputStream dos = new DataOutputStream(socket.getOutputStream());</div><div class="line">dos.writeUTF(<span class="string">"服务器接受的数据："</span> + msg);          // 服务器端返回客户端数据</div><div class="line">dos.flush();</div><div class="line">server.close();</div></pre></td></tr></table></figure></p><blockquote><p>上述代码中，只建立一次请求，为实现双方多次交互，则需要加入循环处理；而且客户端发送数据和接受数据都在一个线程中，意味着客户端不发送数据就接受不了服务端返回的数据，因此他们需要在不同的线程中处理各自的业务。服务器端同理。</p></blockquote><h3 id="客户端实现多线程"><a href="#客户端实现多线程" class="headerlink" title="客户端实现多线程"></a>客户端实现多线程</h3><p>发送数据线程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div></pre></td><td class="code"><pre><div class="line">public class Send implements Runnable &#123;</div><div class="line">    private BufferedReader console;     // 测试时使用控制台输入信息</div><div class="line">    private DataOutputStream dos;       // 输出流（发送数据）</div><div class="line">    private boolean isRunning = <span class="literal">true</span>;   // 控制线程运行</div><div class="line">    </div><div class="line">    public Send(Socket client) &#123;</div><div class="line">        console = new BufferedReader(new InputStreamReader(System.in));</div><div class="line">        try &#123;</div><div class="line">            dos = new DataOutputStream(client.getOutputStream());</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            end();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private String <span class="function"><span class="title">getMsgFromConsole</span></span>() &#123;</div><div class="line">        try &#123; <span class="built_in">return</span> console.readLine(); &#125; catch (IOException e) &#123;&#125;</div><div class="line">        <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void <span class="function"><span class="title">end</span></span>() &#123;    // 出现异常则结束线程</div><div class="line">        isRunning = <span class="literal">false</span>; </div><div class="line">        CloseUtil.closeIO(console, dos);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private void <span class="function"><span class="title">send</span></span>() &#123;   // 发送数据</div><div class="line">        String msg = getMsgFromConsole();</div><div class="line">        try &#123;</div><div class="line">            <span class="keyword">if</span> (null != msg &amp;&amp; msg.length() &gt; 0)</div><div class="line">                dos.writeUTF(msg);</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">        end();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;     // 线程体</div><div class="line">        <span class="keyword">while</span> (isRunning)</div><div class="line">            send();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>接受数据线程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div></pre></td><td class="code"><pre><div class="line">public class Receive implements Runnable &#123;</div><div class="line">    private DataInputStream dis;      // 输入流（接受数据）</div><div class="line">    private boolean isRunning = <span class="literal">true</span>; // 控制线程运行</div><div class="line"></div><div class="line">    public Receive (Socket client) &#123;</div><div class="line">        try &#123;</div><div class="line">            dis = new DataInputStream(client.getInputStream());</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            end();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private void <span class="function"><span class="title">end</span></span>() &#123;              // 出现异常则结束线程</div><div class="line">        isRunning = <span class="literal">false</span>; </div><div class="line">        CloseUtil.closeIO(dis);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private String <span class="function"><span class="title">receive</span></span>() &#123;        // 接受数据</div><div class="line">        String msg = <span class="string">""</span>;</div><div class="line">        try &#123;</div><div class="line">            msg = dis.readUTF();</div><div class="line">        &#125; catch (IOException e) &#123;</div><div class="line">            end();</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> msg;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">        <span class="keyword">while</span> (isRunning) </div><div class="line">            System.out.println(receive());</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>客户端只需开启Send、Receive两个线程：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Socket client = new Socket(<span class="string">"localhost"</span>, 9876); // 创建客户端，并指定服务器端地址和端口</div><div class="line">new Thread(new Send(client)).start();</div><div class="line">new Thread(new Receive(client)).start();</div></pre></td></tr></table></figure></p><h3 id="服务端实现群聊"><a href="#服务端实现群聊" class="headerlink" title="服务端实现群聊"></a>服务端实现群聊</h3><p>群聊，将服务端作为中转站，转发所有客户消息给其他客户（不需转给自己）。因此，服务端需要管理所有的连接通道，每个通道封装数据信息以及对应的操作。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div></pre></td><td class="code"><pre><div class="line">public class Server &#123;</div><div class="line">    // 保存连接通道</div><div class="line">    private List&lt;ChatChannel&gt; channels = new ArrayList&lt;&gt;();</div><div class="line"></div><div class="line">    // 启动服务</div><div class="line">    public void start() throws IOException &#123;</div><div class="line">        @SuppressWarnings(<span class="string">"resource"</span>)</div><div class="line">        ServerSocket server = new ServerSocket(9876);</div><div class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</div><div class="line">            Socket client = server.accept();</div><div class="line">            ChatChannel channel = new ChatChannel(client);</div><div class="line">            channels.add(channel);</div><div class="line">            new Thread(channel).start();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    // 连接通道类</div><div class="line">    private class ChatChannel implements Runnable &#123;</div><div class="line">        private DataInputStream dis;</div><div class="line">        private DataOutputStream dos;</div><div class="line">        private boolean isRunning = <span class="literal">true</span>;</div><div class="line"></div><div class="line">        public ChatChannel(Socket socket) &#123;</div><div class="line">            try &#123;</div><div class="line">                dis = new DataInputStream(socket.getInputStream());</div><div class="line">                dos = new DataOutputStream(socket.getOutputStream());</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                end();</div><div class="line">            &#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">        private String <span class="function"><span class="title">receive</span></span>() &#123;</div><div class="line">            String msg = <span class="string">""</span>;</div><div class="line">            try &#123;</div><div class="line">                msg = dis.readUTF();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                end();</div><div class="line">            &#125;</div><div class="line">            <span class="built_in">return</span> msg;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private void send(String msg) &#123;</div><div class="line">            <span class="keyword">if</span> (null == msg || msg.length() == 0)</div><div class="line">                <span class="built_in">return</span>;</div><div class="line">            try &#123;</div><div class="line">                dos.writeUTF(msg);</div><div class="line">                dos.flush();</div><div class="line">            &#125; catch (IOException e) &#123;</div><div class="line">                end();</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        private void <span class="function"><span class="title">end</span></span>() &#123;</div><div class="line">            CloseUtil.closeIO(dis, dos);</div><div class="line">            isRunning = <span class="literal">false</span>;</div><div class="line">            channels.remove(this);</div><div class="line">        &#125;</div><div class="line"></div><div class="line">        @Override</div><div class="line">        public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">            <span class="keyword">while</span> (isRunning) &#123;</div><div class="line">                String msg = receive();</div><div class="line">                <span class="keyword">for</span> (ChatChannel other : channels) &#123;</div><div class="line">                    <span class="keyword">if</span> (other == this)</div><div class="line">                        <span class="built_in">continue</span>;</div><div class="line">                    other.send(msg);</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>开启服务<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">new Server().start();</div></pre></td></tr></table></figure></p><h3 id="私聊"><a href="#私聊" class="headerlink" title="私聊"></a>私聊</h3><p>要找到对应的用户进行私聊，需要对每个客户端进行唯一性标示，即创建客户端的时候指定用户名/ID并发送给服务端，服务端在创建对应的ChatChannel时，保存获取到的用户名/ID信息。而私聊的代码实现就是将信息转发到指定的ChatChannel连接通道中。</p><blockquote><p>按照面向对象编程的思想，用户信息、消息本体都要封装成一个个的对象。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | 多线程断点下载</title>
      <link href="/2016/07/13/JAVA/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%AD%E7%82%B9%E4%B8%8B%E8%BD%BD/"/>
      <url>/2016/07/13/JAVA/JAVA%E5%A4%9A%E7%BA%BF%E7%A8%8B%E6%96%AD%E7%82%B9%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<p>基本原理：利用URLConnection获取要下载文件的长度、头部等相关信息，并设置响应的头部信息。并且通过URLConnection获取输入流，将文件分成指定的块，每一块单独开辟一个线程完成数据的读取、写入。通过输入流读取下载文件的信息，然后将读取的信息用RandomAccessFile随机写入到本地文件中。同时，每个线程写入的数据都文件指针也就是写入数据的长度，需要保存在一个临时文件中。这样当本次下载没有完成的时候，下次下载的时候就从这个文件中读取上一次下载的文件长度，然后继续接着上一次的位置开始下载。并且将本次下载的长度写入到这个文件中。</p><h3 id="最简单的下载代码："><a href="#最简单的下载代码：" class="headerlink" title="最简单的下载代码："></a>最简单的下载代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">package com.xian.blog;</div><div class="line"></div><div class="line">import java.io.BufferedInputStream;</div><div class="line">import java.io.BufferedOutputStream;</div><div class="line">import java.io.FileOutputStream;</div><div class="line">import java.net.HttpURLConnection;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">public class SimpleDownload &#123;</div><div class="line">    public static void main(String[] args) &#123;</div><div class="line">        try &#123;</div><div class="line">            URL url = new URL(<span class="string">"http://ww1.sinaimg.cn/large/adc90466gy1fcptk0wnt2j20e90ifmz4"</span>);</div><div class="line">            HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">            conn.setConnectTimeout(3000);</div><div class="line">            int code = conn.getResponseCode();</div><div class="line"></div><div class="line">            <span class="keyword">if</span> (200 == code) &#123;</div><div class="line">                BufferedInputStream <span class="keyword">in</span> = new BufferedInputStream(conn.getInputStream());</div><div class="line">                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(<span class="string">"/Users/xianxiaotao/desktop/activitylife.png"</span>));</div><div class="line">                byte[] buf = new byte[1024];</div><div class="line">                int len = -1;</div><div class="line">                <span class="keyword">while</span> (-1 != (len = in.read(buf)))</div><div class="line">                    out.write(buf, 0, len);</div><div class="line">                in.close();</div><div class="line">                out.close();</div><div class="line">            &#125;</div><div class="line">        &#125; catch (Exception e) &#123;</div><div class="line">            e.printStackTrace();</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><blockquote><p>上述代码简易，但不适合大型文件下载。</p></blockquote><h3 id="多线程断点下载代码："><a href="#多线程断点下载代码：" class="headerlink" title="多线程断点下载代码："></a>多线程断点下载代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div></pre></td><td class="code"><pre><div class="line">package com.xian.blog;</div><div class="line"></div><div class="line">import java.io.BufferedInputStream;</div><div class="line">import java.io.File;</div><div class="line">import java.io.IOException;</div><div class="line">import java.io.RandomAccessFile;</div><div class="line">import java.net.HttpURLConnection;</div><div class="line">import java.net.URL;</div><div class="line"></div><div class="line">public class XDownloadTask extends Thread&#123;</div><div class="line">    private static final String DIR_PATH = <span class="string">"/Users/xianxiaotao/downloads"</span>;  // 下载目录</div><div class="line">    private static final int THREAD_AMOUNT = 3;    // 总线程数</div><div class="line"></div><div class="line">    private URL url;// 目标下载地址</div><div class="line">    private File dataFile;// 本地文件</div><div class="line">    private File tempFile;// 存储线程下载进度的临时文件</div><div class="line">    private long totalLength;// 服务端文件总长度</div><div class="line">    private long threadLenght;// 每个线程要下载的长度</div><div class="line">    private long totalFinish;// 记录：总共完成了多少</div><div class="line">    private long begin;// 用来记录下载开始时间</div><div class="line"></div><div class="line">    public XDownloadTask(String address) throws IOException &#123;</div><div class="line">url = new URL(address);// 记住下载地址</div><div class="line">dataFile = new File(DIR_PATH, address.substring(address.lastIndexOf(<span class="string">"/"</span>) + 1));// 截取地址中的文件名，创建本地文件</div><div class="line">tempFile = new File(dataFile.getAbsolutePath() + <span class="string">".temp"</span>);// 在本地文件所在文件夹中创建临时文件</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">try &#123;</div><div class="line">    HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">    conn.setConnectTimeout(10000);</div><div class="line"></div><div class="line">            totalLength = conn.getContentLength();// 获取服务端发送过来的文件长度</div><div class="line">    threadLenght = (totalLength + THREAD_AMOUNT - 1) / THREAD_AMOUNT;// 计算每个线程要下载的长度</div><div class="line"></div><div class="line">    <span class="keyword">if</span> (!tempFile.exists()) &#123;// 如果临时文件不存在</div><div class="line">RandomAccessFile raf = new RandomAccessFile(tempFile, <span class="string">"rw"</span>);// 创建临时文件，用来记录每个线程已下载多少</div><div class="line"><span class="keyword">for</span> (int i = 0; i &lt; THREAD_AMOUNT; i++)</div><div class="line">    raf.writeInt(0);</div><div class="line">        raf.close();</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    <span class="keyword">for</span> (int i = 0; i &lt; THREAD_AMOUNT; i++)// 按线程数循环</div><div class="line">new DownloadThread(i).start();// 开启线程，每个线程将会下载一部分数据到本地文件中</div><div class="line"></div><div class="line">    begin = System.currentTimeMillis();// 记录开始时间</div><div class="line">&#125; catch (IOException e) &#123;</div><div class="line">    e.printStackTrace();</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    private class DownloadThread extends Thread &#123;</div><div class="line">private int id;// 用来标记当前线程是下载任务中的第几个线程</div><div class="line"></div><div class="line">public DownloadThread(int id) &#123;</div><div class="line">    this.id = id;</div><div class="line">&#125;</div><div class="line"></div><div class="line">public void <span class="function"><span class="title">run</span></span>() &#123;</div><div class="line">    try &#123;</div><div class="line">RandomAccessFile tempRaf = new RandomAccessFile(tempFile, <span class="string">"rws"</span>);// 记录进度的临时文件</div><div class="line">tempRaf.seek(id * 4);// 将指针移动到当前线程的位置</div><div class="line">int threadFinish = tempRaf.readInt();// 读取当前线程已完成了多少</div><div class="line">synchronized(XDownloadTask.this) &#123;// 多个下载线程之间同步</div><div class="line">    totalFinish += threadFinish;// 统计所有线程总共完成了多少</div><div class="line">&#125;</div><div class="line"></div><div class="line">long start = id * threadLenght + threadFinish;// 计算当前线程起始位置</div><div class="line">long end = id * threadLenght + threadLenght - 1;// 计算当前线程结束位置</div><div class="line">System.out.println(<span class="string">"线程"</span> + id + <span class="string">": "</span> + start + <span class="string">"-"</span> + end);</div><div class="line"></div><div class="line">HttpURLConnection conn = (HttpURLConnection) url.openConnection();</div><div class="line">conn.setConnectTimeout(10000);</div><div class="line">conn.setRequestProperty(<span class="string">"Range"</span>, <span class="string">"bytes="</span> + start + <span class="string">"-"</span> + end);// 设置当前线程下载的范围</div><div class="line"></div><div class="line">BufferedInputStream <span class="keyword">in</span> = new BufferedInputStream(conn.getInputStream());// 获取连接的输入流</div><div class="line">RandomAccessFile dataRaf = new RandomAccessFile(dataFile, <span class="string">"rws"</span>);// 保存数据的本地文件</div><div class="line">dataRaf.seek(start);// 设置当前线程保存数据的位置</div><div class="line"></div><div class="line">byte[] buf = new byte[1024];</div><div class="line">int len = -1;</div><div class="line"><span class="keyword">while</span> (-1 != (len = in.read(buf))) &#123;</div><div class="line">    dataRaf.write(buf, 0, len);</div><div class="line">    threadFinish += len;</div><div class="line">    tempRaf.seek(id * 4);</div><div class="line">    tempRaf.writeInt(threadFinish);// 将当前线程完成了多少写入到临时文件</div><div class="line">    synchronized (XDownloadTask.this) &#123;</div><div class="line">totalFinish += len;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">dataRaf.close();</div><div class="line">tempRaf.close();</div><div class="line"></div><div class="line">System.out.println(<span class="string">"线程"</span> + id + <span class="string">"下载完毕"</span>);</div><div class="line"><span class="keyword">if</span> (totalFinish == totalLength) &#123;</div><div class="line">    System.out.println(<span class="string">"下载完成，耗时："</span> + (System.currentTimeMillis() - begin));</div><div class="line">    tempFile.delete();</div><div class="line">&#125;</div><div class="line">    &#125; catch (IOException e) &#123;</div><div class="line">e.printStackTrace();</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public static void main(String[] args) throws IOException &#123;</div><div class="line">new XDownloadTask(<span class="string">"http://ww1.sinaimg.cn/large/adc90466gy1fcptk0wnt2j20e90ifmz4"</span>).start();</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | 反射工具类</title>
      <link href="/2016/01/04/JAVA/%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2016/01/04/JAVA/%E5%8F%8D%E5%B0%84%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h4 id="Invoking-Arbitrary-Methods："><a href="#Invoking-Arbitrary-Methods：" class="headerlink" title="Invoking Arbitrary Methods："></a>Invoking Arbitrary Methods：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Method sqrt = Math.class.getMethod(<span class="string">"sqrt"</span>, double.class);</div><div class="line">double x = (Double) sqrt.invoke(null, 100); // 此方法为静态方法，隐式参数为null</div></pre></td></tr></table></figure><h4 id="ReflectionUtils："><a href="#ReflectionUtils：" class="headerlink" title="ReflectionUtils："></a>ReflectionUtils：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div><div class="line">109</div><div class="line">110</div><div class="line">111</div><div class="line">112</div><div class="line">113</div><div class="line">114</div><div class="line">115</div><div class="line">116</div><div class="line">117</div><div class="line">118</div><div class="line">119</div><div class="line">120</div><div class="line">121</div><div class="line">122</div><div class="line">123</div><div class="line">124</div><div class="line">125</div><div class="line">126</div><div class="line">127</div><div class="line">128</div><div class="line">129</div><div class="line">130</div><div class="line">131</div><div class="line">132</div><div class="line">133</div><div class="line">134</div><div class="line">135</div><div class="line">136</div><div class="line">137</div><div class="line">138</div><div class="line">139</div><div class="line">140</div><div class="line">141</div><div class="line">142</div><div class="line">143</div><div class="line">144</div><div class="line">145</div><div class="line">146</div><div class="line">147</div><div class="line">148</div><div class="line">149</div><div class="line">150</div><div class="line">151</div><div class="line">152</div><div class="line">153</div><div class="line">154</div><div class="line">155</div><div class="line">156</div><div class="line">157</div><div class="line">158</div><div class="line">159</div><div class="line">160</div><div class="line">161</div><div class="line">162</div><div class="line">163</div><div class="line">164</div><div class="line">165</div><div class="line">166</div><div class="line">167</div><div class="line">168</div><div class="line">169</div><div class="line">170</div><div class="line">171</div><div class="line">172</div><div class="line">173</div><div class="line">174</div><div class="line">175</div><div class="line">176</div><div class="line">177</div><div class="line">178</div><div class="line">179</div><div class="line">180</div><div class="line">181</div><div class="line">182</div><div class="line">183</div><div class="line">184</div><div class="line">185</div><div class="line">186</div><div class="line">187</div><div class="line">188</div><div class="line">189</div><div class="line">190</div><div class="line">191</div><div class="line">192</div><div class="line">193</div><div class="line">194</div><div class="line">195</div><div class="line">196</div><div class="line">197</div><div class="line">198</div><div class="line">199</div><div class="line">200</div><div class="line">201</div><div class="line">202</div><div class="line">203</div><div class="line">204</div><div class="line">205</div><div class="line">206</div><div class="line">207</div><div class="line">208</div><div class="line">209</div><div class="line">210</div><div class="line">211</div><div class="line">212</div><div class="line">213</div><div class="line">214</div><div class="line">215</div><div class="line">216</div><div class="line">217</div><div class="line">218</div><div class="line">219</div><div class="line">220</div><div class="line">221</div><div class="line">222</div><div class="line">223</div><div class="line">224</div><div class="line">225</div><div class="line">226</div><div class="line">227</div><div class="line">228</div><div class="line">229</div><div class="line">230</div><div class="line">231</div><div class="line">232</div><div class="line">233</div><div class="line">234</div><div class="line">235</div><div class="line">236</div><div class="line">237</div><div class="line">238</div><div class="line">239</div><div class="line">240</div><div class="line">241</div><div class="line">242</div><div class="line">243</div><div class="line">244</div><div class="line">245</div><div class="line">246</div><div class="line">247</div><div class="line">248</div><div class="line">249</div><div class="line">250</div><div class="line">251</div><div class="line">252</div><div class="line">253</div><div class="line">254</div><div class="line">255</div><div class="line">256</div><div class="line">257</div><div class="line">258</div><div class="line">259</div><div class="line">260</div><div class="line">261</div><div class="line">262</div><div class="line">263</div><div class="line">264</div><div class="line">265</div><div class="line">266</div><div class="line">267</div><div class="line">268</div><div class="line">269</div><div class="line">270</div><div class="line">271</div><div class="line">272</div><div class="line">273</div><div class="line">274</div><div class="line">275</div><div class="line">276</div><div class="line">277</div><div class="line">278</div><div class="line">279</div><div class="line">280</div><div class="line">281</div><div class="line">282</div><div class="line">283</div><div class="line">284</div><div class="line">285</div><div class="line">286</div><div class="line">287</div><div class="line">288</div><div class="line">289</div><div class="line">290</div><div class="line">291</div><div class="line">292</div><div class="line">293</div><div class="line">294</div><div class="line">295</div><div class="line">296</div><div class="line">297</div><div class="line">298</div><div class="line">299</div><div class="line">300</div><div class="line">301</div><div class="line">302</div><div class="line">303</div><div class="line">304</div><div class="line">305</div><div class="line">306</div></pre></td><td class="code"><pre><div class="line">package com.xian.reflection;</div><div class="line"></div><div class="line">import java.lang.annotation.Annotation;</div><div class="line">import java.lang.reflect.AccessibleObject;</div><div class="line">import java.lang.reflect.Array;</div><div class="line">import java.lang.reflect.Constructor;</div><div class="line">import java.lang.reflect.Field;</div><div class="line">import java.lang.reflect.Method;</div><div class="line">import java.lang.reflect.Modifier;</div><div class="line">import java.util.ArrayList;</div><div class="line"></div><div class="line">/**</div><div class="line"> * ReflectionUtils : </div><div class="line"> * 1 Get all features of a class</div><div class="line"> * 2 A generic toString method that works <span class="keyword">for</span> any class</div><div class="line"> * 3 Copy array</div><div class="line"> * </div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class ReflectionUtils &#123;</div><div class="line">    /**</div><div class="line">     * flag to contain annotation and exception string</div><div class="line">     */</div><div class="line">    private static int flag = 0b00000000_00000000_00000000_00000000;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * flag : contain annotation string</div><div class="line">     */</div><div class="line">    public static final int CONTAIN_ANNOTATION = 0b00000000_00000000_00000000_00000001;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * flag : contain exception string</div><div class="line">     */</div><div class="line">    public static final int CONTAIN_EXCEPTION  = 0b00000000_00000000_00000000_00000010;</div><div class="line">    </div><div class="line">    // Cycles of references could cause an infinite recursion. Therefore, </div><div class="line">    // the ObjectAnalyzer keeps track of objects that were already visited</div><div class="line">    private static ArrayList&lt;Object&gt; visited = new ArrayList&lt;&gt;();</div><div class="line">    </div><div class="line">    // Suppresses default constructor, ensuring non-instantiability.</div><div class="line">    private <span class="function"><span class="title">ReflectionUtils</span></span>() &#123;&#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Get all features of a class</div><div class="line">     * @param className</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     * @throws ClassNotFoundException</div><div class="line">     */</div><div class="line">    public static String getClass(String className) throws ClassNotFoundException &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        Class&lt;?&gt; clazz = Class.forName(className);</div><div class="line">        Class&lt;?&gt; superClazz = clazz.getSuperclass();</div><div class="line">        sb.append(clazz.getPackage().getName()).append(<span class="string">"\n\n"</span>);</div><div class="line">        sb.append(getAnnotations(clazz.getDeclaredAnnotations()));</div><div class="line">        sb.append(getModifiers(clazz.getModifiers()));</div><div class="line">        sb.append(<span class="string">"class "</span>).append(className);</div><div class="line">        <span class="keyword">if</span> (superClazz != null &amp;&amp; superClazz != Object.class)</div><div class="line">            sb.append(<span class="string">" extends "</span>).append(superClazz.getName());</div><div class="line">        </div><div class="line">        Class&lt;?&gt;[] interfaces = clazz.getInterfaces();</div><div class="line">        <span class="keyword">if</span> (interfaces.length &gt; 0)</div><div class="line">            sb.append(<span class="string">" implements "</span>);</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; interfaces.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; 0) sb.append(<span class="string">", "</span>);</div><div class="line">            sb.append(interfaces[i].getName());</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        sb.append(<span class="string">" &#123;\n"</span>);</div><div class="line">        sb.append(getConstructors(clazz)).append(<span class="string">"\n"</span>);</div><div class="line">        sb.append(getMethods(clazz)).append(<span class="string">"\n"</span>);</div><div class="line">        sb.append(getFields(clazz)).append(<span class="string">"\n"</span>);</div><div class="line">        sb.append(<span class="string">"&#125;\n"</span>);</div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Get all constructors</div><div class="line">     * @param clazz</div><div class="line">     * @<span class="built_in">return</span> String</div><div class="line">     */</div><div class="line">    public static String getConstructors(Class&lt;?&gt; clazz) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        Constructor&lt;?&gt;[] constructors = clazz.getDeclaredConstructors();</div><div class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; c : constructors) &#123;</div><div class="line">            sb.append(getAnnotations(c.getDeclaredAnnotations()));</div><div class="line">            String name = c.getName();</div><div class="line">            sb.append(<span class="string">"    "</span>);</div><div class="line">            String modifiers = Modifier.toString(c.getModifiers());</div><div class="line">            <span class="keyword">if</span> (modifiers.length() &gt; 0)</div><div class="line">                sb.append(modifiers).append(<span class="string">" "</span>);</div><div class="line">            sb.append(name).append(<span class="string">"("</span>);</div><div class="line">            String paramStr = getParamTypes(c.getParameterTypes());</div><div class="line">            sb.append(paramStr).append(<span class="string">")"</span>);</div><div class="line">            sb.append(getExceptions(c.getExceptionTypes()));</div><div class="line">            sb.append(<span class="string">";\n"</span>);</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static String getExceptions(Class&lt;?&gt;[] es) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        <span class="keyword">if</span> (isContainException() &amp;&amp; es != null &amp;&amp; es.length &gt; 0) &#123;</div><div class="line">            sb.append(<span class="string">" throws "</span>);</div><div class="line">            <span class="keyword">for</span> (int i = 0; i &lt; es.length; i++) &#123;</div><div class="line">                <span class="keyword">if</span> (i &gt; 0) sb.append(<span class="string">", "</span>);</div><div class="line">                sb.append(es[i].getName());</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * get annotation of a class, method or field</div><div class="line">     * @param as</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    private static String getAnnotations(Annotation[] as) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        <span class="keyword">if</span> (isContainAnnotation() &amp;&amp; as != null &amp;&amp; as.length &gt; 0) &#123;</div><div class="line">            sb.append(<span class="string">"    @"</span>);</div><div class="line">            <span class="keyword">for</span> (int i = 0; i &lt; as.length; i++) &#123;</div><div class="line">                sb.append(as[i].annotationType().getName()).append(<span class="string">"\n"</span>);</div><div class="line">            &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * get parameter types</div><div class="line">     * @param paramTypes</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    private static String getParamTypes(Class&lt;?&gt;[] paramTypes) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        <span class="keyword">for</span> (int i = 0; i &lt; paramTypes.length; i++) &#123;</div><div class="line">            <span class="keyword">if</span> (i &gt; 0) sb.append(<span class="string">", "</span>);</div><div class="line">            sb.append(paramTypes[i].getName());</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static String getModifiers(int modifier) &#123;</div><div class="line">        String modifiers = Modifier.toString(modifier);</div><div class="line">        <span class="keyword">if</span> (modifiers.length() &gt; 0)</div><div class="line">            <span class="built_in">return</span> modifiers + <span class="string">" "</span>;</div><div class="line">        <span class="built_in">return</span> <span class="string">""</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Get all methods of a class</div><div class="line">     * @param clazz</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    public static String getMethods(Class&lt;?&gt; clazz) &#123;</div><div class="line">        <span class="built_in">return</span> getMethods(clazz, null);</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Gets the method <span class="keyword">for</span> the specified method name</div><div class="line">     * @param clazz</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    public static String getMethods(Class&lt;?&gt; clazz, String methodName) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        Method[] methods = clazz.getDeclaredMethods();</div><div class="line">        <span class="keyword">for</span> (Method m : methods) &#123;</div><div class="line">            sb.append(getAnnotations(m.getDeclaredAnnotations()));</div><div class="line">            Class&lt;?&gt; <span class="built_in">return</span>Type = m.getReturnType();</div><div class="line">            String name = m.getName();</div><div class="line">            <span class="keyword">if</span> (methodName != null &amp;&amp; !methodName.equals(name))</div><div class="line">                <span class="built_in">continue</span>;</div><div class="line">            sb.append(<span class="string">"    "</span>).append(getModifiers(m.getModifiers())).append(<span class="built_in">return</span>Type.getName()).append(<span class="string">" "</span> + name + <span class="string">"("</span>);</div><div class="line">            String paramStr = getParamTypes(m.getParameterTypes());</div><div class="line">            sb.append(paramStr).append(<span class="string">")"</span>);</div><div class="line">            sb.append(getExceptions(m.getExceptionTypes()));</div><div class="line">            sb.append(<span class="string">";\n"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Get all fields of a class</div><div class="line">     * @param clazz</div><div class="line">     * @<span class="built_in">return</span></div><div class="line">     */</div><div class="line">    public static String getFields(Class&lt;?&gt; clazz) &#123;</div><div class="line">        StringBuilder sb = new StringBuilder();</div><div class="line">        Field[] fields = clazz.getDeclaredFields();</div><div class="line">        <span class="keyword">for</span> (Field f : fields) &#123;</div><div class="line">            Class&lt;?&gt; <span class="built_in">type</span> = f.getType();</div><div class="line">            sb.append(<span class="string">"    "</span>).append(getModifiers(f.getModifiers())).append(type.getName()).append(<span class="string">" "</span>).append(f.getName()).append(<span class="string">";\n"</span>);</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        <span class="built_in">return</span> sb.toString();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * ReflectionUtils.setFlag(ReflectionUtils.CONTAIN_EXCEPTION | ReflectionUtils.CONTAIN_ANNOTATION);</div><div class="line">     * @param state</div><div class="line">     */</div><div class="line">    public static void <span class="built_in">set</span>Flag(int state) &#123;</div><div class="line">        flag = state;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static boolean <span class="function"><span class="title">isContainException</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> (flag &amp; CONTAIN_EXCEPTION) == CONTAIN_EXCEPTION ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    private static boolean <span class="function"><span class="title">isContainAnnotation</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> (flag &amp; CONTAIN_ANNOTATION) == CONTAIN_ANNOTATION ? <span class="literal">true</span> : <span class="literal">false</span>;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">     * Converts an object to a string representation that lists all fields.</div><div class="line">     * @param obj</div><div class="line">     * @<span class="built_in">return</span> a string with the object<span class="string">'s class name and all field names and values</span></div><div class="line">     */</div><div class="line">    public static String toString(Object obj) &#123;</div><div class="line">        if (obj == null) return "null";</div><div class="line">        if (visited.contains(obj)) return "...";</div><div class="line">        visited.add(obj);</div><div class="line">        </div><div class="line">        Class&lt;?&gt; clazz = obj.getClass();</div><div class="line">        if (clazz == String.class) return (String) obj;</div><div class="line">        if (clazz.isArray()) &#123;</div><div class="line">            String r = clazz.getComponentType() + "[]&#123;";</div><div class="line">            for (int i = 0; i &lt; Array.getLength(obj); i++) &#123;</div><div class="line">                if (i &gt; 0) r += ",";</div><div class="line">                Object val = Array.get(obj, i);</div><div class="line">                if (clazz.getComponentType().isPrimitive()) r += val;</div><div class="line">                else r += toString(val);    // recursion</div><div class="line">            &#125;</div><div class="line">            return r + "&#125;";</div><div class="line">        &#125;</div><div class="line">        </div><div class="line">        // others : inspect the fields of this class and all superclasses</div><div class="line">        String r = clazz.getName();</div><div class="line">        do &#123;</div><div class="line">            r += " [";</div><div class="line">            Field[] fields = clazz.getDeclaredFields();</div><div class="line">            AccessibleObject.setAccessible(fields, true);   // uses the setAccessible convenience method to make all fields accessible</div><div class="line">            for (Field f : fields) &#123;                        // get the names and values of all fields</div><div class="line">                if (!Modifier.isStatic(f.getModifiers())) &#123;</div><div class="line">                    if (!r.endsWith("[")) r += ",";</div><div class="line">                    r += f.getName() + "=";</div><div class="line">                    try &#123;</div><div class="line">                        Class&lt;?&gt; t = f.getType();</div><div class="line">                        Object val = f.get(obj);</div><div class="line">                        if (t.isPrimitive()) r += val;</div><div class="line">                        else r += toString(val);</div><div class="line">                    &#125; catch (Exception e) &#123;</div><div class="line">                        e.printStackTrace();</div><div class="line">                    &#125;</div><div class="line">                &#125;</div><div class="line">            &#125;</div><div class="line">            r += "]";</div><div class="line">            </div><div class="line">            clazz = clazz.getSuperclass();</div><div class="line">            if (clazz.getSuperclass() != Object.class) </div><div class="line">                clazz = null;</div><div class="line">        &#125; while (clazz != null);</div><div class="line">        </div><div class="line">        return r;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    /**</div><div class="line">    * This method grows an array by allocating a new array of the same type and copying all elements.</div><div class="line">    * @param a the array to grow. This can be an object array or a primitive type array</div><div class="line">    * @return a larger array that contains all elements of a.</div><div class="line">    */</div><div class="line">    public static Object copyOf(Object arr, int newLength) &#123;</div><div class="line">        Class&lt;?&gt; clazz = arr.getClass();</div><div class="line">        if (!clazz.isArray()) return null;</div><div class="line">        </div><div class="line">        Class&lt;?&gt; componentType = clazz.getComponentType();</div><div class="line">        int length = Array.getLength(arr);</div><div class="line">        Object newArray = Array.newInstance(componentType, newLength);</div><div class="line">        System.arraycopy(arr, 0, newArray, 0, Math.min(length, newLength));</div><div class="line">        return newArray;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // clear static ArrayList var(visited)</div><div class="line">    public static void clean() &#123;</div><div class="line">        visited.clear();</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    // unit test</div><div class="line">    public static void main(String[] args) throws ClassNotFoundException &#123;</div><div class="line">        // setFlag(CONTAIN_EXCEPTION | CONTAIN_ANNOTATION);</div><div class="line">        // System.out.println(getClass("java.lang.String"));</div><div class="line">        </div><div class="line">        /*</div><div class="line">        // 使用方式如下或者在自定义类中toString方法里添加 ReflectionUtils.clear(); return ReflectionUtils.toString(this);</div><div class="line">        ArrayList&lt;Integer&gt; squares = new ArrayList&lt;&gt;(); </div><div class="line">        for (int i = 1; i &lt;= 5; i++)</div><div class="line">            squares.add(i * i);</div><div class="line">        System.out.println(ReflectionUtils.toString(squares));</div><div class="line">        ReflectionUtils.clear();</div><div class="line">        */</div><div class="line">        </div><div class="line">        System.out.println(new Manager("xian xiaotao", 300000, 2020, 1, 1));</div><div class="line">        // com.xian.reflection.Manager [name=xian xiaotao, salary=300000.0, hireDay=2020-01-01]</div><div class="line">        // com.xian.reflection.Manager [bonus=0.0] [id=0,name=xian xiaotao,salary=300000.0,hireDay=java.time.LocalDate [year=2020,month=1,day=1]]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure><p>输出：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div><div class="line">82</div><div class="line">83</div><div class="line">84</div><div class="line">85</div><div class="line">86</div><div class="line">87</div><div class="line">88</div><div class="line">89</div><div class="line">90</div><div class="line">91</div><div class="line">92</div><div class="line">93</div><div class="line">94</div><div class="line">95</div><div class="line">96</div><div class="line">97</div><div class="line">98</div><div class="line">99</div><div class="line">100</div><div class="line">101</div><div class="line">102</div><div class="line">103</div><div class="line">104</div><div class="line">105</div><div class="line">106</div><div class="line">107</div><div class="line">108</div></pre></td><td class="code"><pre><div class="line">java.lang</div><div class="line"></div><div class="line">public final class java.lang.String implements java.io.Serializable, java.lang.Comparable, java.lang.CharSequence &#123;</div><div class="line">    public java.lang.String([B, int, int);</div><div class="line">    public java.lang.String([B, java.nio.charset.Charset);</div><div class="line">    public java.lang.String([B, java.lang.String) throws java.io.UnsupportedEncodingException;</div><div class="line">    public java.lang.String([B, int, int, java.nio.charset.Charset);</div><div class="line">    public java.lang.String([B, int, int, java.lang.String) throws java.io.UnsupportedEncodingException;</div><div class="line">    java.lang.String([C, boolean);</div><div class="line">    public java.lang.String(java.lang.StringBuilder);</div><div class="line">    public java.lang.String(java.lang.StringBuffer);</div><div class="line">    public java.lang.String([B);</div><div class="line">    public java.lang.String([I, int, int);</div><div class="line">    public java.lang.String();</div><div class="line">    public java.lang.String([C);</div><div class="line">    public java.lang.String(java.lang.String);</div><div class="line">    public java.lang.String([C, int, int);</div><div class="line">    @java.lang.Deprecated</div><div class="line">    public java.lang.String([B, int);</div><div class="line">    @java.lang.Deprecated</div><div class="line">    public java.lang.String([B, int, int, int);</div><div class="line"></div><div class="line">    public boolean equals(java.lang.Object);</div><div class="line">    public java.lang.String toString();</div><div class="line">    public int <span class="built_in">hash</span>Code();</div><div class="line">    public volatile int compareTo(java.lang.Object);</div><div class="line">    public int compareTo(java.lang.String);</div><div class="line">    public int indexOf(java.lang.String, int);</div><div class="line">    static int indexOf([C, int, int, java.lang.String, int);</div><div class="line">    static int indexOf([C, int, int, [C, int, int, int);</div><div class="line">    public int indexOf(int);</div><div class="line">    public int indexOf(java.lang.String);</div><div class="line">    public int indexOf(int, int);</div><div class="line">    public static java.lang.String valueOf(char);</div><div class="line">    public static java.lang.String valueOf(java.lang.Object);</div><div class="line">    public static java.lang.String valueOf(boolean);</div><div class="line">    public static java.lang.String valueOf([C, int, int);</div><div class="line">    public static java.lang.String valueOf([C);</div><div class="line">    public static java.lang.String valueOf(double);</div><div class="line">    public static java.lang.String valueOf(<span class="built_in">float</span>);</div><div class="line">    public static java.lang.String valueOf(long);</div><div class="line">    public static java.lang.String valueOf(int);</div><div class="line">    private static void checkBounds([B, int, int);</div><div class="line">    public int length();</div><div class="line">    public boolean isEmpty();</div><div class="line">    public char charAt(int);</div><div class="line">    public int codePointAt(int);</div><div class="line">    public int codePointBefore(int);</div><div class="line">    public int codePointCount(int, int);</div><div class="line">    public int offsetByCodePoints(int, int);</div><div class="line">    public void getChars(int, int, [C, int);</div><div class="line">    void getChars([C, int);</div><div class="line">    public [B getBytes();</div><div class="line">    public [B getBytes(java.lang.String) throws java.io.UnsupportedEncodingException;</div><div class="line">    @java.lang.Deprecated</div><div class="line">    public void getBytes(int, int, [B, int);</div><div class="line">    public [B getBytes(java.nio.charset.Charset);</div><div class="line">    public boolean contentEquals(java.lang.StringBuffer);</div><div class="line">    public boolean contentEquals(java.lang.CharSequence);</div><div class="line">    private boolean nonSyncContentEquals(java.lang.AbstractStringBuilder);</div><div class="line">    public boolean equalsIgnoreCase(java.lang.String);</div><div class="line">    public int compareToIgnoreCase(java.lang.String);</div><div class="line">    public boolean regionMatches(int, java.lang.String, int, int);</div><div class="line">    public boolean regionMatches(boolean, int, java.lang.String, int, int);</div><div class="line">    public boolean startsWith(java.lang.String);</div><div class="line">    public boolean startsWith(java.lang.String, int);</div><div class="line">    public boolean endsWith(java.lang.String);</div><div class="line">    private int indexOfSupplementary(int, int);</div><div class="line">    public int lastIndexOf(int, int);</div><div class="line">    static int lastIndexOf([C, int, int, [C, int, int, int);</div><div class="line">    static int lastIndexOf([C, int, int, java.lang.String, int);</div><div class="line">    public int lastIndexOf(java.lang.String, int);</div><div class="line">    public int lastIndexOf(int);</div><div class="line">    public int lastIndexOf(java.lang.String);</div><div class="line">    private int lastIndexOfSupplementary(int, int);</div><div class="line">    public java.lang.String substring(int);</div><div class="line">    public java.lang.String substring(int, int);</div><div class="line">    public java.lang.CharSequence subSequence(int, int);</div><div class="line">    public java.lang.String concat(java.lang.String);</div><div class="line">    public java.lang.String replace(char, char);</div><div class="line">    public java.lang.String replace(java.lang.CharSequence, java.lang.CharSequence);</div><div class="line">    public boolean matches(java.lang.String);</div><div class="line">    public boolean contains(java.lang.CharSequence);</div><div class="line">    public java.lang.String replaceFirst(java.lang.String, java.lang.String);</div><div class="line">    public java.lang.String replaceAll(java.lang.String, java.lang.String);</div><div class="line">    public [Ljava.lang.String; split(java.lang.String, int);</div><div class="line">    public [Ljava.lang.String; split(java.lang.String);</div><div class="line">    public static transient java.lang.String join(java.lang.CharSequence, [Ljava.lang.CharSequence;);</div><div class="line">    public static java.lang.String join(java.lang.CharSequence, java.lang.Iterable);</div><div class="line">    public java.lang.String toLowerCase(java.util.Locale);</div><div class="line">    public java.lang.String toLowerCase();</div><div class="line">    public java.lang.String toUpperCase();</div><div class="line">    public java.lang.String toUpperCase(java.util.Locale);</div><div class="line">    public java.lang.String trim();</div><div class="line">    public [C toCharArray();</div><div class="line">    public static transient java.lang.String format(java.util.Locale, java.lang.String, [Ljava.lang.Object;);</div><div class="line">    public static transient java.lang.String format(java.lang.String, [Ljava.lang.Object;);</div><div class="line">    public static java.lang.String copyValueOf([C, int, int);</div><div class="line">    public static java.lang.String copyValueOf([C);</div><div class="line">    public native java.lang.String intern();</div><div class="line"></div><div class="line">    private final [C value;</div><div class="line">    private int <span class="built_in">hash</span>;</div><div class="line">    private static final long serialVersionUID;</div><div class="line">    private static final [Ljava.io.ObjectStreamField; serialPersistentFields;</div><div class="line">    public static final java.util.Comparator CASE_INSENSITIVE_ORDER;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | equals的正确姿势</title>
      <link href="/2016/01/03/JAVA/equals%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/"/>
      <url>/2016/01/03/JAVA/equals%E6%AD%A3%E7%A1%AE%E5%A7%BF%E5%8A%BF/</url>
      
        <content type="html"><![CDATA[<p>职员（Employee）及其子类（Manager），当判断对象是否等同取决于所有属性时，建议使用<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (getClass() != otherObject.getClass()) <span class="built_in">return</span> <span class="literal">false</span>;</div></pre></td></tr></table></figure></p><p>而不是<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (!(otherObject instanceof Employee)) <span class="built_in">return</span> <span class="literal">false</span>;</div></pre></td></tr></table></figure></p><p>如果当父类能够明确判断对象是否相同的条件时，可以使用instanceof。比如，实际中职员都有一个唯一ID，只要id相同即是同一个职员。那么将父类Employee的equals方法设计为判断ID值是否相同即可，当然hashCode方法也要由id来决定。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">@Override</div><div class="line">public int <span class="function"><span class="title">hashCode</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> Objects.hash(this.id);</div><div class="line">&#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">public boolean equals(Object otherObject) &#123;</div><div class="line">    <span class="keyword">if</span> (this == otherObject) <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">    <span class="keyword">if</span> (otherObject == null) <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">    <span class="keyword">if</span> (!(otherObject instanceof Employee)) <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">    Employee other = (Employee) otherObject;</div><div class="line">    <span class="built_in">return</span> this.id == other.id;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>全部代码：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div><div class="line">61</div><div class="line">62</div><div class="line">63</div><div class="line">64</div><div class="line">65</div><div class="line">66</div><div class="line">67</div><div class="line">68</div><div class="line">69</div><div class="line">70</div><div class="line">71</div><div class="line">72</div><div class="line">73</div><div class="line">74</div><div class="line">75</div><div class="line">76</div><div class="line">77</div><div class="line">78</div><div class="line">79</div><div class="line">80</div><div class="line">81</div></pre></td><td class="code"><pre><div class="line">class Employee &#123;</div><div class="line">    private String name;</div><div class="line">    private double salary;</div><div class="line">    private LocalDate hireDay;</div><div class="line"></div><div class="line">    public Employee(String name, double salary, int year, int month, int day) &#123;</div><div class="line">        this.name = name;</div><div class="line">        this.salary = salary;</div><div class="line">        this.hireDay = LocalDate.of(year, month, day);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public String <span class="function"><span class="title">getName</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> this.name;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double <span class="function"><span class="title">getSalary</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> this.salary;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public LocalDate <span class="function"><span class="title">getHireDay</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> this.hireDay;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void raiseSalary(double byPercent) &#123;</div><div class="line">        double raise = this.salary * byPercent / 100;</div><div class="line">        this.salary += raise;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int <span class="function"><span class="title">hashCode</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> Objects.hash(this.name, this.salary, this.hireDay);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">@Override</div><div class="line">    public boolean equals(Object otherObject) &#123;</div><div class="line">        <span class="keyword">if</span> (this == otherObject) <span class="built_in">return</span> <span class="literal">true</span>;</div><div class="line">        <span class="keyword">if</span> (otherObject == null) <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line">        <span class="keyword">if</span> (getClass() != otherObject.getClass()) <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">        Employee other = (Employee) otherObject;</div><div class="line">        <span class="built_in">return</span> Objects.equals(this.name, other.name) &amp;&amp; this.salary == other.salary </div><div class="line">            &amp;&amp; Objects.equals(this.hireDay, other.hireDay);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public String <span class="function"><span class="title">toString</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> getClass().getName() + <span class="string">" [name="</span> + name + <span class="string">", salary="</span> + salary </div><div class="line">            + <span class="string">", hireDay="</span> + hireDay + <span class="string">"]"</span>;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">class Manager extends Employee &#123;</div><div class="line">    private double bonus;</div><div class="line"></div><div class="line">    public Manager(String name, double salary, int year, int month, int day) &#123;</div><div class="line">        super(name, salary, year, month, day);</div><div class="line">        bonus = 0;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public void <span class="built_in">set</span>Bonus(double bonus) &#123;</div><div class="line">        this.bonus = bonus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    public double <span class="function"><span class="title">getSalary</span></span>() &#123;</div><div class="line">        double baseSalary = super.getSalary();</div><div class="line">        <span class="built_in">return</span> baseSalary + bonus;</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public int <span class="function"><span class="title">hashCode</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> super.hashCode() + 17 * Double.hashCode(bonus);</div><div class="line">    &#125;</div><div class="line"></div><div class="line">    @Override</div><div class="line">    public boolean equals(Object otherObject) &#123;</div><div class="line">        <span class="keyword">if</span> (!super.equals(otherObject)) <span class="built_in">return</span> <span class="literal">false</span>;</div><div class="line"></div><div class="line">        Manager other = (Manager) otherObject;</div><div class="line">        <span class="built_in">return</span> bonus == other.bonus;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JAVA | 使用克隆防止破坏封装性</title>
      <link href="/2016/01/02/JAVA/%E4%BD%BF%E7%94%A8%E5%85%8B%E9%9A%86%E9%98%B2%E6%AD%A2%E7%A0%B4%E5%9D%8F%E5%B0%81%E8%A3%85%E6%80%A7/"/>
      <url>/2016/01/02/JAVA/%E4%BD%BF%E7%94%A8%E5%85%8B%E9%9A%86%E9%98%B2%E6%AD%A2%E7%A0%B4%E5%9D%8F%E5%B0%81%E8%A3%85%E6%80%A7/</url>
      
        <content type="html"><![CDATA[<p>请先看一个案例：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">/**</div><div class="line"> * 职员类</div><div class="line"> * </div><div class="line"> * @author xianxiaotao</div><div class="line"> */</div><div class="line">public class Employee &#123;</div><div class="line">    private Date hireDay;</div><div class="line">    </div><div class="line">    public Employee(Date hireDay) &#123;</div><div class="line">        this.hireDay = hireDay;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    public Date <span class="function"><span class="title">getHireDay</span></span>() &#123;</div><div class="line">        <span class="built_in">return</span> this.hireDay;    // bad coding</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>职员，受雇日期是固定不变的，即使将属性设置为私有，依然可以使用这段代码直接将职员工龄增加10年：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">Employee harry = new Employee(new Date());</div><div class="line">Date d = harry.getHireDay();</div><div class="line">double tenYearsInMilliSeconds = 10 * 365.25 * 24 * 60 * 60 * 1000;</div><div class="line">d.setTime(d.getTime() - (long) tenYearsInMilliSeconds);</div></pre></td></tr></table></figure></p><p>如果需要返回一个可变对象的引用，应该首先对它进行克隆（clone），代码修改如下：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">public Date <span class="function"><span class="title">getHireDay</span></span>() &#123;</div><div class="line">    <span class="built_in">return</span> (Date) hireDay.clone();// Ok</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><blockquote><p>建议使用LocalDate代替Date</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> JAVA </category>
          
      </categories>
      
      
        <tags>
            
            <tag> JAVA </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
  
</search>
